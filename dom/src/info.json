{
  "callback-functions": {
    "callback-function": {
      "VoidFunction": {
        "name": "VoidFunction",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": []
          }
        ]
      },
      "NavigatorUserMediaSuccessCallback": {
        "name": "NavigatorUserMediaSuccessCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "stream",
                "type": "MediaStream"
              }
            ]
          }
        ]
      },
      "EventHandlerNonNull": {
        "name": "EventHandlerNonNull",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "event",
                "type": "Event"
              }
            ]
          }
        ]
      },
      "DecodeErrorCallback": {
        "name": "DecodeErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "error",
                "type": "DOMException"
              }
            ]
          }
        ],
        "override-signatures": [
          "(error: DOMException): void"
        ]
      },
      "MediaQueryListListener": {
        "signature": [
          {
            "param-min-required": 1,
            "type": "void",
            "param": [
              {
                "name": "mql",
                "type": "MediaQueryList",
                "type-original": "MediaQueryList"
              }
            ],
            "type-original": "void"
          }
        ],
        "specs": "cssom-view",
        "callback": 1,
        "name": "MediaQueryListListener"
      },
      "RTCStatsCallback": {
        "signature": [
          {
            "param-min-required": 1,
            "type": "void",
            "param": [
              {
                "name": "report",
                "type": "RTCStatsReport",
                "type-original": "RTCStatsReport"
              }
            ],
            "type-original": "void"
          }
        ],
        "specs": "webrtc",
        "callback": 1,
        "name": "RTCStatsCallback"
      },
      "PositionErrorCallback": {
        "name": "PositionErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "positionError",
                "type": "PositionError"
              }
            ]
          }
        ]
      },
      "DecodeSuccessCallback": {
        "name": "DecodeSuccessCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "decodedData",
                "type": "AudioBuffer"
              }
            ]
          }
        ]
      },
      "RTCSessionDescriptionCallback": {
        "name": "RTCSessionDescriptionCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "description",
                "type": "RTCSessionDescriptionInit"
              }
            ]
          }
        ]
      },
      "NavigatorUserMediaErrorCallback": {
        "name": "NavigatorUserMediaErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "error",
                "type": "MediaStreamError"
              }
            ]
          }
        ]
      },
      "WritableStreamErrorCallback": {
        "name": "WritableStreamErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "reason",
                "type": "any"
              }
            ]
          }
        ],
        "override-signatures": [
          "(reason: any): void | PromiseLike<void>"
        ]
      },
      "FunctionStringCallback": {
        "name": "FunctionStringCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "data",
                "type": "DOMString"
              }
            ]
          }
        ]
      },
      "PositionCallback": {
        "name": "PositionCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "position",
                "type": "Position"
              }
            ]
          }
        ]
      },
      "WritableStreamChunkCallback": {
        "signature": [
          {
            "param-min-required": 2,
            "type": "void",
            "param": [
              {
                "name": "chunk",
                "type": "any",
                "type-original": "any"
              },
              {
                "name": "controller",
                "type": "WritableStreamDefaultController",
                "type-original": "WritableStreamDefaultController"
              }
            ],
            "type-original": "void"
          }
        ],
        "specs": "whatwg-streams",
        "callback": 1,
        "name": "WritableStreamChunkCallback"
      },
      "MutationCallback": {
        "name": "MutationCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "mutations",
                "type": "sequence",
                "subtype": {
                  "type": "MutationRecord"
                }
              },
              {
                "name": "observer",
                "type": "MutationObserver"
              }
            ]
          }
        ]
      },
      "RTCPeerConnectionErrorCallback": {
        "name": "RTCPeerConnectionErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "error",
                "type": "DOMException"
              }
            ]
          }
        ]
      },
      "ForEachCallback": {
        "signature": [
          {
            "param-min-required": 2,
            "type": "void",
            "param": [
              {
                "name": "keyId",
                "type": [
                  {
                    "type": [
                      {
                        "nullable": 1,
                        "type": "Int8Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Int16Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Int32Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Uint8Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Uint16Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Uint32Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Uint8ClampedArray"
                      },
                      {
                        "nullable": 1,
                        "type": "Float32Array"
                      },
                      {
                        "nullable": 1,
                        "type": "Float64Array"
                      },
                      {
                        "nullable": 1,
                        "type": "DataView"
                      }
                    ]
                  },
                  {
                    "nullable": 1,
                    "type": "ArrayBuffer"
                  }
                ],
                "type-original": "BufferSource"
              },
              {
                "name": "status",
                "type": "MediaKeyStatus",
                "type-original": "MediaKeyStatus"
              }
            ],
            "type-original": "void"
          }
        ],
        "specs": "encrypted-media",
        "callback": 1,
        "name": "ForEachCallback"
      },
      "NotificationPermissionCallback": {
        "name": "NotificationPermissionCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "permission",
                "type": "NotificationPermission"
              }
            ]
          }
        ]
      },
      "WritableStreamDefaultControllerCallback": {
        "signature": [
          {
            "param-min-required": 1,
            "type": "void",
            "param": [
              {
                "name": "controller",
                "type": "WritableStreamDefaultController",
                "type-original": "WritableStreamDefaultController"
              }
            ],
            "type-original": "void"
          }
        ],
        "specs": "whatwg-streams",
        "callback": 1,
        "name": "WritableStreamDefaultControllerCallback"
      },
      "IntersectionObserverCallback": {
        "name": "IntersectionObserverCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "entries",
                "type": "sequence",
                "subtype": {
                  "type": "IntersectionObserverEntry"
                }
              },
              {
                "name": "observer",
                "type": "IntersectionObserver"
              }
            ]
          }
        ]
      },
      "MSLaunchUriCallback": {
        "signature": [
          {
            "type": "void",
            "type-original": "void"
          }
        ],
        "specs": "none",
        "callback": 1,
        "name": "MSLaunchUriCallback"
      },
      "FrameRequestCallback": {
        "name": "FrameRequestCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "time",
                "type": "DOMHighResTimeStamp"
              }
            ]
          }
        ]
      },
      "BlobCallback": {
        "name": "BlobCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "blob",
                "type": "Blob",
                "nullable": 1
              }
            ]
          }
        ]
      },
      "OnErrorEventHandlerNonNull": {
        "name": "OnErrorEventHandlerNonNull",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "event",
                "type": [
                  {
                    "type": "Event"
                  },
                  {
                    "type": "DOMString"
                  }
                ]
              },
              {
                "name": "source",
                "type": "DOMString",
                "optional": 1
              },
              {
                "name": "lineno",
                "type": "unsigned long",
                "optional": 1
              },
              {
                "name": "colno",
                "type": "unsigned long",
                "optional": 1
              },
              {
                "name": "error",
                "type": "any",
                "optional": 1
              }
            ]
          }
        ],
        "override-signatures": [
          "(event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error): any"
        ]
      },
      "OnBeforeUnloadEventHandlerNonNull": {
        "name": "OnBeforeUnloadEventHandlerNonNull",
        "callback": 1,
        "signature": [
          {
            "type": "DOMString",
            "nullable": 1,
            "param": [
              {
                "name": "event",
                "type": "Event"
              }
            ]
          }
        ]
      },
      "GenerateAssertionCallback": {
        "name": "GenerateAssertionCallback",
        "callback": 1,
        "signature": [
          {
            "type": "Promise",
            "subtype": {
              "type": "RTCIdentityAssertionResult"
            },
            "param": [
              {
                "name": "contents",
                "type": "DOMString"
              },
              {
                "name": "origin",
                "type": "DOMString"
              },
              {
                "name": "options",
                "type": "RTCIdentityProviderOptions"
              }
            ]
          }
        ]
      },
      "ValidateAssertionCallback": {
        "name": "ValidateAssertionCallback",
        "callback": 1,
        "signature": [
          {
            "type": "Promise",
            "subtype": {
              "type": "RTCIdentityValidationResult"
            },
            "param": [
              {
                "name": "assertion",
                "type": "DOMString"
              },
              {
                "name": "origin",
                "type": "DOMString"
              }
            ]
          }
        ]
      },
      "PerformanceObserverCallback": {
        "name": "PerformanceObserverCallback",
        "callback": 1,
        "signature": [
          {
            "type": "void",
            "param": [
              {
                "name": "entries",
                "type": "PerformanceObserverEntryList"
              },
              {
                "name": "observer",
                "type": "PerformanceObserver"
              }
            ]
          }
        ]
      },
      "QueuingStrategySizeCallback": {
        "name": "QueuingStrategySizeCallback",
        "callback": 1,
        "signature": [
          {
            "type": "double",
            "param": [
              {
                "name": "chunk",
                "type": "any"
              }
            ]
          }
        ],
        "type-parameters": [
          {
            "name": "T",
            "default": "any"
          }
        ],
        "override-signatures": [
          "(chunk: T): number"
        ]
      },
      "ReadableByteStreamControllerCallback": {
        "name": "ReadableByteStreamControllerCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "controller",
                "type": "ReadableByteStreamController"
              }
            ]
          }
        ],
        "override-signatures": [
          "(controller: ReadableByteStreamController): void | PromiseLike<void>"
        ]
      },
      "ReadableStreamDefaultControllerCallback": {
        "name": "ReadableStreamDefaultControllerCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "controller",
                "type": "ReadableStreamDefaultController"
              }
            ]
          }
        ],
        "type-parameters": [
          {
            "name": "R"
          }
        ],
        "override-signatures": [
          "(controller: ReadableStreamDefaultController<R>): void | PromiseLike<void>"
        ]
      },
      "ReadableStreamErrorCallback": {
        "name": "ReadableStreamErrorCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "reason",
                "type": "any"
              }
            ]
          }
        ],
        "override-signatures": [
          "(reason: any): void | PromiseLike<void>"
        ]
      },
      "WritableStreamDefaultControllerStartCallback": {
        "name": "WritableStreamDefaultControllerStartCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "controller",
                "type": "WritableStreamDefaultController"
              }
            ]
          }
        ],
        "override-signatures": [
          "(controller: WritableStreamDefaultController): void | PromiseLike<void>"
        ]
      },
      "WritableStreamDefaultControllerWriteCallback": {
        "name": "WritableStreamDefaultControllerWriteCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "chunk",
                "type": "any"
              },
              {
                "name": "controller",
                "type": "WritableStreamDefaultController"
              }
            ]
          }
        ],
        "type-parameters": [
          {
            "name": "W"
          }
        ],
        "override-signatures": [
          "(chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>"
        ]
      },
      "WritableStreamDefaultControllerCloseCallback": {
        "name": "WritableStreamDefaultControllerCloseCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": []
          }
        ],
        "override-signatures": [
          "(): void | PromiseLike<void>"
        ]
      },
      "TransformStreamDefaultControllerCallback": {
        "name": "TransformStreamDefaultControllerCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "controller",
                "type": "TransformStreamDefaultController"
              }
            ]
          }
        ],
        "type-parameters": [
          {
            "name": "O"
          }
        ],
        "override-signatures": [
          "(controller: TransformStreamDefaultController<O>): void | PromiseLike<void>"
        ]
      },
      "TransformStreamDefaultControllerTransformCallback": {
        "name": "TransformStreamDefaultControllerTransformCallback",
        "callback": 1,
        "signature": [
          {
            "type": "any",
            "param": [
              {
                "name": "chunk",
                "type": "any"
              },
              {
                "name": "controller",
                "type": "TransformStreamDefaultController"
              }
            ]
          }
        ],
        "type-parameters": [
          {
            "name": "I"
          },
          {
            "name": "O"
          }
        ],
        "override-signatures": [
          "(chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>"
        ]
      },
      "AudioWorkletProcessorConstructor": {
        "name": "AudioWorkletProcessorConstructor",
        "callback": 1,
        "signature": [
          {
            "type": "AudioWorkletProcessor",
            "param": [
              {
                "name": "options",
                "type": "object"
              }
            ]
          }
        ]
      }
    }
  },
  "callback-interfaces": {
    "interface": {
      "EventListener": {
        "name": "EventListener",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "handleEvent": {
              "name": "handleEvent",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "event",
                      "type": "Event"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "legacy-window-alias": []
      },
      "NodeFilter": {
        "name": "NodeFilter",
        "extends": "Object",
        "constants": {
          "constant": {
            "FILTER_ACCEPT": {
              "name": "FILTER_ACCEPT",
              "type": "unsigned short",
              "value": "1"
            },
            "FILTER_REJECT": {
              "name": "FILTER_REJECT",
              "type": "unsigned short",
              "value": "2"
            },
            "FILTER_SKIP": {
              "name": "FILTER_SKIP",
              "type": "unsigned short",
              "value": "3"
            },
            "SHOW_ALL": {
              "name": "SHOW_ALL",
              "type": "unsigned long",
              "value": "0xFFFFFFFF"
            },
            "SHOW_ELEMENT": {
              "name": "SHOW_ELEMENT",
              "type": "unsigned long",
              "value": "0x1"
            },
            "SHOW_ATTRIBUTE": {
              "name": "SHOW_ATTRIBUTE",
              "type": "unsigned long",
              "value": "0x2"
            },
            "SHOW_TEXT": {
              "name": "SHOW_TEXT",
              "type": "unsigned long",
              "value": "0x4"
            },
            "SHOW_CDATA_SECTION": {
              "name": "SHOW_CDATA_SECTION",
              "type": "unsigned long",
              "value": "0x8"
            },
            "SHOW_ENTITY_REFERENCE": {
              "name": "SHOW_ENTITY_REFERENCE",
              "type": "unsigned long",
              "value": "0x10"
            },
            "SHOW_ENTITY": {
              "name": "SHOW_ENTITY",
              "type": "unsigned long",
              "value": "0x20"
            },
            "SHOW_PROCESSING_INSTRUCTION": {
              "name": "SHOW_PROCESSING_INSTRUCTION",
              "type": "unsigned long",
              "value": "0x40"
            },
            "SHOW_COMMENT": {
              "name": "SHOW_COMMENT",
              "type": "unsigned long",
              "value": "0x80"
            },
            "SHOW_DOCUMENT": {
              "name": "SHOW_DOCUMENT",
              "type": "unsigned long",
              "value": "0x100"
            },
            "SHOW_DOCUMENT_TYPE": {
              "name": "SHOW_DOCUMENT_TYPE",
              "type": "unsigned long",
              "value": "0x200"
            },
            "SHOW_DOCUMENT_FRAGMENT": {
              "name": "SHOW_DOCUMENT_FRAGMENT",
              "type": "unsigned long",
              "value": "0x400"
            },
            "SHOW_NOTATION": {
              "name": "SHOW_NOTATION",
              "type": "unsigned long",
              "value": "0x800"
            }
          }
        },
        "methods": {
          "method": {
            "acceptNode": {
              "name": "acceptNode",
              "signature": [
                {
                  "type": "unsigned short",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "XPathNSResolver": {
        "name": "XPathNSResolver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "lookupNamespaceURI": {
              "name": "lookupNamespaceURI",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "prefix",
                      "type": "DOMString",
                      "nullable": 1
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "legacy-window-alias": []
      }
    }
  },
  "dictionaries": {
    "dictionary": {
      "WheelEventInit": {
        "name": "WheelEventInit",
        "extends": "MouseEventInit",
        "members": {
          "member": {
            "deltaX": {
              "name": "deltaX",
              "default": "0.0",
              "type": "double"
            },
            "deltaY": {
              "name": "deltaY",
              "default": "0.0",
              "type": "double"
            },
            "deltaZ": {
              "name": "deltaZ",
              "default": "0.0",
              "type": "double"
            },
            "deltaMode": {
              "name": "deltaMode",
              "default": "0",
              "type": "unsigned long"
            }
          }
        }
      },
      "MSSignatureParameters": {
        "members": {
          "member": {
            "userPrompt": {
              "specs": "webauthn",
              "name": "userPrompt",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSSignatureParameters",
        "extends": "Object"
      },
      "CustomEventInit": {
        "name": "CustomEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "detail": {
              "name": "detail",
              "default": "null",
              "required": 0,
              "type": "any",
              "override-type": "T"
            }
          }
        },
        "type-parameters": [
          {
            "name": "T",
            "default": "any"
          }
        ]
      },
      "PaymentDetailsBase": {
        "members": {
          "member": {
            "shippingOptions": {
              "subtype": {
                "type": "PaymentShippingOption"
              },
              "specs": "payment-request",
              "name": "shippingOptions",
              "type": "sequence",
              "type-original": "sequence<PaymentShippingOption>"
            },
            "modifiers": {
              "subtype": {
                "type": "PaymentDetailsModifier"
              },
              "specs": "payment-request",
              "name": "modifiers",
              "type": "sequence",
              "type-original": "sequence<PaymentDetailsModifier>"
            },
            "displayItems": {
              "subtype": {
                "type": "PaymentItem"
              },
              "specs": "payment-request",
              "name": "displayItems",
              "type": "sequence",
              "type-original": "sequence<PaymentItem>"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentDetailsBase",
        "extends": "Object"
      },
      "MSIPAddressInfo": {
        "members": {
          "member": {
            "manufacturerMacAddrMask": {
              "specs": "webrtc-stats",
              "name": "manufacturerMacAddrMask",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "ipAddr": {
              "specs": "webrtc-stats",
              "name": "ipAddr",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "port": {
              "specs": "webrtc-stats",
              "name": "port",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSIPAddressInfo",
        "extends": "Object"
      },
      "HmacImportParams": {
        "name": "HmacImportParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            },
            "length": {
              "name": "length",
              "type": "unsigned long"
            }
          }
        }
      },
      "Account": {
        "members": {
          "member": {
            "imageURL": {
              "specs": "webauthn",
              "name": "imageURL",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "name": {
              "specs": "webauthn",
              "name": "name",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "id": {
              "required": 1,
              "specs": "webauthn",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "rpDisplayName": {
              "required": 1,
              "specs": "webauthn",
              "name": "rpDisplayName",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "displayName": {
              "required": 1,
              "specs": "webauthn",
              "name": "displayName",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webauthn",
        "name": "Account",
        "extends": "Object"
      },
      "MSAudioRecvPayload": {
        "members": {
          "member": {
            "ratioCompressedSamplesAvg": {
              "specs": "webrtc-stats",
              "name": "ratioCompressedSamplesAvg",
              "type": "float",
              "type-original": "float"
            },
            "fecRecvDistance1": {
              "specs": "webrtc-stats",
              "name": "fecRecvDistance1",
              "type": "float",
              "type-original": "float"
            },
            "fecRecvDistance2": {
              "specs": "webrtc-stats",
              "name": "fecRecvDistance2",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength4": {
              "specs": "webrtc-stats",
              "name": "burstLossLength4",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength7": {
              "specs": "webrtc-stats",
              "name": "burstLossLength7",
              "type": "float",
              "type-original": "float"
            },
            "ratioStretchedSamplesAvg": {
              "specs": "webrtc-stats",
              "name": "ratioStretchedSamplesAvg",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength1": {
              "specs": "webrtc-stats",
              "name": "burstLossLength1",
              "type": "float",
              "type-original": "float"
            },
            "packetReorderRatio": {
              "specs": "webrtc-stats",
              "name": "packetReorderRatio",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength6": {
              "specs": "webrtc-stats",
              "name": "burstLossLength6",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength5": {
              "specs": "webrtc-stats",
              "name": "burstLossLength5",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength3": {
              "specs": "webrtc-stats",
              "name": "burstLossLength3",
              "type": "float",
              "type-original": "float"
            },
            "samplingRate": {
              "specs": "webrtc-stats",
              "name": "samplingRate",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "burstLossLength2": {
              "specs": "webrtc-stats",
              "name": "burstLossLength2",
              "type": "float",
              "type-original": "float"
            },
            "burstLossLength8OrHigher": {
              "specs": "webrtc-stats",
              "name": "burstLossLength8OrHigher",
              "type": "float",
              "type-original": "float"
            },
            "ratioConcealedSamplesAvg": {
              "specs": "webrtc-stats",
              "name": "ratioConcealedSamplesAvg",
              "type": "float",
              "type-original": "float"
            },
            "signal": {
              "specs": "webrtc-stats",
              "name": "signal",
              "type": "MSAudioRecvSignal",
              "type-original": "MSAudioRecvSignal"
            },
            "packetReorderDepthMax": {
              "specs": "webrtc-stats",
              "name": "packetReorderDepthMax",
              "type": "long",
              "type-original": "long"
            },
            "fecRecvDistance3": {
              "specs": "webrtc-stats",
              "name": "fecRecvDistance3",
              "type": "float",
              "type-original": "float"
            },
            "packetReorderDepthAvg": {
              "specs": "webrtc-stats",
              "name": "packetReorderDepthAvg",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSAudioRecvPayload",
        "extends": "MSPayloadBase"
      },
      "AudioBufferSourceOptions": {
        "name": "AudioBufferSourceOptions",
        "extends": "Object",
        "members": {
          "member": {
            "buffer": {
              "name": "buffer",
              "type": "AudioBuffer",
              "nullable": 1
            },
            "detune": {
              "name": "detune",
              "default": "0",
              "type": "float"
            },
            "loop": {
              "name": "loop",
              "default": "false",
              "type": "boolean"
            },
            "loopEnd": {
              "name": "loopEnd",
              "default": "0",
              "type": "double"
            },
            "loopStart": {
              "name": "loopStart",
              "default": "0",
              "type": "double"
            },
            "playbackRate": {
              "name": "playbackRate",
              "default": "1",
              "type": "float"
            }
          }
        }
      },
      "RsaKeyGenParams": {
        "name": "RsaKeyGenParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "modulusLength": {
              "name": "modulusLength",
              "required": 1,
              "type": "unsigned long"
            },
            "publicExponent": {
              "name": "publicExponent",
              "required": 1,
              "type": "BigInteger"
            }
          }
        }
      },
      "MSDelay": {
        "members": {
          "member": {
            "roundTrip": {
              "specs": "webrtc-stats",
              "name": "roundTrip",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "roundTripMax": {
              "specs": "webrtc-stats",
              "name": "roundTripMax",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSDelay",
        "extends": "Object"
      },
      "IDBIndexParameters": {
        "name": "IDBIndexParameters",
        "extends": "Object",
        "members": {
          "member": {
            "unique": {
              "name": "unique",
              "default": "false",
              "type": "boolean"
            },
            "multiEntry": {
              "name": "multiEntry",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "AnimationEventInit": {
        "name": "AnimationEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "animationName": {
              "name": "animationName",
              "default": "\"\"",
              "type": "CSSOMString"
            },
            "elapsedTime": {
              "name": "elapsedTime",
              "default": "0.0",
              "type": "double"
            },
            "pseudoElement": {
              "name": "pseudoElement",
              "default": "\"\"",
              "type": "CSSOMString"
            }
          }
        }
      },
      "MSOutboundNetwork": {
        "members": {
          "member": {
            "appliedBandwidthLimit": {
              "specs": "webrtc-stats",
              "name": "appliedBandwidthLimit",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSOutboundNetwork",
        "extends": "MSNetwork"
      },
      "IntersectionObserverInit": {
        "name": "IntersectionObserverInit",
        "extends": "Object",
        "members": {
          "member": {
            "root": {
              "name": "root",
              "default": "null",
              "type": "Element",
              "nullable": 1
            },
            "rootMargin": {
              "name": "rootMargin",
              "default": "\"0px\"",
              "type": "DOMString"
            },
            "threshold": {
              "name": "threshold",
              "default": "0",
              "type": [
                {
                  "type": "double"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "double"
                  }
                }
              ]
            }
          }
        }
      },
      "WebGLContextAttributes": {
        "name": "WebGLContextAttributes",
        "extends": "Object",
        "members": {
          "member": {
            "alpha": {
              "name": "alpha",
              "default": "true",
              "type": "boolean"
            },
            "depth": {
              "name": "depth",
              "default": "true",
              "type": "boolean"
            },
            "stencil": {
              "name": "stencil",
              "default": "false",
              "type": "boolean"
            },
            "antialias": {
              "name": "antialias",
              "default": "true",
              "type": "boolean"
            },
            "premultipliedAlpha": {
              "name": "premultipliedAlpha",
              "default": "true",
              "type": "boolean"
            },
            "preserveDrawingBuffer": {
              "name": "preserveDrawingBuffer",
              "default": "false",
              "type": "boolean"
            },
            "powerPreference": {
              "name": "powerPreference",
              "default": "\"default\"",
              "type": "WebGLPowerPreference"
            },
            "failIfMajorPerformanceCaveat": {
              "name": "failIfMajorPerformanceCaveat",
              "default": "false",
              "type": "boolean"
            },
            "desynchronized": {
              "name": "desynchronized",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "AesGcmParams": {
        "name": "AesGcmParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "iv": {
              "name": "iv",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "additionalData": {
              "name": "additionalData",
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "tagLength": {
              "name": "tagLength",
              "type": "octet"
            }
          }
        }
      },
      "TrackEventInit": {
        "members": {
          "member": {
            "track": {
              "specs": "html5",
              "name": "track",
              "default": "null",
              "type": [
                {
                  "nullable": 1,
                  "type": "VideoTrack"
                },
                {
                  "nullable": 1,
                  "type": "AudioTrack"
                },
                {
                  "nullable": 1,
                  "type": "TextTrack"
                }
              ],
              "type-original": "(VideoTrack or AudioTrack or TextTrack)?"
            }
          }
        },
        "specs": "html5",
        "name": "TrackEventInit",
        "extends": "EventInit"
      },
      "MSAudioSendPayload": {
        "members": {
          "member": {
            "audioFECUsed": {
              "specs": "webrtc-stats",
              "name": "audioFECUsed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "sendMutePercent": {
              "specs": "webrtc-stats",
              "name": "sendMutePercent",
              "type": "float",
              "type-original": "float"
            },
            "signal": {
              "specs": "webrtc-stats",
              "name": "signal",
              "type": "MSAudioSendSignal",
              "type-original": "MSAudioSendSignal"
            },
            "samplingRate": {
              "specs": "webrtc-stats",
              "name": "samplingRate",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSAudioSendPayload",
        "extends": "MSPayloadBase"
      },
      "ErrorEventInit": {
        "name": "ErrorEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "message": {
              "name": "message",
              "default": "\"\"",
              "type": "DOMString"
            },
            "filename": {
              "name": "filename",
              "default": "\"\"",
              "type": "USVString"
            },
            "lineno": {
              "name": "lineno",
              "default": "0",
              "type": "unsigned long"
            },
            "colno": {
              "name": "colno",
              "default": "0",
              "type": "unsigned long"
            },
            "error": {
              "name": "error",
              "default": "null",
              "type": "any"
            }
          }
        }
      },
      "RTCSessionDescriptionInit": {
        "name": "RTCSessionDescriptionInit",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "required": 1,
              "type": "RTCSdpType"
            },
            "sdp": {
              "name": "sdp",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "MediaElementAudioSourceOptions": {
        "name": "MediaElementAudioSourceOptions",
        "extends": "Object",
        "members": {
          "member": {
            "mediaElement": {
              "name": "mediaElement",
              "required": 1,
              "type": "HTMLMediaElement"
            }
          }
        }
      },
      "RTCDtlsParameters": {
        "members": {
          "member": {
            "fingerprints": {
              "subtype": {
                "type": "RTCDtlsFingerprint"
              },
              "specs": "ortc",
              "name": "fingerprints",
              "type": "sequence",
              "type-original": "sequence<RTCDtlsFingerprint>"
            },
            "role": {
              "specs": "ortc",
              "name": "role",
              "default": "\"auto\"",
              "type": "RTCDtlsRole",
              "type-original": "RTCDtlsRole"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCDtlsParameters",
        "extends": "Object"
      },
      "RTCOutboundRTPStreamStats": {
        "members": {
          "member": {
            "bytesSent": {
              "specs": "ortc",
              "name": "bytesSent",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "targetBitrate": {
              "specs": "ortc",
              "name": "targetBitrate",
              "type": "double",
              "type-original": "double"
            },
            "packetsSent": {
              "specs": "ortc",
              "name": "packetsSent",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "roundTripTime": {
              "specs": "ortc",
              "name": "roundTripTime",
              "type": "double",
              "type-original": "double"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCOutboundRTPStreamStats",
        "extends": "RTCRTPStreamStats"
      },
      "RsaKeyAlgorithm": {
        "name": "RsaKeyAlgorithm",
        "extends": "KeyAlgorithm",
        "members": {
          "member": {
            "modulusLength": {
              "name": "modulusLength",
              "required": 1,
              "type": "unsigned long"
            },
            "publicExponent": {
              "name": "publicExponent",
              "required": 1,
              "type": "BigInteger"
            }
          }
        }
      },
      "MediaTrackConstraints": {
        "name": "MediaTrackConstraints",
        "extends": "MediaTrackConstraintSet",
        "members": {
          "member": {
            "advanced": {
              "name": "advanced",
              "type": "sequence",
              "subtype": {
                "type": "MediaTrackConstraintSet"
              }
            }
          }
        }
      },
      "EcdsaParams": {
        "name": "EcdsaParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            }
          }
        }
      },
      "DeviceLightEventInit": {
        "members": {
          "member": {
            "value": {
              "specs": "ambient-light",
              "name": "value",
              "default": "Infinity",
              "type": "unrestricted double",
              "type-original": "unrestricted double"
            }
          }
        },
        "specs": "ambient-light",
        "name": "DeviceLightEventInit",
        "extends": "EventInit"
      },
      "RTCSrtpSdesParameters": {
        "members": {
          "member": {
            "sessionParams": {
              "subtype": {
                "type": "DOMString"
              },
              "specs": "ortc",
              "name": "sessionParams",
              "type": "sequence",
              "type-original": "sequence<DOMString>"
            },
            "keyParams": {
              "subtype": {
                "type": "RTCSrtpKeyParam"
              },
              "specs": "ortc",
              "name": "keyParams",
              "type": "sequence",
              "type-original": "sequence<RTCSrtpKeyParam>"
            },
            "tag": {
              "specs": "ortc",
              "name": "tag",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "cryptoSuite": {
              "specs": "ortc",
              "name": "cryptoSuite",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCSrtpSdesParameters",
        "extends": "Object"
      },
      "DoubleRange": {
        "name": "DoubleRange",
        "extends": "Object",
        "members": {
          "member": {
            "max": {
              "name": "max",
              "type": "double"
            },
            "min": {
              "name": "min",
              "type": "double"
            }
          }
        }
      },
      "RTCIceCandidatePairStats": {
        "members": {
          "member": {
            "priority": {
              "specs": "ortc",
              "name": "priority",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "nominated": {
              "specs": "ortc",
              "name": "nominated",
              "type": "boolean",
              "type-original": "boolean"
            },
            "availableOutgoingBitrate": {
              "specs": "ortc",
              "name": "availableOutgoingBitrate",
              "type": "double",
              "type-original": "double"
            },
            "bytesSent": {
              "specs": "ortc",
              "name": "bytesSent",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "writable": {
              "specs": "ortc",
              "name": "writable",
              "type": "boolean",
              "type-original": "boolean"
            },
            "transportId": {
              "specs": "ortc",
              "name": "transportId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "bytesReceived": {
              "specs": "ortc",
              "name": "bytesReceived",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "state": {
              "specs": "ortc",
              "name": "state",
              "type": "RTCStatsIceCandidatePairState",
              "type-original": "RTCStatsIceCandidatePairState"
            },
            "remoteCandidateId": {
              "specs": "ortc",
              "name": "remoteCandidateId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "localCandidateId": {
              "specs": "ortc",
              "name": "localCandidateId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "availableIncomingBitrate": {
              "specs": "ortc",
              "name": "availableIncomingBitrate",
              "type": "double",
              "type-original": "double"
            },
            "roundTripTime": {
              "specs": "ortc",
              "name": "roundTripTime",
              "type": "double",
              "type-original": "double"
            },
            "readable": {
              "specs": "ortc",
              "name": "readable",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCIceCandidatePairStats",
        "extends": "RTCStats"
      },
      "MSVideoResolutionDistribution": {
        "members": {
          "member": {
            "h1440Quality": {
              "specs": "webrtc-stats",
              "name": "h1440Quality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "h720Quality": {
              "specs": "webrtc-stats",
              "name": "h720Quality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "h2160Quality": {
              "specs": "webrtc-stats",
              "name": "h2160Quality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "cifQuality": {
              "specs": "webrtc-stats",
              "name": "cifQuality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "vgaQuality": {
              "specs": "webrtc-stats",
              "name": "vgaQuality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "h1080Quality": {
              "specs": "webrtc-stats",
              "name": "h1080Quality",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSVideoResolutionDistribution",
        "extends": "Object"
      },
      "UIEventInit": {
        "name": "UIEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "view": {
              "name": "view",
              "default": "null",
              "type": "Window",
              "nullable": 1
            },
            "detail": {
              "name": "detail",
              "default": "0",
              "type": "long"
            }
          }
        }
      },
      "PushEventInit": {
        "name": "PushEventInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "data": {
              "name": "data",
              "type": "PushMessageDataInit"
            }
          }
        }
      },
      "ChannelMergerOptions": {
        "name": "ChannelMergerOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "numberOfInputs": {
              "name": "numberOfInputs",
              "default": "6",
              "type": "unsigned long"
            }
          }
        }
      },
      "OscillatorOptions": {
        "name": "OscillatorOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "default": "\"sine\"",
              "type": "OscillatorType"
            },
            "frequency": {
              "name": "frequency",
              "default": "440",
              "type": "float"
            },
            "detune": {
              "name": "detune",
              "default": "0",
              "type": "float"
            },
            "periodicWave": {
              "name": "periodicWave",
              "type": "PeriodicWave"
            }
          }
        }
      },
      "GamepadEventInit": {
        "name": "GamepadEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "gamepad": {
              "name": "gamepad",
              "required": 1,
              "type": "Gamepad"
            }
          }
        }
      },
      "RTCRtpHeaderExtensionParameters": {
        "name": "RTCRtpHeaderExtensionParameters",
        "extends": "Object",
        "members": {
          "member": {
            "uri": {
              "name": "uri",
              "required": 1,
              "type": "DOMString"
            },
            "id": {
              "name": "id",
              "required": 1,
              "type": "unsigned short"
            },
            "encrypted": {
              "name": "encrypted",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "RTCRtpCodecParameters": {
        "name": "RTCRtpCodecParameters",
        "extends": "Object",
        "members": {
          "member": {
            "payloadType": {
              "name": "payloadType",
              "required": 1,
              "type": "octet"
            },
            "mimeType": {
              "name": "mimeType",
              "required": 1,
              "type": "DOMString"
            },
            "clockRate": {
              "name": "clockRate",
              "required": 1,
              "type": "unsigned long"
            },
            "channels": {
              "name": "channels",
              "type": "unsigned short"
            },
            "sdpFmtpLine": {
              "name": "sdpFmtpLine",
              "type": "DOMString"
            }
          }
        }
      },
      "AnalyserOptions": {
        "name": "AnalyserOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "fftSize": {
              "name": "fftSize",
              "default": "2048",
              "type": "unsigned long"
            },
            "maxDecibels": {
              "name": "maxDecibels",
              "default": "-30",
              "type": "double"
            },
            "minDecibels": {
              "name": "minDecibels",
              "default": "-100",
              "type": "double"
            },
            "smoothingTimeConstant": {
              "name": "smoothingTimeConstant",
              "default": "0.8",
              "type": "double"
            }
          }
        }
      },
      "FetchEventInit": {
        "name": "FetchEventInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "request": {
              "name": "request",
              "required": 1,
              "type": "Request"
            },
            "preloadResponse": {
              "name": "preloadResponse",
              "type": "Promise",
              "subtype": {
                "type": "any"
              }
            },
            "clientId": {
              "name": "clientId",
              "default": "\"\"",
              "type": "DOMString"
            },
            "resultingClientId": {
              "name": "resultingClientId",
              "default": "\"\"",
              "type": "DOMString"
            },
            "replacesClientId": {
              "name": "replacesClientId",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "PushSubscriptionChangeInit": {
        "name": "PushSubscriptionChangeInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "newSubscription": {
              "name": "newSubscription",
              "default": "null",
              "type": "PushSubscription"
            },
            "oldSubscription": {
              "name": "oldSubscription",
              "default": "null",
              "type": "PushSubscription"
            }
          }
        }
      },
      "AddEventListenerOptions": {
        "name": "AddEventListenerOptions",
        "extends": "EventListenerOptions",
        "members": {
          "member": {
            "passive": {
              "name": "passive",
              "default": "false",
              "type": "boolean"
            },
            "once": {
              "name": "once",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "VRLayer": {
        "members": {
          "member": {
            "source": {
              "nullable": 1,
              "specs": "WebVR",
              "name": "source",
              "default": "null",
              "type": "HTMLCanvasElement",
              "type-original": "VRSource?"
            },
            "rightBounds": {
              "specs": "WebVR",
              "name": "rightBounds",
              "default": "null",
              "type-original": "sequence<float>?",
              "subtype": {
                "type": "float"
              },
              "nullable": 1,
              "type": "sequence"
            },
            "leftBounds": {
              "specs": "WebVR",
              "name": "leftBounds",
              "default": "null",
              "type-original": "sequence<float>?",
              "subtype": {
                "type": "float"
              },
              "nullable": 1,
              "type": "sequence"
            }
          }
        },
        "specs": "WebVR",
        "name": "VRLayer",
        "extends": "Object"
      },
      "GetNotificationOptions": {
        "name": "GetNotificationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "tag": {
              "name": "tag",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "ScopedCredentialOptions": {
        "members": {
          "member": {
            "extensions": {
              "specs": "WD-webauthn-20161207",
              "name": "extensions",
              "type": "WebAuthnExtensions",
              "type-original": "WebAuthnExtensions"
            },
            "excludeList": {
              "subtype": {
                "type": "ScopedCredentialDescriptor"
              },
              "specs": "WD-webauthn-20161207",
              "name": "excludeList",
              "type": "sequence",
              "type-original": "sequence<ScopedCredentialDescriptor>"
            },
            "rpId": {
              "specs": "WD-webauthn-20161207",
              "name": "rpId",
              "type": "USVString",
              "type-original": "USVString"
            },
            "timeoutSeconds": {
              "specs": "WD-webauthn-20161207",
              "name": "timeoutSeconds",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "WD-webauthn-20161207",
        "name": "ScopedCredentialOptions",
        "extends": "Object"
      },
      "RTCMediaStreamTrackStats": {
        "members": {
          "member": {
            "remoteSource": {
              "specs": "ortc",
              "name": "remoteSource",
              "type": "boolean",
              "type-original": "boolean"
            },
            "trackIdentifier": {
              "specs": "ortc",
              "name": "trackIdentifier",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "frameHeight": {
              "specs": "ortc",
              "name": "frameHeight",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "echoReturnLossEnhancement": {
              "specs": "ortc",
              "name": "echoReturnLossEnhancement",
              "type": "double",
              "type-original": "double"
            },
            "framesDecoded": {
              "specs": "ortc",
              "name": "framesDecoded",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "frameWidth": {
              "specs": "ortc",
              "name": "frameWidth",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "echoReturnLoss": {
              "specs": "ortc",
              "name": "echoReturnLoss",
              "type": "double",
              "type-original": "double"
            },
            "framesDropped": {
              "specs": "ortc",
              "name": "framesDropped",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "framesPerSecond": {
              "specs": "ortc",
              "name": "framesPerSecond",
              "type": "double",
              "type-original": "double"
            },
            "ssrcIds": {
              "subtype": {
                "type": "DOMString"
              },
              "specs": "ortc",
              "name": "ssrcIds",
              "type": "sequence",
              "type-original": "sequence<DOMString>"
            },
            "framesCorrupted": {
              "specs": "ortc",
              "name": "framesCorrupted",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "audioLevel": {
              "specs": "ortc",
              "name": "audioLevel",
              "type": "double",
              "type-original": "double"
            },
            "framesReceived": {
              "specs": "ortc",
              "name": "framesReceived",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "framesSent": {
              "specs": "ortc",
              "name": "framesSent",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCMediaStreamTrackStats",
        "extends": "RTCStats"
      },
      "DelayOptions": {
        "name": "DelayOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "maxDelayTime": {
              "name": "maxDelayTime",
              "default": "1",
              "type": "double"
            },
            "delayTime": {
              "name": "delayTime",
              "default": "0",
              "type": "double"
            }
          }
        }
      },
      "PushSubscriptionOptionsInit": {
        "name": "PushSubscriptionOptionsInit",
        "extends": "Object",
        "members": {
          "member": {
            "userVisibleOnly": {
              "name": "userVisibleOnly",
              "default": "false",
              "type": "boolean"
            },
            "applicationServerKey": {
              "name": "applicationServerKey",
              "default": "null",
              "type": [
                {
                  "type": "BufferSource"
                },
                {
                  "type": "DOMString"
                }
              ],
              "nullable": 1
            }
          }
        }
      },
      "RTCSrtpKeyParam": {
        "members": {
          "member": {
            "mkiLength": {
              "specs": "ortc",
              "name": "mkiLength",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "mkiValue": {
              "specs": "ortc",
              "name": "mkiValue",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "keySalt": {
              "specs": "ortc",
              "name": "keySalt",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "keyMethod": {
              "specs": "ortc",
              "name": "keyMethod",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "lifetime": {
              "specs": "ortc",
              "name": "lifetime",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCSrtpKeyParam",
        "extends": "Object"
      },
      "ConstantSourceOptions": {
        "name": "ConstantSourceOptions",
        "extends": "Object",
        "members": {
          "member": {
            "offset": {
              "name": "offset",
              "default": "1",
              "type": "float"
            }
          }
        }
      },
      "RTCRtpUnhandled": {
        "members": {
          "member": {
            "payloadType": {
              "specs": "ortc",
              "name": "payloadType",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "muxId": {
              "specs": "ortc",
              "name": "muxId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "ssrc": {
              "specs": "ortc",
              "name": "ssrc",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRtpUnhandled",
        "extends": "Object"
      },
      "MSRelayAddress": {
        "members": {
          "member": {
            "port": {
              "specs": "webrtc-stats",
              "name": "port",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "relayAddress": {
              "specs": "webrtc-stats",
              "name": "relayAddress",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSRelayAddress",
        "extends": "Object"
      },
      "MSJitter": {
        "members": {
          "member": {
            "interArrival": {
              "specs": "webrtc-stats",
              "name": "interArrival",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "interArrivalSD": {
              "specs": "webrtc-stats",
              "name": "interArrivalSD",
              "type": "float",
              "type-original": "float"
            },
            "interArrivalMax": {
              "specs": "webrtc-stats",
              "name": "interArrivalMax",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSJitter",
        "extends": "Object"
      },
      "RTCRTPStreamStats": {
        "members": {
          "member": {
            "isRemote": {
              "specs": "ortc",
              "name": "isRemote",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "sliCount": {
              "specs": "ortc",
              "name": "sliCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "nackCount": {
              "specs": "ortc",
              "name": "nackCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "codecId": {
              "specs": "ortc",
              "name": "codecId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "transportId": {
              "specs": "ortc",
              "name": "transportId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "pliCount": {
              "specs": "ortc",
              "name": "pliCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "associateStatsId": {
              "specs": "ortc",
              "name": "associateStatsId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "mediaTrackId": {
              "specs": "ortc",
              "name": "mediaTrackId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "mediaType": {
              "specs": "ortc",
              "name": "mediaType",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "ssrc": {
              "specs": "ortc",
              "name": "ssrc",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "firCount": {
              "specs": "ortc",
              "name": "firCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRTPStreamStats",
        "extends": "RTCStats"
      },
      "MSDCCEventInit": {
        "members": {
          "member": {
            "maxFr": {
              "specs": "ortc",
              "name": "maxFr",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "maxFs": {
              "specs": "ortc",
              "name": "maxFs",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "MSDCCEventInit",
        "extends": "EventInit"
      },
      "ConfirmSiteSpecificExceptionsInformation": {
        "members": {
          "member": {
            "arrayOfDomainStrings": {
              "subtype": {
                "type": "DOMString"
              },
              "specs": "tracking-dnt",
              "name": "arrayOfDomainStrings",
              "type": "sequence",
              "type-original": "sequence<DOMString>"
            }
          }
        },
        "specs": "tracking-dnt",
        "name": "ConfirmSiteSpecificExceptionsInformation",
        "extends": "ExceptionInformation"
      },
      "EcdhKeyDeriveParams": {
        "name": "EcdhKeyDeriveParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "public": {
              "name": "public",
              "required": 1,
              "type": "CryptoKey"
            }
          }
        }
      },
      "MediaTrackConstraintSet": {
        "name": "MediaTrackConstraintSet",
        "extends": "Object",
        "members": {
          "member": {
            "width": {
              "name": "width",
              "type": "ConstrainULong"
            },
            "height": {
              "name": "height",
              "type": "ConstrainULong"
            },
            "aspectRatio": {
              "name": "aspectRatio",
              "type": "ConstrainDouble"
            },
            "frameRate": {
              "name": "frameRate",
              "type": "ConstrainDouble"
            },
            "facingMode": {
              "name": "facingMode",
              "type": "ConstrainDOMString"
            },
            "resizeMode": {
              "name": "resizeMode",
              "type": "ConstrainDOMString"
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "ConstrainULong"
            },
            "sampleSize": {
              "name": "sampleSize",
              "type": "ConstrainULong"
            },
            "echoCancellation": {
              "name": "echoCancellation",
              "type": "ConstrainBoolean"
            },
            "autoGainControl": {
              "name": "autoGainControl",
              "type": "ConstrainBoolean"
            },
            "noiseSuppression": {
              "name": "noiseSuppression",
              "type": "ConstrainBoolean"
            },
            "latency": {
              "name": "latency",
              "type": "ConstrainDouble"
            },
            "channelCount": {
              "name": "channelCount",
              "type": "ConstrainULong"
            },
            "deviceId": {
              "name": "deviceId",
              "type": "ConstrainDOMString"
            },
            "groupId": {
              "name": "groupId",
              "type": "ConstrainDOMString"
            }
          }
        }
      },
      "RTCRtpRtxParameters": {
        "members": {
          "member": {
            "ssrc": {
              "specs": "ortc",
              "name": "ssrc",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRtpRtxParameters",
        "extends": "Object"
      },
      "RTCIceCandidateInit": {
        "name": "RTCIceCandidateInit",
        "extends": "Object",
        "members": {
          "member": {
            "candidate": {
              "name": "candidate",
              "default": "\"\"",
              "type": "DOMString"
            },
            "sdpMid": {
              "name": "sdpMid",
              "default": "null",
              "type": "DOMString",
              "nullable": 1
            },
            "sdpMLineIndex": {
              "name": "sdpMLineIndex",
              "default": "null",
              "type": "unsigned short",
              "nullable": 1
            },
            "usernameFragment": {
              "name": "usernameFragment",
              "type": "DOMString"
            }
          }
        }
      },
      "RegistrationOptions": {
        "name": "RegistrationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "scope": {
              "name": "scope",
              "type": "USVString"
            },
            "type": {
              "name": "type",
              "default": "\"classic\"",
              "type": "WorkerType"
            },
            "updateViaCache": {
              "name": "updateViaCache",
              "default": "\"imports\"",
              "type": "ServiceWorkerUpdateViaCache"
            }
          }
        }
      },
      "HkdfParams": {
        "name": "HkdfParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            },
            "salt": {
              "name": "salt",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "info": {
              "name": "info",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            }
          }
        }
      },
      "FocusEventInit": {
        "name": "FocusEventInit",
        "extends": "UIEventInit",
        "members": {
          "member": {
            "relatedTarget": {
              "name": "relatedTarget",
              "default": "null",
              "type": "EventTarget",
              "nullable": 1
            }
          }
        }
      },
      "RTCDTMFToneChangeEventInit": {
        "name": "RTCDTMFToneChangeEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "tone": {
              "name": "tone",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "RTCDtlsFingerprint": {
        "name": "RTCDtlsFingerprint",
        "extends": "Object",
        "members": {
          "member": {
            "algorithm": {
              "name": "algorithm",
              "type": "DOMString"
            },
            "value": {
              "name": "value",
              "type": "DOMString"
            }
          }
        }
      },
      "CompositionEventInit": {
        "name": "CompositionEventInit",
        "extends": "UIEventInit",
        "members": {
          "member": {
            "data": {
              "name": "data",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "PaymentMethodData": {
        "members": {
          "member": {
            "supportedMethods": {
              "subtype": {
                "type": "DOMString"
              },
              "required": 1,
              "specs": "payment-request",
              "name": "supportedMethods",
              "type": "sequence",
              "type-original": "sequence<DOMString>",
              "override-type": "string | string[]"
            },
            "data": {
              "specs": "payment-request",
              "name": "data",
              "type": "object",
              "type-original": "object"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentMethodData",
        "extends": "Object"
      },
      "PaymentDetailsUpdate": {
        "members": {
          "member": {
            "error": {
              "specs": "payment-request",
              "name": "error",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "total": {
              "specs": "payment-request",
              "name": "total",
              "type": "PaymentItem",
              "type-original": "PaymentItem"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentDetailsUpdate",
        "extends": "PaymentDetailsBase"
      },
      "VRDisplayEventInit": {
        "members": {
          "member": {
            "reason": {
              "specs": "WebVR",
              "name": "reason",
              "type": "VRDisplayEventReason",
              "type-original": "VRDisplayEventReason"
            },
            "display": {
              "required": 1,
              "specs": "WebVR",
              "name": "display",
              "type": "VRDisplay",
              "type-original": "VRDisplay"
            }
          }
        },
        "specs": "WebVR",
        "name": "VRDisplayEventInit",
        "extends": "EventInit"
      },
      "MSTransportDiagnosticsStats": {
        "members": {
          "member": {
            "protocol": {
              "specs": "webrtc-stats",
              "name": "protocol",
              "type": "RTCIceProtocol",
              "type-original": "RTCIceProtocol"
            },
            "msRtcEngineVersion": {
              "specs": "webrtc-stats",
              "name": "msRtcEngineVersion",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "baseInterface": {
              "specs": "webrtc-stats",
              "name": "baseInterface",
              "type": "MSNetworkInterfaceType",
              "type-original": "MSNetworkInterfaceType"
            },
            "rtpRtcpMux": {
              "specs": "webrtc-stats",
              "name": "rtpRtcpMux",
              "type": "boolean",
              "type-original": "boolean"
            },
            "remoteAddrType": {
              "specs": "webrtc-stats",
              "name": "remoteAddrType",
              "type": "MSIceAddrType",
              "type-original": "MSIceAddrType"
            },
            "baseAddress": {
              "specs": "webrtc-stats",
              "name": "baseAddress",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "allocationTimeInMs": {
              "specs": "webrtc-stats",
              "name": "allocationTimeInMs",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "numConsentRespSent": {
              "specs": "webrtc-stats",
              "name": "numConsentRespSent",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "remoteMR": {
              "specs": "webrtc-stats",
              "name": "remoteMR",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "numConsentReqSent": {
              "specs": "webrtc-stats",
              "name": "numConsentReqSent",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "interfaces": {
              "specs": "webrtc-stats",
              "name": "interfaces",
              "type": "MSNetworkInterfaceType",
              "type-original": "MSNetworkInterfaceType"
            },
            "localSite": {
              "specs": "webrtc-stats",
              "name": "localSite",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "remoteMRTCPPort": {
              "specs": "webrtc-stats",
              "name": "remoteMRTCPPort",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "remoteAddress": {
              "specs": "webrtc-stats",
              "name": "remoteAddress",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "localAddrType": {
              "specs": "webrtc-stats",
              "name": "localAddrType",
              "type": "MSIceAddrType",
              "type-original": "MSIceAddrType"
            },
            "portRangeMax": {
              "specs": "webrtc-stats",
              "name": "portRangeMax",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "remoteSite": {
              "specs": "webrtc-stats",
              "name": "remoteSite",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "numConsentReqReceived": {
              "specs": "webrtc-stats",
              "name": "numConsentReqReceived",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "localInterface": {
              "specs": "webrtc-stats",
              "name": "localInterface",
              "type": "MSNetworkInterfaceType",
              "type-original": "MSNetworkInterfaceType"
            },
            "portRangeMin": {
              "specs": "webrtc-stats",
              "name": "portRangeMin",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "localMR": {
              "specs": "webrtc-stats",
              "name": "localMR",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "stunVer": {
              "specs": "webrtc-stats",
              "name": "stunVer",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "localAddress": {
              "specs": "webrtc-stats",
              "name": "localAddress",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "iceWarningFlags": {
              "specs": "webrtc-stats",
              "name": "iceWarningFlags",
              "type": "MSIceWarningFlags",
              "type-original": "MSIceWarningFlags"
            },
            "localMRTCPPort": {
              "specs": "webrtc-stats",
              "name": "localMRTCPPort",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "numConsentRespReceived": {
              "specs": "webrtc-stats",
              "name": "numConsentRespReceived",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "iceRole": {
              "specs": "webrtc-stats",
              "name": "iceRole",
              "type": "RTCIceRole",
              "type-original": "RTCIceRole"
            },
            "networkName": {
              "specs": "webrtc-stats",
              "name": "networkName",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSTransportDiagnosticsStats",
        "extends": "RTCStats"
      },
      "EventInit": {
        "name": "EventInit",
        "extends": "Object",
        "members": {
          "member": {
            "bubbles": {
              "name": "bubbles",
              "default": "false",
              "type": "boolean"
            },
            "cancelable": {
              "name": "cancelable",
              "default": "false",
              "type": "boolean"
            },
            "composed": {
              "name": "composed",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "RTCIceCandidateComplete": {
        "members": {
          "member": {}
        },
        "specs": "ortc",
        "name": "RTCIceCandidateComplete",
        "extends": "Object"
      },
      "PaymentItem": {
        "members": {
          "member": {
            "amount": {
              "required": 1,
              "specs": "payment-request",
              "name": "amount",
              "type": "PaymentCurrencyAmount",
              "type-original": "PaymentCurrencyAmount"
            },
            "pending": {
              "specs": "payment-request",
              "name": "pending",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "label": {
              "required": 1,
              "specs": "payment-request",
              "name": "label",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentItem",
        "extends": "Object"
      },
      "PaymentDetailsInit": {
        "members": {
          "member": {
            "id": {
              "specs": "payment-request",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "total": {
              "required": 1,
              "specs": "payment-request",
              "name": "total",
              "type": "PaymentItem",
              "type-original": "PaymentItem"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentDetailsInit",
        "extends": "PaymentDetailsBase"
      },
      "RTCRtpFecParameters": {
        "members": {
          "member": {
            "mechanism": {
              "specs": "ortc",
              "name": "mechanism",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "ssrc": {
              "specs": "ortc",
              "name": "ssrc",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRtpFecParameters",
        "extends": "Object"
      },
      "AesKeyGenParams": {
        "name": "AesKeyGenParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned short"
            }
          }
        }
      },
      "ConstrainDoubleRange": {
        "name": "ConstrainDoubleRange",
        "extends": "DoubleRange",
        "members": {
          "member": {
            "exact": {
              "name": "exact",
              "type": "double"
            },
            "ideal": {
              "name": "ideal",
              "type": "double"
            }
          }
        }
      },
      "DeviceRotationRateDict": {
        "members": {
          "member": {
            "gamma": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "gamma",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            },
            "alpha": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "alpha",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            },
            "beta": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "beta",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            }
          }
        },
        "specs": "orientation-event",
        "name": "DeviceRotationRateDict",
        "extends": "Object"
      },
      "AesDerivedKeyParams": {
        "name": "AesDerivedKeyParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned short"
            }
          }
        }
      },
      "ScopedCredentialDescriptor": {
        "members": {
          "member": {
            "id": {
              "required": 1,
              "specs": "webauthn",
              "name": "id",
              "type": [
                {
                  "type": [
                    {
                      "nullable": 1,
                      "type": "Int8Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Int16Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Int32Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Uint8Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Uint16Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Uint32Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Uint8ClampedArray"
                    },
                    {
                      "nullable": 1,
                      "type": "Float32Array"
                    },
                    {
                      "nullable": 1,
                      "type": "Float64Array"
                    },
                    {
                      "nullable": 1,
                      "type": "DataView"
                    }
                  ]
                },
                {
                  "nullable": 1,
                  "type": "ArrayBuffer"
                }
              ],
              "type-original": "BufferSource"
            },
            "type": {
              "required": 1,
              "specs": "webauthn",
              "name": "type",
              "type": "ScopedCredentialType",
              "type-original": "ScopedCredentialType"
            },
            "transports": {
              "subtype": {
                "type": "Transport"
              },
              "specs": "webauthn",
              "name": "transports",
              "type": "sequence",
              "type-original": "sequence<Transport>"
            }
          }
        },
        "specs": "webauthn",
        "name": "ScopedCredentialDescriptor",
        "extends": "Object"
      },
      "MSDSHEventInit": {
        "members": {
          "member": {
            "sources": {
              "subtype": {
                "type": "unsigned long"
              },
              "specs": "ortc",
              "name": "sources",
              "type": "sequence",
              "type-original": "sequence<unsigned long>"
            },
            "timestamp": {
              "specs": "ortc",
              "name": "timestamp",
              "type": "double",
              "type-original": "DOMHighResTimeStamp"
            }
          }
        },
        "specs": "ortc",
        "name": "MSDSHEventInit",
        "extends": "EventInit"
      },
      "StoreSiteSpecificExceptionsInformation": {
        "members": {
          "member": {
            "arrayOfDomainStrings": {
              "subtype": {
                "type": "DOMString"
              },
              "specs": "tracking-dnt",
              "name": "arrayOfDomainStrings",
              "type": "sequence",
              "type-original": "sequence<DOMString>"
            }
          }
        },
        "specs": "tracking-dnt",
        "name": "StoreSiteSpecificExceptionsInformation",
        "extends": "StoreExceptionsInformation"
      },
      "ConstrainDOMStringParameters": {
        "name": "ConstrainDOMStringParameters",
        "extends": "Object",
        "members": {
          "member": {
            "exact": {
              "name": "exact",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  }
                }
              ]
            },
            "ideal": {
              "name": "ideal",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  }
                }
              ]
            }
          }
        }
      },
      "PaymentCurrencyAmount": {
        "members": {
          "member": {
            "currency": {
              "required": 1,
              "specs": "payment-request",
              "name": "currency",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "currencySystem": {
              "specs": "payment-request",
              "name": "currencySystem",
              "default": "\"urn:iso:std:iso:4217\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "value": {
              "required": 1,
              "specs": "payment-request",
              "name": "value",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentCurrencyAmount",
        "extends": "Object"
      },
      "HmacKeyGenParams": {
        "name": "HmacKeyGenParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            },
            "length": {
              "name": "length",
              "type": "unsigned long"
            }
          }
        }
      },
      "AssertionOptions": {
        "members": {
          "member": {
            "extensions": {
              "specs": "webauthn",
              "name": "extensions",
              "type": "WebAuthnExtensions",
              "type-original": "WebAuthnExtensions"
            },
            "rpId": {
              "specs": "webauthn",
              "name": "rpId",
              "type": "USVString",
              "type-original": "USVString"
            },
            "timeoutSeconds": {
              "specs": "WD-webauthn-20161207",
              "name": "timeoutSeconds",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "allowList": {
              "subtype": {
                "type": "ScopedCredentialDescriptor"
              },
              "specs": "webauthn",
              "name": "allowList",
              "default": "[]",
              "type": "sequence",
              "type-original": "sequence<ScopedCredentialDescriptor>"
            }
          }
        },
        "specs": "webauthn",
        "name": "AssertionOptions",
        "extends": "Object"
      },
      "RsaPssParams": {
        "name": "RsaPssParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "saltLength": {
              "name": "saltLength",
              "required": 1,
              "type": "unsigned long"
            }
          }
        }
      },
      "ConstrainVideoFacingModeParameters": {
        "members": {
          "member": {
            "exact": {
              "specs": "media-capture-api",
              "name": "exact",
              "type": [
                {
                  "type": "VideoFacingModeEnum"
                },
                {
                  "subtype": {
                    "type": "VideoFacingModeEnum"
                  },
                  "type": "sequence"
                }
              ],
              "type-original": "(VideoFacingModeEnum or sequence<VideoFacingModeEnum>)"
            },
            "ideal": {
              "specs": "media-capture-api",
              "name": "ideal",
              "type": [
                {
                  "type": "VideoFacingModeEnum"
                },
                {
                  "subtype": {
                    "type": "VideoFacingModeEnum"
                  },
                  "type": "sequence"
                }
              ],
              "type-original": "(VideoFacingModeEnum or sequence<VideoFacingModeEnum>)"
            }
          }
        },
        "specs": "media-capture-api",
        "name": "ConstrainVideoFacingModeParameters",
        "extends": "Object"
      },
      "AudioParamDescriptor": {
        "name": "AudioParamDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "DOMString"
            },
            "defaultValue": {
              "name": "defaultValue",
              "default": "0",
              "type": "float"
            },
            "minValue": {
              "name": "minValue",
              "default": "-3.4028235e38",
              "type": "float"
            },
            "maxValue": {
              "name": "maxValue",
              "default": "3.4028235e38",
              "type": "float"
            },
            "automationRate": {
              "name": "automationRate",
              "default": "\"a-rate\"",
              "type": "AutomationRate"
            }
          }
        }
      },
      "RTCConfiguration": {
        "name": "RTCConfiguration",
        "extends": "Object",
        "members": {
          "member": {
            "iceServers": {
              "name": "iceServers",
              "type": "sequence",
              "subtype": {
                "type": "RTCIceServer"
              }
            },
            "iceTransportPolicy": {
              "name": "iceTransportPolicy",
              "default": "\"all\"",
              "type": "RTCIceTransportPolicy"
            },
            "bundlePolicy": {
              "name": "bundlePolicy",
              "default": "\"balanced\"",
              "type": "RTCBundlePolicy"
            },
            "rtcpMuxPolicy": {
              "name": "rtcpMuxPolicy",
              "default": "\"require\"",
              "type": "RTCRtcpMuxPolicy"
            },
            "peerIdentity": {
              "name": "peerIdentity",
              "type": "DOMString"
            },
            "certificates": {
              "name": "certificates",
              "type": "sequence",
              "subtype": {
                "type": "RTCCertificate"
              }
            },
            "iceCandidatePoolSize": {
              "name": "iceCandidatePoolSize",
              "default": "0",
              "type": "octet"
            }
          }
        }
      },
      "MSNetworkConnectivityInfo": {
        "members": {
          "member": {
            "networkConnectionDetails": {
              "specs": "webrtc-stats",
              "name": "networkConnectionDetails",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "linkspeed": {
              "specs": "webrtc-stats",
              "name": "linkspeed",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "vpn": {
              "specs": "webrtc-stats",
              "name": "vpn",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSNetworkConnectivityInfo",
        "extends": "Object"
      },
      "ClientQueryOptions": {
        "name": "ClientQueryOptions",
        "extends": "Object",
        "members": {
          "member": {
            "includeUncontrolled": {
              "name": "includeUncontrolled",
              "default": "false",
              "type": "boolean"
            },
            "type": {
              "name": "type",
              "default": "\"window\"",
              "type": "ClientType",
              "override-type": "ClientTypes"
            }
          }
        }
      },
      "RsaHashedKeyAlgorithm": {
        "name": "RsaHashedKeyAlgorithm",
        "extends": "RsaKeyAlgorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "KeyAlgorithm"
            }
          }
        }
      },
      "DeviceMotionEventInit": {
        "name": "DeviceMotionEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "acceleration": {
              "name": "acceleration",
              "type": "DeviceMotionEventAccelerationInit"
            },
            "accelerationIncludingGravity": {
              "name": "accelerationIncludingGravity",
              "type": "DeviceMotionEventAccelerationInit"
            },
            "rotationRate": {
              "name": "rotationRate",
              "type": "DeviceMotionEventRotationRateInit"
            },
            "interval": {
              "name": "interval",
              "default": "0",
              "type": "double"
            }
          }
        }
      },
      "RTCIceServer": {
        "name": "RTCIceServer",
        "extends": "Object",
        "members": {
          "member": {
            "urls": {
              "name": "urls",
              "required": 1,
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  }
                }
              ]
            },
            "username": {
              "name": "username",
              "type": "DOMString"
            },
            "credential": {
              "name": "credential",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "RTCOAuthCredential"
                }
              ]
            },
            "credentialType": {
              "name": "credentialType",
              "default": "\"password\"",
              "type": "RTCIceCredentialType"
            }
          }
        }
      },
      "HmacKeyAlgorithm": {
        "name": "HmacKeyAlgorithm",
        "extends": "KeyAlgorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "KeyAlgorithm"
            },
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned long"
            }
          }
        }
      },
      "ConvolverOptions": {
        "name": "ConvolverOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "buffer": {
              "name": "buffer",
              "type": "AudioBuffer",
              "nullable": 1
            },
            "disableNormalization": {
              "name": "disableNormalization",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "MSPayloadBase": {
        "members": {
          "member": {
            "payloadDescription": {
              "specs": "webrtc-stats",
              "name": "payloadDescription",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSPayloadBase",
        "extends": "RTCStats"
      },
      "WaveShaperOptions": {
        "name": "WaveShaperOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "curve": {
              "name": "curve",
              "type": "sequence",
              "subtype": {
                "type": "float"
              }
            },
            "oversample": {
              "name": "oversample",
              "default": "\"none\"",
              "type": "OverSampleType"
            }
          }
        }
      },
      "CloseEventInit": {
        "members": {
          "member": {
            "wasClean": {
              "specs": "html5",
              "name": "wasClean",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "reason": {
              "specs": "html5",
              "name": "reason",
              "default": "\"\"",
              "type": "USVString",
              "type-original": "USVString"
            },
            "code": {
              "specs": "html5",
              "name": "code",
              "default": "0",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "specs": "html5",
        "name": "CloseEventInit",
        "extends": "EventInit"
      },
      "StoreExceptionsInformation": {
        "members": {
          "member": {
            "detailURI": {
              "nullable": 1,
              "specs": "tracking-dnt",
              "name": "detailURI",
              "type": "DOMString",
              "type-original": "DOMString?"
            },
            "siteName": {
              "nullable": 1,
              "specs": "tracking-dnt",
              "name": "siteName",
              "type": "DOMString",
              "type-original": "DOMString?"
            },
            "explanationString": {
              "nullable": 1,
              "specs": "tracking-dnt",
              "name": "explanationString",
              "type": "DOMString",
              "type-original": "DOMString?"
            }
          }
        },
        "specs": "tracking-dnt",
        "name": "StoreExceptionsInformation",
        "extends": "ExceptionInformation"
      },
      "MSPacketLoss": {
        "members": {
          "member": {
            "lossRate": {
              "specs": "webrtc-stats",
              "name": "lossRate",
              "type": "float",
              "type-original": "float"
            },
            "lossRateMax": {
              "specs": "webrtc-stats",
              "name": "lossRateMax",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSPacketLoss",
        "extends": "Object"
      },
      "IIRFilterOptions": {
        "name": "IIRFilterOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "feedforward": {
              "name": "feedforward",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "double"
              }
            },
            "feedback": {
              "name": "feedback",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "double"
              }
            }
          }
        }
      },
      "ClientData": {
        "members": {
          "member": {
            "extensions": {
              "specs": "WD-webauthn-20161207",
              "name": "extensions",
              "type": "WebAuthnExtensions",
              "type-original": "WebAuthnExtensions"
            },
            "rpId": {
              "required": 1,
              "specs": "WD-webauthn-20160902",
              "name": "rpId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "tokenBinding": {
              "specs": "webauthn",
              "name": "tokenBinding",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "challenge": {
              "required": 1,
              "specs": "webauthn",
              "name": "challenge",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "origin": {
              "required": 1,
              "specs": "webauthn",
              "name": "origin",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "hashAlg": {
              "required": 1,
              "specs": "WD-webauthn-20170216",
              "name": "hashAlg",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "Algorithm"
                }
              ],
              "type-original": "AlgorithmIdentifier"
            }
          }
        },
        "specs": "webauthn",
        "name": "ClientData",
        "extends": "Object"
      },
      "ExtendableMessageEventInit": {
        "name": "ExtendableMessageEventInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "data": {
              "name": "data",
              "default": "null",
              "type": "any"
            },
            "origin": {
              "name": "origin",
              "default": "\"\"",
              "type": "USVString"
            },
            "lastEventId": {
              "name": "lastEventId",
              "default": "\"\"",
              "type": "DOMString"
            },
            "source": {
              "name": "source",
              "default": "null",
              "type": [
                {
                  "type": "Client"
                },
                {
                  "type": "ServiceWorker"
                },
                {
                  "type": "MessagePort"
                }
              ],
              "nullable": 1
            },
            "ports": {
              "name": "ports",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MessagePort"
              }
            }
          }
        }
      },
      "MSVideoSendPayload": {
        "members": {
          "member": {
            "sendResolutionWidth": {
              "specs": "webrtc-stats",
              "name": "sendResolutionWidth",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "sendVideoStreamsMax": {
              "specs": "webrtc-stats",
              "name": "sendVideoStreamsMax",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "sendFrameRateAverage": {
              "specs": "webrtc-stats",
              "name": "sendFrameRateAverage",
              "type": "float",
              "type-original": "float"
            },
            "sendResolutionHeight": {
              "specs": "webrtc-stats",
              "name": "sendResolutionHeight",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "sendBitRateMaximum": {
              "specs": "webrtc-stats",
              "name": "sendBitRateMaximum",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "sendBitRateAverage": {
              "specs": "webrtc-stats",
              "name": "sendBitRateAverage",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSVideoSendPayload",
        "extends": "MSVideoPayload"
      },
      "CacheQueryOptions": {
        "name": "CacheQueryOptions",
        "extends": "Object",
        "members": {
          "member": {
            "ignoreSearch": {
              "name": "ignoreSearch",
              "default": "false",
              "type": "boolean"
            },
            "ignoreMethod": {
              "name": "ignoreMethod",
              "default": "false",
              "type": "boolean"
            },
            "ignoreVary": {
              "name": "ignoreVary",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "AudioContextInfo": {
        "members": {
          "member": {
            "sampleRate": {
              "specs": "webaudio",
              "name": "sampleRate",
              "type": "float",
              "type-original": "float"
            },
            "currentTime": {
              "specs": "webaudio",
              "name": "currentTime",
              "type": "double",
              "type-original": "double"
            }
          }
        },
        "specs": "webaudio",
        "name": "AudioContextInfo",
        "extends": "Object"
      },
      "JsonWebKey": {
        "name": "JsonWebKey",
        "extends": "Object",
        "members": {
          "member": {
            "kty": {
              "name": "kty",
              "type": "DOMString"
            },
            "use": {
              "name": "use",
              "type": "DOMString"
            },
            "key_ops": {
              "name": "key_ops",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            },
            "alg": {
              "name": "alg",
              "type": "DOMString"
            },
            "ext": {
              "name": "ext",
              "type": "boolean"
            },
            "crv": {
              "name": "crv",
              "type": "DOMString"
            },
            "x": {
              "name": "x",
              "type": "DOMString"
            },
            "y": {
              "name": "y",
              "type": "DOMString"
            },
            "d": {
              "name": "d",
              "type": "DOMString"
            },
            "n": {
              "name": "n",
              "type": "DOMString"
            },
            "e": {
              "name": "e",
              "type": "DOMString"
            },
            "p": {
              "name": "p",
              "type": "DOMString"
            },
            "q": {
              "name": "q",
              "type": "DOMString"
            },
            "dp": {
              "name": "dp",
              "type": "DOMString"
            },
            "dq": {
              "name": "dq",
              "type": "DOMString"
            },
            "qi": {
              "name": "qi",
              "type": "DOMString"
            },
            "oth": {
              "name": "oth",
              "type": "sequence",
              "subtype": {
                "type": "RsaOtherPrimesInfo"
              }
            },
            "k": {
              "name": "k",
              "type": "DOMString"
            }
          }
        }
      },
      "ResponseInit": {
        "name": "ResponseInit",
        "extends": "Object",
        "members": {
          "member": {
            "status": {
              "name": "status",
              "default": "200",
              "type": "unsigned short"
            },
            "statusText": {
              "name": "statusText",
              "default": "\"\"",
              "type": "ByteString"
            },
            "headers": {
              "name": "headers",
              "required": 0,
              "type": "HeadersInit",
              "override-type": "HeadersInit"
            }
          }
        }
      },
      "MediaTrackSupportedConstraints": {
        "name": "MediaTrackSupportedConstraints",
        "extends": "Object",
        "members": {
          "member": {
            "width": {
              "name": "width",
              "default": "true",
              "type": "boolean"
            },
            "height": {
              "name": "height",
              "default": "true",
              "type": "boolean"
            },
            "aspectRatio": {
              "name": "aspectRatio",
              "default": "true",
              "type": "boolean"
            },
            "frameRate": {
              "name": "frameRate",
              "default": "true",
              "type": "boolean"
            },
            "facingMode": {
              "name": "facingMode",
              "default": "true",
              "type": "boolean"
            },
            "resizeMode": {
              "name": "resizeMode",
              "default": "true",
              "type": "boolean"
            },
            "sampleRate": {
              "name": "sampleRate",
              "default": "true",
              "type": "boolean"
            },
            "sampleSize": {
              "name": "sampleSize",
              "default": "true",
              "type": "boolean"
            },
            "echoCancellation": {
              "name": "echoCancellation",
              "default": "true",
              "type": "boolean"
            },
            "autoGainControl": {
              "name": "autoGainControl",
              "default": "true",
              "type": "boolean"
            },
            "noiseSuppression": {
              "name": "noiseSuppression",
              "default": "true",
              "type": "boolean"
            },
            "latency": {
              "name": "latency",
              "default": "true",
              "type": "boolean"
            },
            "channelCount": {
              "name": "channelCount",
              "default": "true",
              "type": "boolean"
            },
            "deviceId": {
              "name": "deviceId",
              "default": "true",
              "type": "boolean"
            },
            "groupId": {
              "name": "groupId",
              "default": "true",
              "type": "boolean"
            }
          }
        }
      },
      "Algorithm": {
        "name": "Algorithm",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "MediaEncryptedEventInit": {
        "name": "MediaEncryptedEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "initDataType": {
              "name": "initDataType",
              "default": "\"\"",
              "type": "DOMString"
            },
            "initData": {
              "name": "initData",
              "default": "null",
              "type": "ArrayBuffer",
              "nullable": 1
            }
          }
        }
      },
      "SyncEventInit": {
        "name": "SyncEventInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "tag": {
              "name": "tag",
              "required": 1,
              "type": "DOMString"
            },
            "lastChance": {
              "name": "lastChance",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "MSUtilization": {
        "members": {
          "member": {
            "bandwidthEstimationAvg": {
              "specs": "webrtc-stats",
              "name": "bandwidthEstimationAvg",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "bandwidthEstimation": {
              "specs": "webrtc-stats",
              "name": "bandwidthEstimation",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "bandwidthEstimationStdDev": {
              "specs": "webrtc-stats",
              "name": "bandwidthEstimationStdDev",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "packets": {
              "specs": "webrtc-stats",
              "name": "packets",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "bandwidthEstimationMin": {
              "specs": "webrtc-stats",
              "name": "bandwidthEstimationMin",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "bandwidthEstimationMax": {
              "specs": "webrtc-stats",
              "name": "bandwidthEstimationMax",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSUtilization",
        "extends": "Object"
      },
      "TextDecoderOptions": {
        "name": "TextDecoderOptions",
        "extends": "Object",
        "members": {
          "member": {
            "fatal": {
              "name": "fatal",
              "default": "false",
              "type": "boolean"
            },
            "ignoreBOM": {
              "name": "ignoreBOM",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "PannerOptions": {
        "name": "PannerOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "panningModel": {
              "name": "panningModel",
              "default": "\"equalpower\"",
              "type": "PanningModelType"
            },
            "distanceModel": {
              "name": "distanceModel",
              "default": "\"inverse\"",
              "type": "DistanceModelType"
            },
            "positionX": {
              "name": "positionX",
              "default": "0",
              "type": "float"
            },
            "positionY": {
              "name": "positionY",
              "default": "0",
              "type": "float"
            },
            "positionZ": {
              "name": "positionZ",
              "default": "0",
              "type": "float"
            },
            "orientationX": {
              "name": "orientationX",
              "default": "1",
              "type": "float"
            },
            "orientationY": {
              "name": "orientationY",
              "default": "0",
              "type": "float"
            },
            "orientationZ": {
              "name": "orientationZ",
              "default": "0",
              "type": "float"
            },
            "refDistance": {
              "name": "refDistance",
              "default": "1",
              "type": "double"
            },
            "maxDistance": {
              "name": "maxDistance",
              "default": "10000",
              "type": "double"
            },
            "rolloffFactor": {
              "name": "rolloffFactor",
              "default": "1",
              "type": "double"
            },
            "coneInnerAngle": {
              "name": "coneInnerAngle",
              "default": "360",
              "type": "double"
            },
            "coneOuterAngle": {
              "name": "coneOuterAngle",
              "default": "360",
              "type": "double"
            },
            "coneOuterGain": {
              "name": "coneOuterGain",
              "default": "0",
              "type": "double"
            }
          }
        }
      },
      "EventListenerOptions": {
        "name": "EventListenerOptions",
        "extends": "Object",
        "members": {
          "member": {
            "capture": {
              "name": "capture",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "TextDecodeOptions": {
        "name": "TextDecodeOptions",
        "extends": "Object",
        "members": {
          "member": {
            "stream": {
              "name": "stream",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "RTCRtpCodecCapability": {
        "name": "RTCRtpCodecCapability",
        "extends": "Object",
        "members": {
          "member": {
            "mimeType": {
              "name": "mimeType",
              "required": 1,
              "type": "DOMString"
            },
            "clockRate": {
              "name": "clockRate",
              "required": 1,
              "type": "unsigned long"
            },
            "channels": {
              "name": "channels",
              "type": "unsigned short"
            },
            "sdpFmtpLine": {
              "name": "sdpFmtpLine",
              "type": "DOMString"
            }
          }
        }
      },
      "ServiceWorkerMessageEventInit": {
        "members": {
          "member": {
            "source": {
              "specs": "service-workers",
              "name": "source",
              "type": [
                {
                  "nullable": 1,
                  "type": "ServiceWorker"
                },
                {
                  "nullable": 1,
                  "type": "MessagePort"
                }
              ],
              "type-original": "(ServiceWorker or MessagePort)?"
            },
            "ports": {
              "subtype": {
                "type": "MessagePort"
              },
              "nullable": 1,
              "specs": "service-workers",
              "name": "ports",
              "type": "sequence",
              "type-original": "sequence<MessagePort>?"
            },
            "lastEventId": {
              "specs": "service-workers",
              "name": "lastEventId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "origin": {
              "specs": "service-workers",
              "name": "origin",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "data": {
              "specs": "service-workers",
              "name": "data",
              "type": "any",
              "type-original": "any"
            }
          }
        },
        "specs": "service-workers",
        "name": "ServiceWorkerMessageEventInit",
        "extends": "EventInit"
      },
      "RTCIceCandidateAttributes": {
        "members": {
          "member": {
            "priority": {
              "specs": "ortc",
              "name": "priority",
              "type": "long",
              "type-original": "long"
            },
            "transport": {
              "specs": "ortc",
              "name": "transport",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "addressSourceUrl": {
              "specs": "ortc",
              "name": "addressSourceUrl",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "portNumber": {
              "specs": "ortc",
              "name": "portNumber",
              "type": "long",
              "type-original": "long"
            },
            "ipAddress": {
              "specs": "ortc",
              "name": "ipAddress",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "candidateType": {
              "specs": "ortc",
              "name": "candidateType",
              "type": "RTCStatsIceCandidateType",
              "type-original": "RTCStatsIceCandidateType"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCIceCandidateAttributes",
        "extends": "RTCStats"
      },
      "AudioNodeOptions": {
        "name": "AudioNodeOptions",
        "extends": "Object",
        "members": {
          "member": {
            "channelCount": {
              "name": "channelCount",
              "type": "unsigned long"
            },
            "channelCountMode": {
              "name": "channelCountMode",
              "type": "ChannelCountMode"
            },
            "channelInterpretation": {
              "name": "channelInterpretation",
              "type": "ChannelInterpretation"
            }
          }
        }
      },
      "PeriodicWaveOptions": {
        "name": "PeriodicWaveOptions",
        "extends": "PeriodicWaveConstraints",
        "members": {
          "member": {
            "real": {
              "name": "real",
              "type": "sequence",
              "subtype": {
                "type": "float"
              }
            },
            "imag": {
              "name": "imag",
              "type": "sequence",
              "subtype": {
                "type": "float"
              }
            }
          }
        }
      },
      "MSCredentialFilter": {
        "members": {
          "member": {
            "accept": {
              "subtype": {
                "type": "MSCredentialSpec"
              },
              "specs": "webauthn",
              "name": "accept",
              "type": "sequence",
              "type-original": "sequence<MSCredentialSpec>"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSCredentialFilter",
        "extends": "Object"
      },
      "RTCIceGatherOptions": {
        "members": {
          "member": {
            "iceservers": {
              "subtype": {
                "type": "RTCIceServer"
              },
              "specs": "ortc",
              "name": "iceservers",
              "type": "sequence",
              "type-original": "sequence<RTCIceServer>"
            },
            "gatherPolicy": {
              "specs": "ortc",
              "name": "gatherPolicy",
              "type": "RTCIceGatherPolicy",
              "type-original": "RTCIceGatherPolicy"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCIceGatherOptions",
        "extends": "Object"
      },
      "MSDescription": {
        "members": {
          "member": {
            "networkconnectivity": {
              "specs": "webrtc-stats",
              "name": "networkconnectivity",
              "type": "MSNetworkConnectivityInfo",
              "type-original": "MSNetworkConnectivityInfo"
            },
            "transport": {
              "specs": "webrtc-stats",
              "name": "transport",
              "type": "RTCIceProtocol",
              "type-original": "RTCIceProtocol"
            },
            "reflexiveLocalIPAddr": {
              "specs": "webrtc-stats",
              "name": "reflexiveLocalIPAddr",
              "type": "MSIPAddressInfo",
              "type-original": "MSIPAddressInfo"
            },
            "connectivity": {
              "specs": "webrtc-stats",
              "name": "connectivity",
              "type": "MSConnectivity",
              "type-original": "MSConnectivity"
            },
            "deviceDevName": {
              "specs": "webrtc-stats",
              "name": "deviceDevName",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "localAddr": {
              "specs": "webrtc-stats",
              "name": "localAddr",
              "type": "MSIPAddressInfo",
              "type-original": "MSIPAddressInfo"
            },
            "remoteAddr": {
              "specs": "webrtc-stats",
              "name": "remoteAddr",
              "type": "MSIPAddressInfo",
              "type-original": "MSIPAddressInfo"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSDescription",
        "extends": "RTCStats"
      },
      "RTCIceCandidateDictionary": {
        "members": {
          "member": {
            "protocol": {
              "specs": "ortc",
              "name": "protocol",
              "type": "RTCIceProtocol",
              "type-original": "RTCIceProtocol"
            },
            "priority": {
              "specs": "ortc",
              "name": "priority",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "tcpType": {
              "specs": "ortc",
              "name": "tcpType",
              "type": "RTCIceTcpCandidateType",
              "type-original": "RTCIceTcpCandidateType"
            },
            "ip": {
              "specs": "ortc",
              "name": "ip",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "port": {
              "specs": "ortc",
              "name": "port",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "msMTurnSessionId": {
              "specs": "ortc",
              "name": "msMTurnSessionId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "foundation": {
              "specs": "ortc",
              "name": "foundation",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "relatedPort": {
              "specs": "ortc",
              "name": "relatedPort",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "type": {
              "specs": "ortc",
              "name": "type",
              "type": "RTCIceCandidateType",
              "type-original": "RTCIceCandidateType"
            },
            "relatedAddress": {
              "specs": "ortc",
              "name": "relatedAddress",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCIceCandidateDictionary",
        "extends": "Object"
      },
      "OfflineAudioCompletionEventInit": {
        "name": "OfflineAudioCompletionEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "renderedBuffer": {
              "name": "renderedBuffer",
              "required": 1,
              "type": "AudioBuffer"
            }
          }
        }
      },
      "MSPortRange": {
        "members": {
          "member": {
            "min": {
              "specs": "ortc",
              "name": "min",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "max": {
              "specs": "ortc",
              "name": "max",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "specs": "ortc",
        "name": "MSPortRange",
        "extends": "Object"
      },
      "RTCRtpContributingSource": {
        "name": "RTCRtpContributingSource",
        "extends": "Object",
        "members": {
          "member": {
            "timestamp": {
              "name": "timestamp",
              "required": 1,
              "type": "DOMHighResTimeStamp"
            },
            "source": {
              "name": "source",
              "required": 1,
              "type": "unsigned long"
            },
            "audioLevel": {
              "name": "audioLevel",
              "type": "double"
            }
          }
        }
      },
      "AudioBufferOptions": {
        "name": "AudioBufferOptions",
        "extends": "Object",
        "members": {
          "member": {
            "numberOfChannels": {
              "name": "numberOfChannels",
              "default": "1",
              "type": "unsigned long"
            },
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned long"
            },
            "sampleRate": {
              "name": "sampleRate",
              "required": 1,
              "type": "float"
            }
          }
        }
      },
      "MSAccountInfo": {
        "members": {
          "member": {
            "userId": {
              "specs": "webauthn",
              "name": "userId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "userDisplayName": {
              "required": 1,
              "specs": "webauthn",
              "name": "userDisplayName",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "rpDisplayName": {
              "required": 1,
              "specs": "webauthn",
              "name": "rpDisplayName",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "accountImageUri": {
              "specs": "webauthn",
              "name": "accountImageUri",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "accountName": {
              "specs": "webauthn",
              "name": "accountName",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSAccountInfo",
        "extends": "Object"
      },
      "ExtendableEventInit": {
        "name": "ExtendableEventInit",
        "extends": "EventInit",
        "members": {
          "member": {}
        }
      },
      "RTCStatsReport": {
        "members": {
          "member": {}
        },
        "specs": "ortc",
        "name": "RTCStatsReport",
        "extends": "Object"
      },
      "PaymentShippingOption": {
        "members": {
          "member": {
            "amount": {
              "required": 1,
              "specs": "payment-request",
              "name": "amount",
              "type": "PaymentCurrencyAmount",
              "type-original": "PaymentCurrencyAmount"
            },
            "label": {
              "required": 1,
              "specs": "payment-request",
              "name": "label",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "id": {
              "required": 1,
              "specs": "payment-request",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "selected": {
              "specs": "payment-request",
              "name": "selected",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentShippingOption",
        "extends": "Object"
      },
      "AudioContextOptions": {
        "name": "AudioContextOptions",
        "extends": "Object",
        "members": {
          "member": {
            "latencyHint": {
              "name": "latencyHint",
              "default": "\"interactive\"",
              "type": [
                {
                  "type": "AudioContextLatencyCategory"
                },
                {
                  "type": "double"
                }
              ]
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "float"
            }
          }
        }
      },
      "RTCIceCandidatePair": {
        "name": "RTCIceCandidatePair",
        "extends": "Object",
        "members": {
          "member": {
            "local": {
              "name": "local",
              "type": "RTCIceCandidate"
            },
            "remote": {
              "name": "remote",
              "type": "RTCIceCandidate"
            }
          }
        }
      },
      "AesCbcParams": {
        "name": "AesCbcParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "iv": {
              "name": "iv",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            }
          }
        }
      },
      "MediaTrackCapabilities": {
        "name": "MediaTrackCapabilities",
        "extends": "Object",
        "members": {
          "member": {
            "width": {
              "name": "width",
              "type": "ULongRange"
            },
            "height": {
              "name": "height",
              "type": "ULongRange"
            },
            "aspectRatio": {
              "name": "aspectRatio",
              "type": "DoubleRange"
            },
            "frameRate": {
              "name": "frameRate",
              "type": "DoubleRange"
            },
            "facingMode": {
              "name": "facingMode",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            },
            "resizeMode": {
              "name": "resizeMode",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "ULongRange"
            },
            "sampleSize": {
              "name": "sampleSize",
              "type": "ULongRange"
            },
            "echoCancellation": {
              "name": "echoCancellation",
              "type": "sequence",
              "subtype": {
                "type": "boolean"
              }
            },
            "autoGainControl": {
              "name": "autoGainControl",
              "type": "sequence",
              "subtype": {
                "type": "boolean"
              }
            },
            "noiseSuppression": {
              "name": "noiseSuppression",
              "type": "sequence",
              "subtype": {
                "type": "boolean"
              }
            },
            "latency": {
              "name": "latency",
              "type": "DoubleRange"
            },
            "channelCount": {
              "name": "channelCount",
              "type": "ULongRange"
            },
            "deviceId": {
              "name": "deviceId",
              "type": "DOMString"
            },
            "groupId": {
              "name": "groupId",
              "type": "DOMString"
            }
          }
        }
      },
      "MSConnectivity": {
        "members": {
          "member": {
            "iceWarningFlags": {
              "specs": "webrtc-stats",
              "name": "iceWarningFlags",
              "type": "MSIceWarningFlags",
              "type-original": "MSIceWarningFlags"
            },
            "iceType": {
              "specs": "webrtc-stats",
              "name": "iceType",
              "type": "MSIceType",
              "type-original": "MSIceType"
            },
            "relayAddress": {
              "specs": "webrtc-stats",
              "name": "relayAddress",
              "type": "MSRelayAddress",
              "type-original": "MSRelayAddress"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSConnectivity",
        "extends": "Object"
      },
      "MediaKeySystemMediaCapability": {
        "name": "MediaKeySystemMediaCapability",
        "extends": "Object",
        "members": {
          "member": {
            "contentType": {
              "name": "contentType",
              "default": "\"\"",
              "type": "DOMString"
            },
            "robustness": {
              "name": "robustness",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "RTCRtpHeaderExtension": {
        "members": {
          "member": {
            "preferredEncrypt": {
              "specs": "ortc",
              "name": "preferredEncrypt",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "kind": {
              "specs": "ortc",
              "name": "kind",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "preferredId": {
              "specs": "ortc",
              "name": "preferredId",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "uri": {
              "specs": "ortc",
              "name": "uri",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRtpHeaderExtension",
        "extends": "Object"
      },
      "IDBObjectStoreParameters": {
        "name": "IDBObjectStoreParameters",
        "extends": "Object",
        "members": {
          "member": {
            "keyPath": {
              "name": "keyPath",
              "default": "null",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  }
                }
              ],
              "nullable": 1
            },
            "autoIncrement": {
              "name": "autoIncrement",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "TransitionEventInit": {
        "name": "TransitionEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "propertyName": {
              "name": "propertyName",
              "default": "\"\"",
              "type": "CSSOMString"
            },
            "elapsedTime": {
              "name": "elapsedTime",
              "default": "0.0",
              "type": "double"
            },
            "pseudoElement": {
              "name": "pseudoElement",
              "default": "\"\"",
              "type": "CSSOMString"
            }
          }
        }
      },
      "RTCRtcpFeedback": {
        "members": {
          "member": {
            "parameter": {
              "specs": "ortc",
              "name": "parameter",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "type": {
              "specs": "ortc",
              "name": "type",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCRtcpFeedback",
        "extends": "Object"
      },
      "MSIceWarningFlags": {
        "members": {
          "member": {
            "pseudoTLSFailure": {
              "specs": "webrtc-stats",
              "name": "pseudoTLSFailure",
              "type": "boolean",
              "type-original": "boolean"
            },
            "udpRelayConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "udpRelayConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnUdpSendFailed": {
              "specs": "webrtc-stats",
              "name": "turnUdpSendFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnTurnTcpConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "turnTurnTcpConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "connCheckOtherError": {
              "specs": "webrtc-stats",
              "name": "connCheckOtherError",
              "type": "boolean",
              "type-original": "boolean"
            },
            "udpLocalConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "udpLocalConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "tcpRelayConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "tcpRelayConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnTcpTimedOut": {
              "specs": "webrtc-stats",
              "name": "turnTcpTimedOut",
              "type": "boolean",
              "type-original": "boolean"
            },
            "udpNatConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "udpNatConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "multipleRelayServersAttempted": {
              "specs": "webrtc-stats",
              "name": "multipleRelayServersAttempted",
              "type": "boolean",
              "type-original": "boolean"
            },
            "useCandidateChecksFailed": {
              "specs": "webrtc-stats",
              "name": "useCandidateChecksFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnAuthUnknownUsernameError": {
              "specs": "webrtc-stats",
              "name": "turnAuthUnknownUsernameError",
              "type": "boolean",
              "type-original": "boolean"
            },
            "allocationMessageIntegrityFailed": {
              "specs": "webrtc-stats",
              "name": "allocationMessageIntegrityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnTcpAllocateFailed": {
              "specs": "webrtc-stats",
              "name": "turnTcpAllocateFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "fipsAllocationFailure": {
              "specs": "webrtc-stats",
              "name": "fipsAllocationFailure",
              "type": "boolean",
              "type-original": "boolean"
            },
            "portRangeExhausted": {
              "specs": "webrtc-stats",
              "name": "portRangeExhausted",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnTcpSendFailed": {
              "specs": "webrtc-stats",
              "name": "turnTcpSendFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "noRelayServersConfigured": {
              "specs": "webrtc-stats",
              "name": "noRelayServersConfigured",
              "type": "boolean",
              "type-original": "boolean"
            },
            "alternateServerReceived": {
              "specs": "webrtc-stats",
              "name": "alternateServerReceived",
              "type": "boolean",
              "type-original": "boolean"
            },
            "tcpNatConnectivityFailed": {
              "specs": "webrtc-stats",
              "name": "tcpNatConnectivityFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "turnUdpAllocateFailed": {
              "specs": "webrtc-stats",
              "name": "turnUdpAllocateFailed",
              "type": "boolean",
              "type-original": "boolean"
            },
            "connCheckMessageIntegrityFailed": {
              "specs": "webrtc-stats",
              "name": "connCheckMessageIntegrityFailed",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSIceWarningFlags",
        "extends": "Object"
      },
      "RsaOaepParams": {
        "name": "RsaOaepParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "label": {
              "name": "label",
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            }
          }
        }
      },
      "EventModifierInit": {
        "name": "EventModifierInit",
        "extends": "UIEventInit",
        "members": {
          "member": {
            "ctrlKey": {
              "name": "ctrlKey",
              "default": "false",
              "type": "boolean"
            },
            "shiftKey": {
              "name": "shiftKey",
              "default": "false",
              "type": "boolean"
            },
            "altKey": {
              "name": "altKey",
              "default": "false",
              "type": "boolean"
            },
            "metaKey": {
              "name": "metaKey",
              "default": "false",
              "type": "boolean"
            },
            "modifierAltGraph": {
              "name": "modifierAltGraph",
              "default": "false",
              "type": "boolean"
            },
            "modifierCapsLock": {
              "name": "modifierCapsLock",
              "default": "false",
              "type": "boolean"
            },
            "modifierFn": {
              "name": "modifierFn",
              "default": "false",
              "type": "boolean"
            },
            "modifierFnLock": {
              "name": "modifierFnLock",
              "default": "false",
              "type": "boolean"
            },
            "modifierHyper": {
              "name": "modifierHyper",
              "default": "false",
              "type": "boolean"
            },
            "modifierNumLock": {
              "name": "modifierNumLock",
              "default": "false",
              "type": "boolean"
            },
            "modifierScrollLock": {
              "name": "modifierScrollLock",
              "default": "false",
              "type": "boolean"
            },
            "modifierSuper": {
              "name": "modifierSuper",
              "default": "false",
              "type": "boolean"
            },
            "modifierSymbol": {
              "name": "modifierSymbol",
              "default": "false",
              "type": "boolean"
            },
            "modifierSymbolLock": {
              "name": "modifierSymbolLock",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "BiquadFilterOptions": {
        "name": "BiquadFilterOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "default": "\"lowpass\"",
              "type": "BiquadFilterType"
            },
            "Q": {
              "name": "Q",
              "default": "1",
              "type": "float"
            },
            "detune": {
              "name": "detune",
              "default": "0",
              "type": "float"
            },
            "frequency": {
              "name": "frequency",
              "default": "350",
              "type": "float"
            },
            "gain": {
              "name": "gain",
              "default": "0",
              "type": "float"
            }
          }
        }
      },
      "MsZoomToOptions": {
        "members": {
          "member": {
            "viewportY": {
              "nullable": 1,
              "specs": "none",
              "name": "viewportY",
              "type": "DOMString",
              "type-original": "DOMString?"
            },
            "contentX": {
              "specs": "none",
              "name": "contentX",
              "type": "long",
              "type-original": "long"
            },
            "animate": {
              "specs": "none",
              "name": "animate",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "scaleFactor": {
              "specs": "none",
              "name": "scaleFactor",
              "type": "float",
              "type-original": "float"
            },
            "viewportX": {
              "nullable": 1,
              "specs": "none",
              "name": "viewportX",
              "type": "DOMString",
              "type-original": "DOMString?"
            },
            "contentY": {
              "specs": "none",
              "name": "contentY",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "none",
        "name": "MsZoomToOptions",
        "extends": "Object"
      },
      "MSVideoPayload": {
        "members": {
          "member": {
            "videoPacketLossRate": {
              "specs": "webrtc-stats",
              "name": "videoPacketLossRate",
              "type": "float",
              "type-original": "float"
            },
            "videoBitRateAvg": {
              "specs": "webrtc-stats",
              "name": "videoBitRateAvg",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "resolution": {
              "specs": "webrtc-stats",
              "name": "resolution",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "videoBitRateMax": {
              "specs": "webrtc-stats",
              "name": "videoBitRateMax",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "videoFrameRateAvg": {
              "specs": "webrtc-stats",
              "name": "videoFrameRateAvg",
              "type": "float",
              "type-original": "float"
            },
            "durationSeconds": {
              "specs": "webrtc-stats",
              "name": "durationSeconds",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSVideoPayload",
        "extends": "MSPayloadBase"
      },
      "FocusNavigationOrigin": {
        "members": {
          "member": {
            "originHeight": {
              "specs": "none",
              "name": "originHeight",
              "type": "float",
              "type-original": "float"
            },
            "originTop": {
              "specs": "none",
              "name": "originTop",
              "type": "float",
              "type-original": "float"
            },
            "originLeft": {
              "specs": "none",
              "name": "originLeft",
              "type": "float",
              "type-original": "float"
            },
            "originWidth": {
              "specs": "none",
              "name": "originWidth",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "none",
        "name": "FocusNavigationOrigin",
        "extends": "Object"
      },
      "MediaStreamTrackEventInit": {
        "name": "MediaStreamTrackEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "track": {
              "name": "track",
              "required": 1,
              "type": "MediaStreamTrack"
            }
          }
        }
      },
      "WebGLContextEventInit": {
        "name": "WebGLContextEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "statusMessage": {
              "name": "statusMessage",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "RTCRtcpParameters": {
        "name": "RTCRtcpParameters",
        "extends": "Object",
        "members": {
          "member": {
            "cname": {
              "name": "cname",
              "type": "DOMString"
            },
            "reducedSize": {
              "name": "reducedSize",
              "type": "boolean"
            }
          }
        }
      },
      "DynamicsCompressorOptions": {
        "name": "DynamicsCompressorOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "attack": {
              "name": "attack",
              "default": "0.003",
              "type": "float"
            },
            "knee": {
              "name": "knee",
              "default": "30",
              "type": "float"
            },
            "ratio": {
              "name": "ratio",
              "default": "12",
              "type": "float"
            },
            "release": {
              "name": "release",
              "default": "0.25",
              "type": "float"
            },
            "threshold": {
              "name": "threshold",
              "default": "-24",
              "type": "float"
            }
          }
        }
      },
      "RequestInit": {
        "name": "RequestInit",
        "extends": "Object",
        "members": {
          "member": {
            "method": {
              "name": "method",
              "type": "ByteString",
              "comment": "/**\n * A string to set request's method.\n */"
            },
            "headers": {
              "name": "headers",
              "required": 0,
              "type": "HeadersInit",
              "comment": "/**\n * A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n */",
              "override-type": "HeadersInit"
            },
            "body": {
              "name": "body",
              "type": "BodyInit",
              "nullable": 1,
              "comment": "/**\n * A BodyInit object or null to set request's body.\n */"
            },
            "referrer": {
              "name": "referrer",
              "type": "USVString",
              "comment": "/**\n * A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.\n */"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "ReferrerPolicy",
              "comment": "/**\n * A referrer policy to set request's referrerPolicy.\n */"
            },
            "mode": {
              "name": "mode",
              "type": "RequestMode",
              "comment": "/**\n * A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n */"
            },
            "credentials": {
              "name": "credentials",
              "type": "RequestCredentials",
              "comment": "/**\n * A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\n */"
            },
            "cache": {
              "name": "cache",
              "type": "RequestCache",
              "comment": "/**\n * A string indicating how the request will interact with the browser's cache to set request's cache.\n */"
            },
            "redirect": {
              "name": "redirect",
              "type": "RequestRedirect",
              "comment": "/**\n * A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n */"
            },
            "integrity": {
              "name": "integrity",
              "type": "DOMString",
              "comment": "/**\n * A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\n */"
            },
            "keepalive": {
              "name": "keepalive",
              "type": "boolean",
              "comment": "/**\n * A boolean to set request's keepalive.\n */"
            },
            "signal": {
              "name": "signal",
              "type": "AbortSignal",
              "nullable": 1,
              "comment": "/**\n * An AbortSignal to set request's signal.\n */"
            },
            "window": {
              "name": "window",
              "type": "any",
              "comment": "/**\n * Can only be null. Used to disassociate request from any Window.\n */"
            }
          }
        }
      },
      "RTCTransportStats": {
        "members": {
          "member": {
            "remoteCertificateId": {
              "specs": "ortc",
              "name": "remoteCertificateId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "selectedCandidatePairId": {
              "specs": "ortc",
              "name": "selectedCandidatePairId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "rtcpTransportStatsId": {
              "specs": "ortc",
              "name": "rtcpTransportStatsId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "activeConnection": {
              "specs": "ortc",
              "name": "activeConnection",
              "type": "boolean",
              "type-original": "boolean"
            },
            "bytesSent": {
              "specs": "ortc",
              "name": "bytesSent",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            },
            "localCertificateId": {
              "specs": "ortc",
              "name": "localCertificateId",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "bytesReceived": {
              "specs": "ortc",
              "name": "bytesReceived",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCTransportStats",
        "extends": "RTCStats"
      },
      "Pbkdf2Params": {
        "name": "Pbkdf2Params",
        "extends": "Algorithm",
        "members": {
          "member": {
            "salt": {
              "name": "salt",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "iterations": {
              "name": "iterations",
              "required": 1,
              "type": "unsigned long"
            },
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            }
          }
        }
      },
      "RTCInboundRTPStreamStats": {
        "members": {
          "member": {
            "packetsLost": {
              "specs": "ortc",
              "name": "packetsLost",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "packetsReceived": {
              "specs": "ortc",
              "name": "packetsReceived",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "fractionLost": {
              "specs": "ortc",
              "name": "fractionLost",
              "type": "double",
              "type-original": "double"
            },
            "jitter": {
              "specs": "ortc",
              "name": "jitter",
              "type": "double",
              "type-original": "double"
            },
            "bytesReceived": {
              "specs": "ortc",
              "name": "bytesReceived",
              "type": "unsigned long long",
              "type-original": "unsigned long long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCInboundRTPStreamStats",
        "extends": "RTCRTPStreamStats"
      },
      "PointerEventInit": {
        "name": "PointerEventInit",
        "extends": "MouseEventInit",
        "members": {
          "member": {
            "pointerId": {
              "name": "pointerId",
              "default": "0",
              "type": "long"
            },
            "width": {
              "name": "width",
              "default": "1",
              "type": "double"
            },
            "height": {
              "name": "height",
              "default": "1",
              "type": "double"
            },
            "pressure": {
              "name": "pressure",
              "default": "0",
              "type": "float"
            },
            "tangentialPressure": {
              "name": "tangentialPressure",
              "default": "0",
              "type": "float"
            },
            "tiltX": {
              "name": "tiltX",
              "default": "0",
              "type": "long"
            },
            "tiltY": {
              "name": "tiltY",
              "default": "0",
              "type": "long"
            },
            "twist": {
              "name": "twist",
              "default": "0",
              "type": "long"
            },
            "pointerType": {
              "name": "pointerType",
              "default": "\"\"",
              "type": "DOMString"
            },
            "isPrimary": {
              "name": "isPrimary",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "MutationObserverInit": {
        "name": "MutationObserverInit",
        "extends": "Object",
        "members": {
          "member": {
            "childList": {
              "name": "childList",
              "default": "false",
              "type": "boolean",
              "comment": "/**\n * Set to true if mutations to target's children are to be observed.\n */"
            },
            "attributes": {
              "name": "attributes",
              "type": "boolean",
              "comment": "/**\n * Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.\n */"
            },
            "characterData": {
              "name": "characterData",
              "type": "boolean",
              "comment": "/**\n * Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.\n */"
            },
            "subtree": {
              "name": "subtree",
              "default": "false",
              "type": "boolean",
              "comment": "/**\n * Set to true if mutations to not just target, but also target's descendants are to be observed.\n */"
            },
            "attributeOldValue": {
              "name": "attributeOldValue",
              "type": "boolean",
              "comment": "/**\n * Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.\n */"
            },
            "characterDataOldValue": {
              "name": "characterDataOldValue",
              "type": "boolean",
              "comment": "/**\n * Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.\n */"
            },
            "attributeFilter": {
              "name": "attributeFilter",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              },
              "comment": "/**\n * Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.\n */"
            }
          }
        }
      },
      "ConstrainLongRange": {
        "members": {
          "member": {
            "exact": {
              "specs": "media-capture-api",
              "name": "exact",
              "type": "long",
              "type-original": "long"
            },
            "ideal": {
              "specs": "media-capture-api",
              "name": "ideal",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "media-capture-api",
        "name": "ConstrainLongRange",
        "extends": "LongRange"
      },
      "RTCRtpParameters": {
        "name": "RTCRtpParameters",
        "extends": "Object",
        "members": {
          "member": {
            "headerExtensions": {
              "name": "headerExtensions",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpHeaderExtensionParameters"
              }
            },
            "rtcp": {
              "name": "rtcp",
              "required": 1,
              "type": "RTCRtcpParameters"
            },
            "codecs": {
              "name": "codecs",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpCodecParameters"
              }
            }
          }
        }
      },
      "MSAudioSendSignal": {
        "members": {
          "member": {
            "sendSignalLevelCh1": {
              "specs": "webrtc-stats",
              "name": "sendSignalLevelCh1",
              "type": "long",
              "type-original": "long"
            },
            "noiseLevel": {
              "specs": "webrtc-stats",
              "name": "noiseLevel",
              "type": "long",
              "type-original": "long"
            },
            "sendNoiseLevelCh1": {
              "specs": "webrtc-stats",
              "name": "sendNoiseLevelCh1",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSAudioSendSignal",
        "extends": "Object"
      },
      "RTCRtpCapabilities": {
        "name": "RTCRtpCapabilities",
        "extends": "Object",
        "members": {
          "member": {
            "codecs": {
              "name": "codecs",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpCodecCapability"
              }
            },
            "headerExtensions": {
              "name": "headerExtensions",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpHeaderExtensionCapability"
              }
            }
          }
        }
      },
      "RsaHashedKeyGenParams": {
        "name": "RsaHashedKeyGenParams",
        "extends": "RsaKeyGenParams",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            }
          }
        }
      },
      "MSAudioLocalClientEvent": {
        "members": {
          "member": {
            "deviceHowlingEventCount": {
              "specs": "webrtc-stats",
              "name": "deviceHowlingEventCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "deviceMultipleEndpointsEventCount": {
              "specs": "webrtc-stats",
              "name": "deviceMultipleEndpointsEventCount",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "deviceClippingEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceClippingEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceHalfDuplexAECEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceHalfDuplexAECEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "cpuInsufficientEventRatio": {
              "specs": "webrtc-stats",
              "name": "cpuInsufficientEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceGlitchesEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceGlitchesEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceNearEndToEchoRatioEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceNearEndToEchoRatioEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceRenderMuteEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceRenderMuteEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceRenderNotFunctioningEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceRenderNotFunctioningEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceRenderZeroVolumeEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceRenderZeroVolumeEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceEchoEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceEchoEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "networkSendQualityEventRatio": {
              "specs": "webrtc-stats",
              "name": "networkSendQualityEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceLowSpeechLevelEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceLowSpeechLevelEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "networkDelayEventRatio": {
              "specs": "webrtc-stats",
              "name": "networkDelayEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceCaptureNotFunctioningEventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceCaptureNotFunctioningEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "deviceLowSNREventRatio": {
              "specs": "webrtc-stats",
              "name": "deviceLowSNREventRatio",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSAudioLocalClientEvent",
        "extends": "MSLocalClientEventBase"
      },
      "AesCtrParams": {
        "name": "AesCtrParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "counter": {
              "name": "counter",
              "required": 1,
              "type": "BufferSource",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "length": {
              "name": "length",
              "required": 1,
              "type": "octet"
            }
          }
        }
      },
      "RTCOfferOptions": {
        "name": "RTCOfferOptions",
        "extends": "RTCOfferAnswerOptions",
        "members": {
          "member": {
            "iceRestart": {
              "name": "iceRestart",
              "default": "false",
              "type": "boolean"
            },
            "offerToReceiveAudio": {
              "name": "offerToReceiveAudio",
              "type": "boolean"
            },
            "offerToReceiveVideo": {
              "name": "offerToReceiveVideo",
              "type": "boolean"
            }
          }
        }
      },
      "RTCIceParameters": {
        "name": "RTCIceParameters",
        "extends": "Object",
        "members": {
          "member": {
            "usernameFragment": {
              "name": "usernameFragment",
              "type": "DOMString"
            },
            "password": {
              "name": "password",
              "type": "DOMString"
            }
          }
        }
      },
      "RsaHashedImportParams": {
        "name": "RsaHashedImportParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "hash": {
              "name": "hash",
              "required": 1,
              "type": "HashAlgorithmIdentifier"
            }
          }
        }
      },
      "ByteLengthChunk": {
        "members": {
          "member": {
            "byteLength": {
              "specs": "whatwg-streams",
              "name": "byteLength",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "whatwg-streams",
        "name": "ByteLengthChunk",
        "extends": "Object"
      },
      "ConstrainBooleanParameters": {
        "name": "ConstrainBooleanParameters",
        "extends": "Object",
        "members": {
          "member": {
            "exact": {
              "name": "exact",
              "type": "boolean"
            },
            "ideal": {
              "name": "ideal",
              "type": "boolean"
            }
          }
        }
      },
      "UnderlyingSink": {
        "name": "UnderlyingSink",
        "extends": "Object",
        "members": {
          "member": {
            "start": {
              "name": "start",
              "type": "WritableStreamDefaultControllerStartCallback",
              "nullable": 0
            },
            "write": {
              "name": "write",
              "type": "WritableStreamDefaultControllerWriteCallback",
              "nullable": 0,
              "override-type": "WritableStreamDefaultControllerWriteCallback<W>"
            },
            "close": {
              "name": "close",
              "type": "WritableStreamDefaultControllerCloseCallback",
              "nullable": 0
            },
            "abort": {
              "name": "abort",
              "type": "WritableStreamErrorCallback",
              "nullable": 0
            },
            "type": {
              "name": "type",
              "type": "any",
              "override-type": "undefined"
            }
          }
        },
        "type-parameters": [
          {
            "name": "W",
            "default": "any"
          }
        ]
      },
      "PaymentOptions": {
        "members": {
          "member": {
            "shippingType": {
              "specs": "payment-request",
              "name": "shippingType",
              "default": "\"shipping\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "requestPayerEmail": {
              "specs": "payment-request",
              "name": "requestPayerEmail",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "requestShipping": {
              "specs": "payment-request",
              "name": "requestShipping",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "requestPayerPhone": {
              "specs": "payment-request",
              "name": "requestPayerPhone",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            },
            "requestPayerName": {
              "specs": "payment-request",
              "name": "requestPayerName",
              "default": "false",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentOptions",
        "extends": "Object"
      },
      "MediaKeyMessageEventInit": {
        "name": "MediaKeyMessageEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "messageType": {
              "name": "messageType",
              "required": 1,
              "type": "MediaKeyMessageType"
            },
            "message": {
              "name": "message",
              "required": 1,
              "type": "ArrayBuffer"
            }
          }
        }
      },
      "MediaTrackSettings": {
        "name": "MediaTrackSettings",
        "extends": "Object",
        "members": {
          "member": {
            "width": {
              "name": "width",
              "type": "long"
            },
            "height": {
              "name": "height",
              "type": "long"
            },
            "aspectRatio": {
              "name": "aspectRatio",
              "type": "double"
            },
            "frameRate": {
              "name": "frameRate",
              "type": "double"
            },
            "facingMode": {
              "name": "facingMode",
              "type": "DOMString"
            },
            "resizeMode": {
              "name": "resizeMode",
              "type": "DOMString"
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "long"
            },
            "sampleSize": {
              "name": "sampleSize",
              "type": "long"
            },
            "echoCancellation": {
              "name": "echoCancellation",
              "type": "boolean"
            },
            "autoGainControl": {
              "name": "autoGainControl",
              "type": "boolean"
            },
            "noiseSuppression": {
              "name": "noiseSuppression",
              "type": "boolean"
            },
            "latency": {
              "name": "latency",
              "type": "double"
            },
            "channelCount": {
              "name": "channelCount",
              "type": "long"
            },
            "deviceId": {
              "name": "deviceId",
              "type": "DOMString"
            },
            "groupId": {
              "name": "groupId",
              "type": "DOMString"
            }
          }
        }
      },
      "MessageEventInit": {
        "name": "MessageEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "data": {
              "name": "data",
              "default": "null",
              "type": "any"
            },
            "origin": {
              "name": "origin",
              "default": "\"\"",
              "type": "USVString"
            },
            "lastEventId": {
              "name": "lastEventId",
              "default": "\"\"",
              "type": "DOMString"
            },
            "source": {
              "name": "source",
              "default": "null",
              "type": "MessageEventSource",
              "nullable": 1
            },
            "ports": {
              "name": "ports",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MessagePort"
              }
            }
          }
        }
      },
      "RTCRtpEncodingParameters": {
        "name": "RTCRtpEncodingParameters",
        "extends": "RTCRtpCodingParameters",
        "members": {
          "member": {
            "codecPayloadType": {
              "name": "codecPayloadType",
              "type": "octet"
            },
            "dtx": {
              "name": "dtx",
              "type": "RTCDtxStatus"
            },
            "active": {
              "name": "active",
              "default": "true",
              "type": "boolean"
            },
            "priority": {
              "name": "priority",
              "default": "\"low\"",
              "type": "RTCPriorityType"
            },
            "ptime": {
              "name": "ptime",
              "type": "unsigned long"
            },
            "maxBitrate": {
              "name": "maxBitrate",
              "type": "unsigned long"
            },
            "maxFramerate": {
              "name": "maxFramerate",
              "type": "double"
            },
            "scaleResolutionDownBy": {
              "name": "scaleResolutionDownBy",
              "type": "double"
            }
          }
        }
      },
      "MSVideoRecvPayload": {
        "members": {
          "member": {
            "recvCodecType": {
              "specs": "webrtc-stats",
              "name": "recvCodecType",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "recvVideoStreamsMin": {
              "specs": "webrtc-stats",
              "name": "recvVideoStreamsMin",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvVideoStreamsMax": {
              "specs": "webrtc-stats",
              "name": "recvVideoStreamsMax",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvVideoStreamsMode": {
              "specs": "webrtc-stats",
              "name": "recvVideoStreamsMode",
              "type": "long",
              "type-original": "long"
            },
            "recvResolutionHeight": {
              "specs": "webrtc-stats",
              "name": "recvResolutionHeight",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "videoResolutions": {
              "specs": "webrtc-stats",
              "name": "videoResolutions",
              "type": "MSVideoResolutionDistribution",
              "type-original": "MSVideoResolutionDistribution"
            },
            "reorderBufferTotalPackets": {
              "specs": "webrtc-stats",
              "name": "reorderBufferTotalPackets",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvBitRateAverage": {
              "specs": "webrtc-stats",
              "name": "recvBitRateAverage",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvNumResSwitches": {
              "specs": "webrtc-stats",
              "name": "recvNumResSwitches",
              "type": "float",
              "type-original": "float"
            },
            "recvReorderBufferReorderedPackets": {
              "specs": "webrtc-stats",
              "name": "recvReorderBufferReorderedPackets",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "videoPostFECPLR": {
              "specs": "webrtc-stats",
              "name": "videoPostFECPLR",
              "type": "float",
              "type-original": "float"
            },
            "recvFpsHarmonicAverage": {
              "specs": "webrtc-stats",
              "name": "recvFpsHarmonicAverage",
              "type": "float",
              "type-original": "float"
            },
            "recvReorderBufferMaxSuccessfullyOrderedLateTime": {
              "specs": "webrtc-stats",
              "name": "recvReorderBufferMaxSuccessfullyOrderedLateTime",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "videoFrameLossRate": {
              "specs": "webrtc-stats",
              "name": "videoFrameLossRate",
              "type": "float",
              "type-original": "float"
            },
            "lowFrameRateCallPercent": {
              "specs": "webrtc-stats",
              "name": "lowFrameRateCallPercent",
              "type": "float",
              "type-original": "float"
            },
            "recvReorderBufferPacketsDroppedDueToBufferExhaustion": {
              "specs": "webrtc-stats",
              "name": "recvReorderBufferPacketsDroppedDueToBufferExhaustion",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvReorderBufferMaxSuccessfullyOrderedExtent": {
              "specs": "webrtc-stats",
              "name": "recvReorderBufferMaxSuccessfullyOrderedExtent",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvBitRateMaximum": {
              "specs": "webrtc-stats",
              "name": "recvBitRateMaximum",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "lowBitRateCallPercent": {
              "specs": "webrtc-stats",
              "name": "lowBitRateCallPercent",
              "type": "float",
              "type-original": "float"
            },
            "recvReorderBufferPacketsDroppedDueToTimeout": {
              "specs": "webrtc-stats",
              "name": "recvReorderBufferPacketsDroppedDueToTimeout",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvResolutionWidth": {
              "specs": "webrtc-stats",
              "name": "recvResolutionWidth",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "recvFrameRateAverage": {
              "specs": "webrtc-stats",
              "name": "recvFrameRateAverage",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSVideoRecvPayload",
        "extends": "MSVideoPayload"
      },
      "WebAuthnExtensions": {
        "members": {
          "member": {}
        },
        "specs": "WD-webauthn-20161207",
        "name": "WebAuthnExtensions",
        "extends": "Object"
      },
      "StereoPannerOptions": {
        "name": "StereoPannerOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "pan": {
              "name": "pan",
              "default": "0",
              "type": "float"
            }
          }
        }
      },
      "MediaStreamConstraints": {
        "name": "MediaStreamConstraints",
        "extends": "Object",
        "members": {
          "member": {
            "video": {
              "name": "video",
              "default": "false",
              "type": [
                {
                  "type": "boolean"
                },
                {
                  "type": "MediaTrackConstraints"
                }
              ]
            },
            "audio": {
              "name": "audio",
              "default": "false",
              "type": [
                {
                  "type": "boolean"
                },
                {
                  "type": "MediaTrackConstraints"
                }
              ]
            },
            "peerIdentity": {
              "name": "peerIdentity",
              "type": "DOMString"
            }
          }
        }
      },
      "EcKeyImportParams": {
        "name": "EcKeyImportParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "namedCurve": {
              "name": "namedCurve",
              "required": 1,
              "type": "NamedCurve"
            }
          }
        }
      },
      "GainOptions": {
        "name": "GainOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "gain": {
              "name": "gain",
              "default": "1.0",
              "type": "float"
            }
          }
        }
      },
      "LongRange": {
        "members": {
          "member": {
            "min": {
              "specs": "media-capture-api",
              "name": "min",
              "type": "long",
              "type-original": "long"
            },
            "max": {
              "specs": "media-capture-api",
              "name": "max",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "media-capture-api",
        "name": "LongRange",
        "extends": "Object"
      },
      "SecurityPolicyViolationEventInit": {
        "members": {
          "member": {
            "sourceFile": {
              "specs": "csp",
              "name": "sourceFile",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "violatedDirective": {
              "specs": "csp",
              "name": "violatedDirective",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "lineNumber": {
              "specs": "csp",
              "name": "lineNumber",
              "default": "0",
              "type": "long",
              "type-original": "long"
            },
            "referrer": {
              "specs": "csp",
              "name": "referrer",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "columnNumber": {
              "specs": "csp",
              "name": "columnNumber",
              "default": "0",
              "type": "long",
              "type-original": "long"
            },
            "statusCode": {
              "specs": "csp",
              "name": "statusCode",
              "default": "0",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "originalPolicy": {
              "specs": "csp",
              "name": "originalPolicy",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "effectiveDirective": {
              "specs": "csp",
              "name": "effectiveDirective",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "blockedURI": {
              "specs": "csp",
              "name": "blockedURI",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "documentURI": {
              "specs": "csp",
              "name": "documentURI",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "specs": "csp",
        "name": "SecurityPolicyViolationEventInit",
        "extends": "EventInit"
      },
      "RsaOtherPrimesInfo": {
        "name": "RsaOtherPrimesInfo",
        "extends": "Object",
        "members": {
          "member": {
            "r": {
              "name": "r",
              "type": "DOMString"
            },
            "d": {
              "name": "d",
              "type": "DOMString"
            },
            "t": {
              "name": "t",
              "type": "DOMString"
            }
          }
        }
      },
      "MSLocalClientEventBase": {
        "members": {
          "member": {
            "networkBandwidthLowEventRatio": {
              "specs": "webrtc-stats",
              "name": "networkBandwidthLowEventRatio",
              "type": "float",
              "type-original": "float"
            },
            "networkReceiveQualityEventRatio": {
              "specs": "webrtc-stats",
              "name": "networkReceiveQualityEventRatio",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSLocalClientEventBase",
        "extends": "RTCStats"
      },
      "PaymentRequestUpdateEventInit": {
        "members": {
          "member": {}
        },
        "specs": "payment-request",
        "name": "PaymentRequestUpdateEventInit",
        "extends": "EventInit"
      },
      "MSNetwork": {
        "members": {
          "member": {
            "utilization": {
              "specs": "webrtc-stats",
              "name": "utilization",
              "type": "MSUtilization",
              "type-original": "MSUtilization"
            },
            "packetLoss": {
              "specs": "webrtc-stats",
              "name": "packetLoss",
              "type": "MSPacketLoss",
              "type-original": "MSPacketLoss"
            },
            "delay": {
              "specs": "webrtc-stats",
              "name": "delay",
              "type": "MSDelay",
              "type-original": "MSDelay"
            },
            "jitter": {
              "specs": "webrtc-stats",
              "name": "jitter",
              "type": "MSJitter",
              "type-original": "MSJitter"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSNetwork",
        "extends": "RTCStats"
      },
      "MSAudioRecvSignal": {
        "members": {
          "member": {
            "renderLoopbackSignalLevel": {
              "specs": "webrtc-stats",
              "name": "renderLoopbackSignalLevel",
              "type": "float",
              "type-original": "float"
            },
            "recvSignalLevelCh1": {
              "specs": "webrtc-stats",
              "name": "recvSignalLevelCh1",
              "type": "long",
              "type-original": "long"
            },
            "renderNoiseLevel": {
              "specs": "webrtc-stats",
              "name": "renderNoiseLevel",
              "type": "float",
              "type-original": "float"
            },
            "renderSignalLevel": {
              "specs": "webrtc-stats",
              "name": "renderSignalLevel",
              "type": "float",
              "type-original": "float"
            },
            "initialSignalLevelRMS": {
              "specs": "webrtc-stats",
              "name": "initialSignalLevelRMS",
              "type": "float",
              "type-original": "float"
            },
            "recvNoiseLevelCh1": {
              "specs": "webrtc-stats",
              "name": "recvNoiseLevelCh1",
              "type": "long",
              "type-original": "long"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSAudioRecvSignal",
        "extends": "Object"
      },
      "MSFIDOCredentialParameters": {
        "members": {
          "member": {
            "algorithm": {
              "specs": "webauthn",
              "name": "algorithm",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "Algorithm"
                }
              ],
              "type-original": "AlgorithmIdentifier"
            },
            "authenticators": {
              "subtype": {
                "type": "DOMString"
              },
              "specs": "webauthn",
              "name": "authenticators",
              "type": "sequence",
              "type-original": "sequence<AAGUID>"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSFIDOCredentialParameters",
        "extends": "MSCredentialParameters"
      },
      "PopStateEventInit": {
        "members": {
          "member": {
            "state": {
              "specs": "html5",
              "name": "state",
              "default": "null",
              "type": "any",
              "type-original": "any"
            }
          }
        },
        "specs": "html5",
        "name": "PopStateEventInit",
        "extends": "EventInit"
      },
      "HashChangeEventInit": {
        "members": {
          "member": {
            "newURL": {
              "specs": "html5",
              "name": "newURL",
              "default": "\"\"",
              "type": "USVString",
              "type-original": "USVString"
            },
            "oldURL": {
              "specs": "html5",
              "name": "oldURL",
              "default": "\"\"",
              "type": "USVString",
              "type-original": "USVString"
            }
          }
        },
        "specs": "html5",
        "name": "HashChangeEventInit",
        "extends": "EventInit"
      },
      "DeviceOrientationEventInit": {
        "name": "DeviceOrientationEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "alpha": {
              "name": "alpha",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "beta": {
              "name": "beta",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "gamma": {
              "name": "gamma",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "absolute": {
              "name": "absolute",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "MouseEventInit": {
        "name": "MouseEventInit",
        "extends": "EventModifierInit",
        "members": {
          "member": {
            "screenX": {
              "name": "screenX",
              "default": "0.0",
              "type": "double"
            },
            "screenY": {
              "name": "screenY",
              "default": "0.0",
              "type": "double"
            },
            "clientX": {
              "name": "clientX",
              "default": "0.0",
              "type": "double"
            },
            "clientY": {
              "name": "clientY",
              "default": "0.0",
              "type": "double"
            },
            "button": {
              "name": "button",
              "default": "0",
              "type": "short"
            },
            "buttons": {
              "name": "buttons",
              "default": "0",
              "type": "unsigned short"
            },
            "relatedTarget": {
              "name": "relatedTarget",
              "default": "null",
              "type": "EventTarget",
              "nullable": 1
            },
            "movementX": {
              "name": "movementX",
              "default": "0",
              "type": "long"
            },
            "movementY": {
              "name": "movementY",
              "default": "0",
              "type": "long"
            }
          }
        }
      },
      "NotificationOptions": {
        "name": "NotificationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "dir": {
              "name": "dir",
              "default": "\"auto\"",
              "type": "NotificationDirection"
            },
            "lang": {
              "name": "lang",
              "default": "\"\"",
              "type": "DOMString"
            },
            "body": {
              "name": "body",
              "default": "\"\"",
              "type": "DOMString"
            },
            "tag": {
              "name": "tag",
              "default": "\"\"",
              "type": "DOMString"
            },
            "image": {
              "name": "image",
              "type": "USVString"
            },
            "icon": {
              "name": "icon",
              "type": "USVString"
            },
            "badge": {
              "name": "badge",
              "type": "USVString"
            },
            "vibrate": {
              "name": "vibrate",
              "type": "VibratePattern"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "DOMTimeStamp"
            },
            "renotify": {
              "name": "renotify",
              "default": "false",
              "type": "boolean"
            },
            "silent": {
              "name": "silent",
              "default": "false",
              "type": "boolean"
            },
            "requireInteraction": {
              "name": "requireInteraction",
              "default": "false",
              "type": "boolean"
            },
            "data": {
              "name": "data",
              "default": "null",
              "type": "any"
            },
            "actions": {
              "name": "actions",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "NotificationAction"
              }
            }
          }
        }
      },
      "AudioTimestamp": {
        "name": "AudioTimestamp",
        "extends": "Object",
        "members": {
          "member": {
            "contextTime": {
              "name": "contextTime",
              "type": "double"
            },
            "performanceTime": {
              "name": "performanceTime",
              "type": "DOMHighResTimeStamp"
            }
          }
        }
      },
      "MediaStreamEventInit": {
        "members": {
          "member": {
            "stream": {
              "specs": "webrtc",
              "name": "stream",
              "default": "null",
              "type": "MediaStream",
              "type-original": "MediaStream"
            }
          }
        },
        "specs": "webrtc",
        "name": "MediaStreamEventInit",
        "extends": "EventInit"
      },
      "EcKeyGenParams": {
        "name": "EcKeyGenParams",
        "extends": "Algorithm",
        "members": {
          "member": {
            "namedCurve": {
              "name": "namedCurve",
              "required": 1,
              "type": "NamedCurve"
            }
          }
        }
      },
      "MediaStreamErrorEventInit": {
        "members": {
          "member": {
            "error": {
              "nullable": 1,
              "specs": "media-capture-api",
              "name": "error",
              "default": "null",
              "type": "MediaStreamError",
              "type-original": "MediaStreamError?"
            }
          }
        },
        "specs": "media-capture-api",
        "name": "MediaStreamErrorEventInit",
        "extends": "EventInit"
      },
      "RTCStats": {
        "name": "RTCStats",
        "extends": "Object",
        "members": {
          "member": {
            "timestamp": {
              "name": "timestamp",
              "required": 1,
              "type": "DOMHighResTimeStamp"
            },
            "type": {
              "name": "type",
              "required": 1,
              "type": "RTCStatsType"
            },
            "id": {
              "name": "id",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "MSCredentialParameters": {
        "members": {
          "member": {
            "type": {
              "specs": "webauthn",
              "name": "type",
              "type": "MSCredentialType",
              "type-original": "MSCredentialType"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSCredentialParameters",
        "extends": "Object"
      },
      "IntersectionObserverEntryInit": {
        "name": "IntersectionObserverEntryInit",
        "extends": "Object",
        "members": {
          "member": {
            "time": {
              "name": "time",
              "required": 1,
              "type": "DOMHighResTimeStamp"
            },
            "rootBounds": {
              "name": "rootBounds",
              "required": 1,
              "type": "DOMRectInit",
              "nullable": 1
            },
            "boundingClientRect": {
              "name": "boundingClientRect",
              "required": 1,
              "type": "DOMRectInit"
            },
            "intersectionRect": {
              "name": "intersectionRect",
              "required": 1,
              "type": "DOMRectInit"
            },
            "isIntersecting": {
              "name": "isIntersecting",
              "required": 1,
              "type": "boolean"
            },
            "intersectionRatio": {
              "name": "intersectionRatio",
              "required": 1,
              "type": "double"
            },
            "target": {
              "name": "target",
              "required": 1,
              "type": "Element"
            }
          }
        }
      },
      "ExceptionInformation": {
        "members": {
          "member": {
            "domain": {
              "nullable": 1,
              "specs": "tracking-dnt",
              "name": "domain",
              "type": "DOMString",
              "type-original": "DOMString?"
            }
          }
        },
        "specs": "tracking-dnt",
        "name": "ExceptionInformation",
        "extends": "Object"
      },
      "MSCredentialSpec": {
        "members": {
          "member": {
            "id": {
              "specs": "webauthn",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "type": {
              "required": 1,
              "specs": "webauthn",
              "name": "type",
              "type": "MSCredentialType",
              "type-original": "MSCredentialType"
            }
          }
        },
        "specs": "webauthn",
        "name": "MSCredentialSpec",
        "extends": "Object"
      },
      "ScopedCredentialParameters": {
        "members": {
          "member": {
            "algorithm": {
              "required": 1,
              "specs": "webauthn",
              "name": "algorithm",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "Algorithm"
                }
              ],
              "type-original": "AlgorithmIdentifier"
            },
            "type": {
              "required": 1,
              "specs": "webauthn",
              "name": "type",
              "type": "ScopedCredentialType",
              "type-original": "ScopedCredentialType"
            }
          }
        },
        "specs": "webauthn",
        "name": "ScopedCredentialParameters",
        "extends": "Object"
      },
      "PositionOptions": {
        "name": "PositionOptions",
        "extends": "Object",
        "members": {
          "member": {
            "enableHighAccuracy": {
              "name": "enableHighAccuracy",
              "default": "false",
              "type": "boolean"
            },
            "timeout": {
              "name": "timeout",
              "default": "0xFFFFFFFF",
              "type": "unsigned long"
            },
            "maximumAge": {
              "name": "maximumAge",
              "default": "0",
              "type": "unsigned long"
            }
          }
        }
      },
      "NotificationEventInit": {
        "name": "NotificationEventInit",
        "extends": "ExtendableEventInit",
        "members": {
          "member": {
            "notification": {
              "name": "notification",
              "required": 1,
              "type": "Notification"
            },
            "action": {
              "name": "action",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "FocusNavigationEventInit": {
        "members": {
          "member": {
            "navigationReason": {
              "nullable": 1,
              "specs": "none",
              "name": "navigationReason",
              "default": "null",
              "type": "DOMString",
              "type-original": "DOMString?"
            },
            "originHeight": {
              "specs": "none",
              "name": "originHeight",
              "default": "0",
              "type": "float",
              "type-original": "float"
            },
            "originTop": {
              "specs": "none",
              "name": "originTop",
              "default": "0",
              "type": "float",
              "type-original": "float"
            },
            "originLeft": {
              "specs": "none",
              "name": "originLeft",
              "default": "0",
              "type": "float",
              "type-original": "float"
            },
            "originWidth": {
              "specs": "none",
              "name": "originWidth",
              "default": "0",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "none",
        "name": "FocusNavigationEventInit",
        "extends": "EventInit"
      },
      "KeyboardEventInit": {
        "name": "KeyboardEventInit",
        "extends": "EventModifierInit",
        "members": {
          "member": {
            "key": {
              "name": "key",
              "default": "\"\"",
              "type": "DOMString"
            },
            "code": {
              "name": "code",
              "default": "\"\"",
              "type": "DOMString"
            },
            "location": {
              "name": "location",
              "default": "0",
              "type": "unsigned long"
            },
            "repeat": {
              "name": "repeat",
              "default": "false",
              "type": "boolean"
            },
            "isComposing": {
              "name": "isComposing",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "QueuingStrategy": {
        "name": "QueuingStrategy",
        "extends": "Object",
        "members": {
          "member": {
            "highWaterMark": {
              "name": "highWaterMark",
              "type": "unrestricted double",
              "nullable": 0
            },
            "size": {
              "name": "size",
              "type": "QueuingStrategySizeCallback",
              "nullable": 0,
              "override-type": "QueuingStrategySizeCallback<T>"
            }
          }
        },
        "type-parameters": [
          {
            "name": "T",
            "default": "any"
          }
        ]
      },
      "DeviceAccelerationDict": {
        "members": {
          "member": {
            "y": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "y",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            },
            "x": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "x",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            },
            "z": {
              "nullable": 1,
              "specs": "orientation-event",
              "name": "z",
              "default": "null",
              "type": "double",
              "type-original": "double?"
            }
          }
        },
        "specs": "orientation-event",
        "name": "DeviceAccelerationDict",
        "extends": "Object"
      },
      "MSNetworkInterfaceType": {
        "members": {
          "member": {
            "interfaceTypeTunnel": {
              "specs": "webrtc-stats",
              "name": "interfaceTypeTunnel",
              "type": "boolean",
              "type-original": "boolean"
            },
            "interfaceTypePPP": {
              "specs": "webrtc-stats",
              "name": "interfaceTypePPP",
              "type": "boolean",
              "type-original": "boolean"
            },
            "interfaceTypeEthernet": {
              "specs": "webrtc-stats",
              "name": "interfaceTypeEthernet",
              "type": "boolean",
              "type-original": "boolean"
            },
            "interfaceTypeWireless": {
              "specs": "webrtc-stats",
              "name": "interfaceTypeWireless",
              "type": "boolean",
              "type-original": "boolean"
            },
            "interfaceTypeWWAN": {
              "specs": "webrtc-stats",
              "name": "interfaceTypeWWAN",
              "type": "boolean",
              "type-original": "boolean"
            }
          }
        },
        "specs": "webrtc-stats",
        "name": "MSNetworkInterfaceType",
        "extends": "Object"
      },
      "AudioProcessingEventInit": {
        "name": "AudioProcessingEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "playbackTime": {
              "name": "playbackTime",
              "required": 1,
              "type": "double"
            },
            "inputBuffer": {
              "name": "inputBuffer",
              "required": 1,
              "type": "AudioBuffer"
            },
            "outputBuffer": {
              "name": "outputBuffer",
              "required": 1,
              "type": "AudioBuffer"
            }
          }
        }
      },
      "AesKeyAlgorithm": {
        "name": "AesKeyAlgorithm",
        "extends": "KeyAlgorithm",
        "members": {
          "member": {
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned short"
            }
          }
        }
      },
      "PaymentDetailsModifier": {
        "members": {
          "member": {
            "additionalDisplayItems": {
              "subtype": {
                "type": "PaymentItem"
              },
              "specs": "payment-request",
              "name": "additionalDisplayItems",
              "type": "sequence",
              "type-original": "sequence<PaymentItem>"
            },
            "supportedMethods": {
              "subtype": {
                "type": "DOMString"
              },
              "required": 1,
              "specs": "payment-request",
              "name": "supportedMethods",
              "type": "sequence",
              "type-original": "sequence<DOMString>",
              "override-type": "string | string[]"
            },
            "data": {
              "specs": "payment-request",
              "name": "data",
              "type": "object",
              "type-original": "object"
            },
            "total": {
              "specs": "payment-request",
              "name": "total",
              "type": "PaymentItem",
              "type-original": "PaymentItem"
            }
          }
        },
        "specs": "payment-request",
        "name": "PaymentDetailsModifier",
        "extends": "Object"
      },
      "SpeechSynthesisEventInit": {
        "members": {
          "member": {
            "charLength": {
              "specs": "none",
              "name": "charLength",
              "default": "0",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "utterance": {
              "nullable": 1,
              "specs": "none",
              "name": "utterance",
              "default": "null",
              "type": "SpeechSynthesisUtterance",
              "type-original": "SpeechSynthesisUtterance?"
            },
            "name": {
              "specs": "none",
              "name": "name",
              "default": "\"\"",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "charIndex": {
              "specs": "none",
              "name": "charIndex",
              "default": "0",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "elapsedTime": {
              "specs": "none",
              "name": "elapsedTime",
              "default": "0",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "specs": "none",
        "name": "SpeechSynthesisEventInit",
        "extends": "EventInit"
      },
      "RTCPeerConnectionIceEventInit": {
        "name": "RTCPeerConnectionIceEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "candidate": {
              "name": "candidate",
              "type": "RTCIceCandidate",
              "nullable": 1
            },
            "url": {
              "name": "url",
              "type": "DOMString",
              "nullable": 1
            }
          }
        }
      },
      "EcKeyAlgorithm": {
        "name": "EcKeyAlgorithm",
        "extends": "KeyAlgorithm",
        "members": {
          "member": {
            "namedCurve": {
              "name": "namedCurve",
              "required": 1,
              "type": "NamedCurve"
            }
          }
        }
      },
      "DOMRectInit": {
        "name": "DOMRectInit",
        "extends": "Object",
        "members": {
          "member": {
            "x": {
              "name": "x",
              "default": "0",
              "type": "unrestricted double"
            },
            "y": {
              "name": "y",
              "default": "0",
              "type": "unrestricted double"
            },
            "width": {
              "name": "width",
              "default": "0",
              "type": "unrestricted double"
            },
            "height": {
              "name": "height",
              "default": "0",
              "type": "unrestricted double"
            }
          }
        }
      },
      "PeriodicWaveConstraints": {
        "name": "PeriodicWaveConstraints",
        "extends": "Object",
        "members": {
          "member": {
            "disableNormalization": {
              "name": "disableNormalization",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "KeyAlgorithm": {
        "name": "KeyAlgorithm",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "VRStageParameters": {
        "members": {
          "member": {
            "sizeY": {
              "specs": "WebVR",
              "name": "sizeY",
              "type": "float",
              "type-original": "float"
            },
            "sizeX": {
              "specs": "WebVR",
              "name": "sizeX",
              "type": "float",
              "type-original": "float"
            },
            "sittingToStandingTransform": {
              "specs": "WebVR",
              "name": "sittingToStandingTransform",
              "type": "Float32Array",
              "type-original": "Float32Array"
            }
          }
        },
        "specs": "WebVR",
        "name": "VRStageParameters",
        "extends": "Object"
      },
      "RTCSsrcRange": {
        "members": {
          "member": {
            "min": {
              "specs": "ortc",
              "name": "min",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "max": {
              "specs": "ortc",
              "name": "max",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "specs": "ortc",
        "name": "RTCSsrcRange",
        "extends": "Object"
      },
      "ProgressEventInit": {
        "name": "ProgressEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "lengthComputable": {
              "name": "lengthComputable",
              "default": "false",
              "type": "boolean"
            },
            "loaded": {
              "name": "loaded",
              "default": "0",
              "type": "unsigned long long"
            },
            "total": {
              "name": "total",
              "default": "0",
              "type": "unsigned long long"
            }
          }
        }
      },
      "ChannelSplitterOptions": {
        "name": "ChannelSplitterOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "numberOfOutputs": {
              "name": "numberOfOutputs",
              "default": "6",
              "type": "unsigned long"
            }
          }
        }
      },
      "MediaKeySystemConfiguration": {
        "name": "MediaKeySystemConfiguration",
        "extends": "Object",
        "members": {
          "member": {
            "label": {
              "name": "label",
              "default": "\"\"",
              "type": "DOMString"
            },
            "initDataTypes": {
              "name": "initDataTypes",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            },
            "audioCapabilities": {
              "name": "audioCapabilities",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MediaKeySystemMediaCapability"
              }
            },
            "videoCapabilities": {
              "name": "videoCapabilities",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MediaKeySystemMediaCapability"
              }
            },
            "distinctiveIdentifier": {
              "name": "distinctiveIdentifier",
              "default": "\"optional\"",
              "type": "MediaKeysRequirement"
            },
            "persistentState": {
              "name": "persistentState",
              "default": "\"optional\"",
              "type": "MediaKeysRequirement"
            },
            "sessionTypes": {
              "name": "sessionTypes",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            }
          }
        }
      },
      "ClipboardEventInit": {
        "name": "ClipboardEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "clipboardData": {
              "name": "clipboardData",
              "default": "null",
              "type": "DataTransfer",
              "nullable": 1
            }
          }
        }
      },
      "ClipboardPermissionDescriptor": {
        "name": "ClipboardPermissionDescriptor",
        "extends": "PermissionDescriptor",
        "members": {
          "member": {
            "allowWithoutGesture": {
              "name": "allowWithoutGesture",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "CredentialData": {
        "name": "CredentialData",
        "extends": "Object",
        "members": {
          "member": {
            "id": {
              "name": "id",
              "required": 1,
              "type": "USVString"
            }
          }
        }
      },
      "CredentialRequestOptions": {
        "name": "CredentialRequestOptions",
        "extends": "Object",
        "members": {
          "member": {
            "mediation": {
              "name": "mediation",
              "default": "\"optional\"",
              "type": "CredentialMediationRequirement"
            },
            "signal": {
              "name": "signal",
              "type": "AbortSignal"
            },
            "publicKey": {
              "name": "publicKey",
              "type": "PublicKeyCredentialRequestOptions"
            }
          }
        }
      },
      "CredentialCreationOptions": {
        "name": "CredentialCreationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "signal": {
              "name": "signal",
              "type": "AbortSignal"
            },
            "publicKey": {
              "name": "publicKey",
              "type": "PublicKeyCredentialCreationOptions"
            }
          }
        }
      },
      "PasswordCredentialData": {
        "name": "PasswordCredentialData",
        "extends": "CredentialData",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "type": "USVString"
            },
            "iconURL": {
              "name": "iconURL",
              "type": "USVString"
            },
            "origin": {
              "name": "origin",
              "required": 1,
              "type": "USVString"
            },
            "password": {
              "name": "password",
              "required": 1,
              "type": "USVString"
            }
          }
        }
      },
      "FederatedCredentialRequestOptions": {
        "name": "FederatedCredentialRequestOptions",
        "extends": "Object",
        "members": {
          "member": {
            "providers": {
              "name": "providers",
              "type": "sequence",
              "subtype": {
                "type": "USVString"
              }
            },
            "protocols": {
              "name": "protocols",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            }
          }
        }
      },
      "FederatedCredentialInit": {
        "name": "FederatedCredentialInit",
        "extends": "CredentialData",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "type": "USVString"
            },
            "iconURL": {
              "name": "iconURL",
              "type": "USVString"
            },
            "origin": {
              "name": "origin",
              "required": 1,
              "type": "USVString"
            },
            "provider": {
              "name": "provider",
              "required": 1,
              "type": "USVString"
            },
            "protocol": {
              "name": "protocol",
              "type": "DOMString"
            }
          }
        }
      },
      "ScrollOptions": {
        "name": "ScrollOptions",
        "extends": "Object",
        "members": {
          "member": {
            "behavior": {
              "name": "behavior",
              "default": "\"auto\"",
              "type": "ScrollBehavior"
            }
          }
        }
      },
      "ScrollToOptions": {
        "name": "ScrollToOptions",
        "extends": "ScrollOptions",
        "members": {
          "member": {
            "left": {
              "name": "left",
              "type": "unrestricted double"
            },
            "top": {
              "name": "top",
              "type": "unrestricted double"
            }
          }
        }
      },
      "MediaQueryListEventInit": {
        "name": "MediaQueryListEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "media": {
              "name": "media",
              "default": "\"\"",
              "type": "CSSOMString"
            },
            "matches": {
              "name": "matches",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "ScrollIntoViewOptions": {
        "name": "ScrollIntoViewOptions",
        "extends": "ScrollOptions",
        "members": {
          "member": {
            "block": {
              "name": "block",
              "default": "\"start\"",
              "type": "ScrollLogicalPosition"
            },
            "inline": {
              "name": "inline",
              "default": "\"nearest\"",
              "type": "ScrollLogicalPosition"
            }
          }
        }
      },
      "DeviceMotionEventAccelerationInit": {
        "name": "DeviceMotionEventAccelerationInit",
        "extends": "Object",
        "members": {
          "member": {
            "x": {
              "name": "x",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "y": {
              "name": "y",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "z": {
              "name": "z",
              "default": "null",
              "type": "double",
              "nullable": 1
            }
          }
        }
      },
      "DeviceMotionEventRotationRateInit": {
        "name": "DeviceMotionEventRotationRateInit",
        "extends": "Object",
        "members": {
          "member": {
            "alpha": {
              "name": "alpha",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "beta": {
              "name": "beta",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "gamma": {
              "name": "gamma",
              "default": "null",
              "type": "double",
              "nullable": 1
            }
          }
        }
      },
      "GetRootNodeOptions": {
        "name": "GetRootNodeOptions",
        "extends": "Object",
        "members": {
          "member": {
            "composed": {
              "name": "composed",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "ElementCreationOptions": {
        "name": "ElementCreationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "is": {
              "name": "is",
              "type": "DOMString"
            }
          }
        }
      },
      "ShadowRootInit": {
        "name": "ShadowRootInit",
        "extends": "Object",
        "members": {
          "member": {
            "mode": {
              "name": "mode",
              "required": 1,
              "type": "ShadowRootMode"
            },
            "delegatesFocus": {
              "name": "delegatesFocus",
              "type": "boolean"
            }
          }
        }
      },
      "TextEncoderEncodeIntoResult": {
        "name": "TextEncoderEncodeIntoResult",
        "extends": "Object",
        "members": {
          "member": {
            "read": {
              "name": "read",
              "type": "unsigned long long"
            },
            "written": {
              "name": "written",
              "type": "unsigned long long"
            }
          }
        }
      },
      "BlobPropertyBag": {
        "name": "BlobPropertyBag",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "default": "\"\"",
              "type": "DOMString"
            },
            "endings": {
              "name": "endings",
              "default": "\"transparent\"",
              "type": "EndingType"
            }
          }
        }
      },
      "FilePropertyBag": {
        "name": "FilePropertyBag",
        "extends": "BlobPropertyBag",
        "members": {
          "member": {
            "lastModified": {
              "name": "lastModified",
              "type": "long long"
            }
          }
        }
      },
      "FullscreenOptions": {
        "name": "FullscreenOptions",
        "extends": "Object",
        "members": {
          "member": {
            "navigationUI": {
              "name": "navigationUI",
              "default": "\"auto\"",
              "type": "FullscreenNavigationUI"
            }
          }
        }
      },
      "DOMPointInit": {
        "name": "DOMPointInit",
        "extends": "Object",
        "members": {
          "member": {
            "x": {
              "name": "x",
              "default": "0",
              "type": "unrestricted double"
            },
            "y": {
              "name": "y",
              "default": "0",
              "type": "unrestricted double"
            },
            "z": {
              "name": "z",
              "default": "0",
              "type": "unrestricted double"
            },
            "w": {
              "name": "w",
              "default": "1",
              "type": "unrestricted double"
            }
          }
        }
      },
      "DOMQuadInit": {
        "name": "DOMQuadInit",
        "extends": "Object",
        "members": {
          "member": {
            "p1": {
              "name": "p1",
              "type": "DOMPointInit"
            },
            "p2": {
              "name": "p2",
              "type": "DOMPointInit"
            },
            "p3": {
              "name": "p3",
              "type": "DOMPointInit"
            },
            "p4": {
              "name": "p4",
              "type": "DOMPointInit"
            }
          }
        }
      },
      "DOMMatrix2DInit": {
        "name": "DOMMatrix2DInit",
        "extends": "Object",
        "members": {
          "member": {
            "a": {
              "name": "a",
              "type": "unrestricted double"
            },
            "b": {
              "name": "b",
              "type": "unrestricted double"
            },
            "c": {
              "name": "c",
              "type": "unrestricted double"
            },
            "d": {
              "name": "d",
              "type": "unrestricted double"
            },
            "e": {
              "name": "e",
              "type": "unrestricted double"
            },
            "f": {
              "name": "f",
              "type": "unrestricted double"
            },
            "m11": {
              "name": "m11",
              "type": "unrestricted double"
            },
            "m12": {
              "name": "m12",
              "type": "unrestricted double"
            },
            "m21": {
              "name": "m21",
              "type": "unrestricted double"
            },
            "m22": {
              "name": "m22",
              "type": "unrestricted double"
            },
            "m41": {
              "name": "m41",
              "type": "unrestricted double"
            },
            "m42": {
              "name": "m42",
              "type": "unrestricted double"
            }
          }
        }
      },
      "DOMMatrixInit": {
        "name": "DOMMatrixInit",
        "extends": "DOMMatrix2DInit",
        "members": {
          "member": {
            "m13": {
              "name": "m13",
              "default": "0",
              "type": "unrestricted double"
            },
            "m14": {
              "name": "m14",
              "default": "0",
              "type": "unrestricted double"
            },
            "m23": {
              "name": "m23",
              "default": "0",
              "type": "unrestricted double"
            },
            "m24": {
              "name": "m24",
              "default": "0",
              "type": "unrestricted double"
            },
            "m31": {
              "name": "m31",
              "default": "0",
              "type": "unrestricted double"
            },
            "m32": {
              "name": "m32",
              "default": "0",
              "type": "unrestricted double"
            },
            "m33": {
              "name": "m33",
              "default": "1",
              "type": "unrestricted double"
            },
            "m34": {
              "name": "m34",
              "default": "0",
              "type": "unrestricted double"
            },
            "m43": {
              "name": "m43",
              "default": "0",
              "type": "unrestricted double"
            },
            "m44": {
              "name": "m44",
              "default": "1",
              "type": "unrestricted double"
            },
            "is2D": {
              "name": "is2D",
              "type": "boolean"
            }
          }
        }
      },
      "CanvasRenderingContext2DSettings": {
        "name": "CanvasRenderingContext2DSettings",
        "extends": "Object",
        "members": {
          "member": {
            "alpha": {
              "name": "alpha",
              "default": "true",
              "type": "boolean"
            },
            "desynchronized": {
              "name": "desynchronized",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "ImageBitmapRenderingContextSettings": {
        "name": "ImageBitmapRenderingContextSettings",
        "extends": "Object",
        "members": {
          "member": {
            "alpha": {
              "name": "alpha",
              "default": "true",
              "type": "boolean"
            }
          }
        }
      },
      "ImageEncodeOptions": {
        "name": "ImageEncodeOptions",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "default": "\"image/png\"",
              "type": "DOMString"
            },
            "quality": {
              "name": "quality",
              "type": "unrestricted double"
            }
          }
        }
      },
      "ElementDefinitionOptions": {
        "name": "ElementDefinitionOptions",
        "extends": "Object",
        "members": {
          "member": {
            "extends": {
              "name": "extends",
              "type": "DOMString"
            }
          }
        }
      },
      "DragEventInit": {
        "name": "DragEventInit",
        "extends": "MouseEventInit",
        "members": {
          "member": {
            "dataTransfer": {
              "name": "dataTransfer",
              "default": "null",
              "type": "DataTransfer",
              "nullable": 1
            }
          }
        }
      },
      "ImageBitmapOptions": {
        "name": "ImageBitmapOptions",
        "extends": "Object",
        "members": {
          "member": {
            "imageOrientation": {
              "name": "imageOrientation",
              "default": "\"none\"",
              "type": "ImageOrientation"
            },
            "premultiplyAlpha": {
              "name": "premultiplyAlpha",
              "default": "\"default\"",
              "type": "PremultiplyAlpha"
            },
            "colorSpaceConversion": {
              "name": "colorSpaceConversion",
              "default": "\"default\"",
              "type": "ColorSpaceConversion"
            },
            "resizeWidth": {
              "name": "resizeWidth",
              "type": "unsigned long"
            },
            "resizeHeight": {
              "name": "resizeHeight",
              "type": "unsigned long"
            },
            "resizeQuality": {
              "name": "resizeQuality",
              "default": "\"low\"",
              "type": "ResizeQuality"
            }
          }
        }
      },
      "AssignedNodesOptions": {
        "name": "AssignedNodesOptions",
        "extends": "Object",
        "members": {
          "member": {
            "flatten": {
              "name": "flatten",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "EventSourceInit": {
        "name": "EventSourceInit",
        "extends": "Object",
        "members": {
          "member": {
            "withCredentials": {
              "name": "withCredentials",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "PromiseRejectionEventInit": {
        "name": "PromiseRejectionEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "promise": {
              "name": "promise",
              "required": 1,
              "type": "Promise",
              "subtype": {
                "type": "any"
              }
            },
            "reason": {
              "name": "reason",
              "type": "any"
            }
          }
        }
      },
      "StorageEventInit": {
        "name": "StorageEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "key": {
              "name": "key",
              "default": "null",
              "type": "DOMString",
              "nullable": 1
            },
            "oldValue": {
              "name": "oldValue",
              "default": "null",
              "type": "DOMString",
              "nullable": 1
            },
            "newValue": {
              "name": "newValue",
              "default": "null",
              "type": "DOMString",
              "nullable": 1
            },
            "url": {
              "name": "url",
              "default": "\"\"",
              "type": "USVString"
            },
            "storageArea": {
              "name": "storageArea",
              "default": "null",
              "type": "Storage",
              "nullable": 1
            }
          }
        }
      },
      "FocusOptions": {
        "name": "FocusOptions",
        "extends": "Object",
        "members": {
          "member": {
            "preventScroll": {
              "name": "preventScroll",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "RTCIdentityProvider": {
        "name": "RTCIdentityProvider",
        "extends": "Object",
        "members": {
          "member": {
            "generateAssertion": {
              "name": "generateAssertion",
              "required": 1,
              "type": "GenerateAssertionCallback"
            },
            "validateAssertion": {
              "name": "validateAssertion",
              "required": 1,
              "type": "ValidateAssertionCallback"
            }
          }
        }
      },
      "RTCIdentityAssertionResult": {
        "name": "RTCIdentityAssertionResult",
        "extends": "Object",
        "members": {
          "member": {
            "idp": {
              "name": "idp",
              "required": 1,
              "type": "RTCIdentityProviderDetails"
            },
            "assertion": {
              "name": "assertion",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "RTCIdentityProviderDetails": {
        "name": "RTCIdentityProviderDetails",
        "extends": "Object",
        "members": {
          "member": {
            "domain": {
              "name": "domain",
              "required": 1,
              "type": "DOMString"
            },
            "protocol": {
              "name": "protocol",
              "default": "\"default\"",
              "type": "DOMString"
            }
          }
        }
      },
      "RTCIdentityValidationResult": {
        "name": "RTCIdentityValidationResult",
        "extends": "Object",
        "members": {
          "member": {
            "identity": {
              "name": "identity",
              "required": 1,
              "type": "DOMString"
            },
            "contents": {
              "name": "contents",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "RTCIdentityProviderOptions": {
        "name": "RTCIdentityProviderOptions",
        "extends": "Object",
        "members": {
          "member": {
            "protocol": {
              "name": "protocol",
              "default": "\"default\"",
              "type": "DOMString"
            },
            "usernameHint": {
              "name": "usernameHint",
              "type": "DOMString"
            },
            "peerIdentity": {
              "name": "peerIdentity",
              "type": "DOMString"
            }
          }
        }
      },
      "IDBVersionChangeEventInit": {
        "name": "IDBVersionChangeEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "oldVersion": {
              "name": "oldVersion",
              "default": "0",
              "type": "unsigned long long"
            },
            "newVersion": {
              "name": "newVersion",
              "default": "null",
              "type": "unsigned long long",
              "nullable": 1
            }
          }
        }
      },
      "ULongRange": {
        "name": "ULongRange",
        "extends": "Object",
        "members": {
          "member": {
            "max": {
              "name": "max",
              "type": "unsigned long"
            },
            "min": {
              "name": "min",
              "type": "unsigned long"
            }
          }
        }
      },
      "ConstrainULongRange": {
        "name": "ConstrainULongRange",
        "extends": "ULongRange",
        "members": {
          "member": {
            "exact": {
              "name": "exact",
              "type": "unsigned long"
            },
            "ideal": {
              "name": "ideal",
              "type": "unsigned long"
            }
          }
        }
      },
      "Capabilities": {
        "name": "Capabilities",
        "extends": "Object",
        "members": {
          "member": {}
        }
      },
      "Settings": {
        "name": "Settings",
        "extends": "Object",
        "members": {
          "member": {}
        }
      },
      "ConstraintSet": {
        "name": "ConstraintSet",
        "extends": "Object",
        "members": {
          "member": {}
        }
      },
      "Constraints": {
        "name": "Constraints",
        "extends": "ConstraintSet",
        "members": {
          "member": {
            "advanced": {
              "name": "advanced",
              "type": "sequence",
              "subtype": {
                "type": "ConstraintSet"
              }
            }
          }
        }
      },
      "NotificationAction": {
        "name": "NotificationAction",
        "extends": "Object",
        "members": {
          "member": {
            "action": {
              "name": "action",
              "required": 1,
              "type": "DOMString"
            },
            "title": {
              "name": "title",
              "required": 1,
              "type": "DOMString"
            },
            "icon": {
              "name": "icon",
              "type": "USVString"
            }
          }
        }
      },
      "PerformanceObserverInit": {
        "name": "PerformanceObserverInit",
        "extends": "Object",
        "members": {
          "member": {
            "entryTypes": {
              "name": "entryTypes",
              "type": "sequence",
              "subtype": {
                "type": "DOMString"
              }
            },
            "type": {
              "name": "type",
              "type": "DOMString"
            },
            "buffered": {
              "name": "buffered",
              "type": "boolean"
            }
          }
        }
      },
      "PermissionDescriptor": {
        "name": "PermissionDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "PermissionName"
            }
          }
        }
      },
      "PushPermissionDescriptor": {
        "name": "PushPermissionDescriptor",
        "extends": "PermissionDescriptor",
        "members": {
          "member": {
            "userVisibleOnly": {
              "name": "userVisibleOnly",
              "default": "false",
              "type": "boolean"
            },
            "name": {
              "name": "name",
              "required": 1,
              "override-type": "\"push\""
            }
          }
        }
      },
      "MidiPermissionDescriptor": {
        "name": "MidiPermissionDescriptor",
        "extends": "PermissionDescriptor",
        "members": {
          "member": {
            "sysex": {
              "name": "sysex",
              "default": "false",
              "type": "boolean"
            },
            "name": {
              "name": "name",
              "required": 1,
              "override-type": "\"midi\""
            }
          }
        }
      },
      "DevicePermissionDescriptor": {
        "name": "DevicePermissionDescriptor",
        "extends": "PermissionDescriptor",
        "members": {
          "member": {
            "deviceId": {
              "name": "deviceId",
              "type": "DOMString"
            },
            "name": {
              "name": "name",
              "required": 1,
              "override-type": "\"camera\" | \"microphone\" | \"speaker\""
            }
          }
        }
      },
      "PushSubscriptionJSON": {
        "name": "PushSubscriptionJSON",
        "extends": "Object",
        "members": {
          "member": {
            "endpoint": {
              "name": "endpoint",
              "type": "USVString"
            },
            "expirationTime": {
              "name": "expirationTime",
              "type": "DOMTimeStamp",
              "nullable": 1
            },
            "keys": {
              "name": "keys",
              "type": "record",
              "subtype": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "USVString"
                }
              ]
            }
          }
        }
      },
      "NavigationPreloadState": {
        "name": "NavigationPreloadState",
        "extends": "Object",
        "members": {
          "member": {
            "enabled": {
              "name": "enabled",
              "default": "false",
              "type": "boolean"
            },
            "headerValue": {
              "name": "headerValue",
              "type": "ByteString"
            }
          }
        }
      },
      "MultiCacheQueryOptions": {
        "name": "MultiCacheQueryOptions",
        "extends": "CacheQueryOptions",
        "members": {
          "member": {
            "cacheName": {
              "name": "cacheName",
              "type": "DOMString"
            }
          }
        }
      },
      "StorageEstimate": {
        "name": "StorageEstimate",
        "extends": "Object",
        "members": {
          "member": {
            "usage": {
              "name": "usage",
              "type": "unsigned long long"
            },
            "quota": {
              "name": "quota",
              "type": "unsigned long long"
            }
          }
        }
      },
      "UnderlyingSource": {
        "name": "UnderlyingSource",
        "extends": "Object",
        "members": {
          "member": {
            "start": {
              "name": "start",
              "type": "ReadableStreamDefaultControllerCallback",
              "nullable": 0,
              "override-type": "ReadableStreamDefaultControllerCallback<R>"
            },
            "pull": {
              "name": "pull",
              "type": "ReadableStreamDefaultControllerCallback",
              "nullable": 0,
              "override-type": "ReadableStreamDefaultControllerCallback<R>"
            },
            "cancel": {
              "name": "cancel",
              "type": "ReadableStreamErrorCallback",
              "nullable": 0
            },
            "type": {
              "name": "type",
              "type": "any",
              "override-type": "undefined"
            }
          }
        },
        "type-parameters": [
          {
            "name": "R",
            "default": "any"
          }
        ]
      },
      "UnderlyingByteSource": {
        "name": "UnderlyingByteSource",
        "extends": "Object",
        "members": {
          "member": {
            "start": {
              "name": "start",
              "type": "ReadableByteStreamControllerCallback",
              "nullable": 0
            },
            "pull": {
              "name": "pull",
              "type": "ReadableByteStreamControllerCallback",
              "nullable": 0
            },
            "cancel": {
              "name": "cancel",
              "type": "ReadableStreamErrorCallback",
              "nullable": 0
            },
            "type": {
              "name": "type",
              "required": 1,
              "type": "DOMString",
              "override-type": "\"bytes\""
            },
            "autoAllocateChunkSize": {
              "name": "autoAllocateChunkSize",
              "type": "unsigned long",
              "nullable": 0
            }
          }
        }
      },
      "PipeOptions": {
        "name": "PipeOptions",
        "extends": "Object",
        "members": {
          "member": {
            "preventClose": {
              "name": "preventClose",
              "type": "boolean",
              "nullable": 0
            },
            "preventAbort": {
              "name": "preventAbort",
              "type": "boolean",
              "nullable": 0
            },
            "preventCancel": {
              "name": "preventCancel",
              "type": "boolean",
              "nullable": 0
            },
            "signal": {
              "name": "signal",
              "type": "AbortSignal",
              "nullable": 0
            }
          }
        }
      },
      "Transformer": {
        "name": "Transformer",
        "extends": "Object",
        "members": {
          "member": {
            "start": {
              "name": "start",
              "type": "TransformStreamDefaultControllerCallback",
              "nullable": 0,
              "override-type": "TransformStreamDefaultControllerCallback<O>"
            },
            "transform": {
              "name": "transform",
              "type": "TransformStreamDefaultControllerTransformCallback",
              "nullable": 0,
              "override-type": "TransformStreamDefaultControllerTransformCallback<I, O>"
            },
            "flush": {
              "name": "flush",
              "type": "TransformStreamDefaultControllerCallback",
              "nullable": 0,
              "override-type": "TransformStreamDefaultControllerCallback<O>"
            },
            "readableType": {
              "name": "readableType",
              "type": "any",
              "override-type": "undefined"
            },
            "writableType": {
              "name": "writableType",
              "type": "any",
              "override-type": "undefined"
            }
          }
        },
        "type-parameters": [
          {
            "name": "I",
            "default": "any"
          },
          {
            "name": "O",
            "default": "any"
          }
        ]
      },
      "SVGBoundingBoxOptions": {
        "name": "SVGBoundingBoxOptions",
        "extends": "Object",
        "members": {
          "member": {
            "fill": {
              "name": "fill",
              "default": "true",
              "type": "boolean"
            },
            "stroke": {
              "name": "stroke",
              "default": "false",
              "type": "boolean"
            },
            "markers": {
              "name": "markers",
              "default": "false",
              "type": "boolean"
            },
            "clipped": {
              "name": "clipped",
              "default": "false",
              "type": "boolean"
            }
          }
        }
      },
      "TouchInit": {
        "name": "TouchInit",
        "extends": "Object",
        "members": {
          "member": {
            "identifier": {
              "name": "identifier",
              "required": 1,
              "type": "long"
            },
            "target": {
              "name": "target",
              "required": 1,
              "type": "EventTarget"
            },
            "clientX": {
              "name": "clientX",
              "default": "0",
              "type": "double"
            },
            "clientY": {
              "name": "clientY",
              "default": "0",
              "type": "double"
            },
            "screenX": {
              "name": "screenX",
              "default": "0",
              "type": "double"
            },
            "screenY": {
              "name": "screenY",
              "default": "0",
              "type": "double"
            },
            "pageX": {
              "name": "pageX",
              "default": "0",
              "type": "double"
            },
            "pageY": {
              "name": "pageY",
              "default": "0",
              "type": "double"
            },
            "radiusX": {
              "name": "radiusX",
              "default": "0",
              "type": "float"
            },
            "radiusY": {
              "name": "radiusY",
              "default": "0",
              "type": "float"
            },
            "rotationAngle": {
              "name": "rotationAngle",
              "default": "0",
              "type": "float"
            },
            "force": {
              "name": "force",
              "default": "0",
              "type": "float"
            },
            "altitudeAngle": {
              "name": "altitudeAngle",
              "default": "0",
              "type": "double"
            },
            "azimuthAngle": {
              "name": "azimuthAngle",
              "default": "0",
              "type": "double"
            },
            "touchType": {
              "name": "touchType",
              "default": "\"direct\"",
              "type": "TouchType"
            }
          }
        }
      },
      "TouchEventInit": {
        "name": "TouchEventInit",
        "extends": "EventModifierInit",
        "members": {
          "member": {
            "touches": {
              "name": "touches",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "Touch"
              }
            },
            "targetTouches": {
              "name": "targetTouches",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "Touch"
              }
            },
            "changedTouches": {
              "name": "changedTouches",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "Touch"
              }
            }
          }
        }
      },
      "InputEventInit": {
        "name": "InputEventInit",
        "extends": "UIEventInit",
        "members": {
          "member": {
            "data": {
              "name": "data",
              "default": "\"\"",
              "type": "DOMString",
              "nullable": 1
            },
            "isComposing": {
              "name": "isComposing",
              "default": "false",
              "type": "boolean"
            },
            "inputType": {
              "name": "inputType",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "DocumentTimelineOptions": {
        "name": "DocumentTimelineOptions",
        "extends": "Object",
        "members": {
          "member": {
            "originTime": {
              "name": "originTime",
              "default": "0",
              "type": "DOMHighResTimeStamp"
            }
          }
        }
      },
      "EffectTiming": {
        "name": "EffectTiming",
        "extends": "Object",
        "members": {
          "member": {
            "delay": {
              "name": "delay",
              "default": "0",
              "type": "double"
            },
            "endDelay": {
              "name": "endDelay",
              "default": "0",
              "type": "double"
            },
            "fill": {
              "name": "fill",
              "default": "\"auto\"",
              "type": "FillMode"
            },
            "iterationStart": {
              "name": "iterationStart",
              "default": "0.0",
              "type": "double"
            },
            "iterations": {
              "name": "iterations",
              "default": "1.0",
              "type": "unrestricted double"
            },
            "duration": {
              "name": "duration",
              "default": "\"auto\"",
              "type": [
                {
                  "type": "unrestricted double"
                },
                {
                  "type": "DOMString"
                }
              ]
            },
            "direction": {
              "name": "direction",
              "default": "\"normal\"",
              "type": "PlaybackDirection"
            },
            "easing": {
              "name": "easing",
              "default": "\"linear\"",
              "type": "DOMString"
            }
          }
        }
      },
      "OptionalEffectTiming": {
        "name": "OptionalEffectTiming",
        "extends": "Object",
        "members": {
          "member": {
            "delay": {
              "name": "delay",
              "type": "double"
            },
            "endDelay": {
              "name": "endDelay",
              "type": "double"
            },
            "fill": {
              "name": "fill",
              "type": "FillMode"
            },
            "iterationStart": {
              "name": "iterationStart",
              "type": "double"
            },
            "iterations": {
              "name": "iterations",
              "type": "unrestricted double"
            },
            "duration": {
              "name": "duration",
              "type": [
                {
                  "type": "unrestricted double"
                },
                {
                  "type": "DOMString"
                }
              ]
            },
            "direction": {
              "name": "direction",
              "type": "PlaybackDirection"
            },
            "easing": {
              "name": "easing",
              "type": "DOMString"
            }
          }
        }
      },
      "ComputedEffectTiming": {
        "name": "ComputedEffectTiming",
        "extends": "EffectTiming",
        "members": {
          "member": {
            "endTime": {
              "name": "endTime",
              "type": "unrestricted double"
            },
            "activeDuration": {
              "name": "activeDuration",
              "type": "unrestricted double"
            },
            "localTime": {
              "name": "localTime",
              "type": "double",
              "nullable": 1
            },
            "progress": {
              "name": "progress",
              "type": "double",
              "nullable": 1
            },
            "currentIteration": {
              "name": "currentIteration",
              "type": "unrestricted double",
              "nullable": 1
            }
          }
        }
      },
      "BaseComputedKeyframe": {
        "name": "ComputedKeyframe",
        "extends": "Object",
        "members": {
          "member": {
            "offset": {
              "name": "offset",
              "default": "null",
              "required": 1,
              "type": "double",
              "nullable": 1
            },
            "computedOffset": {
              "name": "computedOffset",
              "required": 1,
              "type": "double"
            },
            "easing": {
              "name": "easing",
              "default": "\"linear\"",
              "required": 1,
              "type": "DOMString"
            },
            "composite": {
              "name": "composite",
              "default": "\"auto\"",
              "required": 1,
              "type": "CompositeOperationOrAuto"
            }
          }
        },
        "override-index-signatures": [
          "[property: string]: string | number | null | undefined"
        ]
      },
      "BasePropertyIndexedKeyframe": {
        "name": "PropertyIndexedKeyframes",
        "extends": "Object",
        "members": {
          "member": {
            "offset": {
              "name": "offset",
              "default": "",
              "type": [
                {
                  "type": "double",
                  "nullable": 1
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "double",
                    "nullable": 1
                  }
                }
              ]
            },
            "easing": {
              "name": "easing",
              "default": "",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  }
                }
              ]
            },
            "composite": {
              "name": "composite",
              "default": "",
              "type": [
                {
                  "type": "CompositeOperationOrAuto"
                },
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "CompositeOperationOrAuto"
                  }
                }
              ]
            }
          }
        },
        "override-index-signatures": [
          "[property: string]: string | string[] | number | null | (number | null)[] | undefined"
        ]
      },
      "BaseKeyframe": {
        "name": "Keyframe",
        "extends": "Object",
        "members": {
          "member": {
            "offset": {
              "name": "offset",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "easing": {
              "name": "easing",
              "default": "\"linear\"",
              "type": "DOMString"
            },
            "composite": {
              "name": "composite",
              "default": "\"auto\"",
              "type": "CompositeOperationOrAuto"
            }
          }
        },
        "override-index-signatures": [
          "[property: string]: string | number | null | undefined"
        ]
      },
      "KeyframeEffectOptions": {
        "name": "KeyframeEffectOptions",
        "extends": "EffectTiming",
        "members": {
          "member": {
            "iterationComposite": {
              "name": "iterationComposite",
              "default": "\"replace\"",
              "type": "IterationCompositeOperation"
            },
            "composite": {
              "name": "composite",
              "default": "\"replace\"",
              "type": "CompositeOperation"
            }
          }
        }
      },
      "KeyframeAnimationOptions": {
        "name": "KeyframeAnimationOptions",
        "extends": "KeyframeEffectOptions",
        "members": {
          "member": {
            "id": {
              "name": "id",
              "default": "\"\"",
              "type": "DOMString"
            }
          }
        }
      },
      "AnimationPlaybackEventInit": {
        "name": "AnimationPlaybackEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "currentTime": {
              "name": "currentTime",
              "default": "null",
              "type": "double",
              "nullable": 1
            },
            "timelineTime": {
              "name": "timelineTime",
              "default": "null",
              "type": "double",
              "nullable": 1
            }
          }
        }
      },
      "WebAssemblyInstantiatedSource": {
        "name": "WebAssemblyInstantiatedSource",
        "extends": "Object",
        "members": {
          "member": {
            "module": {
              "name": "module",
              "required": 1,
              "type": "Module"
            },
            "instance": {
              "name": "instance",
              "required": 1,
              "type": "Instance"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "ModuleExportDescriptor": {
        "name": "ModuleExportDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "USVString"
            },
            "kind": {
              "name": "kind",
              "required": 1,
              "type": "ImportExportKind"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "ModuleImportDescriptor": {
        "name": "ModuleImportDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "module": {
              "name": "module",
              "required": 1,
              "type": "USVString"
            },
            "name": {
              "name": "name",
              "required": 1,
              "type": "USVString"
            },
            "kind": {
              "name": "kind",
              "required": 1,
              "type": "ImportExportKind"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "MemoryDescriptor": {
        "name": "MemoryDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "initial": {
              "name": "initial",
              "required": 1,
              "type": "unsigned long"
            },
            "maximum": {
              "name": "maximum",
              "type": "unsigned long"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "TableDescriptor": {
        "name": "TableDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "element": {
              "name": "element",
              "required": 1,
              "type": "TableKind"
            },
            "initial": {
              "name": "initial",
              "required": 1,
              "type": "unsigned long"
            },
            "maximum": {
              "name": "maximum",
              "type": "unsigned long"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "GlobalDescriptor": {
        "name": "GlobalDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "value": {
              "name": "value",
              "required": 1,
              "type": "ValueType"
            },
            "mutable": {
              "name": "mutable",
              "default": "false",
              "type": "boolean"
            }
          }
        },
        "legacy-namespace": "WebAssembly"
      },
      "OfflineAudioContextOptions": {
        "name": "OfflineAudioContextOptions",
        "extends": "Object",
        "members": {
          "member": {
            "numberOfChannels": {
              "name": "numberOfChannels",
              "default": "1",
              "type": "unsigned long"
            },
            "length": {
              "name": "length",
              "required": 1,
              "type": "unsigned long"
            },
            "sampleRate": {
              "name": "sampleRate",
              "required": 1,
              "type": "float"
            }
          }
        }
      },
      "MediaStreamAudioSourceOptions": {
        "name": "MediaStreamAudioSourceOptions",
        "extends": "Object",
        "members": {
          "member": {
            "mediaStream": {
              "name": "mediaStream",
              "required": 1,
              "type": "MediaStream"
            }
          }
        }
      },
      "MediaStreamTrackAudioSourceOptions": {
        "name": "MediaStreamTrackAudioSourceOptions",
        "extends": "Object",
        "members": {
          "member": {
            "mediaStreamTrack": {
              "name": "mediaStreamTrack",
              "required": 1,
              "type": "MediaStreamTrack"
            }
          }
        }
      },
      "AudioWorkletNodeOptions": {
        "name": "AudioWorkletNodeOptions",
        "extends": "AudioNodeOptions",
        "members": {
          "member": {
            "numberOfInputs": {
              "name": "numberOfInputs",
              "default": "1",
              "type": "unsigned long"
            },
            "numberOfOutputs": {
              "name": "numberOfOutputs",
              "default": "1",
              "type": "unsigned long"
            },
            "outputChannelCount": {
              "name": "outputChannelCount",
              "type": "sequence",
              "subtype": {
                "type": "unsigned long"
              }
            },
            "parameterData": {
              "name": "parameterData",
              "type": "record",
              "subtype": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "double"
                }
              ]
            },
            "processorOptions": {
              "name": "processorOptions",
              "default": "null",
              "type": "object",
              "nullable": 1
            }
          }
        }
      },
      "PublicKeyCredentialParameters": {
        "name": "PublicKeyCredentialParameters",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "required": 1,
              "type": "PublicKeyCredentialType"
            },
            "alg": {
              "name": "alg",
              "required": 1,
              "type": "COSEAlgorithmIdentifier"
            }
          }
        }
      },
      "PublicKeyCredentialCreationOptions": {
        "name": "PublicKeyCredentialCreationOptions",
        "extends": "Object",
        "members": {
          "member": {
            "rp": {
              "name": "rp",
              "required": 1,
              "type": "PublicKeyCredentialRpEntity"
            },
            "user": {
              "name": "user",
              "required": 1,
              "type": "PublicKeyCredentialUserEntity"
            },
            "challenge": {
              "name": "challenge",
              "required": 1,
              "type": "BufferSource"
            },
            "pubKeyCredParams": {
              "name": "pubKeyCredParams",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "PublicKeyCredentialParameters"
              }
            },
            "timeout": {
              "name": "timeout",
              "type": "unsigned long"
            },
            "excludeCredentials": {
              "name": "excludeCredentials",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "PublicKeyCredentialDescriptor"
              }
            },
            "authenticatorSelection": {
              "name": "authenticatorSelection",
              "type": "AuthenticatorSelectionCriteria"
            },
            "attestation": {
              "name": "attestation",
              "default": "\"none\"",
              "type": "AttestationConveyancePreference"
            },
            "extensions": {
              "name": "extensions",
              "type": "AuthenticationExtensionsClientInputs"
            }
          }
        }
      },
      "PublicKeyCredentialEntity": {
        "name": "PublicKeyCredentialEntity",
        "extends": "Object",
        "members": {
          "member": {
            "name": {
              "name": "name",
              "required": 1,
              "type": "DOMString"
            },
            "icon": {
              "name": "icon",
              "type": "USVString"
            }
          }
        }
      },
      "PublicKeyCredentialRpEntity": {
        "name": "PublicKeyCredentialRpEntity",
        "extends": "PublicKeyCredentialEntity",
        "members": {
          "member": {
            "id": {
              "name": "id",
              "type": "DOMString"
            }
          }
        }
      },
      "PublicKeyCredentialUserEntity": {
        "name": "PublicKeyCredentialUserEntity",
        "extends": "PublicKeyCredentialEntity",
        "members": {
          "member": {
            "id": {
              "name": "id",
              "required": 1,
              "type": "BufferSource"
            },
            "displayName": {
              "name": "displayName",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "AuthenticatorSelectionCriteria": {
        "name": "AuthenticatorSelectionCriteria",
        "extends": "Object",
        "members": {
          "member": {
            "authenticatorAttachment": {
              "name": "authenticatorAttachment",
              "type": "AuthenticatorAttachment"
            },
            "requireResidentKey": {
              "name": "requireResidentKey",
              "default": "false",
              "type": "boolean"
            },
            "userVerification": {
              "name": "userVerification",
              "default": "\"preferred\"",
              "type": "UserVerificationRequirement"
            }
          }
        }
      },
      "PublicKeyCredentialRequestOptions": {
        "name": "PublicKeyCredentialRequestOptions",
        "extends": "Object",
        "members": {
          "member": {
            "challenge": {
              "name": "challenge",
              "required": 1,
              "type": "BufferSource"
            },
            "timeout": {
              "name": "timeout",
              "type": "unsigned long"
            },
            "rpId": {
              "name": "rpId",
              "type": "USVString"
            },
            "allowCredentials": {
              "name": "allowCredentials",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "PublicKeyCredentialDescriptor"
              }
            },
            "userVerification": {
              "name": "userVerification",
              "default": "\"preferred\"",
              "type": "UserVerificationRequirement"
            },
            "extensions": {
              "name": "extensions",
              "type": "AuthenticationExtensionsClientInputs"
            }
          }
        }
      },
      "AuthenticationExtensionsClientInputs": {
        "name": "AuthenticationExtensionsClientInputs",
        "extends": "Object",
        "members": {
          "member": {
            "appid": {
              "name": "appid",
              "type": "USVString"
            },
            "txAuthSimple": {
              "name": "txAuthSimple",
              "type": "USVString"
            },
            "txAuthGeneric": {
              "name": "txAuthGeneric",
              "type": "txAuthGenericArg"
            },
            "authnSel": {
              "name": "authnSel",
              "type": "AuthenticatorSelectionList"
            },
            "exts": {
              "name": "exts",
              "type": "boolean"
            },
            "uvi": {
              "name": "uvi",
              "type": "boolean"
            },
            "loc": {
              "name": "loc",
              "type": "boolean"
            },
            "uvm": {
              "name": "uvm",
              "type": "boolean"
            }
          }
        }
      },
      "AuthenticationExtensionsClientOutputs": {
        "name": "AuthenticationExtensionsClientOutputs",
        "extends": "Object",
        "members": {
          "member": {
            "appid": {
              "name": "appid",
              "type": "boolean"
            },
            "txAuthSimple": {
              "name": "txAuthSimple",
              "type": "USVString"
            },
            "txAuthGeneric": {
              "name": "txAuthGeneric",
              "type": "ArrayBuffer"
            },
            "authnSel": {
              "name": "authnSel",
              "type": "boolean"
            },
            "exts": {
              "name": "exts",
              "type": "AuthenticationExtensionsSupported"
            },
            "uvi": {
              "name": "uvi",
              "type": "ArrayBuffer"
            },
            "loc": {
              "name": "loc",
              "type": "Coordinates"
            },
            "uvm": {
              "name": "uvm",
              "type": "UvmEntries"
            }
          }
        }
      },
      "CollectedClientData": {
        "name": "CollectedClientData",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "required": 1,
              "type": "DOMString"
            },
            "challenge": {
              "name": "challenge",
              "required": 1,
              "type": "DOMString"
            },
            "origin": {
              "name": "origin",
              "required": 1,
              "type": "DOMString"
            },
            "tokenBinding": {
              "name": "tokenBinding",
              "type": "TokenBinding"
            }
          }
        }
      },
      "TokenBinding": {
        "name": "TokenBinding",
        "extends": "Object",
        "members": {
          "member": {
            "status": {
              "name": "status",
              "required": 1,
              "type": "TokenBindingStatus"
            },
            "id": {
              "name": "id",
              "type": "DOMString"
            }
          }
        }
      },
      "PublicKeyCredentialDescriptor": {
        "name": "PublicKeyCredentialDescriptor",
        "extends": "Object",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "required": 1,
              "type": "PublicKeyCredentialType"
            },
            "id": {
              "name": "id",
              "required": 1,
              "type": "BufferSource"
            },
            "transports": {
              "name": "transports",
              "type": "sequence",
              "subtype": {
                "type": "AuthenticatorTransport"
              }
            }
          }
        }
      },
      "txAuthGenericArg": {
        "name": "txAuthGenericArg",
        "extends": "Object",
        "members": {
          "member": {
            "contentType": {
              "name": "contentType",
              "required": 1,
              "type": "USVString"
            },
            "content": {
              "name": "content",
              "required": 1,
              "type": "ArrayBuffer"
            }
          }
        }
      },
      "authenticatorBiometricPerfBounds": {
        "name": "authenticatorBiometricPerfBounds",
        "extends": "Object",
        "members": {
          "member": {
            "FAR": {
              "name": "FAR",
              "type": "float"
            },
            "FRR": {
              "name": "FRR",
              "type": "float"
            }
          }
        }
      },
      "CryptoKeyPair": {
        "name": "CryptoKeyPair",
        "extends": "Object",
        "members": {
          "member": {
            "publicKey": {
              "name": "publicKey",
              "type": "CryptoKey"
            },
            "privateKey": {
              "name": "privateKey",
              "type": "CryptoKey"
            }
          }
        }
      },
      "RTCOAuthCredential": {
        "name": "RTCOAuthCredential",
        "extends": "Object",
        "members": {
          "member": {
            "macKey": {
              "name": "macKey",
              "required": 1,
              "type": "DOMString"
            },
            "accessToken": {
              "name": "accessToken",
              "required": 1,
              "type": "DOMString"
            }
          }
        }
      },
      "RTCOfferAnswerOptions": {
        "name": "RTCOfferAnswerOptions",
        "extends": "Object",
        "members": {
          "member": {
            "voiceActivityDetection": {
              "name": "voiceActivityDetection",
              "default": "true",
              "type": "boolean"
            }
          }
        }
      },
      "RTCAnswerOptions": {
        "name": "RTCAnswerOptions",
        "extends": "RTCOfferAnswerOptions",
        "members": {
          "member": {}
        }
      },
      "RTCPeerConnectionIceErrorEventInit": {
        "name": "RTCPeerConnectionIceErrorEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "hostCandidate": {
              "name": "hostCandidate",
              "type": "DOMString"
            },
            "url": {
              "name": "url",
              "type": "DOMString"
            },
            "errorCode": {
              "name": "errorCode",
              "required": 1,
              "type": "unsigned short"
            },
            "statusText": {
              "name": "statusText",
              "type": "USVString"
            }
          }
        }
      },
      "RTCCertificateExpiration": {
        "name": "RTCCertificateExpiration",
        "extends": "Object",
        "members": {
          "member": {
            "expires": {
              "name": "expires",
              "type": "DOMTimeStamp"
            }
          }
        }
      },
      "RTCRtpTransceiverInit": {
        "name": "RTCRtpTransceiverInit",
        "extends": "Object",
        "members": {
          "member": {
            "direction": {
              "name": "direction",
              "default": "\"sendrecv\"",
              "type": "RTCRtpTransceiverDirection"
            },
            "streams": {
              "name": "streams",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MediaStream"
              }
            },
            "sendEncodings": {
              "name": "sendEncodings",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpEncodingParameters"
              }
            }
          }
        }
      },
      "RTCRtpSendParameters": {
        "name": "RTCRtpSendParameters",
        "extends": "RTCRtpParameters",
        "members": {
          "member": {
            "transactionId": {
              "name": "transactionId",
              "required": 1,
              "type": "DOMString"
            },
            "encodings": {
              "name": "encodings",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpEncodingParameters"
              }
            },
            "degradationPreference": {
              "name": "degradationPreference",
              "default": "\"balanced\"",
              "type": "RTCDegradationPreference"
            }
          }
        }
      },
      "RTCRtpReceiveParameters": {
        "name": "RTCRtpReceiveParameters",
        "extends": "RTCRtpParameters",
        "members": {
          "member": {
            "encodings": {
              "name": "encodings",
              "required": 1,
              "type": "sequence",
              "subtype": {
                "type": "RTCRtpDecodingParameters"
              }
            }
          }
        }
      },
      "RTCRtpCodingParameters": {
        "name": "RTCRtpCodingParameters",
        "extends": "Object",
        "members": {
          "member": {
            "rid": {
              "name": "rid",
              "type": "DOMString"
            }
          }
        }
      },
      "RTCRtpDecodingParameters": {
        "name": "RTCRtpDecodingParameters",
        "extends": "RTCRtpCodingParameters",
        "members": {
          "member": {}
        }
      },
      "RTCRtpHeaderExtensionCapability": {
        "name": "RTCRtpHeaderExtensionCapability",
        "extends": "Object",
        "members": {
          "member": {
            "uri": {
              "name": "uri",
              "type": "DOMString"
            }
          }
        }
      },
      "RTCRtpSynchronizationSource": {
        "name": "RTCRtpSynchronizationSource",
        "extends": "RTCRtpContributingSource",
        "members": {
          "member": {
            "voiceActivityFlag": {
              "name": "voiceActivityFlag",
              "type": "boolean"
            }
          }
        }
      },
      "RTCTrackEventInit": {
        "name": "RTCTrackEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "receiver": {
              "name": "receiver",
              "required": 1,
              "type": "RTCRtpReceiver"
            },
            "track": {
              "name": "track",
              "required": 1,
              "type": "MediaStreamTrack"
            },
            "streams": {
              "name": "streams",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "MediaStream"
              }
            },
            "transceiver": {
              "name": "transceiver",
              "required": 1,
              "type": "RTCRtpTransceiver"
            }
          }
        }
      },
      "RTCDataChannelInit": {
        "name": "RTCDataChannelInit",
        "extends": "Object",
        "members": {
          "member": {
            "ordered": {
              "name": "ordered",
              "default": "true",
              "type": "boolean"
            },
            "maxPacketLifeTime": {
              "name": "maxPacketLifeTime",
              "type": "unsigned short"
            },
            "maxRetransmits": {
              "name": "maxRetransmits",
              "type": "unsigned short"
            },
            "protocol": {
              "name": "protocol",
              "default": "\"\"",
              "type": "USVString"
            },
            "negotiated": {
              "name": "negotiated",
              "default": "false",
              "type": "boolean"
            },
            "id": {
              "name": "id",
              "type": "unsigned short"
            },
            "priority": {
              "name": "priority",
              "default": "\"low\"",
              "type": "RTCPriorityType"
            }
          }
        }
      },
      "RTCDataChannelEventInit": {
        "name": "RTCDataChannelEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "channel": {
              "name": "channel",
              "required": 1,
              "type": "RTCDataChannel"
            }
          }
        }
      },
      "RTCStatsEventInit": {
        "name": "RTCStatsEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "report": {
              "name": "report",
              "required": 1,
              "type": "RTCStatsReport"
            }
          }
        }
      },
      "RTCErrorEventInit": {
        "name": "RTCErrorEventInit",
        "extends": "EventInit",
        "members": {
          "member": {
            "error": {
              "name": "error",
              "default": "null",
              "type": "RTCError",
              "nullable": 1
            }
          }
        }
      },
      "WorkletOptions": {
        "name": "WorkletOptions",
        "extends": "Object",
        "members": {
          "member": {
            "credentials": {
              "name": "credentials",
              "default": "\"same-origin\"",
              "type": "RequestCredentials"
            }
          }
        }
      },
      "PostMessageOptions": {
        "name": "PostMessageOptions",
        "extends": "Object",
        "members": {
          "member": {
            "transfer": {
              "name": "transfer",
              "default": "",
              "type": "sequence",
              "subtype": {
                "type": "object"
              }
            }
          }
        }
      },
      "WorkerOptions": {
        "name": "WorkerOptions",
        "members": {
          "member": {
            "type": {
              "name": "type",
              "type": "WorkerType"
            },
            "credentials": {
              "name": "credentials",
              "type": "RequestCredentials"
            },
            "name": {
              "name": "name",
              "type": "DOMString"
            }
          }
        }
      }
    }
  },
  "enums": {
    "enum": {
      "ReferrerPolicy": {
        "name": "ReferrerPolicy",
        "value": [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "same-origin",
          "origin",
          "strict-origin",
          "origin-when-cross-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ]
      },
      "DistanceModelType": {
        "name": "DistanceModelType",
        "value": [
          "linear",
          "inverse",
          "exponential"
        ]
      },
      "MediaKeySessionType": {
        "name": "MediaKeySessionType",
        "value": [
          "temporary",
          "persistent-license"
        ]
      },
      "AudioContextState": {
        "name": "AudioContextState",
        "value": [
          "suspended",
          "running",
          "closed"
        ]
      },
      "GamepadInputEmulationType": {
        "specs": "gamepad",
        "value": [
          "mouse",
          "keyboard",
          "gamepad"
        ],
        "name": "GamepadInputEmulationType"
      },
      "EndOfStreamError": {
        "name": "EndOfStreamError",
        "value": [
          "network",
          "decode"
        ]
      },
      "MediaKeysRequirement": {
        "name": "MediaKeysRequirement",
        "value": [
          "required",
          "optional",
          "not-allowed"
        ]
      },
      "ChannelCountMode": {
        "name": "ChannelCountMode",
        "value": [
          "max",
          "clamped-max",
          "explicit"
        ]
      },
      "RequestCredentials": {
        "name": "RequestCredentials",
        "value": [
          "omit",
          "same-origin",
          "include"
        ]
      },
      "RTCDtlsRole": {
        "specs": "ortc",
        "value": [
          "auto",
          "client",
          "server"
        ],
        "name": "RTCDtlsRole"
      },
      "RTCIceTcpCandidateType": {
        "name": "RTCIceTcpCandidateType",
        "value": [
          "active",
          "passive",
          "so"
        ]
      },
      "IDBTransactionMode": {
        "name": "IDBTransactionMode",
        "value": [
          "readonly",
          "readwrite",
          "versionchange"
        ]
      },
      "MSWebViewPermissionType": {
        "specs": "none",
        "value": [
          "geolocation",
          "unlimitedIndexedDBQuota",
          "media",
          "pointerlock",
          "webnotifications"
        ],
        "name": "MSWebViewPermissionType"
      },
      "MSIceType": {
        "specs": "webrtc-stats",
        "value": [
          "failed",
          "direct",
          "relay"
        ],
        "name": "MSIceType"
      },
      "TextTrackKind": {
        "specs": "html5",
        "value": [
          "subtitles",
          "captions",
          "descriptions",
          "chapters",
          "metadata"
        ],
        "name": "TextTrackKind"
      },
      "ReadyState": {
        "name": "ReadyState",
        "value": [
          "closed",
          "open",
          "ended"
        ]
      },
      "GamepadMappingType": {
        "name": "GamepadMappingType",
        "value": [
          "",
          "standard"
        ]
      },
      "OverSampleType": {
        "name": "OverSampleType",
        "value": [
          "none",
          "2x",
          "4x"
        ]
      },
      "NotificationDirection": {
        "name": "NotificationDirection",
        "value": [
          "auto",
          "ltr",
          "rtl"
        ]
      },
      "RTCDtlsTransportState": {
        "name": "RTCDtlsTransportState",
        "value": [
          "new",
          "connecting",
          "connected",
          "closed",
          "failed"
        ]
      },
      "AudioContextLatencyCategory": {
        "name": "AudioContextLatencyCategory",
        "value": [
          "balanced",
          "interactive",
          "playback"
        ]
      },
      "ChannelInterpretation": {
        "name": "ChannelInterpretation",
        "value": [
          "speakers",
          "discrete"
        ]
      },
      "RTCIceGathererState": {
        "name": "RTCIceGathererState",
        "value": [
          "new",
          "gathering",
          "complete"
        ]
      },
      "OscillatorType": {
        "name": "OscillatorType",
        "value": [
          "sine",
          "square",
          "sawtooth",
          "triangle",
          "custom"
        ]
      },
      "RequestDestination": {
        "name": "RequestDestination",
        "value": [
          "",
          "audio",
          "audioworklet",
          "document",
          "embed",
          "font",
          "image",
          "manifest",
          "object",
          "paintworklet",
          "report",
          "script",
          "sharedworker",
          "style",
          "track",
          "video",
          "worker",
          "xslt"
        ]
      },
      "MediaDeviceKind": {
        "name": "MediaDeviceKind",
        "value": [
          "audioinput",
          "audiooutput",
          "videoinput"
        ]
      },
      "BinaryType": {
        "specs": "html5",
        "value": [
          "blob",
          "arraybuffer"
        ],
        "name": "BinaryType"
      },
      "PushPermissionState": {
        "name": "PushPermissionState",
        "value": [
          "denied",
          "granted",
          "prompt"
        ]
      },
      "Transport": {
        "specs": "webauthn",
        "value": [
          "usb",
          "nfc",
          "ble"
        ],
        "name": "Transport"
      },
      "GamepadHand": {
        "name": "GamepadHand",
        "value": [
          "",
          "left",
          "right"
        ]
      },
      "BiquadFilterType": {
        "name": "BiquadFilterType",
        "value": [
          "lowpass",
          "highpass",
          "bandpass",
          "lowshelf",
          "highshelf",
          "peaking",
          "notch",
          "allpass"
        ]
      },
      "VideoFacingModeEnum": {
        "name": "VideoFacingModeEnum",
        "value": [
          "user",
          "environment",
          "left",
          "right"
        ]
      },
      "VREye": {
        "specs": "WebVR",
        "value": [
          "left",
          "right"
        ],
        "name": "VREye"
      },
      "RTCSdpType": {
        "name": "RTCSdpType",
        "value": [
          "offer",
          "pranswer",
          "answer",
          "rollback"
        ]
      },
      "MediaKeyMessageType": {
        "name": "MediaKeyMessageType",
        "value": [
          "license-request",
          "license-renewal",
          "license-release",
          "individualization-request"
        ]
      },
      "RTCIceProtocol": {
        "name": "RTCIceProtocol",
        "value": [
          "udp",
          "tcp"
        ]
      },
      "NotificationPermission": {
        "name": "NotificationPermission",
        "value": [
          "default",
          "denied",
          "granted"
        ]
      },
      "KeyUsage": {
        "name": "KeyUsage",
        "value": [
          "encrypt",
          "decrypt",
          "sign",
          "verify",
          "deriveKey",
          "deriveBits",
          "wrapKey",
          "unwrapKey"
        ]
      },
      "PaymentComplete": {
        "specs": "payment-request",
        "value": [
          "success",
          "fail",
          "unknown"
        ],
        "name": "PaymentComplete"
      },
      "RequestMode": {
        "name": "RequestMode",
        "value": [
          "navigate",
          "same-origin",
          "no-cors",
          "cors"
        ]
      },
      "ExpandGranularity": {
        "specs": "dom4",
        "value": [
          "character",
          "word",
          "sentence",
          "textedit"
        ],
        "name": "ExpandGranularity"
      },
      "KeyType": {
        "name": "KeyType",
        "value": [
          "public",
          "private",
          "secret"
        ]
      },
      "RTCStatsType": {
        "specs": "ortc",
        "value": [
          "inboundrtp",
          "outboundrtp",
          "session",
          "datachannel",
          "track",
          "transport",
          "candidatepair",
          "localcandidate",
          "remotecandidate"
        ],
        "name": "RTCStatsType"
      },
      "IDBCursorDirection": {
        "name": "IDBCursorDirection",
        "value": [
          "next",
          "nextunique",
          "prev",
          "prevunique"
        ]
      },
      "NavigationType": {
        "name": "NavigationType",
        "value": [
          "navigate",
          "reload",
          "back_forward",
          "prerender"
        ]
      },
      "IDBRequestReadyState": {
        "name": "IDBRequestReadyState",
        "value": [
          "pending",
          "done"
        ]
      },
      "KeyFormat": {
        "name": "KeyFormat",
        "value": [
          "raw",
          "spki",
          "pkcs8",
          "jwk"
        ]
      },
      "CanPlayTypeResult": {
        "specs": "html5",
        "value": [
          "",
          "maybe",
          "probably"
        ],
        "name": "CanPlayTypeResult"
      },
      "TextTrackMode": {
        "specs": "whatwg-html",
        "value": [
          "disabled",
          "hidden",
          "showing"
        ],
        "name": "TextTrackMode"
      },
      "RTCBundlePolicy": {
        "name": "RTCBundlePolicy",
        "value": [
          "balanced",
          "max-compat",
          "max-bundle"
        ]
      },
      "MSCredentialType": {
        "specs": "webauthn",
        "value": [
          "FIDO_2_0"
        ],
        "name": "MSCredentialType"
      },
      "AppendMode": {
        "name": "AppendMode",
        "value": [
          "segments",
          "sequence"
        ]
      },
      "RequestCache": {
        "name": "RequestCache",
        "value": [
          "default",
          "no-store",
          "reload",
          "no-cache",
          "force-cache",
          "only-if-cached"
        ]
      },
      "RTCIceConnectionState": {
        "name": "RTCIceConnectionState",
        "value": [
          "new",
          "checking",
          "connected",
          "completed",
          "disconnected",
          "failed",
          "closed"
        ]
      },
      "RTCIceCandidateType": {
        "name": "RTCIceCandidateType",
        "value": [
          "host",
          "srflx",
          "prflx",
          "relay"
        ]
      },
      "RTCIceComponent": {
        "name": "RTCIceComponent",
        "value": [
          "rtp",
          "rtcp"
        ]
      },
      "VisibilityState": {
        "name": "VisibilityState",
        "value": [
          "hidden",
          "visible"
        ]
      },
      "GamepadHapticActuatorType": {
        "name": "GamepadHapticActuatorType",
        "value": [
          "vibration"
        ]
      },
      "VRDisplayEventReason": {
        "specs": "WebVR",
        "value": [
          "mounted",
          "navigation",
          "requested",
          "unmounted"
        ],
        "name": "VRDisplayEventReason"
      },
      "DisplayCaptureSurfaceType": {
        "specs": "screen-capture",
        "value": [
          "monitor",
          "window",
          "application",
          "browser"
        ],
        "name": "DisplayCaptureSurfaceType"
      },
      "XMLHttpRequestResponseType": {
        "name": "XMLHttpRequestResponseType",
        "value": [
          "",
          "arraybuffer",
          "blob",
          "document",
          "json",
          "text"
        ]
      },
      "CanvasFillRule": {
        "name": "CanvasFillRule",
        "value": [
          "nonzero",
          "evenodd"
        ]
      },
      "RTCIceTransportPolicy": {
        "name": "RTCIceTransportPolicy",
        "value": [
          "relay",
          "all"
        ]
      },
      "MSWebViewPermissionState": {
        "specs": "none",
        "value": [
          "unknown",
          "defer",
          "allow",
          "deny"
        ],
        "name": "MSWebViewPermissionState"
      },
      "ScopedCredentialType": {
        "specs": "webauthn",
        "value": [
          "ScopedCred"
        ],
        "name": "ScopedCredentialType"
      },
      "ListeningState": {
        "specs": "none",
        "value": [
          "inactive",
          "active",
          "disambiguation"
        ],
        "name": "ListeningState"
      },
      "MediaStreamTrackState": {
        "name": "MediaStreamTrackState",
        "value": [
          "live",
          "ended"
        ]
      },
      "RTCIceRole": {
        "name": "RTCIceRole",
        "value": [
          "controlling",
          "controlled"
        ]
      },
      "MSStatsType": {
        "specs": "webrtc-stats",
        "value": [
          "description",
          "localclientevent",
          "inbound-network",
          "outbound-network",
          "inbound-payload",
          "outbound-payload",
          "transportdiagnostics"
        ],
        "name": "MSStatsType"
      },
      "RTCStatsIceCandidatePairState": {
        "specs": "ortc",
        "value": [
          "frozen",
          "waiting",
          "inprogress",
          "failed",
          "succeeded",
          "cancelled"
        ],
        "name": "RTCStatsIceCandidatePairState"
      },
      "RTCSignalingState": {
        "name": "RTCSignalingState",
        "value": [
          "stable",
          "have-local-offer",
          "have-remote-offer",
          "have-local-pranswer",
          "have-remote-pranswer",
          "closed"
        ]
      },
      "ResponseType": {
        "name": "ResponseType",
        "value": [
          "basic",
          "cors",
          "default",
          "error",
          "opaque",
          "opaqueredirect"
        ]
      },
      "RTCIceTransportState": {
        "name": "RTCIceTransportState",
        "value": [
          "new",
          "checking",
          "connected",
          "completed",
          "disconnected",
          "failed",
          "closed"
        ]
      },
      "MediaKeyStatus": {
        "name": "MediaKeyStatus",
        "value": [
          "usable",
          "expired",
          "released",
          "output-restricted",
          "output-downscaled",
          "status-pending",
          "internal-error"
        ]
      },
      "PushEncryptionKeyName": {
        "name": "PushEncryptionKeyName",
        "value": [
          "p256dh",
          "auth"
        ]
      },
      "MSIceAddrType": {
        "specs": "webrtc-stats",
        "value": [
          "os",
          "stun",
          "turn",
          "peer-derived"
        ],
        "name": "MSIceAddrType"
      },
      "RTCStatsIceCandidateType": {
        "specs": "ortc",
        "value": [
          "host",
          "serverreflexive",
          "peerreflexive",
          "relayed"
        ],
        "name": "RTCStatsIceCandidateType"
      },
      "NavigationReason": {
        "specs": "none",
        "value": [
          "up",
          "down",
          "left",
          "right"
        ],
        "name": "NavigationReason"
      },
      "RTCIceGatheringState": {
        "name": "RTCIceGatheringState",
        "value": [
          "new",
          "gathering",
          "complete"
        ]
      },
      "RequestRedirect": {
        "name": "RequestRedirect",
        "value": [
          "follow",
          "error",
          "manual"
        ]
      },
      "ServiceWorkerState": {
        "name": "ServiceWorkerState",
        "value": [
          "installing",
          "installed",
          "activating",
          "activated",
          "redundant"
        ]
      },
      "RTCIceGatherPolicy": {
        "specs": "ortc",
        "value": [
          "all",
          "nohost",
          "relay"
        ],
        "name": "RTCIceGatherPolicy"
      },
      "MSTransportType": {
        "specs": "webauthn",
        "value": [
          "Embedded",
          "USB",
          "NFC",
          "BT"
        ],
        "name": "MSTransportType"
      },
      "RTCDegradationPreference": {
        "name": "RTCDegradationPreference",
        "value": [
          "maintain-framerate",
          "maintain-resolution",
          "balanced"
        ]
      },
      "PaymentShippingType": {
        "specs": "payment-request",
        "value": [
          "shipping",
          "delivery",
          "pickup"
        ],
        "name": "PaymentShippingType"
      },
      "PanningModelType": {
        "name": "PanningModelType",
        "value": [
          "equalpower",
          "HRTF"
        ]
      },
      "CredentialMediationRequirement": {
        "name": "CredentialMediationRequirement",
        "value": [
          "silent",
          "optional",
          "required"
        ]
      },
      "ScrollBehavior": {
        "name": "ScrollBehavior",
        "value": [
          "auto",
          "smooth"
        ]
      },
      "ScrollLogicalPosition": {
        "name": "ScrollLogicalPosition",
        "value": [
          "start",
          "center",
          "end",
          "nearest"
        ]
      },
      "PermissionState": {
        "name": "PermissionState",
        "value": [
          "granted",
          "denied",
          "prompt"
        ]
      },
      "ShadowRootMode": {
        "name": "ShadowRootMode",
        "value": [
          "open",
          "closed"
        ]
      },
      "SupportedType": {
        "name": "SupportedType",
        "value": [
          "text/html",
          "text/xml",
          "application/xml",
          "application/xhtml+xml",
          "image/svg+xml"
        ]
      },
      "EndingType": {
        "name": "EndingType",
        "value": [
          "transparent",
          "native"
        ]
      },
      "FullscreenNavigationUI": {
        "name": "FullscreenNavigationUI",
        "value": [
          "auto",
          "show",
          "hide"
        ]
      },
      "ImageSmoothingQuality": {
        "name": "ImageSmoothingQuality",
        "value": [
          "low",
          "medium",
          "high"
        ]
      },
      "CanvasLineCap": {
        "name": "CanvasLineCap",
        "value": [
          "butt",
          "round",
          "square"
        ]
      },
      "CanvasLineJoin": {
        "name": "CanvasLineJoin",
        "value": [
          "round",
          "bevel",
          "miter"
        ]
      },
      "CanvasTextAlign": {
        "name": "CanvasTextAlign",
        "value": [
          "start",
          "end",
          "left",
          "right",
          "center"
        ]
      },
      "CanvasTextBaseline": {
        "name": "CanvasTextBaseline",
        "value": [
          "top",
          "hanging",
          "middle",
          "alphabetic",
          "ideographic",
          "bottom"
        ]
      },
      "CanvasDirection": {
        "name": "CanvasDirection",
        "value": [
          "ltr",
          "rtl",
          "inherit"
        ]
      },
      "OffscreenRenderingContextId": {
        "name": "OffscreenRenderingContextId",
        "value": [
          "2d",
          "bitmaprenderer",
          "webgl",
          "webgl2"
        ]
      },
      "DocumentReadyState": {
        "name": "DocumentReadyState",
        "value": [
          "loading",
          "interactive",
          "complete"
        ]
      },
      "SelectionMode": {
        "name": "SelectionMode",
        "value": [
          "select",
          "start",
          "end",
          "preserve"
        ]
      },
      "ImageOrientation": {
        "name": "ImageOrientation",
        "value": [
          "none",
          "flipY"
        ]
      },
      "PremultiplyAlpha": {
        "name": "PremultiplyAlpha",
        "value": [
          "none",
          "premultiply",
          "default"
        ]
      },
      "ColorSpaceConversion": {
        "name": "ColorSpaceConversion",
        "value": [
          "none",
          "default"
        ]
      },
      "ResizeQuality": {
        "name": "ResizeQuality",
        "value": [
          "pixelated",
          "low",
          "medium",
          "high"
        ]
      },
      "ScrollRestoration": {
        "name": "ScrollRestoration",
        "value": [
          "auto",
          "manual"
        ]
      },
      "VideoResizeModeEnum": {
        "name": "VideoResizeModeEnum",
        "value": [
          "none",
          "crop-and-scale"
        ]
      },
      "PermissionName": {
        "name": "PermissionName",
        "value": [
          "geolocation",
          "notifications",
          "push",
          "midi",
          "camera",
          "microphone",
          "speaker",
          "device-info",
          "background-sync",
          "bluetooth",
          "persistent-storage",
          "ambient-light-sensor",
          "accelerometer",
          "gyroscope",
          "magnetometer",
          "clipboard"
        ]
      },
      "OrientationLockType": {
        "name": "OrientationLockType",
        "value": [
          "any",
          "natural",
          "landscape",
          "portrait",
          "portrait-primary",
          "portrait-secondary",
          "landscape-primary",
          "landscape-secondary"
        ]
      },
      "OrientationType": {
        "name": "OrientationType",
        "value": [
          "portrait-primary",
          "portrait-secondary",
          "landscape-primary",
          "landscape-secondary"
        ]
      },
      "ServiceWorkerUpdateViaCache": {
        "name": "ServiceWorkerUpdateViaCache",
        "value": [
          "imports",
          "all",
          "none"
        ]
      },
      "FrameType": {
        "name": "FrameType",
        "value": [
          "auxiliary",
          "top-level",
          "nested",
          "none"
        ]
      },
      "TouchType": {
        "name": "TouchType",
        "value": [
          "direct",
          "stylus"
        ]
      },
      "AnimationPlayState": {
        "name": "AnimationPlayState",
        "value": [
          "idle",
          "running",
          "paused",
          "finished"
        ]
      },
      "FillMode": {
        "name": "FillMode",
        "value": [
          "none",
          "forwards",
          "backwards",
          "both",
          "auto"
        ]
      },
      "PlaybackDirection": {
        "name": "PlaybackDirection",
        "value": [
          "normal",
          "reverse",
          "alternate",
          "alternate-reverse"
        ]
      },
      "IterationCompositeOperation": {
        "name": "IterationCompositeOperation",
        "value": [
          "replace",
          "accumulate"
        ]
      },
      "CompositeOperation": {
        "name": "CompositeOperation",
        "value": [
          "replace",
          "add",
          "accumulate"
        ]
      },
      "CompositeOperationOrAuto": {
        "name": "CompositeOperationOrAuto",
        "value": [
          "replace",
          "add",
          "accumulate",
          "auto"
        ]
      },
      "ImportExportKind": {
        "name": "ImportExportKind",
        "value": [
          "function",
          "table",
          "memory",
          "global"
        ],
        "legacy-namespace": "WebAssembly"
      },
      "TableKind": {
        "name": "TableKind",
        "value": [
          "anyfunc"
        ],
        "legacy-namespace": "WebAssembly"
      },
      "ValueType": {
        "name": "ValueType",
        "value": [
          "i32",
          "i64",
          "f32",
          "f64"
        ],
        "legacy-namespace": "WebAssembly"
      },
      "AutomationRate": {
        "name": "AutomationRate",
        "value": [
          "a-rate",
          "k-rate"
        ]
      },
      "AuthenticatorAttachment": {
        "name": "AuthenticatorAttachment",
        "value": [
          "platform",
          "cross-platform"
        ]
      },
      "AttestationConveyancePreference": {
        "name": "AttestationConveyancePreference",
        "value": [
          "none",
          "indirect",
          "direct"
        ]
      },
      "TokenBindingStatus": {
        "name": "TokenBindingStatus",
        "value": [
          "present",
          "supported"
        ]
      },
      "PublicKeyCredentialType": {
        "name": "PublicKeyCredentialType",
        "value": [
          "public-key"
        ]
      },
      "AuthenticatorTransport": {
        "name": "AuthenticatorTransport",
        "value": [
          "usb",
          "nfc",
          "ble",
          "internal"
        ]
      },
      "UserVerificationRequirement": {
        "name": "UserVerificationRequirement",
        "value": [
          "required",
          "preferred",
          "discouraged"
        ]
      },
      "WebGLPowerPreference": {
        "name": "WebGLPowerPreference",
        "value": [
          "default",
          "low-power",
          "high-performance"
        ]
      },
      "RTCIceCredentialType": {
        "name": "RTCIceCredentialType",
        "value": [
          "password",
          "oauth"
        ]
      },
      "RTCRtcpMuxPolicy": {
        "name": "RTCRtcpMuxPolicy",
        "value": [
          "negotiate",
          "require"
        ]
      },
      "RTCPeerConnectionState": {
        "name": "RTCPeerConnectionState",
        "value": [
          "new",
          "connecting",
          "connected",
          "disconnected",
          "failed",
          "closed"
        ]
      },
      "RTCPriorityType": {
        "name": "RTCPriorityType",
        "value": [
          "very-low",
          "low",
          "medium",
          "high"
        ]
      },
      "RTCRtpTransceiverDirection": {
        "name": "RTCRtpTransceiverDirection",
        "value": [
          "sendrecv",
          "sendonly",
          "recvonly",
          "inactive"
        ]
      },
      "RTCDtxStatus": {
        "name": "RTCDtxStatus",
        "value": [
          "disabled",
          "enabled"
        ]
      },
      "RTCSctpTransportState": {
        "name": "RTCSctpTransportState",
        "value": [
          "connecting",
          "connected",
          "closed"
        ]
      },
      "RTCDataChannelState": {
        "name": "RTCDataChannelState",
        "value": [
          "connecting",
          "open",
          "closing",
          "closed"
        ]
      },
      "RTCErrorDetailType": {
        "name": "RTCErrorDetailType",
        "value": [
          "data-channel-failure",
          "dtls-failure",
          "fingerprint-failure",
          "idp-bad-script-failure",
          "idp-execution-failure",
          "idp-load-failure",
          "idp-need-login",
          "idp-timeout",
          "idp-tls-failure",
          "idp-token-expired",
          "idp-token-invalid",
          "sctp-failure",
          "sdp-syntax-error",
          "hardware-encoder-not-available",
          "hardware-encoder-error"
        ]
      },
      "SpeechRecognitionErrorCode": {
        "name": "SpeechRecognitionErrorCode",
        "value": [
          "no-speech",
          "aborted",
          "audio-capture",
          "network",
          "not-allowed",
          "service-not-allowed",
          "bad-grammar",
          "language-not-supported"
        ]
      },
      "SpeechSynthesisErrorCode": {
        "name": "SpeechSynthesisErrorCode",
        "value": [
          "canceled",
          "interrupted",
          "audio-busy",
          "audio-hardware",
          "network",
          "synthesis-unavailable",
          "synthesis-failed",
          "language-unavailable",
          "voice-unavailable",
          "text-too-long",
          "invalid-argument"
        ]
      },
      "AutoKeyword": {
        "name": "AutoKeyword",
        "value": [
          "auto"
        ]
      },
      "DirectionSetting": {
        "name": "DirectionSetting",
        "value": [
          "",
          "rl",
          "lr"
        ]
      },
      "LineAlignSetting": {
        "name": "LineAlignSetting",
        "value": [
          "start",
          "center",
          "end"
        ]
      },
      "PositionAlignSetting": {
        "name": "PositionAlignSetting",
        "value": [
          "line-left",
          "center",
          "line-right",
          "auto"
        ]
      },
      "AlignSetting": {
        "name": "AlignSetting",
        "value": [
          "start",
          "center",
          "end",
          "left",
          "right"
        ]
      },
      "ScrollSetting": {
        "name": "ScrollSetting",
        "value": [
          "",
          "up"
        ]
      },
      "ClientTypes": {
        "name": "ClientTypes",
        "value": [
          "window",
          "worker",
          "sharedworker",
          "all"
        ]
      },
      "WorkerType": {
        "name": "WorkerType",
        "value": [
          "classic",
          "module"
        ]
      }
    }
  },
  "interfaces": {
    "interface": {
      "HTMLTableElement": {
        "name": "HTMLTableElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createCaption": {
              "name": "createCaption",
              "signature": [
                {
                  "type": "HTMLTableCaptionElement",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates an empty caption element in the table.\n */"
            },
            "deleteCaption": {
              "name": "deleteCaption",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Deletes the caption element and its contents from the table.\n */"
            },
            "createTHead": {
              "name": "createTHead",
              "signature": [
                {
                  "type": "HTMLTableSectionElement",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the tHead element object if successful, or null otherwise.\n */"
            },
            "deleteTHead": {
              "name": "deleteTHead",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Deletes the tHead element and its contents from the table.\n */"
            },
            "createTFoot": {
              "name": "createTFoot",
              "signature": [
                {
                  "type": "HTMLTableSectionElement",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates an empty tFoot element in the table.\n */"
            },
            "deleteTFoot": {
              "name": "deleteTFoot",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Deletes the tFoot element and its contents from the table.\n */"
            },
            "createTBody": {
              "name": "createTBody",
              "signature": [
                {
                  "type": "HTMLTableSectionElement",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates an empty tBody element in the table.\n */"
            },
            "insertRow": {
              "name": "insertRow",
              "signature": [
                {
                  "type": "HTMLTableRowElement",
                  "param": [
                    {
                      "name": "index",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a new row (tr) in the table, and adds the row to the rows collection.\n * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n */"
            },
            "deleteRow": {
              "name": "deleteRow",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the specified row (tr) from the element and from the rows collection.\n * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "caption": {
              "name": "caption",
              "type": "HTMLTableCaptionElement",
              "nullable": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the caption object of a table.\n */"
            },
            "tHead": {
              "name": "tHead",
              "type": "HTMLTableSectionElement",
              "nullable": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the tHead object of the table.\n */"
            },
            "tFoot": {
              "name": "tFoot",
              "type": "HTMLTableSectionElement",
              "nullable": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the tFoot object of the table.\n */"
            },
            "tBodies": {
              "name": "tBodies",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLTableSectionElement>",
              "comment": "/**\n * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\n */"
            },
            "rows": {
              "name": "rows",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLTableRowElement>",
              "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
            },
            "border": {
              "name": "border",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the border to draw around the object.\n */"
            },
            "frame": {
              "name": "frame",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the way the border frame around the table is displayed.\n */"
            },
            "rules": {
              "name": "rules",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves which dividing lines (inner borders) are displayed.\n */"
            },
            "summary": {
              "name": "summary",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a description and/or structure of the object.\n */"
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "cellPadding": {
              "name": "cellPadding",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\n */"
            },
            "cellSpacing": {
              "name": "cellSpacing",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the amount of space between cells in a table.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
        "element": [
          {
            "name": "table"
          }
        ]
      },
      "VRFrameData": {
        "specs": "WebVR",
        "constructor": {
          "specs": "WebVR",
          "signature": [
            {
              "type": "VRFrameData",
              "type-original": "VRFrameData"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "VRFrameData",
        "properties": {
          "property": {
            "rightViewMatrix": {
              "pure": 1,
              "specs": "WebVR",
              "name": "rightViewMatrix",
              "type-original": "Float32Array",
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "leftViewMatrix": {
              "pure": 1,
              "specs": "WebVR",
              "name": "leftViewMatrix",
              "type-original": "Float32Array",
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "timestamp": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "timestamp",
              "type": "double",
              "type-original": "DOMHighResTimeStamp",
              "read-only": 1
            },
            "rightProjectionMatrix": {
              "pure": 1,
              "specs": "WebVR",
              "name": "rightProjectionMatrix",
              "type-original": "Float32Array",
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "leftProjectionMatrix": {
              "pure": 1,
              "specs": "WebVR",
              "name": "leftProjectionMatrix",
              "type-original": "Float32Array",
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "pose": {
              "pure": 1,
              "specs": "WebVR",
              "name": "pose",
              "type-original": "VRPose",
              "exposed": "Window",
              "type": "VRPose",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object",
        "comment": "This WebVR API interface represents all the information needed to render a single frame of a VR scene; constructed by VRDisplay.getFrameData()."
      },
      "TreeWalker": {
        "name": "TreeWalker",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "parentNode": {
              "name": "parentNode",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "firstChild": {
              "name": "firstChild",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "lastChild": {
              "name": "lastChild",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "previousSibling": {
              "name": "previousSibling",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "nextSibling": {
              "name": "nextSibling",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "previousNode": {
              "name": "previousNode",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "nextNode": {
              "name": "nextNode",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "root": {
              "name": "root",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window"
            },
            "whatToShow": {
              "name": "whatToShow",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "filter": {
              "name": "filter",
              "type": "NodeFilter",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "currentNode": {
              "name": "currentNode",
              "type": "Node",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The nodes of a document subtree and a position within them."
      },
      "TextTrackCue": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 3,
              "type": "TextTrackCue",
              "param": [
                {
                  "name": "startTime",
                  "type": "double",
                  "type-original": "double"
                },
                {
                  "name": "endTime",
                  "type": "double",
                  "type-original": "double"
                },
                {
                  "name": "text",
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "type-original": "TextTrackCue"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "TextTrackCue",
        "properties": {
          "property": {
            "onenter": {
              "specs": "html5",
              "name": "onenter",
              "tags": "Captions",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "enter"
            },
            "text": {
              "specs": "html5",
              "exposed": "Window",
              "name": "text",
              "type": "DOMString",
              "tags": "Captions",
              "type-original": "DOMString"
            },
            "endTime": {
              "specs": "html5",
              "exposed": "Window",
              "name": "endTime",
              "type": "double",
              "tags": "Captions",
              "type-original": "double"
            },
            "track": {
              "specs": "html5",
              "name": "track",
              "tags": "Captions",
              "type-original": "TextTrack",
              "exposed": "Window",
              "type": "TextTrack",
              "read-only": 1
            },
            "pauseOnExit": {
              "specs": "html5",
              "exposed": "Window",
              "name": "pauseOnExit",
              "type": "boolean",
              "tags": "Captions",
              "type-original": "boolean"
            },
            "startTime": {
              "specs": "html5",
              "exposed": "Window",
              "name": "startTime",
              "type": "double",
              "tags": "Captions",
              "type-original": "double"
            },
            "id": {
              "specs": "html5",
              "exposed": "Window",
              "name": "id",
              "type": "DOMString",
              "tags": "Captions",
              "type-original": "DOMString"
            },
            "onexit": {
              "specs": "html5",
              "name": "onexit",
              "tags": "Captions",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "exit"
            }
          }
        },
        "tags": "Captions",
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "enter",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "exit",
              "type": "Event",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "getCueAsHTML": {
              "signature": [
                {
                  "type": "DocumentFragment",
                  "type-original": "DocumentFragment"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "getCueAsHTML",
              "tags": "Captions"
            }
          }
        },
        "extends": "EventTarget",
        "comment": "TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used."
      },
      "RTCRtpSender": {
        "name": "RTCRtpSender",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCapabilities": {
              "name": "getCapabilities",
              "signature": [
                {
                  "type": "RTCRtpCapabilities",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "kind",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "setParameters": {
              "name": "setParameters",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "parameters",
                      "type": "RTCRtpSendParameters"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getParameters": {
              "name": "getParameters",
              "signature": [
                {
                  "type": "RTCRtpSendParameters",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "replaceTrack": {
              "name": "replaceTrack",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "withTrack",
                      "type": "MediaStreamTrack",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setStreams": {
              "name": "setStreams",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "streams",
                      "type": "MediaStream",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getStats": {
              "name": "getStats",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "RTCStatsReport"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "track": {
              "name": "track",
              "type": "MediaStreamTrack",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "transport": {
              "name": "transport",
              "type": "RTCDtlsTransport",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "rtcpTransport": {
              "name": "rtcpTransport",
              "type": "RTCDtlsTransport",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "dtmf": {
              "name": "dtmf",
              "type": "RTCDTMFSender",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer."
      },
      "XPathResult": {
        "name": "XPathResult",
        "extends": "Object",
        "constants": {
          "constant": {
            "ANY_TYPE": {
              "name": "ANY_TYPE",
              "type": "unsigned short",
              "value": "0"
            },
            "NUMBER_TYPE": {
              "name": "NUMBER_TYPE",
              "type": "unsigned short",
              "value": "1"
            },
            "STRING_TYPE": {
              "name": "STRING_TYPE",
              "type": "unsigned short",
              "value": "2"
            },
            "BOOLEAN_TYPE": {
              "name": "BOOLEAN_TYPE",
              "type": "unsigned short",
              "value": "3"
            },
            "UNORDERED_NODE_ITERATOR_TYPE": {
              "name": "UNORDERED_NODE_ITERATOR_TYPE",
              "type": "unsigned short",
              "value": "4"
            },
            "ORDERED_NODE_ITERATOR_TYPE": {
              "name": "ORDERED_NODE_ITERATOR_TYPE",
              "type": "unsigned short",
              "value": "5"
            },
            "UNORDERED_NODE_SNAPSHOT_TYPE": {
              "name": "UNORDERED_NODE_SNAPSHOT_TYPE",
              "type": "unsigned short",
              "value": "6"
            },
            "ORDERED_NODE_SNAPSHOT_TYPE": {
              "name": "ORDERED_NODE_SNAPSHOT_TYPE",
              "type": "unsigned short",
              "value": "7"
            },
            "ANY_UNORDERED_NODE_TYPE": {
              "name": "ANY_UNORDERED_NODE_TYPE",
              "type": "unsigned short",
              "value": "8"
            },
            "FIRST_ORDERED_NODE_TYPE": {
              "name": "FIRST_ORDERED_NODE_TYPE",
              "type": "unsigned short",
              "value": "9"
            }
          }
        },
        "methods": {
          "method": {
            "iterateNext": {
              "name": "iterateNext",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "snapshotItem": {
              "name": "snapshotItem",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "resultType": {
              "name": "resultType",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberValue": {
              "name": "numberValue",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window"
            },
            "stringValue": {
              "name": "stringValue",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "booleanValue": {
              "name": "booleanValue",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "singleNodeValue": {
              "name": "singleNodeValue",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "invalidIteratorState": {
              "name": "invalidIteratorState",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "snapshotLength": {
              "name": "snapshotLength",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The results generated by evaluating an XPath expression within the context of a given node."
      },
      "ScopedCredentialInfo": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "ScopedCredentialInfo",
        "properties": {
          "property": {
            "publicKey": {
              "specs": "WD-webauthn-20160928",
              "exposed": "Window",
              "name": "publicKey",
              "type": "CryptoKey",
              "type-original": "CryptoKey",
              "read-only": 1
            },
            "credential": {
              "specs": "WD-webauthn-20161207",
              "exposed": "Window",
              "name": "credential",
              "type": "ScopedCredential",
              "type-original": "ScopedCredential",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1
      },
      "SpeechSynthesisUtterance": {
        "name": "SpeechSynthesisUtterance",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window"
            },
            "lang": {
              "name": "lang",
              "type": "DOMString",
              "exposed": "Window"
            },
            "voice": {
              "name": "voice",
              "type": "SpeechSynthesisVoice",
              "exposed": "Window"
            },
            "volume": {
              "name": "volume",
              "type": "float",
              "exposed": "Window"
            },
            "rate": {
              "name": "rate",
              "type": "float",
              "exposed": "Window"
            },
            "pitch": {
              "name": "pitch",
              "type": "float",
              "exposed": "Window"
            },
            "onstart": {
              "name": "onstart",
              "type": "EventHandler",
              "event-handler": "start",
              "exposed": "Window"
            },
            "onend": {
              "name": "onend",
              "type": "EventHandler",
              "event-handler": "end",
              "exposed": "Window"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window"
            },
            "onpause": {
              "name": "onpause",
              "type": "EventHandler",
              "event-handler": "pause",
              "exposed": "Window"
            },
            "onresume": {
              "name": "onresume",
              "type": "EventHandler",
              "event-handler": "resume",
              "exposed": "Window"
            },
            "onmark": {
              "name": "onmark",
              "type": "EventHandler",
              "event-handler": "mark",
              "exposed": "Window"
            },
            "onboundary": {
              "name": "onboundary",
              "type": "EventHandler",
              "event-handler": "boundary",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "SpeechSynthesisUtterance",
              "param": []
            },
            {
              "type": "SpeechSynthesisUtterance",
              "param": [
                {
                  "name": "text",
                  "type": "DOMString"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)",
        "events": {
          "event": [
            {
              "name": "start",
              "type": "SpeechSynthesisEvent"
            },
            {
              "name": "end",
              "type": "SpeechSynthesisEvent"
            },
            {
              "name": "error",
              "type": "SpeechSynthesisErrorEvent"
            },
            {
              "name": "pause",
              "type": "SpeechSynthesisEvent"
            },
            {
              "name": "resume",
              "type": "SpeechSynthesisEvent"
            },
            {
              "name": "mark",
              "type": "SpeechSynthesisEvent"
            },
            {
              "name": "boundary",
              "type": "SpeechSynthesisEvent"
            }
          ]
        }
      },
      "SVGFEFuncAElement": {
        "name": "SVGFEFuncAElement",
        "extends": "SVGComponentTransferFunctionElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feFuncA> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feFuncA"
          }
        ]
      },
      "SVGFETileElement": {
        "name": "SVGFETileElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feTile> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feTile"
          }
        ]
      },
      "SVGFEBlendElement": {
        "name": "SVGFEBlendElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_FEBLEND_MODE_UNKNOWN": {
              "name": "SVG_FEBLEND_MODE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_FEBLEND_MODE_NORMAL": {
              "name": "SVG_FEBLEND_MODE_NORMAL",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_FEBLEND_MODE_MULTIPLY": {
              "name": "SVG_FEBLEND_MODE_MULTIPLY",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_FEBLEND_MODE_SCREEN": {
              "name": "SVG_FEBLEND_MODE_SCREEN",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_FEBLEND_MODE_DARKEN": {
              "name": "SVG_FEBLEND_MODE_DARKEN",
              "type": "unsigned short",
              "value": "4"
            },
            "SVG_FEBLEND_MODE_LIGHTEN": {
              "name": "SVG_FEBLEND_MODE_LIGHTEN",
              "type": "unsigned short",
              "value": "5"
            },
            "SVG_FEBLEND_MODE_OVERLAY": {
              "name": "SVG_FEBLEND_MODE_OVERLAY",
              "type": "unsigned short",
              "value": "6"
            },
            "SVG_FEBLEND_MODE_COLOR_DODGE": {
              "name": "SVG_FEBLEND_MODE_COLOR_DODGE",
              "type": "unsigned short",
              "value": "7"
            },
            "SVG_FEBLEND_MODE_COLOR_BURN": {
              "name": "SVG_FEBLEND_MODE_COLOR_BURN",
              "type": "unsigned short",
              "value": "8"
            },
            "SVG_FEBLEND_MODE_HARD_LIGHT": {
              "name": "SVG_FEBLEND_MODE_HARD_LIGHT",
              "type": "unsigned short",
              "value": "9"
            },
            "SVG_FEBLEND_MODE_SOFT_LIGHT": {
              "name": "SVG_FEBLEND_MODE_SOFT_LIGHT",
              "type": "unsigned short",
              "value": "10"
            },
            "SVG_FEBLEND_MODE_DIFFERENCE": {
              "name": "SVG_FEBLEND_MODE_DIFFERENCE",
              "type": "unsigned short",
              "value": "11"
            },
            "SVG_FEBLEND_MODE_EXCLUSION": {
              "name": "SVG_FEBLEND_MODE_EXCLUSION",
              "type": "unsigned short",
              "value": "12"
            },
            "SVG_FEBLEND_MODE_HUE": {
              "name": "SVG_FEBLEND_MODE_HUE",
              "type": "unsigned short",
              "value": "13"
            },
            "SVG_FEBLEND_MODE_SATURATION": {
              "name": "SVG_FEBLEND_MODE_SATURATION",
              "type": "unsigned short",
              "value": "14"
            },
            "SVG_FEBLEND_MODE_COLOR": {
              "name": "SVG_FEBLEND_MODE_COLOR",
              "type": "unsigned short",
              "value": "15"
            },
            "SVG_FEBLEND_MODE_LUMINOSITY": {
              "name": "SVG_FEBLEND_MODE_LUMINOSITY",
              "type": "unsigned short",
              "value": "16"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "in2": {
              "name": "in2",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "mode": {
              "name": "mode",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feBlend> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feBlend"
          }
        ]
      },
      "DynamicsCompressorNode": {
        "name": "DynamicsCompressorNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "threshold": {
              "name": "threshold",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "knee": {
              "name": "knee",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "ratio": {
              "name": "ratio",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "reduction": {
              "name": "reduction",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "attack": {
              "name": "attack",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "release": {
              "name": "release",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DynamicsCompressorNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "DynamicsCompressorOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Inherits properties from its parent, AudioNode."
      },
      "HTMLTimeElement": {
        "name": "HTMLTimeElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "dateTime": {
              "name": "dateTime",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
        "element": [
          {
            "name": "time"
          }
        ]
      },
      "CSSStyleDeclaration": {
        "specs": "cssom dom-level-2-style",
        "anonymous-methods": {
          "method": []
        },
        "name": "CSSStyleDeclaration",
        "properties": {
          "property": {
            "textAlignLast": {
              "name": "textAlignLast",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundAttachment": {
              "name": "backgroundAttachment",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "animationIterationCount": {
              "name": "animationIterationCount",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "orphans": {
              "name": "orphans",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "counterIncrement": {
              "name": "counterIncrement",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "animationDelay": {
              "name": "animationDelay",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "cssText": {
              "specs": "cssom dom-level-2-style",
              "ce-reactions": 1,
              "name": "cssText",
              "tags": "CSSOM",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString"
            },
            "gridTemplate": {
              "name": "gridTemplate",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "layoutGridLine": {
              "css-property-initial": "none",
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "layoutGridLine",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "layout-grid-line",
              "exposed": "Window",
              "css-property-enum-values": "none auto inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_percentage_or_length"
            },
            "columnRuleWidth": {
              "name": "columnRuleWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitUserModify": {
              "css-property-initial": "read-only",
              "specs": "none",
              "ce-reactions": 1,
              "name": "webkitUserModify",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-user-modify",
              "exposed": "Window",
              "css-property-enum-values": "read-only read-write read-write-plaintext-only inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitAppearance": {
              "name": "webkitAppearance",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "pointerEvents": {
              "css-property-initial": "auto",
              "specs": "svg11 pointer-events",
              "ce-reactions": 1,
              "name": "pointerEvents",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "pointer-events",
              "exposed": "Window",
              "css-property-enum-values": "auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "rotate": {
              "name": "rotate",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransitionDuration": {
              "name": "webkitTransitionDuration",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitAnimationName": {
              "name": "webkitAnimationName",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msGridRowAlign": {
              "css-property-initial": "stretch",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridRowAlign",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-grid-row-align",
              "exposed": "Window",
              "css-property-enum-values": "stretch start end center inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msGridColumn": {
              "css-property-initial": "1",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridColumn",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-grid-column",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "1_or_greater_integer"
            },
            "webkitColumnWidth": {
              "css-property-initial": "auto",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnWidth",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-webkit-column-width",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "cursor": {
              "name": "cursor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBoxFlex": {
              "name": "webkitBoxFlex",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "listStylePosition": {
              "name": "listStylePosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "wordWrap": {
              "name": "wordWrap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAnimationFillMode": {
              "name": "webkitAnimationFillMode",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderImageWidth": {
              "name": "borderImageWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransition": {
              "name": "webkitTransition",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitTransformOrigin": {
              "name": "webkitTransformOrigin",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "direction": {
              "name": "direction",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "alignmentBaseline": {
              "name": "alignmentBaseline",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "strokeMiterlimit": {
              "name": "strokeMiterlimit",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollSnapY": {
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollSnapY",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-scroll-snap-y",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "none proximity mandatory inherit initial",
              "css-property-subproperties": "-ms-scroll-snap-type -ms-scroll-snap-points-y",
              "type": "DOMString",
              "css-property-value-syntax": "css_snap_type_and_points"
            },
            "verticalAlign": {
              "name": "verticalAlign",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msImeAlign": {
              "css-property-initial": "auto",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msImeAlign",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-ime-align",
              "exposed": "Window",
              "css-property-enum-values": "auto after inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "overflow": {
              "name": "overflow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "flexShrink": {
              "name": "flexShrink",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFlexBasis": {
              "name": "webkitFlexBasis",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderLeftStyle": {
              "name": "borderLeftStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "emptyCells": {
              "name": "emptyCells",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "stopOpacity": {
              "css-property-initial": "1",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "stopOpacity",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property-animatable": 1,
              "nullable": 1,
              "css-property": "stop-opacity",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "0_to_1_floating_point_number"
            },
            "paddingRight": {
              "name": "paddingRight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "background": {
              "name": "background",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTextFillColor": {
              "name": "webkitTextFillColor",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "animationPlayState": {
              "name": "animationPlayState",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transformOrigin": {
              "name": "transformOrigin",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "left": {
              "name": "left",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "glyphOrientationHorizontal": {
              "css-property-initial": "0",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "glyphOrientationHorizontal",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "glyph-orientation-horizontal",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_angle"
            },
            "display": {
              "name": "display",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "breakBefore": {
              "name": "breakBefore",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "order": {
              "name": "order",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "cssFloat": {
              "css-property-initial": "none",
              "specs": "css-box",
              "ce-reactions": 1,
              "name": "cssFloat",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "float",
              "exposed": "Window",
              "css-property-enum-values": "left right none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "strokeDasharray": {
              "name": "strokeDasharray",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitPerspective": {
              "name": "webkitPerspective",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitJustifyContent": {
              "name": "webkitJustifyContent",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "animationDirection": {
              "name": "animationDirection",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "animationDuration": {
              "name": "animationDuration",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "rubyAlign": {
              "css-property-initial": "auto",
              "specs": "css-ruby",
              "ce-reactions": 1,
              "name": "rubyAlign",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "ruby-align",
              "exposed": "Window",
              "css-property-enum-values": "auto left center right distribute-letter distribute-space line-edge inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitTransformStyle": {
              "name": "webkitTransformStyle",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitPerspectiveOrigin": {
              "name": "webkitPerspectiveOrigin",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "fontSizeAdjust": {
              "name": "fontSizeAdjust",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderLeftColor": {
              "name": "borderLeftColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msGridRow": {
              "css-property-initial": "1",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridRow",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-grid-row",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "1_or_greater_integer"
            },
            "webkitBorderTopLeftRadius": {
              "name": "webkitBorderTopLeftRadius",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderImage": {
              "name": "borderImage",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransitionProperty": {
              "name": "webkitTransitionProperty",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msTextCombineHorizontal": {
              "css-property-initial": "none",
              "specs": "none css-writing-modes",
              "ce-reactions": 1,
              "name": "msTextCombineHorizontal",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-text-combine-horizontal",
              "exposed": "Window",
              "css-property-enum-values": "none all digits inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_text_combine_enum_and_digit"
            },
            "webkitBackgroundClip": {
              "name": "webkitBackgroundClip",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "textOverflow": {
              "name": "textOverflow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTextStrokeColor": {
              "name": "webkitTextStrokeColor",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "columnSpan": {
              "name": "columnSpan",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msContentZooming": {
              "css-property-initial": "none",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZooming",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-content-zooming",
              "exposed": "Window",
              "css-property-enum-values": "none zoom inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msScrollSnapPointsX": {
              "css-property-initial": "snapInterval(0, 100%)",
              "specs": "none css-snappoints",
              "ce-reactions": 1,
              "name": "msScrollSnapPointsX",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-snap-points-x",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "snap_interval_or_snap_list"
            },
            "listStyle": {
              "name": "listStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "dominantBaseline": {
              "name": "dominantBaseline",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "overflowY": {
              "name": "overflowY",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "captionSide": {
              "name": "captionSide",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "boxShadow": {
              "name": "boxShadow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderCollapse": {
              "name": "borderCollapse",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "grid": {
              "name": "grid",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundSize": {
              "name": "backgroundSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transitionDuration": {
              "name": "transitionDuration",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textDecoration": {
              "name": "textDecoration",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "strokeDashoffset": {
              "name": "strokeDashoffset",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFlexShrink": {
              "name": "webkitFlexShrink",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitColumnRule": {
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnRule",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-webkit-column-rule",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "transparent thin medium thick inherit initial",
              "css-property-subproperties": "-webkit-column-rule-color -webkit-column-rule-style -webkit-column-rule-width",
              "type": "DOMString",
              "css-property-value-syntax": "1_to_3_space_separated_of_css_length_css_color_and_enum"
            },
            "webkitColumnCount": {
              "css-property-initial": "auto",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnCount",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-webkit-column-count",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "webkitTextStrokeWidth": {
              "name": "webkitTextStrokeWidth",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "pageBreakBefore": {
              "name": "pageBreakBefore",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "border": {
              "name": "border",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransitionDelay": {
              "name": "webkitTransitionDelay",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderTopRightRadius": {
              "name": "borderTopRightRadius",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottomLeftRadius": {
              "name": "borderBottomLeftRadius",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "alignSelf": {
              "name": "alignSelf",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAnimationDuration": {
              "name": "webkitAnimationDuration",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "fontFamily": {
              "name": "fontFamily",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "content": {
              "name": "content",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "layoutGridChar": {
              "css-property-initial": "none",
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "layoutGridChar",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "layout-grid-char",
              "exposed": "Window",
              "css-property-enum-values": "none auto inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_percentage_or_length"
            },
            "backgroundClip": {
              "name": "backgroundClip",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumnGap": {
              "css-property-initial": "normal",
              "specs": "none css-align-3",
              "ce-reactions": 1,
              "name": "webkitColumnGap",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-webkit-column-gap",
              "exposed": "Window",
              "css-property-enum-values": "normal inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_percentage_or_length"
            },
            "counterReset": {
              "name": "counterReset",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollSnapX": {
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollSnapX",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-scroll-snap-x",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "none proximity mandatory inherit initial",
              "css-property-subproperties": "-ms-scroll-snap-type -ms-scroll-snap-points-x",
              "type": "DOMString",
              "css-property-value-syntax": "css_snap_type_and_points"
            },
            "alignContent": {
              "name": "alignContent",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "columnRuleColor": {
              "name": "columnRuleColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitUserSelect": {
              "css-property-initial": "text",
              "specs": "none",
              "ce-reactions": 1,
              "name": "webkitUserSelect",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-user-select",
              "exposed": "Window",
              "css-property-enum-values": "text none element all inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "outlineWidth": {
              "name": "outlineWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "layoutGrid": {
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "layoutGrid",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "layout-grid",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "none auto line char both loose strict fixed inherit initial",
              "css-property-subproperties": "layout-grid-mode layout-grid-type layout-grid-line layout-grid-char",
              "type": "DOMString",
              "css-property-value-syntax": "css_layout_grid"
            },
            "marginRight": {
              "name": "marginRight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transitionDelay": {
              "name": "transitionDelay",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "wordBreak": {
              "name": "wordBreak",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msFlowFrom": {
              "css-property-initial": "none",
              "specs": "none css-regions",
              "ce-reactions": 1,
              "name": "msFlowFrom",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-flow-from",
              "exposed": "Window",
              "css-property-enum-values": "none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "comma_separated_tokens"
            },
            "msScrollSnapType": {
              "css-property-initial": "none",
              "specs": "none css-snappoints",
              "ce-reactions": 1,
              "name": "msScrollSnapType",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-snap-type",
              "exposed": "Window",
              "css-property-enum-values": "none proximity mandatory inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "marginTop": {
              "name": "marginTop",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundPositionX": {
              "name": "backgroundPositionX",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridRowGap": {
              "name": "gridRowGap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "touchAction": {
              "name": "touchAction",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 0
            },
            "top": {
              "name": "top",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollRails": {
              "css-property-initial": "railed",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollRails",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-rails",
              "exposed": "Window",
              "css-property-enum-values": "railed none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderRight": {
              "name": "borderRight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFlexDirection": {
              "name": "webkitFlexDirection",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "enableBackground": {
              "css-property-initial": "accumulate",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "enableBackground",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "enable-background",
              "exposed": "Window",
              "css-property-enum-values": "accumulate inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "svg_enum_new_followed_by_svg_viewbox"
            },
            "webkitBorderRadius": {
              "name": "webkitBorderRadius",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitBorderImage": {
              "specs": "none css-background",
              "ce-reactions": 1,
              "name": "webkitBorderImage",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-webkit-border-image",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "none fill auto stretch repeat round space inherit initial",
              "css-property-subproperties": "border-image-source border-image-slice border-image-width border-image-outset border-image-repeat",
              "type": "DOMString",
              "css-property-value-syntax": "css_border_image"
            },
            "kerning": {
              "css-property-initial": "auto",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "kerning",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "kerning",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_length"
            },
            "msHyphenateLimitLines": {
              "css-property-initial": "no-limit",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msHyphenateLimitLines",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-hyphenate-limit-lines",
              "exposed": "Window",
              "css-property-enum-values": "no-limit inherit initial",
              "type": "any",
              "css-property-value-syntax": "non_negative_integer"
            },
            "pageBreakAfter": {
              "name": "pageBreakAfter",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollLimit": {
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollLimit",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-scroll-limit",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "css-property-subproperties": "-ms-scroll-limit-x-min -ms-scroll-limit-y-min -ms-scroll-limit-x-max -ms-scroll-limit-y-max",
              "type": "DOMString",
              "css-property-value-syntax": "1_to_4_space_separated_css_lengths"
            },
            "animation": {
              "name": "animation",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontStretch": {
              "name": "fontStretch",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottomStyle": {
              "name": "borderBottomStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "strokeOpacity": {
              "name": "strokeOpacity",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textCombineUpright": {
              "name": "textCombineUpright",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "bottom": {
              "name": "bottom",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFilter": {
              "name": "webkitFilter",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msScrollLimitYMin": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollLimitYMin",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-scroll-limit-y-min",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "justifyContent": {
              "name": "justifyContent",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderLeftWidth": {
              "name": "borderLeftWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundPosition": {
              "name": "backgroundPosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "strokeLinecap": {
              "name": "strokeLinecap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "outlineStyle": {
              "name": "outlineStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumnRuleStyle": {
              "css-property-initial": "none",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnRuleStyle",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-column-rule-style",
              "exposed": "Window",
              "css-property-enum-values": "none hidden dotted dashed solid double groove ridge inset outset inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderTop": {
              "name": "borderTop",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingBottom": {
              "name": "paddingBottom",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "outlineColor": {
              "name": "outlineColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "font": {
              "name": "font",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "flexBasis": {
              "name": "flexBasis",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "justifyItems": {
              "name": "justifyItems",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gap": {
              "name": "gap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "justifySelf": {
              "name": "justifySelf",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fillOpacity": {
              "name": "fillOpacity",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "letterSpacing": {
              "name": "letterSpacing",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderSpacing": {
              "name": "borderSpacing",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msUserSelect": {
              "css-property-initial": "text",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msUserSelect",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-user-select",
              "exposed": "Window",
              "css-property-enum-values": "text none element all inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "textKashida": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "textKashida",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "text-kashida",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_percentage"
            },
            "webkitBoxOrdinalGroup": {
              "name": "webkitBoxOrdinalGroup",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderImageOutset": {
              "name": "borderImageOutset",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "animationName": {
              "name": "animationName",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFlexFlow": {
              "name": "webkitFlexFlow",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "borderRadius": {
              "name": "borderRadius",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msContentZoomLimitMax": {
              "css-property-initial": "400%",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomLimitMax",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-content-zoom-limit-max",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_percentage"
            },
            "borderWidth": {
              "name": "borderWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "objectPosition": {
              "name": "objectPosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridTemplateRows": {
              "name": "gridTemplateRows",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottomRightRadius": {
              "name": "borderBottomRightRadius",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollChaining": {
              "css-property-initial": "chained",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollChaining",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-chaining",
              "exposed": "Window",
              "css-property-enum-values": "chained none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "scale": {
              "name": "scale",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "whiteSpace": {
              "name": "whiteSpace",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msTextSizeAdjust": {
              "css-property-initial": "auto",
              "specs": "none css-size-adjust",
              "ce-reactions": 1,
              "name": "msTextSizeAdjust",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-text-size-adjust",
              "exposed": "Window",
              "css-property-enum-values": "auto none inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_percentage"
            },
            "webkitColumnRuleColor": {
              "css-property-initial": "currentColor",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnRuleColor",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-webkit-column-rule-color",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_color"
            },
            "borderImageSource": {
              "name": "borderImageSource",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderColor": {
              "name": "borderColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderTopLeftRadius": {
              "name": "borderTopLeftRadius",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msGridRowSpan": {
              "css-property-initial": "1",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridRowSpan",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-grid-row-span",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "non_negative_integer"
            },
            "msContentZoomSnap": {
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomSnap",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-content-zoom-snap",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "css-property-subproperties": "-ms-content-zoom-snap-type -ms-content-zoom-snap-points",
              "type": "DOMString",
              "css-property-value-syntax": "css_snap_type_and_points"
            },
            "lineBreak": {
              "name": "lineBreak",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "markerMid": {
              "name": "markerMid",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridAutoRows": {
              "name": "gridAutoRows",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBoxPack": {
              "name": "webkitBoxPack",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitBorderTopRightRadius": {
              "name": "webkitBorderTopRightRadius",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "breakAfter": {
              "name": "breakAfter",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "flexDirection": {
              "name": "flexDirection",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textAlign": {
              "name": "textAlign",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumnBreakBefore": {
              "css-property-initial": "auto",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnBreakBefore",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-column-break-before",
              "exposed": "Window",
              "css-property-enum-values": "auto always avoid inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitAnimationIterationCount": {
              "name": "webkitAnimationIterationCount",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "visibility": {
              "name": "visibility",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "floodColor": {
              "name": "floodColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textShadow": {
              "name": "textShadow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderRightStyle": {
              "name": "borderRightStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backfaceVisibility": {
              "name": "backfaceVisibility",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "alignItems": {
              "name": "alignItems",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "objectFit": {
              "name": "objectFit",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridGap": {
              "name": "gridGap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderImageRepeat": {
              "name": "borderImageRepeat",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderStyle": {
              "name": "borderStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumnBreakInside": {
              "css-property-initial": "auto",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnBreakInside",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-column-break-inside",
              "exposed": "Window",
              "css-property-enum-values": "auto always avoid inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderTopColor": {
              "name": "borderTopColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "markerEnd": {
              "name": "markerEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "translate": {
              "name": "translate",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textIndent": {
              "name": "textIndent",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "listStyleImage": {
              "name": "listStyleImage",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransitionTimingFunction": {
              "name": "webkitTransitionTimingFunction",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "gridArea": {
              "name": "gridArea",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msWrapThrough": {
              "css-property-initial": "wrap",
              "specs": "none css-exclusions",
              "ce-reactions": 1,
              "name": "msWrapThrough",
              "tags": "CSSOM",
              "type-original": "DOMString",
              "css-property": "-ms-wrap-through",
              "exposed": "Window",
              "css-property-enum-values": "wrap none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderTopStyle": {
              "name": "borderTopStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "columnRuleStyle": {
              "name": "columnRuleStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "opacity": {
              "css-property-initial": "1",
              "specs": "css-color",
              "ce-reactions": 1,
              "name": "opacity",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property-animatable": 1,
              "nullable": 1,
              "css-property": "opacity",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "0_to_1_floating_point_number"
            },
            "color": {
              "css-property-initial": "black",
              "specs": "css-color",
              "ce-reactions": 1,
              "name": "color",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property-animatable": 1,
              "nullable": 1,
              "css-property": "color",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_color"
            },
            "gridTemplateColumns": {
              "name": "gridTemplateColumns",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maxWidth": {
              "name": "maxWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "clip": {
              "name": "clip",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAlignContent": {
              "name": "webkitAlignContent",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitFlex": {
              "name": "webkitFlex",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msTouchAction": {
              "css-property-initial": "auto",
              "specs": "none pointer-events",
              "ce-reactions": 1,
              "name": "msTouchAction",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-touch-action",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "auto none pan-x pan-y manipulation pinch-zoom double-tap-zoom inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderRightWidth": {
              "name": "borderRightWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "mask": {
              "name": "mask",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transform": {
              "name": "transform",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "parentRule": {
              "specs": "cssom dom-level-2-style",
              "name": "parentRule",
              "tags": "CSSOM",
              "type-original": "CSSRule",
              "exposed": "Window",
              "type": "CSSRule",
              "read-only": 1
            },
            "boxSizing": {
              "name": "boxSizing",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textJustify": {
              "name": "textJustify",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "colorInterpolationFilters": {
              "name": "colorInterpolationFilters",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridRowStart": {
              "name": "gridRowStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transitionTimingFunction": {
              "name": "transitionTimingFunction",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingTop": {
              "name": "paddingTop",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "right": {
              "name": "right",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "length": {
              "specs": "cssom dom-level-2-style",
              "name": "length",
              "tags": "CSSOM",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "baselineShift": {
              "name": "baselineShift",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderLeft": {
              "name": "borderLeft",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskImage": {
              "name": "maskImage",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msContentZoomLimitMin": {
              "css-property-initial": "100%",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomLimitMin",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-content-zoom-limit-min",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_percentage"
            },
            "msFontFeatureSettings": {
              "css-property-initial": "normal",
              "specs": "none css-fonts",
              "ce-reactions": 1,
              "name": "msFontFeatureSettings",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-font-feature-settings",
              "exposed": "Window",
              "css-property-enum-values": "normal inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "comma_separated_font_feature_tag"
            },
            "widows": {
              "name": "widows",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumns": {
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumns",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-webkit-columns",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "css-property-subproperties": "-webkit-column-width -webkit-column-count",
              "type": "DOMString",
              "css-property-value-syntax": "1_or_2_space_separated_css_length"
            },
            "transitionProperty": {
              "name": "transitionProperty",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "lineHeight": {
              "name": "lineHeight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textUnderlinePosition": {
              "name": "textUnderlinePosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAnimationDelay": {
              "name": "webkitAnimationDelay",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "textKashidaSpace": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "textKashidaSpace",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "text-kashida-space",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_percentage"
            },
            "fontFeatureSettings": {
              "name": "fontFeatureSettings",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msFlowInto": {
              "css-property-initial": "none",
              "specs": "none css-regions",
              "ce-reactions": 1,
              "name": "msFlowInto",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-flow-into",
              "exposed": "Window",
              "css-property-enum-values": "none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "comma_separated_tokens"
            },
            "textAnchor": {
              "css-property-initial": "start",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "textAnchor",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "text-anchor",
              "exposed": "Window",
              "css-property-enum-values": "start middle end inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msScrollSnapPointsY": {
              "css-property-initial": "snapInterval(0, 100%)",
              "specs": "none css-snappoints",
              "ce-reactions": 1,
              "name": "msScrollSnapPointsY",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-snap-points-y",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "snap_interval_or_snap_list"
            },
            "msOverflowStyle": {
              "css-property-initial": "auto",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msOverflowStyle",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-overflow-style",
              "exposed": "Window",
              "css-property-enum-values": "auto none scrollbar -ms-autohiding-scrollbar inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msGridColumnSpan": {
              "css-property-initial": "1",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridColumnSpan",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-grid-column-span",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "non_negative_integer"
            },
            "webkitOrder": {
              "name": "webkitOrder",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "columnFill": {
              "name": "columnFill",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTextStroke": {
              "name": "webkitTextStroke",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msScrollLimitYMax": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollLimitYMax",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-scroll-limit-y-max",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "backgroundImage": {
              "name": "backgroundImage",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msGridColumnAlign": {
              "css-property-initial": "stretch",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridColumnAlign",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-grid-column-align",
              "exposed": "Window",
              "css-property-enum-values": "stretch start end center inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "perspectiveOrigin": {
              "name": "perspectiveOrigin",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTransform": {
              "name": "webkitTransform",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "columns": {
              "name": "columns",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "lightingColor": {
              "name": "lightingColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitWritingMode": {
              "css-property-initial": "horizontal-tb",
              "specs": "none css-writing-modes",
              "ce-reactions": 1,
              "name": "webkitWritingMode",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-writing-mode",
              "exposed": "Window",
              "css-property-enum-values": "horizontal-tb vertical-lr vertical-rl inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "listStyleType": {
              "name": "listStyleType",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "strokeWidth": {
              "name": "strokeWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridColumnStart": {
              "name": "gridColumnStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msHyphenateLimitChars": {
              "css-property-initial": "auto",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msHyphenateLimitChars",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-hyphenate-limit-chars",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "1_to_3_space_separated_non_negative_integer"
            },
            "webkitAlignSelf": {
              "name": "webkitAlignSelf",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "fillRule": {
              "name": "fillRule",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottomColor": {
              "name": "borderBottomColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridAutoColumns": {
              "name": "gridAutoColumns",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "zIndex": {
              "name": "zIndex",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "position": {
              "name": "position",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "layoutGridType": {
              "css-property-initial": "loose",
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "layoutGridType",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "layout-grid-type",
              "exposed": "Window",
              "css-property-enum-values": "loose strict fixed inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msContentZoomSnapPoints": {
              "css-property-initial": "snapInterval(0%, 100%)",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomSnapPoints",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-content-zoom-snap-points",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "snap_interval_or_snap_list"
            },
            "fill": {
              "name": "fill",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollLimitXMin": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollLimitXMin",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-scroll-limit-x-min",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "gridColumn": {
              "name": "gridColumn",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBoxSizing": {
              "name": "webkitBoxSizing",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "flexGrow": {
              "name": "flexGrow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAnimationDirection": {
              "name": "webkitAnimationDirection",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "tableLayout": {
              "name": "tableLayout",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "quotes": {
              "name": "quotes",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "unicodeBidi": {
              "name": "unicodeBidi",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottomWidth": {
              "name": "borderBottomWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "zoom": {
              "css-property-aliases": "-ms-zoom",
              "css-property-initial": "normal",
              "specs": "none css-device-adapt",
              "ce-reactions": 1,
              "name": "zoom",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property-animatable": 1,
              "nullable": 1,
              "css-property": "zoom",
              "exposed": "Window",
              "css-property-enum-values": "normal inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_percentage_or_non_negative_floating_point_number"
            },
            "msHyphens": {
              "css-property-initial": "manual",
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "msHyphens",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-hyphens",
              "exposed": "Window",
              "css-property-enum-values": "none manual auto inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "fontSize": {
              "name": "fontSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msScrollLimitXMax": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollLimitXMax",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-scroll-limit-x-max",
              "exposed": "Window",
              "css-property-enum-values": "auto inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "msContentZoomLimit": {
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomLimit",
              "css-property-shorthand": 1,
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "-ms-content-zoom-limit",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "css-property-subproperties": "-ms-content-zoom-limit-min -ms-content-zoom-limit-max",
              "type": "DOMString",
              "css-property-value-syntax": "1_or_2_space_separated_css_percentage"
            },
            "gridRowEnd": {
              "name": "gridRowEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "layoutGridMode": {
              "css-property-initial": "both",
              "specs": "css-text",
              "ce-reactions": 1,
              "name": "layoutGridMode",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "layout-grid-mode",
              "exposed": "Window",
              "css-property-enum-values": "none line char both inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msWrapMargin": {
              "css-property-initial": "0",
              "specs": "none css-exclusions",
              "ce-reactions": 1,
              "name": "msWrapMargin",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-wrap-margin",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "columnCount": {
              "name": "columnCount",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "flexFlow": {
              "name": "flexFlow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msWrapFlow": {
              "css-property-initial": "auto",
              "specs": "none css-exclusions",
              "ce-reactions": 1,
              "name": "msWrapFlow",
              "tags": "CSSOM",
              "type-original": "DOMString",
              "css-property": "-ms-wrap-flow",
              "exposed": "Window",
              "css-property-enum-values": "auto both start end maximum clear inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "transformStyle": {
              "name": "transformStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textTransform": {
              "name": "textTransform",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "rubyPosition": {
              "css-property-initial": "above",
              "specs": "css-ruby",
              "ce-reactions": 1,
              "name": "rubyPosition",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "ruby-position",
              "exposed": "Window",
              "css-property-enum-values": "above inline inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "strokeLinejoin": {
              "name": "strokeLinejoin",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBoxAlign": {
              "name": "webkitBoxAlign",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "clipPath": {
              "name": "clipPath",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderRightColor": {
              "name": "borderRightColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTapHighlightColor": {
              "css-property-initial": "rgba(0,0,0,0.180392)",
              "specs": "none",
              "ce-reactions": 1,
              "name": "webkitTapHighlightColor",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-tap-highlight-color",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_color"
            },
            "animationFillMode": {
              "name": "animationFillMode",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "clear": {
              "name": "clear",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "animationTimingFunction": {
              "name": "animationTimingFunction",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAlignItems": {
              "name": "webkitAlignItems",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "marginBottom": {
              "name": "marginBottom",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "columnWidth": {
              "name": "columnWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "imeMode": {
              "css-property-initial": "auto",
              "specs": "css-ui",
              "ce-reactions": 1,
              "name": "imeMode",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "ime-mode",
              "exposed": "Window",
              "css-property-enum-values": "auto active inactive disabled initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitBoxDirection": {
              "css-property-initial": "normal",
              "specs": "none css-flexbox",
              "ce-reactions": 1,
              "name": "webkitBoxDirection",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-box-direction",
              "exposed": "Window",
              "type": "DOMString",
              "css-property-value-syntax": "normal reverse inherit initial"
            },
            "webkitAnimationPlayState": {
              "name": "webkitAnimationPlayState",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "transition": {
              "name": "transition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingLeft": {
              "name": "paddingLeft",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBottom": {
              "name": "borderBottom",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBackgroundOrigin": {
              "name": "webkitBackgroundOrigin",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msContentZoomSnapType": {
              "css-property-initial": "none",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomSnapType",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-content-zoom-snap-type",
              "exposed": "Window",
              "css-property-enum-values": "none proximity mandatory inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitAnimation": {
              "name": "webkitAnimation",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitColumnBreakAfter": {
              "css-property-initial": "auto",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnBreakAfter",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-column-break-after",
              "exposed": "Window",
              "css-property-enum-values": "auto always avoid inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msGridColumns": {
              "css-property-initial": "auto",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridColumns",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-grid-columns",
              "exposed": "Window",
              "css-property-enum-values": "none auto min-content max-content inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_grid_dimension_list"
            },
            "fontWeight": {
              "name": "fontWeight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msContentZoomChaining": {
              "css-property-initial": "none",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msContentZoomChaining",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-content-zoom-chaining",
              "exposed": "Window",
              "css-property-enum-values": "none chained inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msHyphenateLimitZone": {
              "css-property-initial": "0",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msHyphenateLimitZone",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-ms-hyphenate-limit-zone",
              "exposed": "Window",
              "css-property-enum-values": "inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_percentage_or_length"
            },
            "webkitColumnRuleWidth": {
              "css-property-initial": "medium",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnRuleWidth",
              "tags": "CSSOM",
              "type-original": "any",
              "css-property": "-webkit-column-rule-width",
              "exposed": "Window",
              "css-property-enum-values": "thin medium thick inherit initial",
              "type": "any",
              "css-property-value-syntax": "css_length"
            },
            "flex": {
              "name": "flex",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "flexWrap": {
              "name": "flexWrap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "padding": {
              "name": "padding",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "filter": {
              "name": "filter",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "markerStart": {
              "name": "markerStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "clipRule": {
              "name": "clipRule",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "columnGap": {
              "name": "columnGap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundColor": {
              "name": "backgroundColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "pageBreakInside": {
              "name": "pageBreakInside",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundOrigin": {
              "name": "backgroundOrigin",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderTopWidth": {
              "name": "borderTopWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridColumnGap": {
              "name": "gridColumnGap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "wordSpacing": {
              "name": "wordSpacing",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marginLeft": {
              "name": "marginLeft",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "outline": {
              "name": "outline",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitTextSizeAdjust": {
              "name": "webkitTextSizeAdjust",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "perspective": {
              "name": "perspective",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridColumnEnd": {
              "name": "gridColumnEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maxHeight": {
              "name": "maxHeight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitFlexGrow": {
              "name": "webkitFlexGrow",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitFlexWrap": {
              "name": "webkitFlexWrap",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msScrollTranslation": {
              "css-property-initial": "inherit",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msScrollTranslation",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-scroll-translation",
              "exposed": "Window",
              "css-property-enum-values": "inherit none vertical-to-horizontal",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "webkitBoxOrient": {
              "css-property-initial": "inline-axis",
              "specs": "none css-flexbox",
              "ce-reactions": 1,
              "name": "webkitBoxOrient",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-box-orient",
              "exposed": "Window",
              "type": "DOMString",
              "css-property-value-syntax": "horizontal vertical inline-axis block-axis inherit initial"
            },
            "gridAutoFlow": {
              "name": "gridAutoFlow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "columnRule": {
              "name": "columnRule",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundRepeat": {
              "name": "backgroundRepeat",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "outlineOffset": {
              "name": "outlineOffset",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "rowGap": {
              "name": "rowGap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "msTouchSelect": {
              "css-property-initial": "grippers",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msTouchSelect",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-touch-select",
              "exposed": "Window",
              "css-property-enum-values": "grippers none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "floodOpacity": {
              "name": "floodOpacity",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontStyle": {
              "name": "fontStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitAnimationTimingFunction": {
              "name": "webkitAnimationTimingFunction",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "gridRow": {
              "name": "gridRow",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "stopColor": {
              "css-property-initial": "black",
              "specs": "svg11",
              "ce-reactions": 1,
              "name": "stopColor",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property-animatable": 1,
              "nullable": 1,
              "css-property": "stop-color",
              "exposed": "Window",
              "css-property-enum-values": "currentColor inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_color"
            },
            "minWidth": {
              "name": "minWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBackgroundSize": {
              "name": "webkitBackgroundSize",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitBorderBottomRightRadius": {
              "name": "webkitBorderBottomRightRadius",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "writingMode": {
              "name": "writingMode",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "backgroundPositionY": {
              "name": "backgroundPositionY",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marker": {
              "name": "marker",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "glyphOrientationVertical": {
              "name": "glyphOrientationVertical",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "breakInside": {
              "name": "breakInside",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBackfaceVisibility": {
              "name": "webkitBackfaceVisibility",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "msHighContrastAdjust": {
              "css-property-initial": "auto",
              "specs": "none",
              "ce-reactions": 1,
              "name": "msHighContrastAdjust",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-high-contrast-adjust",
              "exposed": "Window",
              "css-property-enum-values": "auto none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "borderImageSlice": {
              "name": "borderImageSlice",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitColumnSpan": {
              "css-property-initial": "medium",
              "specs": "none css-multicol",
              "ce-reactions": 1,
              "name": "webkitColumnSpan",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-webkit-column-span",
              "exposed": "Window",
              "css-property-enum-values": "none all inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "fontVariant": {
              "name": "fontVariant",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "penAction": {
              "css-property-initial": "auto",
              "specs": "none",
              "ce-reactions": 1,
              "name": "penAction",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "css-property": "pen-action",
              "nullable": 1,
              "exposed": "Window",
              "css-property-enum-values": "auto none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "msGridRows": {
              "css-property-initial": "auto",
              "specs": "css-grid none",
              "ce-reactions": 1,
              "name": "msGridRows",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "-ms-grid-rows",
              "exposed": "Window",
              "css-property-enum-values": "none auto min-content max-content inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "css_grid_dimension_list"
            },
            "minHeight": {
              "name": "minHeight",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "stroke": {
              "name": "stroke",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBorderBottomLeftRadius": {
              "name": "webkitBorderBottomLeftRadius",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "rubyOverhang": {
              "css-property-initial": "auto",
              "specs": "css-ruby",
              "ce-reactions": 1,
              "name": "rubyOverhang",
              "tags": "CSSOM",
              "type-original": "DOMString?",
              "nullable": 1,
              "css-property": "ruby-overhang",
              "exposed": "Window",
              "css-property-enum-values": "auto whitespace none inherit initial",
              "type": "DOMString",
              "css-property-value-syntax": "enum"
            },
            "overflowX": {
              "name": "overflowX",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "gridTemplateAreas": {
              "name": "gridTemplateAreas",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "margin": {
              "name": "margin",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitBoxShadow": {
              "name": "webkitBoxShadow",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMask": {
              "name": "webkitMask",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImage": {
              "name": "webkitMaskBoxImage",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImageOutset": {
              "name": "webkitMaskBoxImageOutset",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImageRepeat": {
              "name": "webkitMaskBoxImageRepeat",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImageSlice": {
              "name": "webkitMaskBoxImageSlice",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImageSource": {
              "name": "webkitMaskBoxImageSource",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskBoxImageWidth": {
              "name": "webkitMaskBoxImageWidth",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskClip": {
              "name": "webkitMaskClip",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskComposite": {
              "name": "webkitMaskComposite",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskImage": {
              "name": "webkitMaskImage",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskOrigin": {
              "name": "webkitMaskOrigin",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskPosition": {
              "name": "webkitMaskPosition",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskRepeat": {
              "name": "webkitMaskRepeat",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "webkitMaskSize": {
              "name": "webkitMaskSize",
              "type": "CSSOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "resize": {
              "name": "resize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "caretColor": {
              "name": "caretColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "placeContent": {
              "name": "placeContent",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "placeSelf": {
              "name": "placeSelf",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "placeItems": {
              "name": "placeItems",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontSynthesis": {
              "name": "fontSynthesis",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontKerning": {
              "name": "fontKerning",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontVariantLigatures": {
              "name": "fontVariantLigatures",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontVariantPosition": {
              "name": "fontVariantPosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontVariantCaps": {
              "name": "fontVariantCaps",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontVariantNumeric": {
              "name": "fontVariantNumeric",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "fontVariantEastAsian": {
              "name": "fontVariantEastAsian",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "imageOrientation": {
              "name": "imageOrientation",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "imageRendering": {
              "name": "imageRendering",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "blockSize": {
              "name": "blockSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "inlineSize": {
              "name": "inlineSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "minBlockSize": {
              "name": "minBlockSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "minInlineSize": {
              "name": "minInlineSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maxBlockSize": {
              "name": "maxBlockSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maxInlineSize": {
              "name": "maxInlineSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marginBlockStart": {
              "name": "marginBlockStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marginBlockEnd": {
              "name": "marginBlockEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marginInlineStart": {
              "name": "marginInlineStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "marginInlineEnd": {
              "name": "marginInlineEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingBlockStart": {
              "name": "paddingBlockStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingBlockEnd": {
              "name": "paddingBlockEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingInlineStart": {
              "name": "paddingInlineStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paddingInlineEnd": {
              "name": "paddingInlineEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockStartWidth": {
              "name": "borderBlockStartWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockEndWidth": {
              "name": "borderBlockEndWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineStartWidth": {
              "name": "borderInlineStartWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineEndWidth": {
              "name": "borderInlineEndWidth",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockStartStyle": {
              "name": "borderBlockStartStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockEndStyle": {
              "name": "borderBlockEndStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineStartStyle": {
              "name": "borderInlineStartStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineEndStyle": {
              "name": "borderInlineEndStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockStartColor": {
              "name": "borderBlockStartColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockEndColor": {
              "name": "borderBlockEndColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineStartColor": {
              "name": "borderInlineStartColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineEndColor": {
              "name": "borderInlineEndColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockStart": {
              "name": "borderBlockStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderBlockEnd": {
              "name": "borderBlockEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineStart": {
              "name": "borderInlineStart",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "borderInlineEnd": {
              "name": "borderInlineEnd",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskRepeat": {
              "name": "maskRepeat",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskPosition": {
              "name": "maskPosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskSize": {
              "name": "maskSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskComposite": {
              "name": "maskComposite",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "maskType": {
              "name": "maskType",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "scrollBehavior": {
              "name": "scrollBehavior",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "webkitLineClamp": {
              "name": "webkitLineClamp",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "overflowAnchor": {
              "name": "overflowAnchor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "tabSize": {
              "name": "tabSize",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "hyphens": {
              "name": "hyphens",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "overflowWrap": {
              "name": "overflowWrap",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textDecorationLine": {
              "name": "textDecorationLine",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textDecorationStyle": {
              "name": "textDecorationStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textDecorationColor": {
              "name": "textDecorationColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textEmphasisStyle": {
              "name": "textEmphasisStyle",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textEmphasisColor": {
              "name": "textEmphasisColor",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textEmphasis": {
              "name": "textEmphasis",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textEmphasisPosition": {
              "name": "textEmphasisPosition",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "transformBox": {
              "name": "transformBox",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "willChange": {
              "name": "willChange",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textOrientation": {
              "name": "textOrientation",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "float": {
              "name": "float",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "paintOrder": {
              "name": "paintOrder",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "colorInterpolation": {
              "name": "colorInterpolation",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "shapeRendering": {
              "name": "shapeRendering",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "textRendering": {
              "name": "textRendering",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "userSelect": {
              "name": "userSelect",
              "type": "CSSOMString"
            }
          },
          "namesakes": {}
        },
        "tags": "CSSOM",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getPropertyPriority": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "propertyName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "cssom dom-level-2-style",
              "exposed": "Window",
              "name": "getPropertyPriority",
              "tags": "CSSOM"
            },
            "removeProperty": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "propertyName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "cssom dom-level-2-style",
              "ce-reactions": 1,
              "exposed": "Window",
              "name": "removeProperty",
              "tags": "CSSOM"
            },
            "getPropertyValue": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "propertyName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "cssom dom-level-2-style",
              "exposed": "Window",
              "name": "getPropertyValue",
              "tags": "CSSOM"
            },
            "item": {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "cssom dom-level-2-style",
              "exposed": "Window",
              "name": "item",
              "tags": "CSSOM"
            },
            "setProperty": {
              "specs": "cssom dom-level-2-style",
              "ce-reactions": 1,
              "name": "setProperty",
              "tags": "CSSOM",
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "propertyName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "nullable": 1,
                      "name": "value",
                      "type": "DOMString",
                      "type-original": "DOMString?"
                    },
                    {
                      "nullable": 1,
                      "name": "priority",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "comment": "An object that is a CSS declaration block, and exposes style information and various style-related methods and properties."
      },
      "VRDisplayEvent": {
        "specs": "WebVR",
        "constructor": {
          "specs": "WebVR",
          "signature": [
            {
              "param-min-required": 2,
              "type": "VRDisplayEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "VRDisplayEventInit",
                  "type-original": "VRDisplayEventInit"
                }
              ],
              "type-original": "VRDisplayEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "VRDisplayEvent",
        "properties": {
          "property": {
            "reason": {
              "specs": "WebVR",
              "name": "reason",
              "type-original": "VRDisplayEventReason?",
              "nullable": 1,
              "exposed": "Window",
              "type": "VRDisplayEventReason",
              "read-only": 1
            },
            "display": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "display",
              "type": "VRDisplay",
              "type-original": "VRDisplay",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "This WebVR API interface represents represents the event object of WebVR-related events (see the list of WebVR window extensions)."
      },
      "SVGGElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGGElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "g"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Corresponds to the <g> element."
      },
      "MessageChannel": {
        "name": "MessageChannel",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "port1": {
              "name": "port1",
              "type": "MessagePort",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the first MessagePort object.\n */"
            },
            "port2": {
              "name": "port2",
              "type": "MessagePort",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the second MessagePort object.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MessageChannel",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties."
      },
      "Navigator": {
        "name": "Navigator",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "requestMediaKeySystemAccess": {
              "name": "requestMediaKeySystemAccess",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "MediaKeySystemAccess"
                  },
                  "param": [
                    {
                      "name": "keySystem",
                      "type": "DOMString"
                    },
                    {
                      "name": "supportedConfigurations",
                      "type": "sequence",
                      "subtype": {
                        "type": "MediaKeySystemConfiguration"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getGamepads": {
              "name": "getGamepads",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Gamepad",
                    "nullable": 1
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getUserMedia": {
              "name": "getUserMedia",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "constraints",
                      "type": "MediaStreamConstraints"
                    },
                    {
                      "name": "successCallback",
                      "type": "NavigatorUserMediaSuccessCallback"
                    },
                    {
                      "name": "errorCallback",
                      "type": "NavigatorUserMediaErrorCallback"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "vibrate": {
              "name": "vibrate",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "pattern",
                      "type": "VibratePattern"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "vibrate(pattern: number | number[]): boolean"
              ]
            },
            "getVRDisplays": {
              "name": "getVRDisplays",
              "override-signatures": [
                "getVRDisplays(): Promise<VRDisplay[]>"
              ]
            },
            "msLaunchUri": {
              "name": "msLaunchUri",
              "override-signatures": [
                "msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clipboard": {
              "name": "clipboard",
              "type": "Clipboard",
              "read-only": 1,
              "exposed": "Window"
            },
            "credentials": {
              "name": "credentials",
              "type": "CredentialsContainer",
              "read-only": 1,
              "exposed": "Window"
            },
            "geolocation": {
              "name": "geolocation",
              "type": "Geolocation",
              "read-only": 1,
              "exposed": "Window"
            },
            "mediaDevices": {
              "name": "mediaDevices",
              "type": "MediaDevices",
              "read-only": 1,
              "exposed": "Window"
            },
            "permissions": {
              "name": "permissions",
              "type": "Permissions",
              "read-only": 1,
              "exposed": "Window"
            },
            "maxTouchPoints": {
              "name": "maxTouchPoints",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "serviceWorker": {
              "name": "serviceWorker",
              "type": "ServiceWorkerContainer",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointerEnabled": {
              "name": "pointerEnabled",
              "read-only": 1,
              "override-type": "boolean"
            },
            "doNotTrack": {
              "name": "doNotTrack",
              "read-only": 1,
              "override-type": "string | null"
            },
            "activeVRDisplays": {
              "name": "activeVRDisplays",
              "override-type": "ReadonlyArray<VRDisplay>",
              "read-only": 1
            },
            "msManipulationViewsEnabled": {
              "name": "msManipulationViewsEnabled",
              "override-type": "boolean",
              "read-only": 1
            },
            "msMaxTouchPoints": {
              "name": "msMaxTouchPoints",
              "override-type": "number",
              "read-only": 1
            },
            "msPointerEnabled": {
              "name": "msPointerEnabled",
              "override-type": "boolean",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "NavigatorID",
          "NavigatorLanguage",
          "NavigatorOnLine",
          "NavigatorContentUtils",
          "NavigatorCookies",
          "NavigatorPlugins",
          "NavigatorConcurrentHardware",
          "NavigatorStorage",
          "NavigatorAutomationInformation",
          "MSFileSaver",
          "MSNavigatorDoNotTrack",
          "NavigatorBeacon"
        ],
        "comment": "The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities."
      },
      "MediaQueryList": {
        "name": "MediaQueryList",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addListener": {
              "name": "addListener",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "listener",
                      "type": "EventListener",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1,
              "override-signatures": [
                "addListener(listener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void"
              ]
            },
            "removeListener": {
              "name": "removeListener",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "listener",
                      "type": "EventListener",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1,
              "override-signatures": [
                "removeListener(listener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "media": {
              "name": "media",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "matches": {
              "name": "matches",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "onchange": {
              "name": "onchange",
              "type": "EventHandler",
              "event-handler": "change",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).",
        "events": {
          "event": [
            {
              "name": "change",
              "type": "MediaQueryListEvent"
            }
          ]
        }
      },
      "GamepadPose": {
        "name": "GamepadPose",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "hasOrientation": {
              "name": "hasOrientation",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "hasPosition": {
              "name": "hasPosition",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "position": {
              "name": "position",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "linearVelocity": {
              "name": "linearVelocity",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "linearAcceleration": {
              "name": "linearAcceleration",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "orientation": {
              "name": "orientation",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "angularVelocity": {
              "name": "angularVelocity",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "angularAcceleration": {
              "name": "angularAcceleration",
              "type": "Float32Array",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Gamepad API interface represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information.)"
      },
      "SVGFEPointLightElement": {
        "name": "SVGFEPointLightElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "z": {
              "name": "z",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <fePointLight> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "fePointLight"
          }
        ]
      },
      "CloseEvent": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 1,
              "type": "CloseEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "CloseEventInit",
                  "optional": 1,
                  "type-original": "CloseEventInit"
                }
              ],
              "type-original": "CloseEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "CloseEvent",
        "properties": {
          "property": {
            "wasClean": {
              "specs": "html5",
              "name": "wasClean",
              "type-original": "boolean",
              "exposed": "Window Worker",
              "type": "boolean",
              "read-only": 1
            },
            "reason": {
              "specs": "html5",
              "name": "reason",
              "type-original": "USVString",
              "exposed": "Window Worker",
              "type": "USVString",
              "read-only": 1
            },
            "code": {
              "specs": "html5",
              "name": "code",
              "type-original": "unsigned short",
              "exposed": "Window Worker",
              "type": "unsigned short",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "initCloseEvent": {
              "deprecated": 1,
              "specs": "websockets-20110419",
              "signature": [
                {
                  "param-min-required": 6,
                  "type": "void",
                  "param": [
                    {
                      "name": "typeArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "canBubbleArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "cancelableArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "wasCleanArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "codeArg",
                      "type": "unsigned short",
                      "type-original": "unsigned short"
                    },
                    {
                      "name": "reasonArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "initCloseEvent",
              "exposed": "Window Worker"
            }
          }
        },
        "extends": "Event",
        "comment": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute."
      },
      "SVGZoomEvent": {
        "constants": {
          "constant": {}
        },
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "SVGZoomEvent",
        "extends": "UIEvent",
        "properties": {
          "property": {
            "zoomRectScreen": {
              "specs": "svg11",
              "name": "zoomRectScreen",
              "type-original": "SVGRect",
              "exposed": "Window",
              "type": "SVGRect",
              "read-only": 1
            },
            "previousScale": {
              "specs": "svg11",
              "name": "previousScale",
              "type-original": "float",
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "newScale": {
              "specs": "svg11",
              "name": "newScale",
              "type-original": "float",
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "newTranslate": {
              "specs": "svg11",
              "name": "newTranslate",
              "type-original": "SVGPoint",
              "exposed": "Window",
              "type": "SVGPoint",
              "read-only": 1
            },
            "previousTranslate": {
              "specs": "svg11",
              "name": "previousTranslate",
              "type-original": "SVGPoint",
              "exposed": "Window",
              "type": "SVGPoint",
              "read-only": 1
            }
          }
        }
      },
      "ProgressEvent": {
        "name": "ProgressEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "lengthComputable": {
              "name": "lengthComputable",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "loaded": {
              "name": "loaded",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "total": {
              "name": "total",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "target": {
              "name": "target",
              "read-only": 1,
              "nullable": 1,
              "override-type": "T"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ProgressEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ProgressEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window DedicatedWorker SharedWorker",
        "legacy-window-alias": [],
        "comment": "Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).",
        "type-parameters": [
          {
            "name": "T",
            "extends": "EventTarget",
            "default": "EventTarget"
          }
        ]
      },
      "VRPose": {
        "constants": {
          "constant": {}
        },
        "specs": "WebVR",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "VRPose",
        "extends": "Object",
        "properties": {
          "property": {
            "angularVelocity": {
              "specs": "WebVR",
              "name": "angularVelocity",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "linearAcceleration": {
              "specs": "WebVR",
              "name": "linearAcceleration",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "timestamp": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "timestamp",
              "type": "double",
              "type-original": "DOMHighResTimeStamp",
              "read-only": 1
            },
            "linearVelocity": {
              "specs": "WebVR",
              "name": "linearVelocity",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "orientation": {
              "specs": "WebVR",
              "name": "orientation",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "position": {
              "specs": "WebVR",
              "name": "position",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            },
            "angularAcceleration": {
              "specs": "WebVR",
              "name": "angularAcceleration",
              "type-original": "Float32Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            }
          }
        },
        "comment": "This WebVR API interface represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)"
      },
      "HTMLBaseElement": {
        "name": "HTMLBaseElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the baseline URL on which relative links are based.\n */"
            },
            "target": {
              "name": "target",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
        "element": [
          {
            "name": "base"
          }
        ]
      },
      "ClientRect": {
        "specs": "cssom-view",
        "anonymous-methods": {
          "method": []
        },
        "name": "ClientRect",
        "properties": {
          "property": {
            "width": {
              "specs": "cssom-view",
              "name": "width",
              "tags": "CSSOM",
              "type-original": "float",
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "left": {
              "specs": "cssom-view",
              "exposed": "Window",
              "name": "left",
              "type": "long",
              "tags": "CSSOM",
              "type-original": "long"
            },
            "right": {
              "specs": "cssom-view",
              "exposed": "Window",
              "name": "right",
              "type": "long",
              "tags": "CSSOM",
              "type-original": "long"
            },
            "top": {
              "specs": "cssom-view",
              "exposed": "Window",
              "name": "top",
              "type": "long",
              "tags": "CSSOM",
              "type-original": "long"
            },
            "height": {
              "specs": "cssom-view",
              "name": "height",
              "tags": "CSSOM",
              "type-original": "float",
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "bottom": {
              "specs": "cssom-view",
              "exposed": "Window",
              "name": "bottom",
              "type": "long",
              "tags": "CSSOM",
              "type-original": "long"
            }
          }
        },
        "tags": "CSSOM",
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "DOMImplementation": {
        "name": "DOMImplementation",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createDocumentType": {
              "name": "createDocumentType",
              "signature": [
                {
                  "type": "DocumentType",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "publicId",
                      "type": "DOMString"
                    },
                    {
                      "name": "systemId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createDocument": {
              "name": "createDocument",
              "signature": [
                {
                  "type": "XMLDocument",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "doctype",
                      "type": "DocumentType",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "createDocument(namespaceURI: string | null, qualifiedName: string | null, doctype: DocumentType | null): Document"
              ]
            },
            "createHTMLDocument": {
              "name": "createHTMLDocument",
              "signature": [
                {
                  "type": "Document",
                  "param": [
                    {
                      "name": "title",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "hasFeature": {
              "name": "hasFeature",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "hasFeature(...args: any[]): true"
              ],
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property."
      },
      "SVGUnitTypes": {
        "name": "SVGUnitTypes",
        "extends": "Object",
        "constants": {
          "constant": {
            "SVG_UNIT_TYPE_UNKNOWN": {
              "name": "SVG_UNIT_TYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_UNIT_TYPE_USERSPACEONUSE": {
              "name": "SVG_UNIT_TYPE_USERSPACEONUSE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": {
              "name": "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes."
      },
      "ConvolverNode": {
        "name": "ConvolverNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "buffer": {
              "name": "buffer",
              "type": "AudioBuffer",
              "nullable": 1,
              "exposed": "Window"
            },
            "normalize": {
              "name": "normalize",
              "type": "boolean",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ConvolverNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "ConvolverOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output."
      },
      "WebAuthnAssertion": {
        "specs": "WD-webauthn-20160531",
        "anonymous-methods": {
          "method": []
        },
        "name": "WebAuthnAssertion",
        "properties": {
          "property": {
            "signature": {
              "specs": "WD-webauthn-20160531",
              "exposed": "Window",
              "name": "signature",
              "type": "ArrayBuffer",
              "type-original": "ArrayBuffer",
              "read-only": 1
            },
            "authenticatorData": {
              "specs": "WD-webauthn-20160531",
              "exposed": "Window",
              "name": "authenticatorData",
              "type": "ArrayBuffer",
              "type-original": "ArrayBuffer",
              "read-only": 1
            },
            "clientData": {
              "specs": "WD-webauthn-20160531",
              "exposed": "Window",
              "name": "clientData",
              "type": "ArrayBuffer",
              "type-original": "ArrayBuffer",
              "read-only": 1
            },
            "credential": {
              "specs": "WD-webauthn-20160531",
              "exposed": "Window",
              "name": "credential",
              "type": "ScopedCredential",
              "type-original": "ScopedCredential",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1
      },
      "SpeechSynthesis": {
        "name": "SpeechSynthesis",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "speak": {
              "name": "speak",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "utterance",
                      "type": "SpeechSynthesisUtterance"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "cancel": {
              "name": "cancel",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "pause": {
              "name": "pause",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "resume": {
              "name": "resume",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getVoices": {
              "name": "getVoices",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "SpeechSynthesisVoice"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "pending": {
              "name": "pending",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "speaking": {
              "name": "speaking",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "paused": {
              "name": "paused",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "onvoiceschanged": {
              "name": "onvoiceschanged",
              "type": "EventHandler",
              "event-handler": "voiceschanged",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides."
      },
      "Element": {
        "name": "Element",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "hasAttributes": {
              "name": "hasAttributes",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if element has attributes, and false otherwise.\n */"
            },
            "getAttributeNames": {
              "name": "getAttributeNames",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  },
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the qualified names of all element's attributes. Can contain duplicates.\n */"
            },
            "getAttribute": {
              "name": "getAttribute",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.\n */"
            },
            "getAttributeNS": {
              "name": "getAttributeNS",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.\n */"
            },
            "setAttribute": {
              "name": "setAttribute",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets the value of element's first attribute whose qualified name is qualifiedName to value.\n */"
            },
            "setAttributeNS": {
              "name": "setAttributeNS",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets the value of element's attribute whose namespace is namespace and local name is localName to value.\n */"
            },
            "removeAttribute": {
              "name": "removeAttribute",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes element's first attribute whose qualified name is qualifiedName.\n */"
            },
            "removeAttributeNS": {
              "name": "removeAttributeNS",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes element's attribute whose namespace is namespace and local name is localName.\n */"
            },
            "toggleAttribute": {
              "name": "toggleAttribute",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "force",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.\n * \n * Returns true if qualifiedName is now present, and false otherwise.\n */"
            },
            "hasAttribute": {
              "name": "hasAttribute",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.\n */"
            },
            "hasAttributeNS": {
              "name": "hasAttributeNS",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if element has an attribute whose namespace is namespace and local name is localName.\n */"
            },
            "getAttributeNode": {
              "name": "getAttributeNode",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "getAttributeNode(name: string): Attr | null"
              ]
            },
            "getAttributeNodeNS": {
              "name": "getAttributeNodeNS",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null"
              ]
            },
            "setAttributeNode": {
              "name": "setAttributeNode",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "attr",
                      "type": "Attr"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setAttributeNodeNS": {
              "name": "setAttributeNodeNS",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "attr",
                      "type": "Attr"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeAttributeNode": {
              "name": "removeAttributeNode",
              "signature": [
                {
                  "type": "Attr",
                  "param": [
                    {
                      "name": "attr",
                      "type": "Attr"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "attachShadow": {
              "name": "attachShadow",
              "signature": [
                {
                  "type": "ShadowRoot",
                  "param": [
                    {
                      "name": "init",
                      "type": "ShadowRootInit"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a shadow root for element and returns it.\n */"
            },
            "closest": {
              "name": "closest",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "selectors",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.\n */",
              "override-signatures": [
                "closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null",
                "closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null",
                "closest<E extends Element = Element>(selector: string): E | null"
              ]
            },
            "matches": {
              "name": "matches",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "selectors",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if matching selectors against element's root yields element, and false otherwise.\n */"
            },
            "webkitMatchesSelector": {
              "name": "webkitMatchesSelector",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "selectors",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getElementsByTagName": {
              "name": "getElementsByTagName",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getElementsByTagNameNS": {
              "name": "getElementsByTagNameNS",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>",
                "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>",
                "getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>"
              ]
            },
            "getElementsByClassName": {
              "name": "getElementsByClassName",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "classNames",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.\n */",
              "override-signatures": [
                "getElementsByClassName(classNames: string): HTMLCollectionOf<Element>"
              ]
            },
            "insertAdjacentElement": {
              "name": "insertAdjacentElement",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "where",
                      "type": "DOMString"
                    },
                    {
                      "name": "element",
                      "type": "Element"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null"
              ]
            },
            "insertAdjacentText": {
              "name": "insertAdjacentText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "where",
                      "type": "DOMString"
                    },
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertAdjacentText(where: InsertPosition, text: string): void"
              ]
            },
            "getClientRects": {
              "name": "getClientRects",
              "signature": [
                {
                  "type": "DOMRectList",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getBoundingClientRect": {
              "name": "getBoundingClientRect",
              "signature": [
                {
                  "type": "DOMRect",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "scrollIntoView": {
              "name": "scrollIntoView",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "arg",
                      "type": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "ScrollIntoViewOptions"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "scroll": {
              "name": "scroll",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "scrollTo": {
              "name": "scrollTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "scrollBy": {
              "name": "scrollBy",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "insertAdjacentHTML": {
              "name": "insertAdjacentHTML",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "position",
                      "type": "DOMString"
                    },
                    {
                      "name": "text",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertAdjacentHTML(where: InsertPosition, html: string): void"
              ]
            },
            "requestFullscreen": {
              "name": "requestFullscreen",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "FullscreenOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Displays element fullscreen and resolves promise when done.\n * \n * When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference.\n */"
            },
            "setPointerCapture": {
              "name": "setPointerCapture",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "pointerId",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "releasePointerCapture": {
              "name": "releasePointerCapture",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "pointerId",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "hasPointerCapture": {
              "name": "hasPointerCapture",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "pointerId",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "requestPointerLock": {
              "name": "requestPointerLock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "msGetRegionContent": {
              "name": "msGetRegionContent",
              "override-signatures": [
                "msGetRegionContent(): any"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "namespaceURI": {
              "name": "namespaceURI",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the namespace.\n */"
            },
            "prefix": {
              "name": "prefix",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the namespace prefix.\n */"
            },
            "localName": {
              "name": "localName",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the local name.\n */"
            },
            "tagName": {
              "name": "tagName",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the HTML-uppercased qualified name.\n */"
            },
            "id": {
              "name": "id",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the value of element's id content attribute. Can be set to change it.\n */"
            },
            "className": {
              "name": "className",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the value of element's class content attribute. Can be set to change it.\n */"
            },
            "classList": {
              "name": "classList",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.\n */"
            },
            "slot": {
              "name": "slot",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the value of element's slot content attribute. Can be set to change it.\n */",
              "override-type": "string"
            },
            "attributes": {
              "name": "attributes",
              "type": "NamedNodeMap",
              "read-only": 1,
              "exposed": "Window"
            },
            "shadowRoot": {
              "name": "shadowRoot",
              "type": "ShadowRoot",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.\n */"
            },
            "scrollTop": {
              "name": "scrollTop",
              "type": "unrestricted double",
              "exposed": "Window"
            },
            "scrollLeft": {
              "name": "scrollLeft",
              "type": "unrestricted double",
              "exposed": "Window"
            },
            "scrollWidth": {
              "name": "scrollWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "scrollHeight": {
              "name": "scrollHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientTop": {
              "name": "clientTop",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientLeft": {
              "name": "clientLeft",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientWidth": {
              "name": "clientWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientHeight": {
              "name": "clientHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "outerHTML": {
              "name": "outerHTML",
              "type": "DOMString",
              "exposed": "Window"
            },
            "onfullscreenchange": {
              "name": "onfullscreenchange",
              "type": "EventHandler",
              "event-handler": "fullscreenchange",
              "exposed": "Window"
            },
            "onfullscreenerror": {
              "name": "onfullscreenerror",
              "type": "EventHandler",
              "event-handler": "fullscreenerror",
              "exposed": "Window"
            },
            "assignedSlot": {
              "name": "assignedSlot",
              "read-only": 1,
              "override-type": "HTMLSlotElement | null"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "ParentNode",
          "NonDocumentTypeChildNode",
          "ChildNode",
          "Slotable",
          "InnerHTML",
          "Animatable"
        ],
        "comment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "dom4",
              "name": "touchstart",
              "type": "TouchEvent",
              "cancelable": 1,
              "bubbles": 1
            },
            {
              "dispatch": "sync",
              "specs": "dom4",
              "name": "touchmove",
              "type": "TouchEvent",
              "cancelable": 1,
              "bubbles": 1
            },
            {
              "dispatch": "sync",
              "specs": "dom4",
              "name": "touchcancel",
              "type": "TouchEvent",
              "cancelable": 1,
              "bubbles": 1
            },
            {
              "dispatch": "sync",
              "specs": "dom4",
              "name": "touchend",
              "type": "TouchEvent",
              "cancelable": 1,
              "bubbles": 1
            }
          ]
        }
      },
      "WindowClient": {
        "name": "WindowClient",
        "extends": "Client",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "focus": {
              "name": "focus",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "WindowClient"
                  },
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            },
            "navigate": {
              "name": "navigate",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "WindowClient",
                    "nullable": 1
                  },
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "visibilityState": {
              "name": "visibilityState",
              "type": "VisibilityState",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "focused": {
              "name": "focused",
              "type": "boolean",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "ancestorOrigins": {
              "name": "ancestorOrigins",
              "type": "FrozenArray",
              "subtype": {
                "type": "USVString"
              },
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources."
      },
      "ExtendableMessageEvent": {
        "name": "ExtendableMessageEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "any",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "lastEventId": {
              "name": "lastEventId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "source": {
              "name": "source",
              "type": [
                {
                  "type": "Client"
                },
                {
                  "type": "ServiceWorker"
                },
                {
                  "type": "MessagePort"
                }
              ],
              "nullable": 1,
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "ports": {
              "name": "ports",
              "type": "FrozenArray",
              "subtype": {
                "type": "MessagePort"
              },
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ExtendableMessageEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ExtendableMessageEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events."
      },
      "FileList": {
        "name": "FileList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "File",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage."
      },
      "SVGLineElement": {
        "name": "SVGLineElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x1": {
              "name": "x1",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "y1": {
              "name": "y1",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "x2": {
              "name": "x2",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "y2": {
              "name": "y2",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to the properties of <line> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "line"
          }
        ]
      },
      "HTMLParagraphElement": {
        "name": "HTMLParagraphElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
        "element": [
          {
            "name": "p"
          }
        ]
      },
      "Plugin": {
        "name": "Plugin",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "MimeType",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the specified MimeType object.\n */"
            },
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": "MimeType",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the plugin's name.\n */"
            },
            "description": {
              "name": "description",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the plugin's description.\n */"
            },
            "filename": {
              "name": "filename",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the plugin library's filename, if applicable on the current platform.\n */"
            },
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of MIME types, represented by MimeType objects, supported by the plugin.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides information about a browser plugin."
      },
      "ReadableStream": {
        "name": "ReadableStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "cancel": {
              "name": "cancel",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getReader": {
              "name": "getReader",
              "signature": [
                {
                  "type": "ReadableStreamBYOBReader",
                  "param": [
                    {
                      "name": "options",
                      "type": "any"
                    }
                  ]
                },
                {
                  "type": "ReadableStreamDefaultReader",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "getReader(options: { mode: \"byob\" }): ReadableStreamBYOBReader",
                "getReader(): ReadableStreamDefaultReader<R>"
              ]
            },
            "pipeThrough": {
              "name": "pipeThrough",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "pair",
                      "type": "any"
                    },
                    {
                      "name": "options",
                      "type": "PipeOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "pipeThrough<T>({ writable, readable }: { writable: WritableStream<R>, readable: ReadableStream<T> }, options?: PipeOptions): ReadableStream<T>"
              ]
            },
            "pipeTo": {
              "name": "pipeTo",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "dest",
                      "type": "WritableStream"
                    },
                    {
                      "name": "options",
                      "type": "PipeOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "pipeTo(dest: WritableStream<R>, options?: PipeOptions): Promise<void>"
              ]
            },
            "tee": {
              "override-signatures": [
                "tee(): [ReadableStream<R>, ReadableStream<R>]"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "tee",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          ]
        },
        "properties": {
          "property": {
            "locked": {
              "name": "locked",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ReadableStream",
              "param": [
                {
                  "name": "underlyingSource",
                  "type": "UnderlyingSource",
                  "optional": 1
                },
                {
                  "name": "strategy",
                  "type": "QueuingStrategy",
                  "optional": 1
                }
              ]
            },
            {
              "type": "ReadableStream",
              "param": [
                {
                  "name": "underlyingSource",
                  "type": "UnderlyingByteSource",
                  "optional": 1
                },
                {
                  "name": "strategy",
                  "type": "QueuingStrategy",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number, size?: undefined }): ReadableStream<Uint8Array>",
            "new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.",
        "type-parameters": [
          {
            "name": "R",
            "default": "any"
          }
        ]
      },
      "Node": {
        "name": "Node",
        "extends": "EventTarget",
        "constants": {
          "constant": {
            "ELEMENT_NODE": {
              "name": "ELEMENT_NODE",
              "type": "unsigned short",
              "value": "1",
              "comment": "/**\n * node is an element.\n */"
            },
            "ATTRIBUTE_NODE": {
              "name": "ATTRIBUTE_NODE",
              "type": "unsigned short",
              "value": "2"
            },
            "TEXT_NODE": {
              "name": "TEXT_NODE",
              "type": "unsigned short",
              "value": "3",
              "comment": "/**\n * node is a Text node.\n */"
            },
            "CDATA_SECTION_NODE": {
              "name": "CDATA_SECTION_NODE",
              "type": "unsigned short",
              "value": "4",
              "comment": "/**\n * node is a CDATASection node.\n */"
            },
            "ENTITY_REFERENCE_NODE": {
              "name": "ENTITY_REFERENCE_NODE",
              "type": "unsigned short",
              "value": "5"
            },
            "ENTITY_NODE": {
              "name": "ENTITY_NODE",
              "type": "unsigned short",
              "value": "6"
            },
            "PROCESSING_INSTRUCTION_NODE": {
              "name": "PROCESSING_INSTRUCTION_NODE",
              "type": "unsigned short",
              "value": "7",
              "comment": "/**\n * node is a ProcessingInstruction node.\n */"
            },
            "COMMENT_NODE": {
              "name": "COMMENT_NODE",
              "type": "unsigned short",
              "value": "8",
              "comment": "/**\n * node is a Comment node.\n */"
            },
            "DOCUMENT_NODE": {
              "name": "DOCUMENT_NODE",
              "type": "unsigned short",
              "value": "9",
              "comment": "/**\n * node is a document.\n */"
            },
            "DOCUMENT_TYPE_NODE": {
              "name": "DOCUMENT_TYPE_NODE",
              "type": "unsigned short",
              "value": "10",
              "comment": "/**\n * node is a doctype.\n */"
            },
            "DOCUMENT_FRAGMENT_NODE": {
              "name": "DOCUMENT_FRAGMENT_NODE",
              "type": "unsigned short",
              "value": "11",
              "comment": "/**\n * node is a DocumentFragment node.\n */"
            },
            "NOTATION_NODE": {
              "name": "NOTATION_NODE",
              "type": "unsigned short",
              "value": "12"
            },
            "DOCUMENT_POSITION_DISCONNECTED": {
              "name": "DOCUMENT_POSITION_DISCONNECTED",
              "type": "unsigned short",
              "value": "0x01",
              "comment": "/**\n * Set when node and other are not in the same tree.\n */"
            },
            "DOCUMENT_POSITION_PRECEDING": {
              "name": "DOCUMENT_POSITION_PRECEDING",
              "type": "unsigned short",
              "value": "0x02",
              "comment": "/**\n * Set when other is preceding node.\n */"
            },
            "DOCUMENT_POSITION_FOLLOWING": {
              "name": "DOCUMENT_POSITION_FOLLOWING",
              "type": "unsigned short",
              "value": "0x04",
              "comment": "/**\n * Set when other is following node.\n */"
            },
            "DOCUMENT_POSITION_CONTAINS": {
              "name": "DOCUMENT_POSITION_CONTAINS",
              "type": "unsigned short",
              "value": "0x08",
              "comment": "/**\n * Set when other is an ancestor of node.\n */"
            },
            "DOCUMENT_POSITION_CONTAINED_BY": {
              "name": "DOCUMENT_POSITION_CONTAINED_BY",
              "type": "unsigned short",
              "value": "0x10",
              "comment": "/**\n * Set when other is a descendant of node.\n */"
            },
            "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
              "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
              "type": "unsigned short",
              "value": "0x20"
            }
          }
        },
        "methods": {
          "method": {
            "getRootNode": {
              "name": "getRootNode",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "options",
                      "type": "GetRootNodeOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns node's root.\n */"
            },
            "hasChildNodes": {
              "name": "hasChildNodes",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether node has children.\n */"
            },
            "normalize": {
              "name": "normalize",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.\n */"
            },
            "cloneNode": {
              "name": "cloneNode",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "deep",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a copy of node. If deep is true, the copy also includes the node's descendants.\n */"
            },
            "isEqualNode": {
              "name": "isEqualNode",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "otherNode",
                      "type": "Node",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether node and otherNode have the same properties.\n */"
            },
            "isSameNode": {
              "name": "isSameNode",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "otherNode",
                      "type": "Node",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "compareDocumentPosition": {
              "name": "compareDocumentPosition",
              "signature": [
                {
                  "type": "unsigned short",
                  "param": [
                    {
                      "name": "other",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a bitmask indicating the position of other relative to node.\n */"
            },
            "contains": {
              "name": "contains",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "other",
                      "type": "Node",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if other is an inclusive descendant of node, and false otherwise.\n */"
            },
            "lookupPrefix": {
              "name": "lookupPrefix",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "lookupNamespaceURI": {
              "name": "lookupNamespaceURI",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "prefix",
                      "type": "DOMString",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "isDefaultNamespace": {
              "name": "isDefaultNamespace",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "insertBefore": {
              "name": "insertBefore",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "child",
                      "type": "Node",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertBefore<T extends Node>(newChild: T, refChild: Node | null): T"
              ]
            },
            "appendChild": {
              "name": "appendChild",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "appendChild<T extends Node>(newChild: T): T"
              ]
            },
            "replaceChild": {
              "name": "replaceChild",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "child",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "replaceChild<T extends Node>(newChild: Node, oldChild: T): T"
              ]
            },
            "removeChild": {
              "name": "removeChild",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "child",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "removeChild<T extends Node>(oldChild: T): T"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "nodeType": {
              "name": "nodeType",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the type of node.\n */"
            },
            "nodeName": {
              "name": "nodeName",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a string appropriate for the type of node.\n */"
            },
            "baseURI": {
              "name": "baseURI",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns node's node document's document base URL.\n */"
            },
            "isConnected": {
              "name": "isConnected",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns true if node is connected and false otherwise.\n */",
              "default": "false",
              "type-original": "boolean"
            },
            "ownerDocument": {
              "name": "ownerDocument",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the node document. Returns null for documents.\n */"
            },
            "parentNode": {
              "name": "parentNode",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the parent.\n */",
              "override-type": "Node & ParentNode | null"
            },
            "parentElement": {
              "name": "parentElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the parent element.\n */",
              "override-type": "HTMLElement | null"
            },
            "childNodes": {
              "name": "childNodes",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the children.\n */",
              "override-type": "NodeListOf<ChildNode>"
            },
            "firstChild": {
              "name": "firstChild",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the first child.\n */",
              "override-type": "ChildNode | null"
            },
            "lastChild": {
              "name": "lastChild",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the last child.\n */",
              "override-type": "ChildNode | null"
            },
            "previousSibling": {
              "name": "previousSibling",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the previous sibling.\n */"
            },
            "nextSibling": {
              "name": "nextSibling",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the next sibling.\n */",
              "override-type": "ChildNode | null"
            },
            "nodeValue": {
              "name": "nodeValue",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "textContent": {
              "name": "textContent",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "namespaceURI": {
              "name": "namespaceURI",
              "read-only": 1,
              "override-type": "string | null",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way."
      },
      "File": {
        "name": "File",
        "extends": "Blob",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "lastModified": {
              "name": "lastModified",
              "type": "long long",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "File",
              "param": [
                {
                  "name": "fileBits",
                  "type": "sequence",
                  "subtype": {
                    "type": "BlobPart"
                  }
                },
                {
                  "name": "fileName",
                  "type": "USVString"
                },
                {
                  "name": "options",
                  "type": "FilePropertyBag",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Provides information about files and allows JavaScript in a web page to access their content."
      },
      "WEBGL_depth_texture": {
        "name": "WEBGL_depth_texture",
        "extends": "Object",
        "constants": {
          "constant": {
            "UNSIGNED_INT_24_8_WEBGL": {
              "name": "UNSIGNED_INT_24_8_WEBGL",
              "type": "GLenum",
              "value": "0x84FA"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.",
        "override-exposed": "Window Worker"
      },
      "SVGPathSegCurvetoQuadraticSmoothRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoQuadraticSmoothRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "URL": {
        "name": "URL",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "USVString",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "createObjectURL": {
              "name": "createObjectURL",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "mediaSource",
                      "type": "MediaSource"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker",
              "override-signatures": [
                "createObjectURL(object: any): string"
              ]
            },
            "revokeObjectURL": {
              "name": "revokeObjectURL",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "url",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "protocol": {
              "name": "protocol",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "username": {
              "name": "username",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "password": {
              "name": "password",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "host": {
              "name": "host",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "hostname": {
              "name": "hostname",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "port": {
              "name": "port",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "pathname": {
              "name": "pathname",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "search": {
              "name": "search",
              "type": "USVString",
              "exposed": "Window Worker"
            },
            "searchParams": {
              "name": "searchParams",
              "type": "URLSearchParams",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "hash": {
              "name": "hash",
              "type": "USVString",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "URL",
              "param": [
                {
                  "name": "url",
                  "type": "USVString"
                },
                {
                  "name": "base",
                  "type": "USVString",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new(url: string, base?: string | URL): URL"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [
          "webkitURL"
        ],
        "comment": "The URL interface represents an object providing static methods used for creating object URLs."
      },
      "MouseEvent": {
        "name": "MouseEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getModifierState": {
              "name": "getModifierState",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "keyArg",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "initMouseEvent": {
              "name": "initMouseEvent",
              "override-signatures": [
                "initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "screenX": {
              "name": "screenX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "screenY": {
              "name": "screenY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientX": {
              "name": "clientX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientY": {
              "name": "clientY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "ctrlKey": {
              "name": "ctrlKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "shiftKey": {
              "name": "shiftKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "altKey": {
              "name": "altKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "metaKey": {
              "name": "metaKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "button": {
              "name": "button",
              "type": "short",
              "read-only": 1,
              "exposed": "Window"
            },
            "buttons": {
              "name": "buttons",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "relatedTarget": {
              "name": "relatedTarget",
              "type": "EventTarget",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "pageX": {
              "name": "pageX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pageY": {
              "name": "pageY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "x": {
              "name": "x",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetX": {
              "name": "offsetX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetY": {
              "name": "offsetY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "movementX": {
              "name": "movementX",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "movementY": {
              "name": "movementY",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MouseEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MouseEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown."
      },
      "DedicatedWorkerGlobalScope": {
        "constants": {
          "constant": {}
        },
        "specs": "workers",
        "global": "Worker",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {
            "close": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Worker",
              "name": "close"
            },
            "postMessage": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "subtype": {
                        "type": "object"
                      },
                      "name": "transfer",
                      "type": "sequence",
                      "optional": 1,
                      "type-original": "sequence<object>"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Worker",
              "name": "postMessage",
              "override-signatures": [
                "postMessage(message: any, transfer: Transferable[]): void",
                "postMessage(message: any, options?: PostMessageOptions): void"
              ]
            }
          }
        },
        "exposed": "Worker",
        "name": "DedicatedWorkerGlobalScope",
        "extends": "WorkerGlobalScope",
        "properties": {
          "property": {
            "onmessage": {
              "specs": "workers",
              "name": "onmessage",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "message"
            }
          }
        },
        "implements": [
          "AnimationFrameProvider"
        ],
        "comment": "(the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers."
      },
      "AudioContext": {
        "name": "AudioContext",
        "extends": "BaseAudioContext",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getOutputTimestamp": {
              "name": "getOutputTimestamp",
              "signature": [
                {
                  "type": "AudioTimestamp",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "resume": {
              "name": "resume",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "suspend": {
              "name": "suspend",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createMediaElementSource": {
              "name": "createMediaElementSource",
              "signature": [
                {
                  "type": "MediaElementAudioSourceNode",
                  "param": [
                    {
                      "name": "mediaElement",
                      "type": "HTMLMediaElement"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createMediaStreamSource": {
              "name": "createMediaStreamSource",
              "signature": [
                {
                  "type": "MediaStreamAudioSourceNode",
                  "param": [
                    {
                      "name": "mediaStream",
                      "type": "MediaStream"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createMediaStreamTrackSource": {
              "name": "createMediaStreamTrackSource",
              "signature": [
                {
                  "type": "MediaStreamTrackAudioSourceNode",
                  "param": [
                    {
                      "name": "mediaStreamTrack",
                      "type": "MediaStreamTrack"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createMediaStreamDestination": {
              "name": "createMediaStreamDestination",
              "signature": [
                {
                  "type": "MediaStreamAudioDestinationNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseLatency": {
              "name": "baseLatency",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "outputLatency": {
              "name": "outputLatency",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioContext",
              "param": [
                {
                  "name": "contextOptions",
                  "type": "AudioContextOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An audio-processing graph built from audio modules linked together, each represented by an AudioNode."
      },
      "SVGTextPositioningElement": {
        "constants": {
          "constant": {}
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "SVGTextPositioningElement",
        "extends": "SVGTextContentElement",
        "properties": {
          "property": {
            "y": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y",
              "constant": 1,
              "content-attribute": "y",
              "type-original": "SVGAnimatedLengthList",
              "exposed": "Window",
              "content-attribute-value-syntax": "comma_or_space_separated_svg_number_with_optional_units",
              "type": "SVGAnimatedLengthList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "rotate": {
              "specs": "svg2",
              "same-object": 1,
              "name": "rotate",
              "constant": 1,
              "content-attribute": "rotate",
              "type-original": "SVGAnimatedNumberList",
              "exposed": "Window",
              "content-attribute-value-syntax": "comma_or_space_separated_floating_point_numbers",
              "type": "SVGAnimatedNumberList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "dy": {
              "specs": "svg2",
              "same-object": 1,
              "name": "dy",
              "constant": 1,
              "content-attribute": "dy",
              "type-original": "SVGAnimatedLengthList",
              "exposed": "Window",
              "content-attribute-value-syntax": "comma_or_space_separated_svg_number_with_optional_units",
              "type": "SVGAnimatedLengthList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "dx": {
              "specs": "svg2",
              "same-object": 1,
              "name": "dx",
              "constant": 1,
              "content-attribute": "dx",
              "type-original": "SVGAnimatedLengthList",
              "exposed": "Window",
              "content-attribute-value-syntax": "comma_or_space_separated_svg_number_with_optional_units",
              "type": "SVGAnimatedLengthList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "x": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x",
              "constant": 1,
              "content-attribute": "x",
              "type-original": "SVGAnimatedLengthList",
              "exposed": "Window",
              "content-attribute-value-syntax": "comma_or_space_separated_svg_number_with_optional_units",
              "type": "SVGAnimatedLengthList",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "comment": "Implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement."
      },
      "ExtensionScriptApis": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "ExtensionScriptApis",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fireExtensionApiTelemetry": {
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "void",
                  "param": [
                    {
                      "name": "functionName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "isSucceeded",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "isSupported",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "errorString",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "fireExtensionApiTelemetry"
            },
            "registerGenericPersistentCallbackHandler": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "callbackHandler",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "registerGenericPersistentCallbackHandler"
            },
            "genericSynchronousFunction": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "functionId",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "genericSynchronousFunction"
            },
            "registerWebRuntimeCallbackHandler": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "object",
                  "param": [
                    {
                      "name": "handler",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "object"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "registerWebRuntimeCallbackHandler"
            },
            "genericWebRuntimeCallout": {
              "signature": [
                {
                  "param-min-required": 3,
                  "type": "void",
                  "param": [
                    {
                      "name": "to",
                      "type": "object",
                      "type-original": "object"
                    },
                    {
                      "name": "from",
                      "type": "object",
                      "type-original": "object"
                    },
                    {
                      "name": "payload",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "genericWebRuntimeCallout"
            },
            "getExtensionId": {
              "signature": [
                {
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getExtensionId"
            },
            "registerGenericFunctionCallbackHandler": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "callbackHandler",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "registerGenericFunctionCallbackHandler"
            },
            "genericFunction": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "routerAddress",
                      "type": "object",
                      "type-original": "object"
                    },
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "callbackId",
                      "type": "long",
                      "optional": 1,
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "genericFunction"
            },
            "extensionIdToShortId": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "extensionId",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "extensionIdToShortId"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "AudioTrackList": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "AudioTrackList",
        "properties": {
          "property": {
            "onremovetrack": {
              "specs": "html5",
              "name": "onremovetrack",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "removetrack"
            },
            "onchange": {
              "specs": "html5",
              "name": "onchange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "change"
            },
            "length": {
              "specs": "html5",
              "exposed": "Window",
              "name": "length",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "onaddtrack": {
              "specs": "html5",
              "name": "onaddtrack",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "addtrack"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "addtrack",
              "type": "TrackEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "removetrack",
              "type": "TrackEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "change",
              "type": "Event",
              "skips-window": 1
            }
          ]
        },
        "methods": {
          "method": {
            "getTrackById": {
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 1,
                  "type": "AudioTrack",
                  "param": [
                    {
                      "name": "id",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "AudioTrack?"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "getTrackById"
            },
            "item": {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "AudioTrack",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "AudioTrack"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "item"
            }
          }
        },
        "exposed": "Window",
        "extends": "EventTarget",
        "comment": "Used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list."
      },
      "HTMLOListElement": {
        "name": "HTMLOListElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "reversed": {
              "name": "reversed",
              "type": "boolean",
              "exposed": "Window"
            },
            "start": {
              "name": "start",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * The starting number.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window"
            },
            "compact": {
              "name": "compact",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
        "element": [
          {
            "name": "ol"
          }
        ]
      },
      "IntersectionObserver": {
        "name": "IntersectionObserver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "observe": {
              "name": "observe",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "Element"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "unobserve": {
              "name": "unobserve",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "Element"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "disconnect": {
              "name": "disconnect",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "takeRecords": {
              "name": "takeRecords",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "IntersectionObserverEntry"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "root": {
              "name": "root",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "rootMargin": {
              "name": "rootMargin",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "thresholds": {
              "name": "thresholds",
              "type": "FrozenArray",
              "subtype": {
                "type": "double"
              },
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "IntersectionObserver",
              "param": [
                {
                  "name": "callback",
                  "type": "IntersectionObserverCallback"
                },
                {
                  "name": "options",
                  "type": "IntersectionObserverInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport."
      },
      "WEBGL_debug_renderer_info": {
        "name": "WEBGL_debug_renderer_info",
        "extends": "Object",
        "constants": {
          "constant": {
            "UNMASKED_VENDOR_WEBGL": {
              "name": "UNMASKED_VENDOR_WEBGL",
              "type": "GLenum",
              "value": "0x9245"
            },
            "UNMASKED_RENDERER_WEBGL": {
              "name": "UNMASKED_RENDERER_WEBGL",
              "type": "GLenum",
              "value": "0x9246"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.",
        "override-exposed": "Window Worker"
      },
      "FetchEvent": {
        "name": "FetchEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "respondWith": {
              "name": "respondWith",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "r",
                      "type": "Promise",
                      "subtype": {
                        "type": "Response"
                      }
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "request": {
              "name": "request",
              "type": "Request",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "preloadResponse": {
              "name": "preloadResponse",
              "type": "Promise",
              "subtype": {
                "type": "any"
              },
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "clientId": {
              "name": "clientId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "resultingClientId": {
              "name": "resultingClientId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "replacesClientId": {
              "name": "replacesClientId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "FetchEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "FetchEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch."
      },
      "StyleMedia": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "StyleMedia",
        "properties": {
          "property": {
            "type": {
              "specs": "none",
              "name": "type",
              "tags": "CSSOM",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "tags": "CSSOM",
        "constants": {
          "constant": {}
        },
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {
            "matchMedium": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "mediaquery",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "matchMedium",
              "tags": "CSSOM"
            }
          }
        },
        "extends": "Object"
      },
      "MediaStreamTrack": {
        "name": "MediaStreamTrack",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clone": {
              "name": "clone",
              "signature": [
                {
                  "type": "MediaStreamTrack",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "stop": {
              "name": "stop",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getCapabilities": {
              "name": "getCapabilities",
              "signature": [
                {
                  "type": "MediaTrackCapabilities",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getConstraints": {
              "name": "getConstraints",
              "signature": [
                {
                  "type": "MediaTrackConstraints",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getSettings": {
              "name": "getSettings",
              "signature": [
                {
                  "type": "MediaTrackSettings",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "applyConstraints": {
              "name": "applyConstraints",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "constraints",
                      "type": "MediaTrackConstraints",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "kind": {
              "name": "kind",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "id": {
              "name": "id",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "label": {
              "name": "label",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "enabled": {
              "name": "enabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "muted": {
              "name": "muted",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "onmute": {
              "name": "onmute",
              "type": "EventHandler",
              "event-handler": "mute",
              "exposed": "Window"
            },
            "onunmute": {
              "name": "onunmute",
              "type": "EventHandler",
              "event-handler": "unmute",
              "exposed": "Window"
            },
            "readyState": {
              "name": "readyState",
              "type": "MediaStreamTrackState",
              "read-only": 1,
              "exposed": "Window"
            },
            "onended": {
              "name": "onended",
              "type": "EventHandler",
              "event-handler": "ended",
              "exposed": "Window"
            },
            "isolated": {
              "name": "isolated",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "onisolationchange": {
              "name": "onisolationchange",
              "type": "EventHandler",
              "event-handler": "isolationchange",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well."
      },
      "SVGFEMorphologyElement": {
        "name": "SVGFEMorphologyElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_MORPHOLOGY_OPERATOR_UNKNOWN": {
              "name": "SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_MORPHOLOGY_OPERATOR_ERODE": {
              "name": "SVG_MORPHOLOGY_OPERATOR_ERODE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_MORPHOLOGY_OPERATOR_DILATE": {
              "name": "SVG_MORPHOLOGY_OPERATOR_DILATE",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "operator": {
              "name": "operator",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "radiusX": {
              "name": "radiusX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "radiusY": {
              "name": "radiusY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feMorphology> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feMorphology"
          }
        ]
      },
      "PerformanceNavigationTiming": {
        "name": "PerformanceNavigationTiming",
        "extends": "PerformanceResourceTiming",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "unloadEventStart": {
              "name": "unloadEventStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "unloadEventEnd": {
              "name": "unloadEventEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "domInteractive": {
              "name": "domInteractive",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "domContentLoadedEventStart": {
              "name": "domContentLoadedEventStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "domContentLoadedEventEnd": {
              "name": "domContentLoadedEventEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "domComplete": {
              "name": "domComplete",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "loadEventStart": {
              "name": "loadEventStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "loadEventEnd": {
              "name": "loadEventEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "NavigationType",
              "read-only": 1,
              "exposed": "Window"
            },
            "redirectCount": {
              "name": "redirectCount",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document."
      },
      "OfflineAudioCompletionEvent": {
        "name": "OfflineAudioCompletionEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "renderedBuffer": {
              "name": "renderedBuffer",
              "type": "AudioBuffer",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "OfflineAudioCompletionEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "OfflineAudioCompletionEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface."
      },
      "BiquadFilterNode": {
        "name": "BiquadFilterNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getFrequencyResponse": {
              "name": "getFrequencyResponse",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "frequencyHz",
                      "type": "Float32Array"
                    },
                    {
                      "name": "magResponse",
                      "type": "Float32Array"
                    },
                    {
                      "name": "phaseResponse",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "BiquadFilterType",
              "exposed": "Window"
            },
            "frequency": {
              "name": "frequency",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "detune": {
              "name": "detune",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "Q": {
              "name": "Q",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "gain": {
              "name": "gain",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "BiquadFilterNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "BiquadFilterOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers."
      },
      "SVGPatternElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_shape_rect",
              "name": "clip"
            },
            {
              "enum-values": "visible hidden scroll auto inherit",
              "value-syntax": "enum",
              "name": "overflow"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPatternElement",
        "properties": {
          "property": {
            "width": {
              "specs": "svg2",
              "name": "width",
              "constant": 1,
              "content-attribute": "width",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "y": {
              "specs": "svg2",
              "name": "y",
              "constant": 1,
              "content-attribute": "y",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "patternUnits": {
              "content-attribute-enum-values": "objectBoundingBox userSpaceOnUse",
              "specs": "svg2",
              "name": "patternUnits",
              "constant": 1,
              "content-attribute": "patternUnits",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "x": {
              "specs": "svg2",
              "name": "x",
              "constant": 1,
              "content-attribute": "x",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "height": {
              "specs": "svg2",
              "name": "height",
              "constant": 1,
              "content-attribute": "height",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "patternTransform": {
              "specs": "svg2",
              "name": "patternTransform",
              "constant": 1,
              "content-attribute": "patternTransform",
              "type-original": "SVGAnimatedTransformList",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_transform_list",
              "type": "SVGAnimatedTransformList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "patternContentUnits": {
              "content-attribute-enum-values": "userSpaceOnUse objectBoundingBox",
              "specs": "svg2",
              "name": "patternContentUnits",
              "constant": 1,
              "content-attribute": "patternContentUnits",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "pattern"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "implements": [
          "SVGTests",
          "SVGFitToViewBox",
          "SVGURIReference"
        ],
        "comment": "Corresponds to the <pattern> element."
      },
      "AnimationEvent": {
        "name": "AnimationEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "animationName": {
              "name": "animationName",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "elapsedTime": {
              "name": "elapsedTime",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pseudoElement": {
              "name": "pseudoElement",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AnimationEvent",
              "param": [
                {
                  "name": "type",
                  "type": "CSSOMString"
                },
                {
                  "name": "animationEventInitDict",
                  "type": "AnimationEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events providing information related to animations."
      },
      "SVGComponentTransferFunctionElement": {
        "name": "SVGComponentTransferFunctionElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_FECOMPONENTTRANSFER_TYPE_TABLE": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
              "type": "unsigned short",
              "value": "4"
            },
            "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA": {
              "name": "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
              "type": "unsigned short",
              "value": "5"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "tableValues": {
              "name": "tableValues",
              "type": "SVGAnimatedNumberList",
              "read-only": 1,
              "exposed": "Window"
            },
            "slope": {
              "name": "slope",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "intercept": {
              "name": "intercept",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "amplitude": {
              "name": "amplitude",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "exponent": {
              "name": "exponent",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "offset": {
              "name": "offset",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A base interface used by the component transfer function interfaces."
      },
      "SVGViewElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGViewElement",
        "properties": {
          "property": {
            "viewTarget": {
              "specs": "svg11",
              "name": "viewTarget",
              "type-original": "SVGStringList",
              "content-attribute": "viewTarget",
              "deprecated": 1,
              "interop": 1,
              "content-attribute-value-syntax": "space_separated_urls",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "SVGStringList",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "view"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "implements": [
          "SVGFitToViewBox",
          "SVGZoomAndPan"
        ],
        "comment": "Provides access to the properties of <view> elements, as well as methods to manipulate them."
      },
      "HTMLLinkElement": {
        "name": "HTMLLinkElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a destination URL or an anchor point.\n */"
            },
            "crossOrigin": {
              "name": "crossOrigin",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "rel": {
              "name": "rel",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
            },
            "as": {
              "name": "as",
              "type": "DOMString",
              "exposed": "Window"
            },
            "relList": {
              "name": "relList",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "media": {
              "name": "media",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the media type.\n */"
            },
            "integrity": {
              "name": "integrity",
              "type": "DOMString",
              "exposed": "Window"
            },
            "hreflang": {
              "name": "hreflang",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the language code of the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the MIME type of the object.\n */"
            },
            "sizes": {
              "name": "sizes",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "imageSrcset": {
              "name": "imageSrcset",
              "type": "USVString",
              "exposed": "Window"
            },
            "imageSizes": {
              "name": "imageSizes",
              "type": "DOMString",
              "exposed": "Window"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "DOMString",
              "exposed": "Window"
            },
            "charset": {
              "name": "charset",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
            },
            "rev": {
              "name": "rev",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
            },
            "target": {
              "name": "target",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
            },
            "disabled": {
              "name": "disabled",
              "type": "boolean"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "LinkStyle"
        ],
        "comment": "Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.",
        "element": [
          {
            "name": "link"
          }
        ]
      },
      "PermissionRequestedEvent": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "PermissionRequestedEvent",
        "properties": {
          "property": {
            "permissionRequest": {
              "specs": "none",
              "exposed": "Window",
              "name": "permissionRequest",
              "type": "PermissionRequest",
              "type-original": "PermissionRequest",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "HTMLFontElement": {
        "name": "HTMLFontElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "color": {
              "name": "color",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "face": {
              "name": "face",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the current typeface family.\n */"
            },
            "size": {
              "name": "size",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Implements the document object model (DOM) representation of the font element. The HTML Font Element <font> defines the font size, font face and color of text.",
        "element": [
          {
            "name": "font"
          }
        ]
      },
      "WebGLProgram": {
        "name": "WebGLProgram",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL)."
      },
      "SpeechSynthesisEvent": {
        "name": "SpeechSynthesisEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "utterance": {
              "name": "utterance",
              "type": "SpeechSynthesisUtterance",
              "read-only": 1,
              "exposed": "Window"
            },
            "charIndex": {
              "name": "charIndex",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "elapsedTime": {
              "name": "elapsedTime",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Web Speech API interface contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service."
      },
      "WebGLObject": {
        "name": "WebGLObject",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "CSSConditionRule": {
        "constants": {
          "constant": {}
        },
        "specs": "css-conditional",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSConditionRule",
        "extends": "CSSGroupingRule",
        "properties": {
          "property": {
            "conditionText": {
              "specs": "css-conditional",
              "exposed": "Window",
              "name": "conditionText",
              "type": "DOMString",
              "type-original": "DOMString"
            }
          }
        },
        "comment": "A single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule."
      },
      "HTMLOptionElement": {
        "name": "HTMLOptionElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "label": {
              "name": "label",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n */"
            },
            "defaultSelected": {
              "name": "defaultSelected",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the status of an option.\n */"
            },
            "selected": {
              "name": "selected",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves whether the option in the list box is the default item.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value which is returned to the server when the form control is submitted.\n */"
            },
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the text string specified by the option tag.\n */"
            },
            "index": {
              "name": "index",
              "type": "long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the ordinal position of an option in a list box.\n */"
            }
          },
          "namesakes": {}
        },
        "named-constructor": {
          "name": "Option",
          "signature": [
            {
              "type": "HTMLOptionElement",
              "param": [
                {
                  "name": "text",
                  "type": "DOMString",
                  "optional": 1
                },
                {
                  "name": "value",
                  "type": "DOMString",
                  "optional": 1
                },
                {
                  "name": "defaultSelected",
                  "type": "boolean",
                  "optional": 1
                },
                {
                  "name": "selected",
                  "type": "boolean",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "<option> elements and inherits all classes and methods of the HTMLElement interface.",
        "element": [
          {
            "name": "option"
          }
        ]
      },
      "HTMLMapElement": {
        "name": "HTMLMapElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "areas": {
              "name": "areas",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection of the area objects defined for the given map object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
        "element": [
          {
            "name": "map"
          }
        ]
      },
      "HTMLMenuElement": {
        "name": "HTMLMenuElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "compact": {
              "name": "compact",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "menu"
          }
        ]
      },
      "IDBTransaction": {
        "name": "IDBTransaction",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "objectStore": {
              "name": "objectStore",
              "signature": [
                {
                  "type": "IDBObjectStore",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns an IDBObjectStore in the transaction's scope.\n */"
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Aborts the transaction. All pending requests will fail with a \"AbortError\" DOMException and all changes made to the database will be reverted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "objectStoreNames": {
              "name": "objectStoreNames",
              "type": "DOMStringList",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.\n */"
            },
            "mode": {
              "name": "mode",
              "type": "IDBTransactionMode",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the mode the transaction was created with (\"readonly\" or \"readwrite\"), or \"versionchange\" for an upgrade transaction.\n */"
            },
            "db": {
              "name": "db",
              "type": "IDBDatabase",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the transaction's connection.\n */"
            },
            "error": {
              "name": "error",
              "type": "DOMException",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * If the transaction was aborted, returns the error (a DOMException) providing the reason.\n */",
              "override-type": "DOMException"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window Worker"
            },
            "oncomplete": {
              "name": "oncomplete",
              "type": "EventHandler",
              "event-handler": "complete",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "abort",
              "type": "Event"
            },
            {
              "name": "complete",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "Event"
            }
          ]
        }
      },
      "SVGPointList": {
        "name": "SVGPointList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "initialize": {
              "name": "initialize",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMPoint"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getItem": {
              "name": "getItem",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "insertItemBefore": {
              "name": "insertItemBefore",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMPoint"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceItem": {
              "name": "replaceItem",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMPoint"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeItem": {
              "name": "removeItem",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "appendItem": {
              "name": "appendItem",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMPoint"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "newItem",
                      "type": "DOMPoint"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfItems": {
              "name": "numberOfItems",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "HTMLTemplateElement": {
        "name": "HTMLTemplateElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "content": {
              "name": "content",
              "type": "DocumentFragment",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Enables access to the contents of an HTML <template> element.",
        "element": [
          {
            "name": "template"
          }
        ]
      },
      "VideoPlaybackQuality": {
        "constants": {
          "constant": {}
        },
        "specs": "media-source",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "VideoPlaybackQuality",
        "extends": "Object",
        "properties": {
          "property": {
            "corruptedVideoFrames": {
              "specs": "media-source",
              "exposed": "Window",
              "name": "corruptedVideoFrames",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "totalFrameDelay": {
              "specs": "media-source",
              "exposed": "Window",
              "name": "totalFrameDelay",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "creationTime": {
              "specs": "media-source",
              "exposed": "Window",
              "name": "creationTime",
              "type": "double",
              "type-original": "DOMHighResTimeStamp",
              "read-only": 1
            },
            "totalVideoFrames": {
              "specs": "media-source",
              "exposed": "Window",
              "name": "totalVideoFrames",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "droppedVideoFrames": {
              "specs": "media-source",
              "exposed": "Window",
              "name": "droppedVideoFrames",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            }
          }
        },
        "comment": "Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video."
      },
      "TextTrackCueList": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "TextTrackCueList",
        "properties": {
          "property": {
            "length": {
              "specs": "html5",
              "name": "length",
              "tags": "Captions",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "tags": "Captions",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "TextTrackCue",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "TextTrackCue"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "item",
              "tags": "Captions"
            },
            "getCueById": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "TextTrackCue",
                  "param": [
                    {
                      "name": "id",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "TextTrackCue"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "getCueById",
              "tags": "Captions"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "SVGAnimatedLengthList": {
        "name": "SVGAnimatedLengthList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "SVGLengthList",
              "read-only": 1,
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "SVGLengthList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of type SVGLengthList which can be animated."
      },
      "Window": {
        "implicit-this": 1,
        "specs": "html5",
        "anonymous-methods": {
          "method": [
            {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "Window",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "Window"
                }
              ],
              "specs": "html5",
              "name": ""
            },
            {
              "getter": 1,
              "deprecated": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": [
                    {
                      "type": "Window"
                    },
                    {
                      "type": "Element"
                    },
                    {
                      "type": "HTMLCollection"
                    }
                  ],
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "(Window or Element or HTMLCollection)"
                }
              ],
              "specs": "html5",
              "name": ""
            }
          ]
        },
        "name": "Window",
        "properties": {
          "property": {
            "onmouseleave": {
              "specs": "html5",
              "name": "onmouseleave",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mouseleave"
            },
            "onmsgesturedoubletap": {
              "specs": "html5",
              "name": "onmsgesturedoubletap",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureDoubleTap"
            },
            "devicePixelRatio": {
              "name": "devicePixelRatio",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "oncompassneedscalibration": {
              "name": "oncompassneedscalibration",
              "type": "EventHandler",
              "event-handler": "compassneedscalibration",
              "exposed": "Window"
            },
            "isSecureContext": {
              "specs": "SecureContext",
              "exposed": "Window",
              "name": "isSecureContext",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "onvrdisplaydeactivate": {
              "specs": "html5",
              "name": "onvrdisplaydeactivate",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplaydeactivate"
            },
            "defaultStatus": {
              "specs": "html5",
              "exposed": "Window",
              "name": "defaultStatus",
              "type": "DOMString",
              "store-in-slot": "instance",
              "type-original": "DOMString"
            },
            "onkeydown": {
              "specs": "html5",
              "name": "onkeydown",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "keydown"
            },
            "onkeyup": {
              "specs": "html5",
              "name": "onkeyup",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "keyup"
            },
            "onreset": {
              "specs": "html5",
              "name": "onreset",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "reset"
            },
            "onpagehide": {
              "specs": "html5",
              "name": "onpagehide",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "pagehide"
            },
            "onmsgesturestart": {
              "specs": "html5",
              "name": "onmsgesturestart",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureStart"
            },
            "onvrdisplaypresentchange": {
              "specs": "html5",
              "name": "onvrdisplaypresentchange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplaypresentchange"
            },
            "ondragleave": {
              "specs": "html5",
              "name": "ondragleave",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dragleave"
            },
            "history": {
              "specs": "html5",
              "exposed": "Window",
              "name": "history",
              "type": "History",
              "type-original": "History",
              "read-only": 1
            },
            "pageXOffset": {
              "name": "pageXOffset",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "msContentScript": {
              "specs": "html5",
              "name": "msContentScript",
              "type-original": "ExtensionScriptApis",
              "exposed": "Window",
              "type": "ExtensionScriptApis",
              "read-only": 1
            },
            "onafterprint": {
              "specs": "html5",
              "name": "onafterprint",
              "tags": "Printing",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "afterprint"
            },
            "name": {
              "specs": "html5",
              "exposed": "Window",
              "name": "name",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "onbeforeprint": {
              "specs": "html5",
              "name": "onbeforeprint",
              "tags": "Printing",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "beforeprint"
            },
            "onvrdisplaydisconnect": {
              "specs": "html5",
              "name": "onvrdisplaydisconnect",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplaydisconnect"
            },
            "ondeviceorientation": {
              "name": "ondeviceorientation",
              "type": "EventHandler",
              "event-handler": "deviceorientation",
              "exposed": "Window"
            },
            "onseeked": {
              "specs": "html5",
              "name": "onseeked",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "seeked"
            },
            "onvrdisplayconnect": {
              "specs": "webvr",
              "name": "onvrdisplayconnect",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplayconnect"
            },
            "ononline": {
              "specs": "html5",
              "name": "ononline",
              "tags": "Offline",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "online"
            },
            "ondevicemotion": {
              "name": "ondevicemotion",
              "type": "EventHandler",
              "event-handler": "devicemotion",
              "exposed": "Window"
            },
            "ondurationchange": {
              "specs": "html5",
              "name": "ondurationchange",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "durationchange"
            },
            "frames": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "frames",
              "store-in-slot": "instance",
              "type-original": "Window",
              "replaceable": 1,
              "exposed": "Window",
              "type": "Window",
              "read-only": 1
            },
            "onblur": {
              "specs": "html5",
              "name": "onblur",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "blur"
            },
            "onemptied": {
              "specs": "html5",
              "name": "onemptied",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "emptied"
            },
            "onseeking": {
              "specs": "html5",
              "name": "onseeking",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "seeking"
            },
            "oncanplay": {
              "specs": "html5",
              "name": "oncanplay",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "canplay"
            },
            "onmspointerout": {
              "specs": "html5",
              "name": "onmspointerout",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerOut"
            },
            "onoffline": {
              "specs": "html5",
              "name": "onoffline",
              "tags": "Offline",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "offline"
            },
            "length": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "length",
              "type-original": "unsigned long",
              "replaceable": 1,
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "ondevicelight": {
              "specs": "html5",
              "name": "ondevicelight",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "devicelight"
            },
            "onmspointerover": {
              "specs": "html5",
              "name": "onmspointerover",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerOver"
            },
            "onstorage": {
              "specs": "html5",
              "name": "onstorage",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "storage"
            },
            "onloadstart": {
              "specs": "html5",
              "name": "onloadstart",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "loadstart"
            },
            "onmspointerdown": {
              "specs": "html5",
              "name": "onmspointerdown",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerDown"
            },
            "ondragenter": {
              "specs": "html5",
              "name": "ondragenter",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dragenter"
            },
            "onsubmit": {
              "specs": "html5",
              "name": "onsubmit",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "submit"
            },
            "screenLeft": {
              "name": "screenLeft",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "scrollX": {
              "name": "scrollX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "onchange": {
              "specs": "html5",
              "name": "onchange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "change"
            },
            "onmsgesturehold": {
              "specs": "html5",
              "name": "onmsgesturehold",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureHold"
            },
            "onmspointercancel": {
              "specs": "html5",
              "name": "onmspointercancel",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerCancel"
            },
            "parent": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "parent",
              "type-original": "Window",
              "replaceable": 1,
              "exposed": "Window",
              "type": "Window",
              "read-only": 1
            },
            "onvrdisplayactivate": {
              "specs": "html5",
              "name": "onvrdisplayactivate",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplayactivate"
            },
            "oncanplaythrough": {
              "specs": "html5",
              "name": "oncanplaythrough",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "canplaythrough"
            },
            "outerHeight": {
              "name": "outerHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "locationbar": {
              "specs": "html5",
              "name": "locationbar",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "onsuspend": {
              "specs": "html5",
              "name": "onsuspend",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "suspend"
            },
            "status": {
              "specs": "html5",
              "exposed": "Window",
              "name": "status",
              "type": "DOMString",
              "store-in-slot": "instance",
              "type-original": "DOMString"
            },
            "onmouseenter": {
              "specs": "html5",
              "name": "onmouseenter",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mouseenter"
            },
            "crypto": {
              "specs": "html5",
              "exposed": "Window",
              "name": "crypto",
              "type": "Crypto",
              "type-original": "Crypto",
              "read-only": 1
            },
            "doNotTrack": {
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "doNotTrack",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "caches": {
              "specs": "service-workers",
              "same-object": 1,
              "name": "caches",
              "type-original": "CacheStorage",
              "exposed": "Window",
              "type": "CacheStorage",
              "secure-context": 1,
              "read-only": 1
            },
            "onvrdisplaypointerrestricted": {
              "specs": "html5",
              "name": "onvrdisplaypointerrestricted",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplaypointerrestricted"
            },
            "closed": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "closed",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "onmsgesturetap": {
              "specs": "html5",
              "name": "onmsgesturetap",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureTap"
            },
            "onmouseout": {
              "specs": "html5",
              "name": "onmouseout",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mouseout"
            },
            "screenTop": {
              "name": "screenTop",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onunload": {
              "specs": "html5",
              "name": "onunload",
              "tags": "NetworkAccess",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "unload"
            },
            "screenY": {
              "name": "screenY",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onmousewheel": {
              "specs": "html5",
              "name": "onmousewheel",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mousewheel"
            },
            "onvolumechange": {
              "specs": "html5",
              "name": "onvolumechange",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "volumechange"
            },
            "personalbar": {
              "specs": "html5",
              "name": "personalbar",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "ondragend": {
              "specs": "html5",
              "name": "ondragend",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dragend"
            },
            "ondragover": {
              "specs": "html5",
              "name": "ondragover",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dragover"
            },
            "clientInformation": {
              "specs": "html5",
              "exposed": "Window",
              "name": "clientInformation",
              "type": "Navigator",
              "type-original": "Navigator",
              "read-only": 1
            },
            "ondragstart": {
              "specs": "html5",
              "name": "ondragstart",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dragstart"
            },
            "onmouseup": {
              "specs": "html5",
              "name": "onmouseup",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mouseup"
            },
            "onmsgesturechange": {
              "specs": "html5",
              "name": "onmsgesturechange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureChange"
            },
            "ondrag": {
              "specs": "html5",
              "name": "ondrag",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "drag"
            },
            "screenX": {
              "name": "screenX",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onvrdisplayblur": {
              "specs": "html5",
              "name": "onvrdisplayblur",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplayblur"
            },
            "onmouseover": {
              "specs": "html5",
              "name": "onmouseover",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mouseover"
            },
            "toolbar": {
              "specs": "html5",
              "name": "toolbar",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "onpause": {
              "specs": "html5",
              "name": "onpause",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "pause"
            },
            "top": {
              "property-descriptor-not-configurable": 1,
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "top",
              "type-original": "Window",
              "exposed": "Window",
              "type": "Window",
              "read-only": 1
            },
            "onmousedown": {
              "specs": "html5",
              "name": "onmousedown",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mousedown"
            },
            "opener": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "opener",
              "type-original": "Window",
              "replaceable": 1,
              "exposed": "Window",
              "type": "Window",
              "read-only": 0,
              "override-type": "any"
            },
            "innerHeight": {
              "name": "innerHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onclick": {
              "specs": "html5",
              "name": "onclick",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "click"
            },
            "onwaiting": {
              "specs": "html5",
              "name": "onwaiting",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "waiting"
            },
            "onpageshow": {
              "specs": "html5",
              "name": "onpageshow",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "pageshow"
            },
            "outerWidth": {
              "name": "outerWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onstalled": {
              "specs": "html5",
              "name": "onstalled",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "stalled"
            },
            "onmousemove": {
              "specs": "html5",
              "name": "onmousemove",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "mousemove"
            },
            "external": {
              "name": "external",
              "type": "External",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "innerWidth": {
              "name": "innerWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onmsinertiastart": {
              "specs": "html5",
              "name": "onmsinertiastart",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSInertiaStart"
            },
            "statusbar": {
              "specs": "html5",
              "name": "statusbar",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "screen": {
              "name": "screen",
              "type": "Screen",
              "read-only": 1,
              "exposed": "Window"
            },
            "onbeforeunload": {
              "specs": "html5",
              "name": "onbeforeunload",
              "tags": "NetworkAccess",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "beforeunload"
            },
            "onmspointerenter": {
              "specs": "html5",
              "name": "onmspointerenter",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerEnter"
            },
            "onratechange": {
              "specs": "html5",
              "name": "onratechange",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "ratechange"
            },
            "onpopstate": {
              "specs": "html5",
              "name": "onpopstate",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "popstate"
            },
            "onmspointerleave": {
              "specs": "html5",
              "name": "onmspointerleave",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerLeave"
            },
            "document": {
              "property-descriptor-not-configurable": 1,
              "pure": 1,
              "specs": "html5",
              "name": "document",
              "store-in-slot": "instance",
              "type-original": "Document",
              "unforgeable": 1,
              "exposed": "Window",
              "type": "Document",
              "read-only": 1
            },
            "self": {
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "self",
              "constant": 1,
              "store-in-slot": "instance",
              "type-original": "Window",
              "replaceable": 1,
              "exposed": "Window",
              "type": "Window",
              "read-only": 1,
              "override-type": "Window & typeof globalThis"
            },
            "onprogress": {
              "specs": "html5",
              "name": "onprogress",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "progress"
            },
            "oninvalid": {
              "specs": "html5",
              "name": "oninvalid",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "invalid"
            },
            "ondblclick": {
              "specs": "html5",
              "name": "ondblclick",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "dblclick"
            },
            "pageYOffset": {
              "name": "pageYOffset",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "oncontextmenu": {
              "specs": "html5",
              "name": "oncontextmenu",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "contextmenu"
            },
            "onloadedmetadata": {
              "specs": "html5",
              "name": "onloadedmetadata",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "loadedmetadata"
            },
            "onmspointermove": {
              "specs": "html5",
              "name": "onmspointermove",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerMove"
            },
            "scrollY": {
              "name": "scrollY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "onerror": {
              "specs": "html5",
              "name": "onerror",
              "tags": "Exceptions",
              "type-original": "ErrorEventHandler",
              "exposed": "Window",
              "type": "ErrorEventHandler",
              "event-handler": "error"
            },
            "onplay": {
              "specs": "html5",
              "name": "onplay",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "play"
            },
            "onplaying": {
              "specs": "html5",
              "name": "onplaying",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "playing"
            },
            "menubar": {
              "specs": "html5",
              "name": "menubar",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "location": {
              "property-descriptor-not-configurable": 1,
              "put-forwards": "href",
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "location",
              "type-original": "Location",
              "unforgeable": 1,
              "exposed": "Window",
              "type": "Location",
              "read-only": 0
            },
            "onmsgestureend": {
              "specs": "html5",
              "name": "onmsgestureend",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSGestureEnd"
            },
            "event": {
              "name": "event",
              "type": "any",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "Event | undefined",
              "deprecated": 1
            },
            "onabort": {
              "specs": "html5",
              "name": "onabort",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "abort"
            },
            "onorientationchange": {
              "name": "onorientationchange",
              "type": "EventHandler",
              "event-handler": "orientationchange",
              "exposed": "Window",
              "deprecated": 1
            },
            "onreadystatechange": {
              "specs": "html5",
              "name": "onreadystatechange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "readystatechange"
            },
            "onkeypress": {
              "specs": "html5",
              "name": "onkeypress",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "keypress"
            },
            "frameElement": {
              "specs": "html5",
              "name": "frameElement",
              "tags": "TreeNavigation",
              "type-original": "Element",
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            },
            "onvrdisplaypointerunrestricted": {
              "specs": "html5",
              "name": "onvrdisplaypointerunrestricted",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplaypointerunrestricted"
            },
            "onmspointerup": {
              "specs": "html5",
              "name": "onmspointerup",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSPointerUp"
            },
            "onloadeddata": {
              "specs": "html5",
              "name": "onloadeddata",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "loadeddata"
            },
            "window": {
              "property-descriptor-not-configurable": 1,
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "name": "window",
              "constant": 1,
              "store-in-slot": "instance",
              "type-original": "Window",
              "unforgeable": 1,
              "exposed": "Window",
              "type": "Window",
              "read-only": 1,
              "override-type": "Window & typeof globalThis"
            },
            "orientation": {
              "name": "orientation",
              "type": "short",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "override-type": "string | number"
            },
            "offscreenBuffering": {
              "specs": "html5",
              "exposed": "Window",
              "name": "offscreenBuffering",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "boolean"
                }
              ],
              "type-original": "(DOMString or boolean)"
            },
            "onfocus": {
              "specs": "html5",
              "name": "onfocus",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "focus"
            },
            "onmessage": {
              "specs": "html5",
              "name": "onmessage",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "message"
            },
            "ontimeupdate": {
              "specs": "html5",
              "name": "ontimeupdate",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "timeupdate"
            },
            "onresize": {
              "specs": "html5",
              "name": "onresize",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "resize"
            },
            "navigator": {
              "specs": "html5",
              "exposed": "Window",
              "name": "navigator",
              "type": "Navigator",
              "type-original": "Navigator",
              "read-only": 1
            },
            "styleMedia": {
              "specs": "none",
              "exposed": "Window",
              "name": "styleMedia",
              "type": "StyleMedia",
              "type-original": "StyleMedia",
              "read-only": 1
            },
            "onselect": {
              "specs": "html5",
              "name": "onselect",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "select"
            },
            "ondrop": {
              "specs": "html5",
              "name": "ondrop",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "drop"
            },
            "scrollbars": {
              "specs": "html5",
              "name": "scrollbars",
              "type-original": "BarProp",
              "replaceable": 1,
              "exposed": "Window",
              "type": "BarProp",
              "read-only": 1
            },
            "onended": {
              "specs": "html5",
              "name": "onended",
              "tags": "Media",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "ended"
            },
            "applicationCache": {
              "specs": "html5",
              "name": "applicationCache",
              "tags": "Offline",
              "type-original": "ApplicationCache",
              "exposed": "Window",
              "type": "ApplicationCache",
              "read-only": 1
            },
            "onhashchange": {
              "specs": "html5",
              "name": "onhashchange",
              "tags": "Offline",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "hashchange"
            },
            "onvrdisplayfocus": {
              "specs": "html5",
              "name": "onvrdisplayfocus",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "vrdisplayfocus"
            },
            "onscroll": {
              "specs": "html5",
              "name": "onscroll",
              "tags": "CSSOM",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "scroll"
            },
            "speechSynthesis": {
              "name": "speechSynthesis",
              "type": "SpeechSynthesis",
              "read-only": 1,
              "exposed": "Window"
            },
            "onload": {
              "specs": "html5",
              "name": "onload",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "load"
            },
            "oninput": {
              "specs": "html5",
              "name": "oninput",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "input"
            },
            "performance": {
              "pure": 1,
              "specs": "html5",
              "name": "performance",
              "type-original": "Performance",
              "replaceable": 1,
              "exposed": "Window",
              "type": "Performance",
              "read-only": 1
            },
            "ondeviceorientationabsolute": {
              "name": "ondeviceorientationabsolute",
              "type": "EventHandler",
              "event-handler": "deviceorientationabsolute",
              "exposed": "Window"
            },
            "customElements": {
              "name": "customElements",
              "type": "CustomElementRegistry"
            }
          },
          "namesakes": {}
        },
        "constants": {
          "constant": {}
        },
        "primary-global": "Window",
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "alternate-target": "Document",
              "name": "load",
              "follows": "DOMContentLoaded readystatechange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "svg11",
              "name": "SVGUnload",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "unload",
              "follows": "beforeunload",
              "type": "Event"
            },
            {
              "precedes": "unload",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "beforeunload",
              "type": "BeforeUnloadEvent",
              "cancelable": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "hashchange",
              "type": "HashChangeEvent"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "popstate",
              "type": "PopStateEvent"
            },
            {
              "dispatch": "sync",
              "specs": "svg11",
              "name": "SVGResize",
              "type": "Event"
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "resize",
              "type": "UIEvent"
            },
            {
              "precedes": "afterprint",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "beforeprint",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "afterprint",
              "follows": "beforeprint",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "focus",
              "type": "FocusEvent"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "blur",
              "type": "FocusEvent"
            },
            {
              "dispatch": "sync",
              "specs": "Storage",
              "name": "storage",
              "type": "StorageEvent"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "error",
              "type": "ErrorEvent"
            },
            {
              "dispatch": "async",
              "specs": "PostMsg",
              "name": "message",
              "type": "MessageEvent"
            },
            {
              "dispatch": "async",
              "specs": "Orient",
              "name": "orientationchange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "Orient",
              "name": "deviceorientation",
              "type": "DeviceOrientationEvent",
              "tags": "NotOnWin7"
            },
            {
              "dispatch": "sync",
              "specs": "Orient",
              "name": "devicemotion",
              "type": "DeviceMotionEvent",
              "tags": "NotOnWin7"
            },
            {
              "dispatch": "sync",
              "specs": "Light",
              "name": "devicelight",
              "type": "DeviceLightEvent",
              "tags": "NotOnWin7"
            },
            {
              "dispatch": "async",
              "specs": "Orient",
              "name": "compassneedscalibration",
              "type": "Event",
              "tags": "NotOnWin7"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "pageshow",
              "type": "PageTransitionEvent"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "pagehide",
              "type": "PageTransitionEvent"
            },
            {
              "dispatch": "sync",
              "specs": "GamePad",
              "name": "gamepadconnected",
              "type": "GamepadEvent"
            },
            {
              "dispatch": "sync",
              "specs": "GamePad",
              "name": "gamepaddisconnected",
              "type": "GamepadEvent"
            },
            {
              "dispatch": "sync",
              "specs": "none",
              "name": "navigatingfocus",
              "type": "FocusNavigationEvent"
            },
            {
              "dispatch": "sync",
              "specs": "WebVR",
              "name": "onvrdisplayconnected",
              "type": "VRDisplayEvent "
            },
            {
              "dispatch": "sync",
              "specs": "WebVR",
              "name": "onvrdisplaydisconnected",
              "type": "VRDisplayEvent "
            },
            {
              "dispatch": "sync",
              "specs": "WebVR",
              "name": "onvrdisplaypresentchange",
              "type": "VRDisplayEvent "
            },
            {
              "name": "deviceorientationabsolute",
              "type": "DeviceOrientationEvent"
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "scroll": {
              "name": "scroll",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "captureEvents": {
              "name": "captureEvents",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "scrollTo": {
              "name": "scrollTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "focus": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "exposed": "Window",
              "name": "focus"
            },
            "releaseEvents": {
              "name": "releaseEvents",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "resizeTo": {
              "name": "resizeTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "long"
                    },
                    {
                      "name": "y",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "print": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "print",
              "tags": "Printing"
            },
            "scrollBy": {
              "name": "scrollBy",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "ScrollToOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "close": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "exposed": "Window",
              "name": "close"
            },
            "confirm": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "message",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "confirm"
            },
            "matchMedia": {
              "name": "matchMedia",
              "signature": [
                {
                  "type": "MediaQueryList",
                  "param": [
                    {
                      "name": "query",
                      "type": "CSSOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "webkitConvertPointFromNodeToPage": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "WebKitPoint",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node",
                      "type-original": "Node"
                    },
                    {
                      "name": "pt",
                      "type": "WebKitPoint",
                      "type-original": "WebKitPoint"
                    }
                  ],
                  "type-original": "WebKitPoint"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "webkitConvertPointFromNodeToPage",
              "tags": "CSSOM"
            },
            "moveTo": {
              "name": "moveTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "long"
                    },
                    {
                      "name": "y",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "webkitRequestAnimationFrame": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "callback",
                      "type": "FrameRequestCallback",
                      "type-original": "FrameRequestCallback"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "webkitRequestAnimationFrame"
            },
            "blur": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "do-not-check-domain-security": 1,
              "exposed": "Window",
              "name": "blur"
            },
            "moveBy": {
              "name": "moveBy",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "long"
                    },
                    {
                      "name": "y",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "alert": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "alert",
              "override-signatures": [
                "alert(message?: any): void"
              ]
            },
            "resizeBy": {
              "name": "resizeBy",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "long"
                    },
                    {
                      "name": "y",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "stop": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "stop"
            },
            "getMatchedCSSRules": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "CSSRuleList",
                  "param": [
                    {
                      "name": "elt",
                      "type": "Element",
                      "type-original": "Element"
                    },
                    {
                      "nullable": 1,
                      "name": "pseudoElt",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "CSSRuleList"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "getMatchedCSSRules"
            },
            "prompt": {
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 0,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "message",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "default",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString?"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "prompt"
            },
            "msWriteProfilerMark": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "profilerMarkName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "msWriteProfilerMark"
            },
            "open": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "Window",
                  "param": [
                    {
                      "name": "url",
                      "default": "\"about:blank\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "target",
                      "default": "\"_blank\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "features",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "replace",
                      "default": "false",
                      "type": "boolean",
                      "optional": 1,
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "Window"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "open",
              "override-signatures": [
                "open(url?: string, target?: string, features?: string, replace?: boolean): Window | null"
              ]
            },
            "webkitConvertPointFromPageToNode": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "WebKitPoint",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node",
                      "type-original": "Node"
                    },
                    {
                      "name": "pt",
                      "type": "WebKitPoint",
                      "type-original": "WebKitPoint"
                    }
                  ],
                  "type-original": "WebKitPoint"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "webkitConvertPointFromPageToNode",
              "tags": "CSSOM"
            },
            "departFocus": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "navigationReason",
                      "type": "NavigationReason",
                      "type-original": "NavigationReason"
                    },
                    {
                      "name": "origin",
                      "type": "FocusNavigationOrigin",
                      "type-original": "FocusNavigationOrigin"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "departFocus"
            },
            "postMessage": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "name": "targetOrigin",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "subtype": {
                        "type": "object"
                      },
                      "name": "transfer",
                      "type": "sequence",
                      "optional": 1,
                      "type-original": "sequence<object>"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "webmessaging",
              "do-not-check-domain-security": 1,
              "exposed": "Window",
              "name": "postMessage",
              "override-signatures": [
                "postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void"
              ]
            },
            "webkitCancelAnimationFrame": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "webkitCancelAnimationFrame"
            },
            "getSelection": {
              "name": "getSelection",
              "signature": [
                {
                  "type": "Selection",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getComputedStyle": {
              "specs": "cssom",
              "signature": [
                {
                  "new-object": 1,
                  "param-min-required": 1,
                  "type": "CSSStyleDeclaration",
                  "param": [
                    {
                      "name": "elt",
                      "type": "Element",
                      "type-original": "Element"
                    },
                    {
                      "nullable": 1,
                      "name": "pseudoElt",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "CSSStyleDeclaration"
                }
              ],
              "name": "getComputedStyle",
              "exposed": "Window"
            }
          }
        },
        "extends": "EventTarget",
        "implements": [
          "WindowTimers",
          "WindowSessionStorage",
          "WindowLocalStorage",
          "WindowConsole",
          "GlobalEventHandlers",
          "IDBEnvironment",
          "WindowBase64",
          "AnimationFrameProvider",
          "WindowOrWorkerGlobalScope",
          "WindowSessionStorage",
          "WindowLocalStorage",
          "WindowEventHandlers"
        ],
        "comment": "A window containing a DOM document; the document property points to the DOM document loaded in that window.",
        "override-index-signatures": [
          "[index: number]: Window"
        ]
      },
      "SVGFETurbulenceElement": {
        "name": "SVGFETurbulenceElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_TURBULENCE_TYPE_UNKNOWN": {
              "name": "SVG_TURBULENCE_TYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_TURBULENCE_TYPE_FRACTALNOISE": {
              "name": "SVG_TURBULENCE_TYPE_FRACTALNOISE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_TURBULENCE_TYPE_TURBULENCE": {
              "name": "SVG_TURBULENCE_TYPE_TURBULENCE",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_STITCHTYPE_UNKNOWN": {
              "name": "SVG_STITCHTYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_STITCHTYPE_STITCH": {
              "name": "SVG_STITCHTYPE_STITCH",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_STITCHTYPE_NOSTITCH": {
              "name": "SVG_STITCHTYPE_NOSTITCH",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseFrequencyX": {
              "name": "baseFrequencyX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "baseFrequencyY": {
              "name": "baseFrequencyY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "numOctaves": {
              "name": "numOctaves",
              "type": "SVGAnimatedInteger",
              "read-only": 1,
              "exposed": "Window"
            },
            "seed": {
              "name": "seed",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "stitchTiles": {
              "name": "stitchTiles",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feTurbulence> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feTurbulence"
          }
        ]
      },
      "SVGAnimatedPreserveAspectRatio": {
        "constants": {
          "constant": {}
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "SVGAnimatedPreserveAspectRatio",
        "extends": "Object",
        "properties": {
          "property": {
            "animVal": {
              "specs": "svg2",
              "same-object": 1,
              "name": "animVal",
              "constant": 1,
              "type-original": "SVGPreserveAspectRatio",
              "exposed": "Window",
              "type": "SVGPreserveAspectRatio",
              "read-only": 1
            },
            "baseVal": {
              "specs": "svg2",
              "same-object": 1,
              "name": "baseVal",
              "constant": 1,
              "type-original": "SVGPreserveAspectRatio",
              "exposed": "Window",
              "type": "SVGPreserveAspectRatio",
              "read-only": 1
            }
          }
        },
        "comment": "Used for attributes of type SVGPreserveAspectRatio which can be animated."
      },
      "PushSubscriptionChangeEvent": {
        "name": "PushSubscriptionChangeEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "newSubscription": {
              "name": "newSubscription",
              "type": "PushSubscription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "oldSubscription": {
              "name": "oldSubscription",
              "type": "PushSubscription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PushSubscriptionChangeEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PushSubscriptionChangeInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": []
      },
      "Console": {
        "constants": {
          "constant": {}
        },
        "specs": "whatwg-console",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {
            "profile": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "reportName",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "profile",
              "exposed": "Window Worker Worklet"
            },
            "groupEnd": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "groupEnd"
            },
            "assert": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "condition",
                      "default": "false",
                      "type": "boolean",
                      "optional": 1,
                      "type-original": "boolean"
                    },
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "assert"
            },
            "timeEnd": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "default": "\"default\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "timeEnd"
            },
            "time": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "default": "\"default\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "time"
            },
            "table": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "variadic": 1,
                      "name": "tabularData",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "table"
            },
            "clear": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "clear"
            },
            "timeStamp": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "timeStamp",
              "exposed": "Window Worker Worklet"
            },
            "timelineEnd": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "timelineEnd",
              "exposed": "Window Worker Worklet"
            },
            "timeline": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "timeline",
              "exposed": "Window Worker Worklet"
            },
            "dir": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "item",
                      "type": "any",
                      "optional": 1,
                      "type-original": "any"
                    },
                    {
                      "variadic": 1,
                      "name": "options",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "dir",
              "override-signatures": [
                "dir(value?: any, ...optionalParams: any[]): void"
              ]
            },
            "trace": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "trace",
              "override-signatures": [
                "trace(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "group": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "groupTitle",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "group",
              "override-signatures": [
                "group(groupTitle?: string, ...optionalParams: any[]): void"
              ]
            },
            "markTimeline": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "markTimeline",
              "exposed": "Window Worker Worklet"
            },
            "warn": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "warn",
              "override-signatures": [
                "warn(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "dirxml": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "dirxml",
              "override-signatures": [
                "dirxml(value: any): void"
              ]
            },
            "debug": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "debug",
              "override-signatures": [
                "debug(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "error": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "error",
              "override-signatures": [
                "error(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "log": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "log",
              "override-signatures": [
                "log(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "profileEnd": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "profileEnd",
              "exposed": "Window Worker Worklet",
              "override-signatures": [
                "profileEnd(reportName?: string): void"
              ]
            },
            "info": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "info",
              "override-signatures": [
                "info(message?: any, ...optionalParams: any[]): void"
              ]
            },
            "count": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "label",
                      "default": "\"default\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "count"
            },
            "exception": {
              "extension": 1,
              "interop": 1,
              "specs": "none-console",
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "variadic": 1,
                      "name": "optionalParams",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "exception",
              "exposed": "Window Worker Worklet"
            },
            "groupCollapsed": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "groupTitle",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-console",
              "exposed": "Window Worker Worklet",
              "name": "groupCollapsed",
              "override-signatures": [
                "groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void"
              ]
            }
          }
        },
        "exposed": "Window Worker Worklet",
        "name": "Console",
        "extends": "Object",
        "properties": {
          "property": {
            "memory": {
              "extension": 1,
              "specs": "none-console",
              "name": "memory",
              "exposed": "Window Worker Worklet",
              "type": "object",
              "type-original": "object"
            }
          }
        },
        "comment": "Provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided."
      },
      "SVGFESpotLightElement": {
        "name": "SVGFESpotLightElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "z": {
              "name": "z",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointsAtX": {
              "name": "pointsAtX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointsAtY": {
              "name": "pointsAtY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointsAtZ": {
              "name": "pointsAtZ",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "specularExponent": {
              "name": "specularExponent",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "limitingConeAngle": {
              "name": "limitingConeAngle",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feSpotLight> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feSpotLight"
          }
        ]
      },
      "HTMLImageElement": {
        "name": "HTMLImageElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "decode": {
              "name": "decode",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "alt": {
              "name": "alt",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
            },
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
            },
            "srcset": {
              "name": "srcset",
              "type": "USVString",
              "exposed": "Window"
            },
            "sizes": {
              "name": "sizes",
              "type": "DOMString",
              "exposed": "Window"
            },
            "crossOrigin": {
              "name": "crossOrigin",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "useMap": {
              "name": "useMap",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
            },
            "isMap": {
              "name": "isMap",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves whether the image is a server-side image map.\n */"
            },
            "width": {
              "name": "width",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "naturalWidth": {
              "name": "naturalWidth",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * The original width of the image resource before sizing.\n */"
            },
            "naturalHeight": {
              "name": "naturalHeight",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * The original height of the image resource before sizing.\n */"
            },
            "complete": {
              "name": "complete",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves whether the object is fully loaded.\n */"
            },
            "currentSrc": {
              "name": "currentSrc",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "DOMString",
              "exposed": "Window"
            },
            "decoding": {
              "name": "decoding",
              "type": "DOMString",
              "exposed": "Window",
              "override-type": "\"async\" | \"sync\" | \"auto\""
            },
            "x": {
              "name": "x",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "lowsrc": {
              "name": "lowsrc",
              "type": "USVString",
              "exposed": "Window",
              "deprecated": 1
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "hspace": {
              "name": "hspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the border to draw around the object.\n */"
            },
            "vspace": {
              "name": "vspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the vertical margin for the object.\n */"
            },
            "longDesc": {
              "name": "longDesc",
              "type": "USVString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\n */"
            },
            "border": {
              "name": "border",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Specifies the properties of a border drawn around an object.\n */"
            }
          },
          "namesakes": {}
        },
        "named-constructor": {
          "name": "Image",
          "signature": [
            {
              "type": "HTMLImageElement",
              "param": [
                {
                  "name": "width",
                  "type": "unsigned long",
                  "optional": 1
                },
                {
                  "name": "height",
                  "type": "unsigned long",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods for manipulating <img> elements.",
        "element": [
          {
            "name": "img"
          }
        ]
      },
      "CanvasGradient": {
        "name": "CanvasGradient",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addColorStop": {
              "name": "addColorStop",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "offset",
                      "type": "double"
                    },
                    {
                      "name": "color",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\n * \n * Throws an \"IndexSizeError\" DOMException if the offset is out of range. Throws a \"SyntaxError\" DOMException if the color cannot be parsed.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient()."
      },
      "ANGLE_instanced_arrays": {
        "name": "ANGLE_instanced_arrays",
        "extends": "Object",
        "constants": {
          "constant": {
            "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE": {
              "name": "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
              "type": "GLenum",
              "value": "0x88FE"
            }
          }
        },
        "methods": {
          "method": {
            "drawArraysInstancedANGLE": {
              "name": "drawArraysInstancedANGLE",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "first",
                      "type": "GLint"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "primcount",
                      "type": "GLsizei"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "drawElementsInstancedANGLE": {
              "name": "drawElementsInstancedANGLE",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "primcount",
                      "type": "GLsizei"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "vertexAttribDivisorANGLE": {
              "name": "vertexAttribDivisorANGLE",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "divisor",
                      "type": "GLuint"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.",
        "override-exposed": "Window Worker"
      },
      "MediaStream": {
        "name": "MediaStream",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getAudioTracks": {
              "name": "getAudioTracks",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "MediaStreamTrack"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getVideoTracks": {
              "name": "getVideoTracks",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "MediaStreamTrack"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getTracks": {
              "name": "getTracks",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "MediaStreamTrack"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getTrackById": {
              "name": "getTrackById",
              "signature": [
                {
                  "type": "MediaStreamTrack",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "trackId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "addTrack": {
              "name": "addTrack",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "track",
                      "type": "MediaStreamTrack"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeTrack": {
              "name": "removeTrack",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "track",
                      "type": "MediaStreamTrack"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "clone": {
              "name": "clone",
              "signature": [
                {
                  "type": "MediaStream",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "id": {
              "name": "id",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "active": {
              "name": "active",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "onaddtrack": {
              "name": "onaddtrack",
              "type": "EventHandler",
              "event-handler": "addtrack",
              "exposed": "Window"
            },
            "onremovetrack": {
              "name": "onremovetrack",
              "type": "EventHandler",
              "event-handler": "removetrack",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaStream",
              "param": []
            },
            {
              "type": "MediaStream",
              "param": [
                {
                  "name": "stream",
                  "type": "MediaStream"
                }
              ]
            },
            {
              "type": "MediaStream",
              "param": [
                {
                  "name": "tracks",
                  "type": "sequence",
                  "subtype": {
                    "type": "MediaStreamTrack"
                  }
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.",
        "events": {
          "event": [
            {
              "name": "addtrack",
              "type": "MediaStreamTrackEvent"
            },
            {
              "name": "removetrack",
              "type": "MediaStreamTrackEvent"
            }
          ]
        }
      },
      "Cache": {
        "name": "Cache",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "match": {
              "name": "match",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo"
                    },
                    {
                      "name": "options",
                      "type": "CacheQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>"
              ]
            },
            "matchAll": {
              "name": "matchAll",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "FrozenArray",
                    "subtype": {
                      "type": "Response"
                    }
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo",
                      "optional": 1
                    },
                    {
                      "name": "options",
                      "type": "CacheQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "addAll": {
              "name": "addAll",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "requests",
                      "type": "sequence",
                      "subtype": {
                        "type": "RequestInfo"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "put": {
              "name": "put",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo"
                    },
                    {
                      "name": "response",
                      "type": "Response"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo"
                    },
                    {
                      "name": "options",
                      "type": "CacheQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "keys": {
              "name": "keys",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "FrozenArray",
                    "subtype": {
                      "type": "Request"
                    }
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo",
                      "optional": 1
                    },
                    {
                      "name": "options",
                      "type": "CacheQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec."
      },
      "Document": {
        "name": "Document",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getElementsByTagName": {
              "name": "getElementsByTagName",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection of objects based on the specified element name.\n * @param name Specifies the name of an element.\n */"
            },
            "getElementsByTagNameNS": {
              "name": "getElementsByTagNameNS",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * If namespace and localName are \"*\" returns a HTMLCollection of all descendant elements.\n * \n * If only namespace is \"*\" returns a HTMLCollection of all descendant elements whose local name is localName.\n * \n * If only localName is \"*\" returns a HTMLCollection of all descendant elements whose namespace is namespace.\n * \n * Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.\n */",
              "override-signatures": [
                "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>",
                "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>",
                "getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>"
              ]
            },
            "getElementsByClassName": {
              "name": "getElementsByClassName",
              "signature": [
                {
                  "type": "HTMLCollection",
                  "param": [
                    {
                      "name": "classNames",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.\n */",
              "override-signatures": [
                "getElementsByClassName(classNames: string): HTMLCollectionOf<Element>"
              ]
            },
            "createElement": {
              "name": "createElement",
              "signature": [
                {
                  "type": "Element",
                  "param": [
                    {
                      "name": "localName",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": [
                        {
                          "type": "DOMString"
                        },
                        {
                          "type": "ElementCreationOptions"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates an instance of the element for the specified tag.\n * @param tagName The name of an element.\n */"
            },
            "createElementNS": {
              "name": "createElementNS",
              "signature": [
                {
                  "type": "Element",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": [
                        {
                          "type": "DOMString"
                        },
                        {
                          "type": "ElementCreationOptions"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns an element with namespace namespace. Its namespace prefix will be everything before \":\" (U+003E) in qualifiedName or null. Its local name will be everything after \":\" (U+003E) in qualifiedName or qualifiedName.\n * \n * If localName does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown.\n * \n * If one of the following conditions is true a \"NamespaceError\" DOMException will be thrown:\n * \n * localName does not match the QName production.\n * Namespace prefix is not null and namespace is the empty string.\n * Namespace prefix is \"xml\" and namespace is not the XML namespace.\n * qualifiedName or namespace prefix is \"xmlns\" and namespace is not the XMLNS namespace.\n * namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is \"xmlns\".\n * \n * When supplied, options's is can be used to create a customized built-in element.\n */",
              "additional-signatures": [
                "createElementNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", qualifiedName: string): HTMLElement",
                "createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: K): SVGElementTagNameMap[K]",
                "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement",
                "createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element"
              ]
            },
            "createDocumentFragment": {
              "name": "createDocumentFragment",
              "signature": [
                {
                  "type": "DocumentFragment",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a new document.\n */"
            },
            "createTextNode": {
              "name": "createTextNode",
              "signature": [
                {
                  "type": "Text",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a text string from the specified value.\n * @param data String that specifies the nodeValue property of the text node.\n */"
            },
            "createCDATASection": {
              "name": "createCDATASection",
              "signature": [
                {
                  "type": "CDATASection",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a CDATASection node whose data is data.\n */"
            },
            "createComment": {
              "name": "createComment",
              "signature": [
                {
                  "type": "Comment",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a comment object with the specified data.\n * @param data Sets the comment object's data.\n */"
            },
            "createProcessingInstruction": {
              "name": "createProcessingInstruction",
              "signature": [
                {
                  "type": "ProcessingInstruction",
                  "param": [
                    {
                      "name": "target",
                      "type": "DOMString"
                    },
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an \"InvalidCharacterError\" DOMException will be thrown. If data contains \"?>\" an \"InvalidCharacterError\" DOMException will be thrown.\n */"
            },
            "importNode": {
              "name": "importNode",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "deep",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a copy of node. If deep is true, the copy also includes the node's descendants.\n * \n * If node is a document or a shadow root, throws a \"NotSupportedError\" DOMException.\n */",
              "override-signatures": [
                "importNode<T extends Node>(importedNode: T, deep: boolean): T"
              ]
            },
            "adoptNode": {
              "name": "adoptNode",
              "signature": [
                {
                  "type": "Node",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Moves node from another document and returns it.\n * \n * If node is a document, throws a \"NotSupportedError\" DOMException or, if node is a shadow root, throws a \"HierarchyRequestError\" DOMException.\n */",
              "override-signatures": [
                "adoptNode<T extends Node>(source: T): T"
              ]
            },
            "createAttribute": {
              "name": "createAttribute",
              "signature": [
                {
                  "type": "Attr",
                  "param": [
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates an attribute object with a specified name.\n * @param name String that sets the attribute object's name.\n */"
            },
            "createAttributeNS": {
              "name": "createAttributeNS",
              "signature": [
                {
                  "type": "Attr",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createEvent": {
              "name": "createEvent",
              "signature": [
                {
                  "type": "Event",
                  "param": [
                    {
                      "name": "interface",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createRange": {
              "name": "createRange",
              "signature": [
                {
                  "type": "Range",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.\n */"
            },
            "createNodeIterator": {
              "name": "createNodeIterator",
              "signature": [
                {
                  "type": "NodeIterator",
                  "param": [
                    {
                      "name": "root",
                      "type": "Node"
                    },
                    {
                      "name": "whatToShow",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "filter",
                      "type": "NodeFilter",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n * @param root The root element or node to start traversing on.\n * @param whatToShow The type of nodes or elements to appear in the node list\n * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\n * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n */"
            },
            "createTreeWalker": {
              "name": "createTreeWalker",
              "signature": [
                {
                  "type": "TreeWalker",
                  "param": [
                    {
                      "name": "root",
                      "type": "Node"
                    },
                    {
                      "name": "whatToShow",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "filter",
                      "type": "NodeFilter",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "TreeWalker",
                  "param": [
                    {
                      "name": "root",
                      "type": "Node"
                    },
                    {
                      "name": "whatToShow",
                      "type": "unsigned long"
                    },
                    {
                      "name": "filter",
                      "type": "NodeFilter",
                      "nullable": 1
                    },
                    {
                      "name": "entityReferenceExpansion",
                      "type": "boolean",
                      "optional": 1
                    }
                  ],
                  "deprecated": 1
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\n * @param root The root element or node to start traversing on.\n * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\n * @param filter A custom NodeFilter function to use.\n * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n */"
            },
            "elementFromPoint": {
              "name": "elementFromPoint",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "x",
                      "type": "double"
                    },
                    {
                      "name": "y",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the element for the specified x coordinate and the specified y coordinate.\n * @param x The x-offset\n * @param y The y-offset\n */"
            },
            "elementsFromPoint": {
              "name": "elementsFromPoint",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Element"
                  },
                  "param": [
                    {
                      "name": "x",
                      "type": "double"
                    },
                    {
                      "name": "y",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "elementsFromPoint(x: number, y: number): Element[]"
              ]
            },
            "caretPositionFromPoint": {
              "name": "caretPositionFromPoint",
              "signature": [
                {
                  "type": "CaretPosition",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "x",
                      "type": "double"
                    },
                    {
                      "name": "y",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "exitFullscreen": {
              "name": "exitFullscreen",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Stops document's fullscreen element from being displayed fullscreen and resolves promise when done.\n */"
            },
            "getElementsByName": {
              "name": "getElementsByName",
              "signature": [
                {
                  "type": "NodeList",
                  "param": [
                    {
                      "name": "elementName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Gets a collection of objects based on the value of the NAME or ID attribute.\n * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\n */",
              "override-signatures": [
                "getElementsByName(elementName: string): NodeListOf<HTMLElement>"
              ]
            },
            "open": {
              "name": "open",
              "signature": [
                {
                  "type": "Document",
                  "param": [
                    {
                      "name": "unused1",
                      "type": "DOMString",
                      "optional": 1
                    },
                    {
                      "name": "unused2",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "WindowProxy",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    },
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "features",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "open(url?: string, name?: string, features?: string, replace?: boolean): Document"
              ],
              "comment": "/**\n * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\n * @param url Specifies a MIME type for the document.\n * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\n * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\n * @param replace Specifies whether the existing entry for the document is replaced in the history list.\n */"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Closes an output stream and forces the sent data to display.\n */"
            },
            "write": {
              "name": "write",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "text",
                      "type": "DOMString",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Writes one or more HTML expressions to a document in the specified window.\n * @param content Specifies the text and HTML tags to write.\n */"
            },
            "writeln": {
              "name": "writeln",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "text",
                      "type": "DOMString",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.\n * @param content The text and HTML tags to write.\n */"
            },
            "hasFocus": {
              "name": "hasFocus",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Gets a value indicating whether the object currently has focus.\n */"
            },
            "execCommand": {
              "name": "execCommand",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    },
                    {
                      "name": "showUI",
                      "type": "boolean",
                      "optional": 1
                    },
                    {
                      "name": "value",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Executes a command on the current document, current selection, or the given range.\n * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\n * @param showUI Display the user interface, defaults to false.\n * @param value Value to assign.\n */"
            },
            "queryCommandEnabled": {
              "name": "queryCommandEnabled",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\n * @param commandId Specifies a command identifier.\n */"
            },
            "queryCommandIndeterm": {
              "name": "queryCommandIndeterm",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\n * @param commandId String that specifies a command identifier.\n */"
            },
            "queryCommandState": {
              "name": "queryCommandState",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a Boolean value that indicates the current state of the command.\n * @param commandId String that specifies a command identifier.\n */"
            },
            "queryCommandSupported": {
              "name": "queryCommandSupported",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a Boolean value that indicates whether the current command is supported on the current range.\n * @param commandId Specifies a command identifier.\n */"
            },
            "queryCommandValue": {
              "name": "queryCommandValue",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "commandId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the current value of the document, range, or current selection for the given command.\n * @param commandId String that specifies a command identifier.\n */"
            },
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "captureEvents": {
              "name": "captureEvents",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "releaseEvents": {
              "name": "releaseEvents",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "exitPointerLock": {
              "name": "exitPointerLock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getSelection": {
              "name": "getSelection",
              "signature": [
                {
                  "type": "Selection",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\n */"
            },
            "getAnimations": {
              "name": "getAnimations",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Animation"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getElementById": {
              "name": "getElementById",
              "override-signatures": [
                "getElementById(elementId: string): HTMLElement | null"
              ],
              "comment": "/**\n * Returns a reference to the first object with the specified value of the ID or NAME attribute.\n * @param elementId String that specifies the ID value. Case-insensitive.\n */"
            },
            "caretRangeFromPoint": {
              "name": "caretRangeFromPoint",
              "deprecated": 1,
              "override-signatures": [
                "caretRangeFromPoint(x: number, y: number): Range"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "implementation": {
              "name": "implementation",
              "type": "DOMImplementation",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets the implementation object of the current document.\n */"
            },
            "URL": {
              "name": "URL",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Sets or gets the URL for the current document.\n */"
            },
            "documentURI": {
              "name": "documentURI",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns document's URL.\n */"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns document's origin.\n */"
            },
            "compatMode": {
              "name": "compatMode",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets a value that indicates whether standards-compliant mode is switched on for the object.\n */"
            },
            "characterSet": {
              "name": "characterSet",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns document's encoding.\n */"
            },
            "charset": {
              "name": "charset",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the character set used to encode the object.\n */"
            },
            "inputEncoding": {
              "name": "inputEncoding",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the character encoding used to create the webpage that is loaded into the document object.\n */"
            },
            "contentType": {
              "name": "contentType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns document's content type.\n */"
            },
            "doctype": {
              "name": "doctype",
              "type": "DocumentType",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets an object representing the document type declaration associated with the current document.\n */"
            },
            "documentElement": {
              "name": "documentElement",
              "type": "Element",
              "nullable": false,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets a reference to the root node of the document.\n */",
              "override-type": "HTMLElement"
            },
            "scrollingElement": {
              "name": "scrollingElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "fullscreenEnabled": {
              "name": "fullscreenEnabled",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.\n */"
            },
            "fullscreen": {
              "name": "fullscreen",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "onfullscreenchange": {
              "name": "onfullscreenchange",
              "type": "EventHandler",
              "event-handler": "fullscreenchange",
              "exposed": "Window"
            },
            "onfullscreenerror": {
              "name": "onfullscreenerror",
              "type": "EventHandler",
              "event-handler": "fullscreenerror",
              "exposed": "Window"
            },
            "location": {
              "name": "location",
              "type": "Location",
              "nullable": false,
              "read-only": 0,
              "exposed": "Window",
              "comment": "/**\n * Contains information about the current URL.\n */"
            },
            "domain": {
              "name": "domain",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or gets the security domain of the document.\n */"
            },
            "referrer": {
              "name": "referrer",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets the URL of the location that referred the user to the current page.\n */"
            },
            "cookie": {
              "name": "cookie",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.\n * \n * Can be set, to add a new cookie to the element's set of HTTP cookies.\n * \n * If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a \"SecurityError\" DOMException will be thrown on getting and setting.\n */"
            },
            "lastModified": {
              "name": "lastModified",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets the date that the page was last modified, if the page supplies one.\n */"
            },
            "readyState": {
              "name": "readyState",
              "type": "DocumentReadyState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a value that indicates the current state of the object.\n */"
            },
            "title": {
              "name": "title",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Contains the title of the document.\n */"
            },
            "dir": {
              "name": "dir",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a value that indicates the reading order of the object.\n */"
            },
            "body": {
              "name": "body",
              "type": "HTMLElement",
              "nullable": false,
              "exposed": "Window",
              "comment": "/**\n * Specifies the beginning and end of the document body.\n */"
            },
            "head": {
              "name": "head",
              "type": "HTMLHeadElement",
              "nullable": false,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the head element.\n */"
            },
            "images": {
              "name": "images",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection, in source order, of img objects in the document.\n */",
              "override-type": "HTMLCollectionOf<HTMLImageElement>"
            },
            "embeds": {
              "name": "embeds",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection of all embed objects in the document.\n */",
              "override-type": "HTMLCollectionOf<HTMLEmbedElement>"
            },
            "plugins": {
              "name": "plugins",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Return an HTMLCollection of the embed elements in the Document.\n */",
              "override-type": "HTMLCollectionOf<HTMLEmbedElement>"
            },
            "links": {
              "name": "links",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\n */",
              "override-type": "HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>"
            },
            "forms": {
              "name": "forms",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection, in source order, of all form objects in the document.\n */",
              "override-type": "HTMLCollectionOf<HTMLFormElement>"
            },
            "scripts": {
              "name": "scripts",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection of all script objects in the document.\n */",
              "override-type": "HTMLCollectionOf<HTMLScriptElement>"
            },
            "currentScript": {
              "name": "currentScript",
              "type": "HTMLOrSVGScriptElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.\n * \n * Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.\n */"
            },
            "defaultView": {
              "name": "defaultView",
              "type": "WindowProxy",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "activeElement": {
              "name": "activeElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets the object that has the focus when the parent document has focus.\n */"
            },
            "designMode": {
              "name": "designMode",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or gets a value that indicates whether the document can be edited.\n */"
            },
            "onreadystatechange": {
              "name": "onreadystatechange",
              "type": "EventHandler",
              "event-handler": "readystatechange",
              "exposed": "Window",
              "comment": "/**\n * Fires when the state of the object has changed.\n * @param ev The event\n */"
            },
            "fgColor": {
              "name": "fgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets the foreground (text) color of the document.\n */"
            },
            "linkColor": {
              "name": "linkColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets the color of the document links.\n */"
            },
            "vlinkColor": {
              "name": "vlinkColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets the color of the links that the user has visited.\n */"
            },
            "alinkColor": {
              "name": "alinkColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets the color of all active links in the document.\n */"
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Deprecated. Sets or retrieves a value that indicates the background color behind the object.\n */"
            },
            "anchors": {
              "name": "anchors",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "override-type": "HTMLCollectionOf<HTMLAnchorElement>",
              "comment": "/**\n * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\n */"
            },
            "applets": {
              "name": "applets",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "override-type": "HTMLCollectionOf<HTMLAppletElement>",
              "comment": "/**\n * Retrieves a collection of all applet objects in the document.\n */"
            },
            "all": {
              "name": "all",
              "type": "HTMLAllCollection",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Returns a reference to the collection of elements contained by the object.\n */"
            },
            "hidden": {
              "name": "hidden",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "visibilityState": {
              "name": "visibilityState",
              "type": "VisibilityState",
              "read-only": 1,
              "exposed": "Window"
            },
            "onvisibilitychange": {
              "name": "onvisibilitychange",
              "type": "EventHandler",
              "event-handler": "visibilitychange",
              "exposed": "Window"
            },
            "onpointerlockchange": {
              "name": "onpointerlockchange",
              "type": "EventHandler",
              "event-handler": "pointerlockchange",
              "exposed": "Window"
            },
            "onpointerlockerror": {
              "name": "onpointerlockerror",
              "type": "EventHandler",
              "event-handler": "pointerlockerror",
              "exposed": "Window"
            },
            "timeline": {
              "name": "timeline",
              "type": "DocumentTimeline",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Document",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "NonElementParentNode",
          "DocumentOrShadowRoot",
          "ParentNode",
          "XPathEvaluatorBase",
          "GlobalEventHandlers",
          "DocumentAndElementEventHandlers"
        ],
        "comment": "Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
        "events": {
          "event": [
            {
              "name": "visibilitychange",
              "type": "Event"
            }
          ]
        }
      },
      "MessageEvent": {
        "name": "MessageEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the data of the message.\n */"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the origin of the message, for server-sent events and cross-document messaging.\n */"
            },
            "lastEventId": {
              "name": "lastEventId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the last event ID string, for server-sent events.\n */"
            },
            "source": {
              "name": "source",
              "type": "MessageEventSource",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.\n */"
            },
            "ports": {
              "name": "ports",
              "type": "FrozenArray",
              "subtype": {
                "type": "MessagePort"
              },
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MessageEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MessageEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker AudioWorklet",
        "legacy-window-alias": [],
        "comment": "A message received by a target object."
      },
      "SVGElement": {
        "name": "SVGElement",
        "extends": "Element",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "className": {
              "name": "className",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "override-type": "any"
            },
            "ownerSVGElement": {
              "name": "ownerSVGElement",
              "type": "SVGSVGElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "viewportElement": {
              "name": "viewportElement",
              "type": "SVGElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "GlobalEventHandlers",
          "DocumentAndElementEventHandlers",
          "SVGElementInstance",
          "HTMLOrSVGElement",
          "ElementCSSInlineStyle",
          "GlobalEventHandlers",
          "DocumentAndElementEventHandlers"
        ],
        "comment": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface."
      },
      "DeferredPermissionRequest": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "DeferredPermissionRequest",
        "properties": {
          "property": {
            "type": {
              "specs": "none",
              "exposed": "Window",
              "name": "type",
              "type": "MSWebViewPermissionType",
              "type-original": "MSWebViewPermissionType",
              "read-only": 1
            },
            "id": {
              "specs": "none",
              "exposed": "Window",
              "name": "id",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "uri": {
              "specs": "none",
              "exposed": "Window",
              "name": "uri",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "deny": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "deny"
            },
            "allow": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "allow"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "HTMLScriptElement": {
        "name": "HTMLScriptElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Retrieves the URL to an external file that contains the source code or data.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the MIME type for the associated scripting engine.\n */"
            },
            "noModule": {
              "name": "noModule",
              "type": "boolean",
              "exposed": "Window"
            },
            "async": {
              "name": "async",
              "type": "boolean",
              "exposed": "Window"
            },
            "defer": {
              "name": "defer",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the status of the script.\n */"
            },
            "crossOrigin": {
              "name": "crossOrigin",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
            },
            "integrity": {
              "name": "integrity",
              "type": "DOMString",
              "exposed": "Window"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "DOMString",
              "exposed": "Window"
            },
            "charset": {
              "name": "charset",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
            },
            "event": {
              "name": "event",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the event for which the script is written.\n */"
            },
            "htmlFor": {
              "name": "htmlFor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the object that is bound to the event script.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
        "element": [
          {
            "name": "script"
          }
        ]
      },
      "TextTrack": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "TextTrack",
        "properties": {
          "property": {
            "language": {
              "specs": "html5",
              "name": "language",
              "tags": "Captions",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "mode": {
              "specs": "html5",
              "exposed": "Window",
              "name": "mode",
              "type": [
                {
                  "type": "TextTrackMode"
                },
                {
                  "type": "unsigned short"
                }
              ],
              "tags": "Captions",
              "type-original": "(TextTrackMode or unsigned short)"
            },
            "activeCues": {
              "specs": "html5",
              "name": "activeCues",
              "tags": "Captions",
              "type-original": "TextTrackCueList",
              "exposed": "Window",
              "type": "TextTrackCueList",
              "read-only": 1
            },
            "readyState": {
              "specs": "html5",
              "name": "readyState",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short",
              "read-only": 1
            },
            "cues": {
              "specs": "html5",
              "name": "cues",
              "tags": "Captions",
              "type-original": "TextTrackCueList",
              "exposed": "Window",
              "type": "TextTrackCueList",
              "read-only": 1
            },
            "inBandMetadataTrackDispatchType": {
              "specs": "html5",
              "name": "inBandMetadataTrackDispatchType",
              "tags": "Captions",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "kind": {
              "specs": "html5",
              "name": "kind",
              "tags": "Captions",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "oncuechange": {
              "specs": "html5",
              "name": "oncuechange",
              "tags": "Captions",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "cuechange"
            },
            "onload": {
              "specs": "html5",
              "name": "onload",
              "tags": "Captions",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "load"
            },
            "onerror": {
              "specs": "html5",
              "name": "onerror",
              "tags": "Captions",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            },
            "label": {
              "specs": "html5",
              "name": "label",
              "tags": "Captions",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "sourceBuffer": {
              "name": "sourceBuffer",
              "type": "SourceBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "tags": "Captions",
        "constants": {
          "constant": {
            "SHOWING": {
              "specs": "html5",
              "value": "2",
              "name": "SHOWING",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "ERROR": {
              "specs": "html5",
              "value": "3",
              "name": "ERROR",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "LOADED": {
              "specs": "html5",
              "value": "2",
              "name": "LOADED",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "LOADING": {
              "specs": "html5",
              "value": "1",
              "name": "LOADING",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "HIDDEN": {
              "specs": "html5",
              "value": "1",
              "name": "HIDDEN",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "NONE": {
              "specs": "html5",
              "value": "0",
              "name": "NONE",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "DISABLED": {
              "specs": "html5",
              "value": "0",
              "name": "DISABLED",
              "tags": "Captions",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            }
          }
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "cuechange",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "error",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "load",
              "type": "Event",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "addCue": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "cue",
                      "type": "TextTrackCue",
                      "type-original": "TextTrackCue"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "addCue",
              "tags": "Captions"
            },
            "removeCue": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "cue",
                      "type": "TextTrackCue",
                      "type-original": "TextTrackCue"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "removeCue",
              "tags": "Captions"
            }
          }
        },
        "extends": "EventTarget",
        "comment": "This interface also inherits properties from EventTarget."
      },
      "HTMLTableRowElement": {
        "name": "HTMLTableRowElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "insertCell": {
              "name": "insertCell",
              "signature": [
                {
                  "type": "HTMLTableCellElement",
                  "param": [
                    {
                      "name": "index",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertCell(index?: number): HTMLTableDataCellElement"
              ],
              "comment": "/**\n * Creates a new cell in the table row, and adds the cell to the cells collection.\n * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\n */"
            },
            "deleteCell": {
              "name": "deleteCell",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the specified cell from the table row, as well as from the cells collection.\n * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "rowIndex": {
              "name": "rowIndex",
              "type": "long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the position of the object in the rows collection for the table.\n */"
            },
            "sectionRowIndex": {
              "name": "sectionRowIndex",
              "type": "long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the position of the object in the collection.\n */"
            },
            "cells": {
              "name": "cells",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLTableDataCellElement | HTMLTableHeaderCellElement>",
              "comment": "/**\n * Retrieves a collection of all cells in the table row.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "ch": {
              "name": "ch",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "chOff": {
              "name": "chOff",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "vAlign": {
              "name": "vAlign",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
        "element": [
          {
            "name": "tr"
          }
        ]
      },
      "VRDisplay": {
        "constants": {
          "constant": {}
        },
        "specs": "WebVR",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "getLayers": {
              "signature": [
                {
                  "subtype": {
                    "type": "VRLayer"
                  },
                  "type": "sequence",
                  "type-original": "sequence<VRLayer>"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "getLayers"
            },
            "getPose": {
              "deprecated": 1,
              "signature": [
                {
                  "new-object": 1,
                  "type": "VRPose",
                  "type-original": "VRPose"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "getPose"
            },
            "getEyeParameters": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "VREyeParameters",
                  "param": [
                    {
                      "name": "whichEye",
                      "type": "DOMString",
                      "type-original": "VREye"
                    }
                  ],
                  "type-original": "VREyeParameters"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "getEyeParameters"
            },
            "requestAnimationFrame": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "callback",
                      "type": "FrameRequestCallback",
                      "type-original": "FrameRequestCallback"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "requestAnimationFrame"
            },
            "submitFrame": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "pose",
                      "type": "VRPose",
                      "optional": 1,
                      "type-original": "VRPose"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "submitFrame"
            },
            "exitPresent": {
              "signature": [
                {
                  "subtype": {
                    "type": "void"
                  },
                  "type": "Promise",
                  "type-original": "Promise<void>"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "exitPresent"
            },
            "getFrameData": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "frameData",
                      "type": "VRFrameData",
                      "type-original": "VRFrameData"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "getFrameData"
            },
            "cancelAnimationFrame": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "cancelAnimationFrame"
            },
            "requestPresent": {
              "signature": [
                {
                  "subtype": {
                    "type": "void"
                  },
                  "param-min-required": 1,
                  "type": "Promise",
                  "param": [
                    {
                      "subtype": {
                        "type": "VRLayer"
                      },
                      "name": "layers",
                      "type": "sequence",
                      "type-original": "sequence<VRLayer>"
                    }
                  ],
                  "type-original": "Promise<void>"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "requestPresent"
            },
            "resetPose": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "WebVR",
              "exposed": "Window",
              "name": "resetPose"
            }
          }
        },
        "name": "VRDisplay",
        "extends": "EventTarget",
        "properties": {
          "property": {
            "displayId": {
              "specs": "WebVR",
              "name": "displayId",
              "constant": 1,
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "isConnected": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "isConnected",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "depthNear": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "depthNear",
              "type": "double",
              "type-original": "double"
            },
            "capabilities": {
              "specs": "WebVR",
              "name": "capabilities",
              "constant": 1,
              "type-original": "VRDisplayCapabilities",
              "exposed": "Window",
              "type": "VRDisplayCapabilities",
              "read-only": 1
            },
            "depthFar": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "depthFar",
              "type": "double",
              "type-original": "double"
            },
            "isPresenting": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "isPresenting",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "displayName": {
              "specs": "WebVR",
              "name": "displayName",
              "constant": 1,
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "stageParameters": {
              "specs": "WebVR",
              "name": "stageParameters",
              "type-original": "VRStageParameters?",
              "nullable": 1,
              "exposed": "Window",
              "type": "VRStageParameters",
              "read-only": 1
            }
          }
        },
        "comment": "This WebVR API interface represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality."
      },
      "IDBRequest": {
        "name": "IDBRequest",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "result": {
              "name": "result",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * When a request is completed, returns the result, or undefined if the request failed. Throws a \"InvalidStateError\" DOMException if the request is still pending.\n */",
              "override-type": "T"
            },
            "error": {
              "name": "error",
              "type": "DOMException",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a \"InvalidStateError\" DOMException if the request is still pending.\n */",
              "override-type": "DOMException"
            },
            "source": {
              "name": "source",
              "type": [
                {
                  "type": "IDBObjectStore"
                },
                {
                  "type": "IDBIndex"
                },
                {
                  "type": "IDBCursor"
                }
              ],
              "nullable": false,
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.\n */",
              "override-type": "IDBObjectStore | IDBIndex | IDBCursor"
            },
            "transaction": {
              "name": "transaction",
              "type": "IDBTransaction",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.\n */"
            },
            "readyState": {
              "name": "readyState",
              "type": "IDBRequestReadyState",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns \"pending\" until a request is complete, then returns \"done\".\n */"
            },
            "onsuccess": {
              "name": "onsuccess",
              "type": "EventHandler",
              "event-handler": "success",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.",
        "events": {
          "event": [
            {
              "name": "error",
              "type": "Event"
            },
            {
              "name": "success",
              "type": "Event"
            }
          ]
        },
        "type-parameters": [
          {
            "name": "T",
            "default": "any"
          }
        ]
      },
      "AnalyserNode": {
        "name": "AnalyserNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getFloatFrequencyData": {
              "name": "getFloatFrequencyData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "array",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getByteFrequencyData": {
              "name": "getByteFrequencyData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "array",
                      "type": "Uint8Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getFloatTimeDomainData": {
              "name": "getFloatTimeDomainData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "array",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getByteTimeDomainData": {
              "name": "getByteTimeDomainData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "array",
                      "type": "Uint8Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "fftSize": {
              "name": "fftSize",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "frequencyBinCount": {
              "name": "frequencyBinCount",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "minDecibels": {
              "name": "minDecibels",
              "type": "double",
              "exposed": "Window"
            },
            "maxDecibels": {
              "name": "maxDecibels",
              "type": "double",
              "exposed": "Window"
            },
            "smoothingTimeConstant": {
              "name": "smoothingTimeConstant",
              "type": "double",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AnalyserNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "AnalyserOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations."
      },
      "VRFieldOfView": {
        "specs": "WebVR",
        "anonymous-methods": {
          "method": []
        },
        "name": "VRFieldOfView",
        "properties": {
          "property": {
            "upDegrees": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "upDegrees",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "leftDegrees": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "leftDegrees",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "downDegrees": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "downDegrees",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "rightDegrees": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "rightDegrees",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object",
        "comment": "This WebVR API interface represents a field of view defined by 4 different degree values describing the view from a center point."
      },
      "MSMediaKeyMessageEvent": {
        "constants": {
          "constant": {}
        },
        "specs": "encrypted-media-20130510",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "MSMediaKeyMessageEvent",
        "extends": "Event",
        "properties": {
          "property": {
            "destinationURL": {
              "specs": "encrypted-media-20130510",
              "name": "destinationURL",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "message": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "message",
              "type": "Uint8Array",
              "type-original": "Uint8Array",
              "read-only": 1
            }
          }
        }
      },
      "HTMLFrameElement": {
        "name": "HTMLFrameElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the frame name.\n */"
            },
            "scrolling": {
              "name": "scrolling",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether the frame can be scrolled.\n */"
            },
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
            },
            "frameBorder": {
              "name": "frameBorder",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether to display a border for the frame.\n */"
            },
            "longDesc": {
              "name": "longDesc",
              "type": "USVString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a URI to a long description of the object.\n */"
            },
            "noResize": {
              "name": "noResize",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether the user can resize the frame.\n */"
            },
            "contentDocument": {
              "name": "contentDocument",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
            },
            "contentWindow": {
              "name": "contentWindow",
              "type": "WindowProxy",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Retrieves the object of the specified.\n */"
            },
            "marginHeight": {
              "name": "marginHeight",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n */"
            },
            "marginWidth": {
              "name": "marginWidth",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "frame"
          }
        ]
      },
      "Touch": {
        "name": "Touch",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "identifier": {
              "name": "identifier",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "target": {
              "name": "target",
              "type": "EventTarget",
              "read-only": 1,
              "exposed": "Window"
            },
            "screenX": {
              "name": "screenX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "screenY": {
              "name": "screenY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientX": {
              "name": "clientX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "clientY": {
              "name": "clientY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pageX": {
              "name": "pageX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pageY": {
              "name": "pageY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "radiusX": {
              "name": "radiusX",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "radiusY": {
              "name": "radiusY",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "rotationAngle": {
              "name": "rotationAngle",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "force": {
              "name": "force",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "altitudeAngle": {
              "name": "altitudeAngle",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "azimuthAngle": {
              "name": "azimuthAngle",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "touchType": {
              "name": "touchType",
              "type": "TouchType",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Touch",
              "param": [
                {
                  "name": "touchInitDict",
                  "type": "TouchInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad."
      },
      "CSSMediaRule": {
        "constants": {
          "constant": {}
        },
        "specs": "css-conditional",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSMediaRule",
        "extends": "CSSConditionRule",
        "properties": {
          "property": {
            "media": {
              "put-forwards": "mediaText",
              "specs": "css-conditional",
              "same-object": 1,
              "name": "media",
              "type-original": "MediaList",
              "exposed": "Window",
              "type": "MediaList",
              "read-only": 1
            }
          }
        },
        "comment": "A single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE)."
      },
      "MediaDevices": {
        "name": "MediaDevices",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "enumerateDevices": {
              "name": "enumerateDevices",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "sequence",
                    "subtype": {
                      "type": "MediaDeviceInfo"
                    }
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getSupportedConstraints": {
              "name": "getSupportedConstraints",
              "signature": [
                {
                  "type": "MediaTrackSupportedConstraints",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getUserMedia": {
              "name": "getUserMedia",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "MediaStream"
                  },
                  "param": [
                    {
                      "name": "constraints",
                      "type": "MediaStreamConstraints",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "ondevicechange": {
              "name": "ondevicechange",
              "type": "EventHandler",
              "event-handler": "devicechange",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data."
      },
      "BarProp": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "BarProp",
        "extends": "Object",
        "properties": {
          "property": {
            "visible": {
              "specs": "html5",
              "exposed": "Window",
              "name": "visible",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            }
          }
        }
      },
      "DeviceLightEvent": {
        "specs": "ambient-light",
        "constructor": {
          "specs": "ambient-light",
          "signature": [
            {
              "param-min-required": 1,
              "type": "DeviceLightEvent",
              "param": [
                {
                  "name": "typeArg",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "DeviceLightEventInit",
                  "optional": 1,
                  "type-original": "DeviceLightEventInit"
                }
              ],
              "type-original": "DeviceLightEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "DeviceLightEvent",
        "properties": {
          "property": {
            "value": {
              "specs": "ambient-light",
              "exposed": "Window",
              "name": "value",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "The DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability."
      },
      "SourceBuffer": {
        "name": "SourceBuffer",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "appendBuffer": {
              "name": "appendBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "start",
                      "type": "double"
                    },
                    {
                      "name": "end",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "mode": {
              "name": "mode",
              "type": "AppendMode",
              "exposed": "Window"
            },
            "updating": {
              "name": "updating",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "buffered": {
              "name": "buffered",
              "type": "TimeRanges",
              "read-only": 1,
              "exposed": "Window"
            },
            "timestampOffset": {
              "name": "timestampOffset",
              "type": "double",
              "exposed": "Window"
            },
            "audioTracks": {
              "name": "audioTracks",
              "type": "AudioTrackList",
              "read-only": 1,
              "exposed": "Window"
            },
            "videoTracks": {
              "name": "videoTracks",
              "type": "VideoTrackList",
              "read-only": 1,
              "exposed": "Window"
            },
            "textTracks": {
              "name": "textTracks",
              "type": "TextTrackList",
              "read-only": 1,
              "exposed": "Window"
            },
            "appendWindowStart": {
              "name": "appendWindowStart",
              "type": "double",
              "exposed": "Window"
            },
            "appendWindowEnd": {
              "name": "appendWindowEnd",
              "type": "unrestricted double",
              "exposed": "Window"
            },
            "onupdatestart": {
              "name": "onupdatestart",
              "type": "EventHandler",
              "event-handler": "updatestart",
              "exposed": "Window"
            },
            "onupdate": {
              "name": "onupdate",
              "type": "EventHandler",
              "event-handler": "update",
              "exposed": "Window"
            },
            "onupdateend": {
              "name": "onupdateend",
              "type": "EventHandler",
              "event-handler": "updateend",
              "exposed": "Window"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.",
        "events": {
          "event": [
            {
              "name": "abort",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "Event"
            }
          ]
        }
      },
      "PaymentAddress": {
        "specs": "payment-request",
        "anonymous-methods": {
          "method": []
        },
        "name": "PaymentAddress",
        "properties": {
          "property": {
            "languageCode": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "languageCode",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "country": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "country",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "recipient": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "recipient",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "region": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "region",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "addressLine": {
              "specs": "payment-request",
              "name": "addressLine",
              "type-original": "sequence<DOMString>",
              "subtype": {
                "type": "DOMString"
              },
              "exposed": "Window",
              "type": "sequence",
              "read-only": 1
            },
            "phone": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "phone",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "dependentLocality": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "dependentLocality",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "city": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "city",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "sortingCode": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "sortingCode",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "organization": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "organization",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "postalCode": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "postalCode",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "serializer": 1,
              "signature": [
                {
                  "type": "any",
                  "type-original": "any"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "serializer-info": "attribute",
              "name": "toJSON"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1,
        "comment": "This Payment Request API interface is used to store shipping or payment address information."
      },
      "SVGPathSegLinetoHorizontalRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoHorizontalRel",
        "properties": {
          "property": {
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "SVGEllipseElement": {
        "name": "SVGEllipseElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cx": {
              "name": "cx",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "cy": {
              "name": "cy",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "rx": {
              "name": "rx",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "ry": {
              "name": "ry",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to the properties of <ellipse> elements.",
        "element": [
          {
            "namespace": "SVG",
            "name": "ellipse"
          }
        ]
      },
      "MSBlobBuilder": {
        "constants": {
          "constant": {}
        },
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "type": "MSBlobBuilder",
              "type-original": "MSBlobBuilder"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "append": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "name": "endings",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "append"
            },
            "getBlob": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "Blob",
                  "param": [
                    {
                      "name": "contentType",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "Blob"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getBlob"
            }
          }
        },
        "name": "MSBlobBuilder",
        "extends": "Object",
        "properties": {
          "property": {}
        }
      },
      "DataTransfer": {
        "name": "DataTransfer",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setDragImage": {
              "name": "setDragImage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "image",
                      "type": "Element"
                    },
                    {
                      "name": "x",
                      "type": "long"
                    },
                    {
                      "name": "y",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Uses the given element to update the drag feedback, replacing any previously specified feedback.\n */",
              "override-signatures": [
                "setDragImage(image: Element, x: number, y: number): void"
              ]
            },
            "getData": {
              "name": "getData",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "format",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the specified data. If there is no such data, returns the empty string.\n */"
            },
            "setData": {
              "name": "setData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "format",
                      "type": "DOMString"
                    },
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Adds the specified data.\n */"
            },
            "clearData": {
              "name": "clearData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "format",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the data of the specified formats. Removes all data if the argument is omitted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "dropEffect": {
              "name": "dropEffect",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the kind of operation that is currently selected. If the kind of operation isn't one of those that is allowed by the effectAllowed attribute, then the operation will fail.\n * \n * Can be set, to change the selected operation.\n * \n * The possible values are \"none\", \"copy\", \"link\", and \"move\".\n */"
            },
            "effectAllowed": {
              "name": "effectAllowed",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the kinds of operations that are to be allowed.\n * \n * Can be set (during the dragstart event), to change the allowed operations.\n * \n * The possible values are \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\", and \"uninitialized\",\n */"
            },
            "items": {
              "name": "items",
              "type": "DataTransferItemList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a DataTransferItemList object, with the drag data.\n */"
            },
            "types": {
              "name": "types",
              "type": "FrozenArray",
              "subtype": {
                "type": "DOMString"
              },
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a frozen array listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string \"Files\".\n */"
            },
            "files": {
              "name": "files",
              "type": "FileList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a FileList of the files being dragged, if any.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DataTransfer",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API."
      },
      "MutationObserver": {
        "name": "MutationObserver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "observe": {
              "name": "observe",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "Node"
                    },
                    {
                      "name": "options",
                      "type": "MutationObserverInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).\n * \n * The options argument allows for setting mutation observation options via object members.\n */"
            },
            "disconnect": {
              "name": "disconnect",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.\n */"
            },
            "takeRecords": {
              "name": "takeRecords",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "MutationRecord"
                  },
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Empties the record queue and returns what was in there.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MutationObserver",
              "param": [
                {
                  "name": "callback",
                  "type": "MutationCallback"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification."
      },
      "IDBFactory": {
        "name": "IDBFactory",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "open": {
              "name": "open",
              "signature": [
                {
                  "type": "IDBOpenDBRequest",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "version",
                      "type": "unsigned long long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.\n */"
            },
            "deleteDatabase": {
              "name": "deleteDatabase",
              "signature": [
                {
                  "type": "IDBOpenDBRequest",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.\n */"
            },
            "cmp": {
              "name": "cmp",
              "signature": [
                {
                  "type": "short",
                  "param": [
                    {
                      "name": "first",
                      "type": "any"
                    },
                    {
                      "name": "second",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.\n * \n * Throws a \"DataError\" DOMException if either input is not a valid key.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)"
      },
      "WebGLShaderPrecisionFormat": {
        "name": "WebGLShaderPrecisionFormat",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "rangeMin": {
              "name": "rangeMin",
              "type": "GLint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "rangeMax": {
              "name": "rangeMax",
              "type": "GLint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "precision": {
              "name": "precision",
              "type": "GLint",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method."
      },
      "SVGAnimatedNumberList": {
        "name": "SVGAnimatedNumberList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "SVGNumberList",
              "read-only": 1,
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "SVGNumberList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated."
      },
      "MSAssertion": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSAssertion",
        "properties": {
          "property": {
            "id": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "type": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "type",
              "type": "MSCredentialType",
              "type-original": "MSCredentialType",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "PushManager": {
        "name": "PushManager",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "subscribe": {
              "name": "subscribe",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "PushSubscription"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "PushSubscriptionOptionsInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getSubscription": {
              "name": "getSubscription",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "PushSubscription",
                    "nullable": 1
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "permissionState": {
              "name": "permissionState",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "PushPermissionState"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "PushSubscriptionOptionsInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "supportedContentEncodings": {
              "name": "supportedContentEncodings",
              "type": "FrozenArray",
              "subtype": {
                "type": "DOMString"
              },
              "static": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications."
      },
      "MediaEncryptedEvent": {
        "name": "MediaEncryptedEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "initDataType": {
              "name": "initDataType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "initData": {
              "name": "initData",
              "type": "ArrayBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaEncryptedEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaEncryptedEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "TouchEvent": {
        "name": "TouchEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "touches": {
              "name": "touches",
              "type": "TouchList",
              "read-only": 1,
              "exposed": "Window"
            },
            "targetTouches": {
              "name": "targetTouches",
              "type": "TouchList",
              "read-only": 1,
              "exposed": "Window"
            },
            "changedTouches": {
              "name": "changedTouches",
              "type": "TouchList",
              "read-only": 1,
              "exposed": "Window"
            },
            "altKey": {
              "name": "altKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "metaKey": {
              "name": "metaKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "ctrlKey": {
              "name": "ctrlKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "shiftKey": {
              "name": "shiftKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TouchEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "TouchEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth."
      },
      "WorkerLocation": {
        "constants": {
          "constant": {}
        },
        "specs": "workers",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {
            "toString": {
              "signature": [
                {
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "specs": "workers",
              "exposed": "Worker",
              "name": "toString",
              "stringifier": 1
            }
          }
        },
        "exposed": "Worker",
        "name": "WorkerLocation",
        "extends": "Object",
        "properties": {
          "property": {
            "protocol": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "protocol",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "search": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "search",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "origin": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "origin",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "hostname": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "hostname",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "pathname": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "pathname",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "port": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "port",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "host": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "host",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "hash": {
              "specs": "workers",
              "exposed": "Worker",
              "name": "hash",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "href": {
              "specs": "workers",
              "name": "href",
              "type-original": "DOMString",
              "exposed": "Worker",
              "type": "DOMString",
              "stringifier": 1,
              "read-only": 1
            }
          }
        },
        "comment": "The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location."
      },
      "ServiceWorkerMessageEvent": {
        "specs": "service-workers",
        "constructor": {
          "specs": "service-workers",
          "signature": [
            {
              "param-min-required": 1,
              "type": "ServiceWorkerMessageEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ServiceWorkerMessageEventInit",
                  "optional": 1,
                  "type-original": "ServiceWorkerMessageEventInit"
                }
              ],
              "type-original": "ServiceWorkerMessageEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "ServiceWorkerMessageEvent",
        "properties": {
          "property": {
            "source": {
              "specs": "service-workers",
              "same-object": 1,
              "name": "source",
              "type-original": "(ServiceWorker or MessagePort)?",
              "exposed": "Window",
              "type": [
                {
                  "nullable": 1,
                  "type": "ServiceWorker"
                },
                {
                  "nullable": 1,
                  "type": "MessagePort"
                }
              ],
              "read-only": 1
            },
            "ports": {
              "specs": "service-workers",
              "name": "ports",
              "type-original": "FrozenArray<MessagePort>?",
              "subtype": {
                "type": "MessagePort"
              },
              "nullable": 1,
              "exposed": "Window",
              "type": "FrozenArray",
              "read-only": 1
            },
            "lastEventId": {
              "specs": "service-workers",
              "exposed": "Window",
              "name": "lastEventId",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "origin": {
              "specs": "service-workers",
              "exposed": "Window",
              "name": "origin",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "data": {
              "specs": "service-workers",
              "exposed": "Window",
              "name": "data",
              "type": "any",
              "type-original": "any",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Event",
        "comment": "This ServiceWorker API interface contains information about an event sent to a ServiceWorkerContainer target. This extends the default message event to allow setting a ServiceWorker object as the source of a message. The event object is accessed via the handler function of a message event, when fired by a message received from a service worker."
      },
      "SVGTextElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "clip-rule"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "css_color",
              "name": "color"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "ltr rtl inherit",
              "value-syntax": "enum",
              "name": "direction"
            },
            {
              "enum-values": "auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit",
              "value-syntax": "enum",
              "name": "dominant-baseline"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "fill"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "fill-opacity"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "fill-rule"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "caption icon menu message-box small-caption status-bar inherit",
              "value-syntax": "css_font",
              "name": "font"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "comma_separated_css_font_family_followed_by_generic_family",
              "name": "font-family"
            },
            {
              "enum-values": "smaller larger xx-small x-small small medium large x-large xx-large inherit initial",
              "value-syntax": "css_percentage_or_length",
              "name": "font-size"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "floating_point_number",
              "name": "font-size-adjust"
            },
            {
              "enum-values": "normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit",
              "value-syntax": "enum",
              "name": "font-stretch"
            },
            {
              "enum-values": "normal italic oblique inherit initial",
              "value-syntax": "enum",
              "name": "font-style"
            },
            {
              "enum-values": "normal small-caps inherit initial",
              "value-syntax": "enum",
              "name": "font-variant"
            },
            {
              "enum-values": "normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial",
              "value-syntax": "enum",
              "name": "font-weight"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-horizontal"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-vertical"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_length",
              "name": "kerning"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "letter-spacing"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial",
              "value-syntax": "enum",
              "name": "pointer-events"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "stroke"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "comma_or_space_separated_css_percentage_or_length",
              "name": "stroke-dasharray"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-dashoffset"
            },
            {
              "enum-values": "butt round square inherit",
              "value-syntax": "enum",
              "name": "stroke-linecap"
            },
            {
              "enum-values": "miter round bevel inherit",
              "value-syntax": "enum",
              "name": "stroke-linejoin"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "1_or_greater_floating_point_number",
              "name": "stroke-miterlimit"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "stroke-opacity"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-width"
            },
            {
              "enum-values": "start middle end inherit",
              "value-syntax": "enum",
              "name": "text-anchor"
            },
            {
              "enum-values": "none underline overline line-through blink inherit",
              "value-syntax": "enum",
              "name": "text-decoration"
            },
            {
              "enum-values": "normal embed bidi-override inherit",
              "value-syntax": "enum",
              "name": "unicode-bidi"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "word-spacing"
            },
            {
              "enum-values": "lr-tb tb-rl rl-tb bt-rl tb-lr bt-lr lr-bt rl-bt lr rl tb horizontal-tb vertical-lr vertical-rl inherit",
              "value-syntax": "enum",
              "name": "writing-mode"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTextElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "text"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGTextPositioningElement",
        "comment": "Corresponds to the <text> elements."
      },
      "ValidityState": {
        "name": "ValidityState",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "valueMissing": {
              "name": "valueMissing",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "typeMismatch": {
              "name": "typeMismatch",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "patternMismatch": {
              "name": "patternMismatch",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "tooLong": {
              "name": "tooLong",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "tooShort": {
              "name": "tooShort",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "rangeUnderflow": {
              "name": "rangeUnderflow",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "rangeOverflow": {
              "name": "rangeOverflow",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "stepMismatch": {
              "name": "stepMismatch",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "badInput": {
              "name": "badInput",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "customError": {
              "name": "customError",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "valid": {
              "name": "valid",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid."
      },
      "Storage": {
        "name": "Storage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "key": {
              "name": "key",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.\n */",
              "override-signatures": [
                "key(index: number): string | null"
              ]
            },
            "getItem": {
              "name": "getItem",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "key",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n */",
              "override-signatures": [
                "getItem(key: string): string | null"
              ]
            },
            "setItem": {
              "name": "setItem",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n * \n * Throws a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)\n */"
            },
            "removeItem": {
              "name": "removeItem",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n */"
            },
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Empties the list associated with the object of all key/value pairs, if there are any.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of key/value pairs currently present in the list associated with the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
        "override-index-signatures": [
          "[name: string]: any"
        ]
      },
      "HTMLIFrameElement": {
        "name": "HTMLIFrameElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getSVGDocument": {
              "name": "getSVGDocument",
              "signature": [
                {
                  "type": "Document",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
            },
            "srcdoc": {
              "name": "srcdoc",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrives the content of the page that is to contain.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the frame name.\n */"
            },
            "sandbox": {
              "name": "sandbox",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "allow": {
              "name": "allow",
              "type": "DOMString",
              "exposed": "Window"
            },
            "allowFullscreen": {
              "name": "allowFullscreen",
              "type": "boolean",
              "exposed": "Window"
            },
            "allowPaymentRequest": {
              "name": "allowPaymentRequest",
              "type": "boolean",
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "height": {
              "name": "height",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "ReferrerPolicy",
              "exposed": "Window"
            },
            "contentDocument": {
              "name": "contentDocument",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
            },
            "contentWindow": {
              "name": "contentWindow",
              "type": "WindowProxy",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the object of the specified.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "scrolling": {
              "name": "scrolling",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether the frame can be scrolled.\n */"
            },
            "frameBorder": {
              "name": "frameBorder",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether to display a border for the frame.\n */"
            },
            "longDesc": {
              "name": "longDesc",
              "type": "USVString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a URI to a long description of the object.\n */"
            },
            "marginHeight": {
              "name": "marginHeight",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n */"
            },
            "marginWidth": {
              "name": "marginWidth",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
        "element": [
          {
            "name": "iframe"
          }
        ]
      },
      "PaymentRequestUpdateEvent": {
        "specs": "payment-request",
        "constructor": {
          "specs": "payment-request",
          "signature": [
            {
              "param-min-required": 1,
              "type": "PaymentRequestUpdateEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PaymentRequestUpdateEventInit",
                  "optional": 1,
                  "type-original": "PaymentRequestUpdateEventInit"
                }
              ],
              "type-original": "PaymentRequestUpdateEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "PaymentRequestUpdateEvent",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "updateWith": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "subtype": {
                        "type": "PaymentDetailsUpdate"
                      },
                      "name": "detailsPromise",
                      "type": "Promise",
                      "type-original": "Promise<PaymentDetailsUpdate>"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "name": "updateWith"
            }
          }
        },
        "extends": "Event",
        "secure-context": 1,
        "comment": "This Payment Request API interface enables a web page to update the details of a PaymentRequest in response to a user action."
      },
      "HTMLBodyElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "off on",
              "value-syntax": "enum",
              "name": "unselectable"
            }
          ]
        },
        "specs": "html5",
        "html-constructor": 1,
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLBodyElement",
        "properties": {
          "property": {
            "link": {
              "name": "link",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "aLink": {
              "name": "aLink",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "background": {
              "name": "background",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "vLink": {
              "name": "vLink",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "noWrap": {
              "extension": 1,
              "specs": "none",
              "ce-reactions": 1,
              "name": "noWrap",
              "type-original": "boolean",
              "content-attribute": "nowrap",
              "deprecated": 1,
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1
            },
            "onorientationchange": {
              "name": "onorientationchange",
              "type": "EventHandler",
              "event-handler": "orientationchange",
              "exposed": "Window",
              "deprecated": 1
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "bgProperties": {
              "extension": 1,
              "specs": "none",
              "name": "bgProperties",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "body"
          }
        ],
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "offline",
              "type": "Event",
              "bubbles": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "online",
              "type": "Event",
              "bubbles": 1
            }
          ]
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "HTMLElement",
        "implements": [
          "WindowEventHandlers"
        ],
        "comment": "Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements."
      },
      "CSS": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "name": "CSS",
        "static": 1,
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "supports": {
              "specs": "css-conditional",
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "property",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "value",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "name": "supports",
              "exposed": "Window",
              "static": 1
            },
            "escape": {
              "name": "escape",
              "override-signatures": [
                "escape(value: string): string"
              ],
              "static": 1
            }
          }
        },
        "extends": "Object",
        "comment": "Holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface."
      },
      "MutationEvent": {
        "specs": "uievents",
        "anonymous-methods": {
          "method": []
        },
        "name": "MutationEvent",
        "properties": {
          "property": {
            "attrChange": {
              "specs": "uievents",
              "name": "attrChange",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short",
              "read-only": 1
            },
            "newValue": {
              "specs": "uievents",
              "name": "newValue",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "attrName": {
              "specs": "uievents",
              "name": "attrName",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "prevValue": {
              "specs": "uievents",
              "name": "prevValue",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "relatedNode": {
              "specs": "uievents",
              "name": "relatedNode",
              "type-original": "Node",
              "exposed": "Window",
              "type": "Node",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "MODIFICATION": {
              "specs": "uievents",
              "value": "1",
              "exposed": "Window",
              "name": "MODIFICATION",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "REMOVAL": {
              "specs": "uievents",
              "value": "3",
              "exposed": "Window",
              "name": "REMOVAL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "ADDITION": {
              "specs": "uievents",
              "value": "2",
              "exposed": "Window",
              "name": "ADDITION",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {
            "initMutationEvent": {
              "signature": [
                {
                  "param-min-required": 8,
                  "type": "void",
                  "param": [
                    {
                      "name": "typeArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "canBubbleArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "cancelableArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "relatedNodeArg",
                      "type": "Node",
                      "type-original": "Node"
                    },
                    {
                      "name": "prevValueArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "newValueArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "attrNameArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "attrChangeArg",
                      "type": "unsigned short",
                      "type-original": "unsigned short"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "uievents",
              "exposed": "Window",
              "name": "initMutationEvent"
            }
          }
        },
        "extends": "Event",
        "comment": "Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes."
      },
      "AbortController": {
        "name": "AbortController",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "signal": {
              "name": "signal",
              "type": "AbortSignal",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the AbortSignal object associated with this object.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AbortController",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "A controller object that allows you to abort one or more DOM requests as and when desired."
      },
      "DragEvent": {
        "name": "DragEvent",
        "extends": "MouseEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "dataTransfer": {
              "name": "dataTransfer",
              "type": "DataTransfer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the DataTransfer object for the event.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DragEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "DragEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way."
      },
      "Crypto": {
        "name": "Crypto",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getRandomValues": {
              "name": "getRandomValues",
              "signature": [
                {
                  "type": "ArrayBufferView",
                  "param": [
                    {
                      "name": "array",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "getRandomValues<T extends Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null>(array: T): T"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "subtle": {
              "name": "subtle",
              "type": "SubtleCrypto",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives."
      },
      "ErrorEvent": {
        "name": "ErrorEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "message": {
              "name": "message",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "filename": {
              "name": "filename",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "lineno": {
              "name": "lineno",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "colno": {
              "name": "colno",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "error": {
              "name": "error",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ErrorEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ErrorEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Events providing information related to errors in scripts or in files.",
        "override-exposed": "Window Worker"
      },
      "SVGFilterElement": {
        "name": "SVGFilterElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "filterUnits": {
              "name": "filterUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "primitiveUnits": {
              "name": "primitiveUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "x": {
              "name": "x",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Provides access to the properties of <filter> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "filter"
          }
        ]
      },
      "SVGImageElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_shape_rect",
              "name": "clip"
            },
            {
              "enum-values": "visible hidden scroll auto inherit",
              "value-syntax": "enum",
              "name": "overflow"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGImageElement",
        "properties": {
          "property": {
            "width": {
              "specs": "svg2",
              "same-object": 1,
              "name": "width",
              "constant": 1,
              "content-attribute": "width",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "y": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y",
              "constant": 1,
              "content-attribute": "y",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "preserveAspectRatio": {
              "specs": "svg2",
              "same-object": 1,
              "name": "preserveAspectRatio",
              "constant": 1,
              "content-attribute": "preserveAspectRatio",
              "type-original": "SVGAnimatedPreserveAspectRatio",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_aspect_ratio",
              "type": "SVGAnimatedPreserveAspectRatio",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "x": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x",
              "constant": 1,
              "content-attribute": "x",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "height": {
              "specs": "svg2",
              "same-object": 1,
              "name": "height",
              "constant": 1,
              "content-attribute": "height",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "image"
          }
        ],
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "svg11",
              "name": "SVGAbort",
              "type": "Event",
              "bubbles": 1
            },
            {
              "dispatch": "sync",
              "specs": "svg11",
              "name": "SVGError",
              "type": "Event",
              "bubbles": 1
            }
          ]
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Corresponds to the <image> element."
      },
      "PerformanceTiming": {
        "name": "PerformanceTiming",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "navigationStart": {
              "name": "navigationStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "unloadEventStart": {
              "name": "unloadEventStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "unloadEventEnd": {
              "name": "unloadEventEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "redirectStart": {
              "name": "redirectStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "redirectEnd": {
              "name": "redirectEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "fetchStart": {
              "name": "fetchStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domainLookupStart": {
              "name": "domainLookupStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domainLookupEnd": {
              "name": "domainLookupEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "connectStart": {
              "name": "connectStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "connectEnd": {
              "name": "connectEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "secureConnectionStart": {
              "name": "secureConnectionStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "requestStart": {
              "name": "requestStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "responseStart": {
              "name": "responseStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "responseEnd": {
              "name": "responseEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domLoading": {
              "name": "domLoading",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domInteractive": {
              "name": "domInteractive",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domContentLoadedEventStart": {
              "name": "domContentLoadedEventStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domContentLoadedEventEnd": {
              "name": "domContentLoadedEventEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "domComplete": {
              "name": "domComplete",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "loadEventStart": {
              "name": "loadEventStart",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            },
            "loadEventEnd": {
              "name": "loadEventEnd",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property."
      },
      "WebGLFramebuffer": {
        "name": "WebGLFramebuffer",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents a collection of buffers that serve as a rendering destination."
      },
      "SVGPathSegArcRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegArcRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "sweepFlag": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "sweepFlag",
              "type": "boolean",
              "type-original": "boolean"
            },
            "r2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "r2",
              "type": "float",
              "type-original": "float"
            },
            "angle": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "angle",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "largeArcFlag": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "largeArcFlag",
              "type": "boolean",
              "type-original": "boolean"
            },
            "r1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "r1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "SpeechSynthesisVoice": {
        "name": "SpeechSynthesisVoice",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "voiceURI": {
              "name": "voiceURI",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "lang": {
              "name": "lang",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "localService": {
              "name": "localService",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "default": {
              "name": "default",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Web Speech API interface represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI."
      },
      "SVGStringList": {
        "name": "SVGStringList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "initialize": {
              "name": "initialize",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getItem": {
              "name": "getItem",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "insertItemBefore": {
              "name": "insertItemBefore",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMString"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceItem": {
              "name": "replaceItem",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMString"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeItem": {
              "name": "removeItem",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "appendItem": {
              "name": "appendItem",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "newItem",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfItems": {
              "name": "numberOfItems",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The SVGStringList defines a list of DOMString objects."
      },
      "CSSGroupingRule": {
        "constants": {
          "constant": {}
        },
        "specs": "css-conditional cssom",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "insertRule": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "rule",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "unsigned long"
                }
              ],
              "specs": "css-conditional cssom",
              "exposed": "Window",
              "name": "insertRule"
            },
            "deleteRule": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "css-conditional cssom",
              "exposed": "Window",
              "name": "deleteRule"
            }
          }
        },
        "name": "CSSGroupingRule",
        "extends": "CSSRule",
        "properties": {
          "property": {
            "cssRules": {
              "specs": "css-conditional cssom",
              "same-object": 1,
              "name": "cssRules",
              "type-original": "CSSRuleList",
              "exposed": "Window",
              "type": "CSSRuleList",
              "read-only": 1
            }
          }
        },
        "comment": "Any CSS at-rule that contains other rules nested within it."
      },
      "MutationRecord": {
        "name": "MutationRecord",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns \"attributes\" if it was an attribute mutation. \"characterData\" if it was a mutation to a CharacterData node. And \"childList\" if it was a mutation to the tree of nodes.\n */",
              "override-type": "MutationRecordType"
            },
            "target": {
              "name": "target",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the node the mutation affected, depending on the type. For \"attributes\", it is the element whose attribute changed. For \"characterData\", it is the CharacterData node. For \"childList\", it is the node whose children changed.\n */"
            },
            "addedNodes": {
              "name": "addedNodes",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Return the nodes added and removed respectively.\n */"
            },
            "removedNodes": {
              "name": "removedNodes",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Return the nodes added and removed respectively.\n */"
            },
            "previousSibling": {
              "name": "previousSibling",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.\n */"
            },
            "nextSibling": {
              "name": "nextSibling",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.\n */"
            },
            "attributeName": {
              "name": "attributeName",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the local name of the changed attribute, and null otherwise.\n */"
            },
            "attributeNamespace": {
              "name": "attributeNamespace",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the namespace of the changed attribute, and null otherwise.\n */"
            },
            "oldValue": {
              "name": "oldValue",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * The return value depends on type. For \"attributes\", it is the value of the changed attribute before the change. For \"characterData\", it is the data of the changed node before the change. For \"childList\", it is null.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback."
      },
      "ScopedCredential": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "ScopedCredential",
        "properties": {
          "property": {
            "id": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "id",
              "type": "ArrayBuffer",
              "type-original": "ArrayBuffer",
              "read-only": 1
            },
            "type": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "type",
              "type": "ScopedCredentialType",
              "type-original": "ScopedCredentialType",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1
      },
      "SVGLength": {
        "name": "SVGLength",
        "extends": "Object",
        "constants": {
          "constant": {
            "SVG_LENGTHTYPE_UNKNOWN": {
              "name": "SVG_LENGTHTYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_LENGTHTYPE_NUMBER": {
              "name": "SVG_LENGTHTYPE_NUMBER",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_LENGTHTYPE_PERCENTAGE": {
              "name": "SVG_LENGTHTYPE_PERCENTAGE",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_LENGTHTYPE_EMS": {
              "name": "SVG_LENGTHTYPE_EMS",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_LENGTHTYPE_EXS": {
              "name": "SVG_LENGTHTYPE_EXS",
              "type": "unsigned short",
              "value": "4"
            },
            "SVG_LENGTHTYPE_PX": {
              "name": "SVG_LENGTHTYPE_PX",
              "type": "unsigned short",
              "value": "5"
            },
            "SVG_LENGTHTYPE_CM": {
              "name": "SVG_LENGTHTYPE_CM",
              "type": "unsigned short",
              "value": "6"
            },
            "SVG_LENGTHTYPE_MM": {
              "name": "SVG_LENGTHTYPE_MM",
              "type": "unsigned short",
              "value": "7"
            },
            "SVG_LENGTHTYPE_IN": {
              "name": "SVG_LENGTHTYPE_IN",
              "type": "unsigned short",
              "value": "8"
            },
            "SVG_LENGTHTYPE_PT": {
              "name": "SVG_LENGTHTYPE_PT",
              "type": "unsigned short",
              "value": "9"
            },
            "SVG_LENGTHTYPE_PC": {
              "name": "SVG_LENGTHTYPE_PC",
              "type": "unsigned short",
              "value": "10"
            }
          }
        },
        "methods": {
          "method": {
            "newValueSpecifiedUnits": {
              "name": "newValueSpecifiedUnits",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "unitType",
                      "type": "unsigned short"
                    },
                    {
                      "name": "valueInSpecifiedUnits",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "convertToSpecifiedUnits": {
              "name": "convertToSpecifiedUnits",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "unitType",
                      "type": "unsigned short"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "unitType": {
              "name": "unitType",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "value": {
              "name": "value",
              "type": "float",
              "exposed": "Window"
            },
            "valueInSpecifiedUnits": {
              "name": "valueInSpecifiedUnits",
              "type": "float",
              "exposed": "Window"
            },
            "valueAsString": {
              "name": "valueAsString",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Correspond to the <length> basic data type."
      },
      "WebAuthentication": {
        "specs": "WD-webauthn-20160902",
        "anonymous-methods": {
          "method": []
        },
        "name": "WebAuthentication",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getAssertion": {
              "signature": [
                {
                  "subtype": {
                    "type": "WebAuthnAssertion"
                  },
                  "param-min-required": 1,
                  "type": "Promise",
                  "param": [
                    {
                      "name": "assertionChallenge",
                      "type": [
                        {
                          "type": [
                            {
                              "nullable": 1,
                              "type": "Int8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8ClampedArray"
                            },
                            {
                              "nullable": 1,
                              "type": "Float32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Float64Array"
                            },
                            {
                              "nullable": 1,
                              "type": "DataView"
                            }
                          ]
                        },
                        {
                          "nullable": 1,
                          "type": "ArrayBuffer"
                        }
                      ],
                      "type-original": "BufferSource"
                    },
                    {
                      "name": "options",
                      "type": "AssertionOptions",
                      "optional": 1,
                      "type-original": "AssertionOptions"
                    }
                  ],
                  "type-original": "Promise<WebAuthnAssertion>"
                }
              ],
              "specs": "WD-webauthn-20160902",
              "exposed": "Window",
              "name": "getAssertion"
            },
            "makeCredential": {
              "signature": [
                {
                  "subtype": {
                    "type": "ScopedCredentialInfo"
                  },
                  "param-min-required": 3,
                  "type": "Promise",
                  "param": [
                    {
                      "name": "accountInformation",
                      "type": "Account",
                      "type-original": "Account"
                    },
                    {
                      "subtype": {
                        "type": "ScopedCredentialParameters"
                      },
                      "name": "cryptoParameters",
                      "type": "sequence",
                      "type-original": "sequence<ScopedCredentialParameters>"
                    },
                    {
                      "name": "attestationChallenge",
                      "type": [
                        {
                          "type": [
                            {
                              "nullable": 1,
                              "type": "Int8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8ClampedArray"
                            },
                            {
                              "nullable": 1,
                              "type": "Float32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Float64Array"
                            },
                            {
                              "nullable": 1,
                              "type": "DataView"
                            }
                          ]
                        },
                        {
                          "nullable": 1,
                          "type": "ArrayBuffer"
                        }
                      ],
                      "type-original": "BufferSource"
                    },
                    {
                      "name": "options",
                      "type": "ScopedCredentialOptions",
                      "optional": 1,
                      "type-original": "ScopedCredentialOptions"
                    }
                  ],
                  "type-original": "Promise<ScopedCredentialInfo>"
                }
              ],
              "specs": "WD-webauthn-20160902",
              "exposed": "Window",
              "name": "makeCredential"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1
      },
      "DOMError": {
        "constants": {
          "constant": {}
        },
        "specs": "dom4",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "toString": {
              "signature": [
                {
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "specs": "dom4",
              "exposed": "Window",
              "name": "toString",
              "stringifier": 1
            }
          }
        },
        "name": "DOMError",
        "extends": "Object",
        "properties": {
          "property": {
            "name": {
              "specs": "dom4",
              "name": "name",
              "constant": 1,
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "stringifier": 1,
              "read-only": 1
            }
          }
        },
        "comment": "An error object that contains an error name."
      },
      "SVGPathSegCurvetoCubicRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoCubicRel",
        "properties": {
          "property": {
            "y1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y1",
              "type": "float",
              "type-original": "float"
            },
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x2",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "y2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y2",
              "type": "float",
              "type-original": "float"
            },
            "x1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "PannerNode": {
        "name": "PannerNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setPosition": {
              "name": "setPosition",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float"
                    },
                    {
                      "name": "y",
                      "type": "float"
                    },
                    {
                      "name": "z",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "setOrientation": {
              "name": "setOrientation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float"
                    },
                    {
                      "name": "y",
                      "type": "float"
                    },
                    {
                      "name": "z",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "panningModel": {
              "name": "panningModel",
              "type": "PanningModelType",
              "exposed": "Window"
            },
            "positionX": {
              "name": "positionX",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "positionY": {
              "name": "positionY",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "positionZ": {
              "name": "positionZ",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientationX": {
              "name": "orientationX",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientationY": {
              "name": "orientationY",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientationZ": {
              "name": "orientationZ",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "distanceModel": {
              "name": "distanceModel",
              "type": "DistanceModelType",
              "exposed": "Window"
            },
            "refDistance": {
              "name": "refDistance",
              "type": "double",
              "exposed": "Window"
            },
            "maxDistance": {
              "name": "maxDistance",
              "type": "double",
              "exposed": "Window"
            },
            "rolloffFactor": {
              "name": "rolloffFactor",
              "type": "double",
              "exposed": "Window"
            },
            "coneInnerAngle": {
              "name": "coneInnerAngle",
              "type": "double",
              "exposed": "Window"
            },
            "coneOuterAngle": {
              "name": "coneOuterAngle",
              "type": "double",
              "exposed": "Window"
            },
            "coneOuterGain": {
              "name": "coneOuterGain",
              "type": "double",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PannerNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "PannerOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!"
      },
      "OfflineAudioContext": {
        "name": "OfflineAudioContext",
        "extends": "BaseAudioContext",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "startRendering": {
              "name": "startRendering",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "AudioBuffer"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "resume": {
              "name": "resume",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "suspend": {
              "name": "suspend",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "suspendTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "oncomplete": {
              "name": "oncomplete",
              "type": "EventHandler",
              "event-handler": "complete",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "OfflineAudioContext",
              "param": [
                {
                  "name": "contextOptions",
                  "type": "OfflineAudioContextOptions"
                }
              ]
            },
            {
              "type": "OfflineAudioContext",
              "param": [
                {
                  "name": "numberOfChannels",
                  "type": "unsigned long"
                },
                {
                  "name": "length",
                  "type": "unsigned long"
                },
                {
                  "name": "sampleRate",
                  "type": "float"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
        "events": {
          "event": [
            {
              "name": "complete",
              "type": "OfflineAudioCompletionEvent"
            }
          ]
        }
      },
      "HTMLCanvasElement": {
        "name": "HTMLCanvasElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getContext": {
              "name": "getContext",
              "signature": [
                {
                  "type": "RenderingContext",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "contextId",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "additional-signatures": [
                "getContext(contextId: \"2d\", options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D | null",
                "getContext(contextId: \"bitmaprenderer\", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null",
                "getContext(contextId: \"webgl\", options?: WebGLContextAttributes): WebGLRenderingContext | null",
                "getContext(contextId: \"webgl2\", options?: WebGLContextAttributes): WebGL2RenderingContext | null"
              ],
              "comment": "/**\n * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\n * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\n */"
            },
            "toDataURL": {
              "name": "toDataURL",
              "signature": [
                {
                  "type": "USVString",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1
                    },
                    {
                      "name": "quality",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\n * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\n */"
            },
            "toBlob": {
              "name": "toBlob",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "callback",
                      "type": "BlobCallback"
                    },
                    {
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1
                    },
                    {
                      "name": "quality",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "transferControlToOffscreen": {
              "name": "transferControlToOffscreen",
              "signature": [
                {
                  "type": "OffscreenCanvas",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the width of a canvas element on a document.\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the height of a canvas element on a document.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
        "element": [
          {
            "name": "canvas"
          }
        ]
      },
      "Request": {
        "name": "Request",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clone": {
              "name": "clone",
              "signature": [
                {
                  "type": "Request",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "method": {
              "name": "method",
              "type": "ByteString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns request's HTTP method, which is \"GET\" by default.\n */"
            },
            "url": {
              "name": "url",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the URL of request as a string.\n */"
            },
            "headers": {
              "name": "headers",
              "type": "Headers",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n */"
            },
            "destination": {
              "name": "destination",
              "type": "RequestDestination",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n */"
            },
            "referrer": {
              "name": "referrer",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n */"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "ReferrerPolicy",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n */"
            },
            "mode": {
              "name": "mode",
              "type": "RequestMode",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n */"
            },
            "credentials": {
              "name": "credentials",
              "type": "RequestCredentials",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n */"
            },
            "cache": {
              "name": "cache",
              "type": "RequestCache",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n */"
            },
            "redirect": {
              "name": "redirect",
              "type": "RequestRedirect",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n */"
            },
            "integrity": {
              "name": "integrity",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n */"
            },
            "keepalive": {
              "name": "keepalive",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a boolean indicating whether or not request can outlive the global in which it was created.\n */"
            },
            "isReloadNavigation": {
              "name": "isReloadNavigation",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a boolean indicating whether or not request is for a reload navigation.\n */"
            },
            "isHistoryNavigation": {
              "name": "isHistoryNavigation",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a boolean indicating whether or not request is for a history navigation (a.k.a. back-foward navigation).\n */"
            },
            "signal": {
              "name": "signal",
              "type": "AbortSignal",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Request",
              "param": [
                {
                  "name": "input",
                  "type": "RequestInfo"
                },
                {
                  "name": "init",
                  "type": "RequestInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "Body"
        ],
        "comment": "This Fetch API interface represents a resource request."
      },
      "HTMLTitleElement": {
        "name": "HTMLTitleElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
        "element": [
          {
            "name": "title"
          }
        ]
      },
      "MSFIDOSignatureAssertion": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSFIDOSignatureAssertion",
        "properties": {
          "property": {
            "signature": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "signature",
              "type": "MSFIDOSignature",
              "type-original": "MSFIDOSignature",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "MSAssertion"
      },
      "HTMLStyleElement": {
        "name": "HTMLStyleElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "media": {
              "name": "media",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the media type.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Retrieves the CSS language in which the style sheet is written.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "LinkStyle"
        ],
        "comment": "A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
        "element": [
          {
            "name": "style"
          }
        ]
      },
      "RTCDtlsTransport": {
        "name": "RTCDtlsTransport",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getRemoteCertificates": {
              "name": "getRemoteCertificates",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "ArrayBuffer"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "transport": {
              "name": "transport",
              "type": "RTCIceTransport",
              "read-only": 1,
              "exposed": "Window"
            },
            "state": {
              "name": "state",
              "type": "RTCDtlsTransportState",
              "read-only": 1,
              "exposed": "Window"
            },
            "onstatechange": {
              "name": "onstatechange",
              "type": "EventHandler",
              "event-handler": "statechange",
              "exposed": "Window"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "statechange",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "RTCErrorEvent"
            }
          ]
        }
      },
      "SVGTransform": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTransform",
        "properties": {
          "property": {
            "angle": {
              "specs": "svg2",
              "name": "angle",
              "type-original": "float",
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "type": {
              "specs": "svg2",
              "name": "type",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short",
              "read-only": 1
            },
            "matrix": {
              "specs": "svg2",
              "same-object": 1,
              "name": "matrix",
              "type-original": "SVGMatrix",
              "exposed": "Window",
              "type": "SVGMatrix",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "SVG_TRANSFORM_SKEWX": {
              "specs": "svg2",
              "value": "5",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_SKEWX",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_SCALE": {
              "specs": "svg2",
              "value": "3",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_SCALE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_TRANSLATE": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_TRANSLATE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_MATRIX": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_MATRIX",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_ROTATE": {
              "specs": "svg2",
              "value": "4",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_ROTATE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_TRANSFORM_SKEWY": {
              "specs": "svg2",
              "value": "6",
              "exposed": "Window",
              "name": "SVG_TRANSFORM_SKEWY",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {
            "setScale": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "sx",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "sy",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setScale"
            },
            "setTranslate": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "tx",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "ty",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setTranslate"
            },
            "setMatrix": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "matrix",
                      "type": "SVGMatrix",
                      "type-original": "SVGMatrix"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setMatrix"
            },
            "setSkewY": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "angle",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setSkewY"
            },
            "setRotate": {
              "signature": [
                {
                  "param-min-required": 3,
                  "type": "void",
                  "param": [
                    {
                      "name": "angle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cx",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cy",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setRotate"
            },
            "setSkewX": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "angle",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "setSkewX"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "comment": "SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute."
      },
      "WebGLShader": {
        "name": "WebGLShader",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders."
      },
      "IIRFilterNode": {
        "name": "IIRFilterNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getFrequencyResponse": {
              "name": "getFrequencyResponse",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "frequencyHz",
                      "type": "Float32Array"
                    },
                    {
                      "name": "magResponse",
                      "type": "Float32Array"
                    },
                    {
                      "name": "phaseResponse",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "IIRFilterNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "IIRFilterOptions"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed."
      },
      "UIEvent": {
        "name": "UIEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "view": {
              "name": "view",
              "type": "Window",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "detail": {
              "name": "detail",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "which": {
              "name": "which",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "UIEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "UIEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Simple user interface events."
      },
      "WebGLBuffer": {
        "name": "WebGLBuffer",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors."
      },
      "SVGPathSeg": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSeg",
        "properties": {
          "property": {
            "pathSegType": {
              "pure": 1,
              "specs": "svg11",
              "name": "pathSegType",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short",
              "read-only": 1
            },
            "pathSegTypeAsLetter": {
              "pure": 1,
              "specs": "svg11",
              "name": "pathSegTypeAsLetter",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS": {
              "specs": "svg11",
              "value": "16",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_VERTICAL_REL": {
              "specs": "svg11",
              "value": "15",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_VERTICAL_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_MOVETO_REL": {
              "specs": "svg11",
              "value": "3",
              "exposed": "Window",
              "name": "PATHSEG_MOVETO_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_QUADRATIC_REL": {
              "specs": "svg11",
              "value": "9",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_QUADRATIC_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_CUBIC_ABS": {
              "specs": "svg11",
              "value": "6",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_CUBIC_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_HORIZONTAL_ABS": {
              "specs": "svg11",
              "value": "12",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_HORIZONTAL_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_QUADRATIC_ABS": {
              "specs": "svg11",
              "value": "8",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_QUADRATIC_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_ABS": {
              "specs": "svg11",
              "value": "4",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CLOSEPATH": {
              "specs": "svg11",
              "value": "1",
              "exposed": "Window",
              "name": "PATHSEG_CLOSEPATH",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_HORIZONTAL_REL": {
              "specs": "svg11",
              "value": "13",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_HORIZONTAL_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_CUBIC_SMOOTH_REL": {
              "specs": "svg11",
              "value": "17",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_REL": {
              "specs": "svg11",
              "value": "5",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS": {
              "specs": "svg11",
              "value": "18",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_ARC_REL": {
              "specs": "svg11",
              "value": "11",
              "exposed": "Window",
              "name": "PATHSEG_ARC_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_CUBIC_REL": {
              "specs": "svg11",
              "value": "7",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_CUBIC_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_UNKNOWN": {
              "specs": "svg11",
              "value": "0",
              "exposed": "Window",
              "name": "PATHSEG_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_LINETO_VERTICAL_ABS": {
              "specs": "svg11",
              "value": "14",
              "exposed": "Window",
              "name": "PATHSEG_LINETO_VERTICAL_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_ARC_ABS": {
              "specs": "svg11",
              "value": "10",
              "exposed": "Window",
              "name": "PATHSEG_ARC_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_MOVETO_ABS": {
              "specs": "svg11",
              "value": "2",
              "exposed": "Window",
              "name": "PATHSEG_MOVETO_ABS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL": {
              "specs": "svg11",
              "value": "19",
              "exposed": "Window",
              "name": "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "IDBIndex": {
        "name": "IDBIndex",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the value of the first record matching the given key or key range in query.\n * \n * If successful, request's result will be the value, or undefined if there was no matching record.\n */",
              "override-signatures": [
                "get(key: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>"
              ]
            },
            "getKey": {
              "name": "getKey",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the key of the first record matching the given key or key range in query.\n * \n * If successful, request's result will be the key, or undefined if there was no matching record.\n */",
              "override-signatures": [
                "getKey(key: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>"
              ]
            },
            "getAll": {
              "name": "getAll",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "count",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n * \n * If successful, request's result will be an Array of the values.\n */",
              "override-signatures": [
                "getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>"
              ]
            },
            "getAllKeys": {
              "name": "getAllKeys",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "count",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n * \n * If successful, request's result will be an Array of the keys.\n */",
              "override-signatures": [
                "getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>"
              ]
            },
            "count": {
              "name": "count",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the number of records matching the given key or key range in query.\n * \n * If successful, request's result will be the count.\n */",
              "override-signatures": [
                "count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>"
              ]
            },
            "openCursor": {
              "name": "openCursor",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "direction",
                      "type": "IDBCursorDirection",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.\n * \n * If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.\n */",
              "override-signatures": [
                "openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>"
              ]
            },
            "openKeyCursor": {
              "name": "openKeyCursor",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "direction",
                      "type": "IDBCursorDirection",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.\n * \n * If successful, request's result will be an IDBCursor, or null if there were no matching records.\n */",
              "override-signatures": [
                "openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the name of the index.\n */"
            },
            "objectStore": {
              "name": "objectStore",
              "type": "IDBObjectStore",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the IDBObjectStore the index belongs to.\n */"
            },
            "keyPath": {
              "name": "keyPath",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "override-type": "string | string[]"
            },
            "multiEntry": {
              "name": "multiEntry",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "unique": {
              "name": "unique",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data."
      },
      "SVGNumber": {
        "name": "SVGNumber",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "float",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <number> basic data type."
      },
      "CSSSupportsRule": {
        "constants": {
          "constant": {}
        },
        "specs": "css-conditional",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSSupportsRule",
        "extends": "CSSConditionRule",
        "properties": {
          "property": {}
        },
        "comment": "An object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE)."
      },
      "ClipboardEvent": {
        "name": "ClipboardEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clipboardData": {
              "name": "clipboardData",
              "type": "DataTransfer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ClipboardEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ClipboardEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events providing information related to modification of the clipboard, that is cut, copy, and paste events."
      },
      "Text": {
        "name": "Text",
        "extends": "CharacterData",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "splitText": {
              "name": "splitText",
              "signature": [
                {
                  "type": "Text",
                  "param": [
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Splits data at the given offset and returns the remainder as Text node.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "wholeText": {
              "name": "wholeText",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the combined data of all direct Text node siblings.\n */"
            },
            "assignedSlot": {
              "name": "assignedSlot",
              "read-only": 1,
              "override-type": "HTMLSlotElement | null"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Text",
              "param": [
                {
                  "name": "data",
                  "type": "DOMString",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "Slotable"
        ],
        "comment": "The textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children."
      },
      "SVGAnimatedRect": {
        "name": "SVGAnimatedRect",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "DOMRect",
              "read-only": 1,
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "DOMRectReadOnly",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of basic SVGRect which can be animated."
      },
      "ByteLengthQueuingStrategy": {
        "name": "ByteLengthQueuingStrategy",
        "extends": "QueuingStrategy<ArrayBufferView>",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "size": {
              "name": "size",
              "signature": [
                {
                  "type": "double",
                  "param": [
                    {
                      "name": "chunk",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "highWaterMark": {
              "name": "highWaterMark",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ByteLengthQueuingStrategy",
              "param": [
                {
                  "name": "options",
                  "type": "any"
                }
              ]
            }
          ],
          "override-signatures": [
            "new(options: { highWaterMark: number }): ByteLengthQueuingStrategy"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.",
        "override-exposed": "Window Worker"
      },
      "CSSNamespaceRule": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSNamespaceRule",
        "extends": "CSSRule",
        "properties": {
          "property": {
            "namespaceURI": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "namespaceURI",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "prefix": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "prefix",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "comment": "An object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE)."
      },
      "DataCue": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "DataCue",
        "properties": {
          "property": {
            "data": {
              "specs": "html5",
              "exposed": "Window",
              "name": "data",
              "type": "ArrayBuffer",
              "tags": "Captions",
              "type-original": "ArrayBuffer"
            }
          }
        },
        "tags": "Captions",
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "TextTrackCue"
      },
      "HTMLUnknownElement": {
        "name": "HTMLUnknownElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods."
      },
      "MediaSource": {
        "name": "MediaSource",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addSourceBuffer": {
              "name": "addSourceBuffer",
              "signature": [
                {
                  "type": "SourceBuffer",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeSourceBuffer": {
              "name": "removeSourceBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sourceBuffer",
                      "type": "SourceBuffer"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "endOfStream": {
              "name": "endOfStream",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "EndOfStreamError",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setLiveSeekableRange": {
              "name": "setLiveSeekableRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "start",
                      "type": "double"
                    },
                    {
                      "name": "end",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "clearLiveSeekableRange": {
              "name": "clearLiveSeekableRange",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "isTypeSupported": {
              "name": "isTypeSupported",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "sourceBuffers": {
              "name": "sourceBuffers",
              "type": "SourceBufferList",
              "read-only": 1,
              "exposed": "Window"
            },
            "activeSourceBuffers": {
              "name": "activeSourceBuffers",
              "type": "SourceBufferList",
              "read-only": 1,
              "exposed": "Window"
            },
            "readyState": {
              "name": "readyState",
              "type": "ReadyState",
              "read-only": 1,
              "exposed": "Window"
            },
            "duration": {
              "name": "duration",
              "type": "unrestricted double",
              "exposed": "Window"
            },
            "onsourceopen": {
              "name": "onsourceopen",
              "type": "EventHandler",
              "event-handler": "sourceopen",
              "exposed": "Window"
            },
            "onsourceended": {
              "name": "onsourceended",
              "type": "EventHandler",
              "event-handler": "sourceended",
              "exposed": "Window"
            },
            "onsourceclose": {
              "name": "onsourceclose",
              "type": "EventHandler",
              "event-handler": "sourceclose",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaSource",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent."
      },
      "PositionError": {
        "name": "PositionError",
        "extends": "Object",
        "constants": {
          "constant": {
            "PERMISSION_DENIED": {
              "name": "PERMISSION_DENIED",
              "type": "unsigned short",
              "value": "1"
            },
            "POSITION_UNAVAILABLE": {
              "name": "POSITION_UNAVAILABLE",
              "type": "unsigned short",
              "value": "2"
            },
            "TIMEOUT": {
              "name": "TIMEOUT",
              "type": "unsigned short",
              "value": "3"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "code": {
              "name": "code",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "message": {
              "name": "message",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The reason of an error occurring when using the geolocating device."
      },
      "HTMLTableCellElement": {
        "name": "HTMLTableCellElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "colSpan": {
              "name": "colSpan",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number columns in the table that the object should span.\n */"
            },
            "rowSpan": {
              "name": "rowSpan",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves how many rows in a table the cell should span.\n */"
            },
            "headers": {
              "name": "headers",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a list of header cells that provide information for the object.\n */"
            },
            "cellIndex": {
              "name": "cellIndex",
              "type": "long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the position of the object in the cells collection of a row.\n */"
            },
            "scope": {
              "name": "scope",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the group of cells in a table to which the object's information applies.\n */"
            },
            "abbr": {
              "name": "abbr",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves abbreviated text for the object.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "axis": {
              "name": "axis",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\n */"
            },
            "height": {
              "name": "height",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "ch": {
              "name": "ch",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "chOff": {
              "name": "chOff",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "noWrap": {
              "name": "noWrap",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether the browser automatically performs wordwrap.\n */"
            },
            "vAlign": {
              "name": "vAlign",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
        "element": [
          {
            "name": "td"
          },
          {
            "name": "th"
          }
        ]
      },
      "VideoTrackList": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "VideoTrackList",
        "properties": {
          "property": {
            "onremovetrack": {
              "specs": "html5",
              "name": "onremovetrack",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "removetrack"
            },
            "onchange": {
              "specs": "html5",
              "name": "onchange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "change"
            },
            "selectedIndex": {
              "specs": "html5",
              "exposed": "Window",
              "name": "selectedIndex",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "length": {
              "specs": "html5",
              "exposed": "Window",
              "name": "length",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "onaddtrack": {
              "specs": "html5",
              "name": "onaddtrack",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "addtrack"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "addtrack",
              "type": "TrackEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "removetrack",
              "type": "TrackEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "change",
              "type": "Event",
              "skips-window": 1
            }
          ]
        },
        "methods": {
          "method": {
            "getTrackById": {
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 1,
                  "type": "VideoTrack",
                  "param": [
                    {
                      "name": "id",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "VideoTrack?"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "getTrackById"
            },
            "item": {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "VideoTrack",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "VideoTrack"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "item"
            }
          }
        },
        "exposed": "Window",
        "extends": "EventTarget",
        "comment": "Used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list."
      },
      "SVGElementInstance": {
        "constants": {
          "constant": {}
        },
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "SVGElementInstance",
        "extends": "EventTarget",
        "properties": {
          "property": {
            "correspondingUseElement": {
              "specs": "svg11",
              "name": "correspondingUseElement",
              "type-original": "SVGUseElement",
              "exposed": "Window",
              "type": "SVGUseElement",
              "read-only": 1
            },
            "correspondingElement": {
              "specs": "svg11",
              "name": "correspondingElement",
              "type-original": "SVGElement",
              "exposed": "Window",
              "type": "SVGElement",
              "read-only": 1
            }
          }
        }
      },
      "MediaKeyMessageEvent": {
        "name": "MediaKeyMessageEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "messageType": {
              "name": "messageType",
              "type": "MediaKeyMessageType",
              "read-only": 1,
              "exposed": "Window"
            },
            "message": {
              "name": "message",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaKeyMessageEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaKeyMessageEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This EncryptedMediaExtensions API interface contains the content and related data when the content decryption module generates a message for the session."
      },
      "GamepadButton": {
        "name": "GamepadButton",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "pressed": {
              "name": "pressed",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "touched": {
              "name": "touched",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "value": {
              "name": "value",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device."
      },
      "StyleSheetList": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "legacy-array-class": 1,
        "name": "StyleSheetList",
        "properties": {
          "property": {
            "length": {
              "specs": "cssom",
              "name": "length",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "specs": "cssom",
              "name": "item",
              "getter": 1,
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 1,
                  "type": "StyleSheet",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "StyleSheet?"
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "comment": "A list of StyleSheet."
      },
      "CustomEvent": {
        "name": "CustomEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "initCustomEvent": {
              "name": "initCustomEvent",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    },
                    {
                      "name": "bubbles",
                      "type": "boolean",
                      "optional": 1
                    },
                    {
                      "name": "cancelable",
                      "type": "boolean",
                      "optional": 1
                    },
                    {
                      "name": "detail",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: T): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "detail": {
              "name": "detail",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns any custom data event was created with. Typically used for synthetic events.\n */",
              "override-type": "T"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "CustomEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "CustomEventInit",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new<T>(typeArg: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "type-parameters": [
          {
            "name": "T",
            "default": "any"
          }
        ]
      },
      "ChannelSplitterNode": {
        "name": "ChannelSplitterNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ChannelSplitterNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "ChannelSplitterOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel."
      },
      "HTMLTextAreaElement": {
        "name": "HTMLTextAreaElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            },
            "select": {
              "name": "select",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Highlights the input area of a form element.\n */"
            },
            "setRangeText": {
              "name": "setRangeText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "replacement",
                      "type": "DOMString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "replacement",
                      "type": "DOMString"
                    },
                    {
                      "name": "start",
                      "type": "unsigned long"
                    },
                    {
                      "name": "end",
                      "type": "unsigned long"
                    },
                    {
                      "name": "selectionMode",
                      "type": "SelectionMode",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setSelectionRange": {
              "name": "setSelectionRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "start",
                      "type": "unsigned long"
                    },
                    {
                      "name": "end",
                      "type": "unsigned long"
                    },
                    {
                      "name": "direction",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setSelectionRange(start: number, end: number, direction?: \"forward\" | \"backward\" | \"none\"): void"
              ],
              "comment": "/**\n * Sets the start and end positions of a selection in a text field.\n * @param start The offset into the text field for the start of the selection.\n * @param end The offset into the text field for the end of the selection.\n * @param direction The direction in which the selection is performed.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "autocomplete": {
              "name": "autocomplete",
              "type": "DOMString",
              "exposed": "Window"
            },
            "autofocus": {
              "name": "autofocus",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n */"
            },
            "cols": {
              "name": "cols",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "dirName": {
              "name": "dirName",
              "type": "DOMString",
              "exposed": "Window"
            },
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "maxLength": {
              "name": "maxLength",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n */"
            },
            "minLength": {
              "name": "minLength",
              "type": "long",
              "exposed": "Window",
              "override-type": "number"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "placeholder": {
              "name": "placeholder",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n */"
            },
            "readOnly": {
              "name": "readOnly",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value indicated whether the content of the object is read-only.\n */"
            },
            "required": {
              "name": "required",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
            },
            "rows": {
              "name": "rows",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
            },
            "wrap": {
              "name": "wrap",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves how to handle wordwrapping in the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the type of control.\n */"
            },
            "defaultValue": {
              "name": "defaultValue",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the initial contents of the object.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Retrieves or sets the text in the entry field of the textArea element.\n */"
            },
            "textLength": {
              "name": "textLength",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            },
            "selectionStart": {
              "name": "selectionStart",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the starting position or offset of a text selection.\n */"
            },
            "selectionEnd": {
              "name": "selectionEnd",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the end position or offset of a text selection.\n */"
            },
            "selectionDirection": {
              "name": "selectionDirection",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods for manipulating the layout and presentation of <textarea> elements.",
        "element": [
          {
            "name": "textarea"
          }
        ]
      },
      "RTCIceTransport": {
        "name": "RTCIceTransport",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getLocalCandidates": {
              "name": "getLocalCandidates",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCIceCandidate"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getRemoteCandidates": {
              "name": "getRemoteCandidates",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCIceCandidate"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getSelectedCandidatePair": {
              "name": "getSelectedCandidatePair",
              "signature": [
                {
                  "type": "RTCIceCandidatePair",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getLocalParameters": {
              "name": "getLocalParameters",
              "signature": [
                {
                  "type": "RTCIceParameters",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getRemoteParameters": {
              "name": "getRemoteParameters",
              "signature": [
                {
                  "type": "RTCIceParameters",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "role": {
              "name": "role",
              "type": "RTCIceRole",
              "read-only": 1,
              "exposed": "Window"
            },
            "component": {
              "name": "component",
              "type": "RTCIceComponent",
              "read-only": 1,
              "exposed": "Window"
            },
            "state": {
              "name": "state",
              "type": "RTCIceTransportState",
              "read-only": 1,
              "exposed": "Window"
            },
            "gatheringState": {
              "name": "gatheringState",
              "type": "RTCIceGathererState",
              "read-only": 1,
              "exposed": "Window"
            },
            "onstatechange": {
              "name": "onstatechange",
              "type": "EventHandler",
              "event-handler": "statechange",
              "exposed": "Window"
            },
            "ongatheringstatechange": {
              "name": "ongatheringstatechange",
              "type": "EventHandler",
              "event-handler": "gatheringstatechange",
              "exposed": "Window"
            },
            "onselectedcandidatepairchange": {
              "name": "onselectedcandidatepairchange",
              "type": "EventHandler",
              "event-handler": "selectedcandidatepairchange",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to information about the ICE transport layer over which the data is being sent and received."
      },
      "RTCPeerConnection": {
        "name": "RTCPeerConnection",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createOffer": {
              "name": "createOffer",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "successCallback",
                      "type": "RTCSessionDescriptionCallback"
                    },
                    {
                      "name": "failureCallback",
                      "type": "RTCPeerConnectionErrorCallback"
                    },
                    {
                      "name": "options",
                      "type": "RTCOfferOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>"
              ]
            },
            "createAnswer": {
              "name": "createAnswer",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "successCallback",
                      "type": "RTCSessionDescriptionCallback"
                    },
                    {
                      "name": "failureCallback",
                      "type": "RTCPeerConnectionErrorCallback"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "createAnswer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>"
              ]
            },
            "setLocalDescription": {
              "name": "setLocalDescription",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "description",
                      "type": "RTCSessionDescriptionInit"
                    },
                    {
                      "name": "successCallback",
                      "type": "VoidFunction"
                    },
                    {
                      "name": "failureCallback",
                      "type": "RTCPeerConnectionErrorCallback"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setLocalDescription(description: RTCSessionDescriptionInit): Promise<void>"
              ]
            },
            "setRemoteDescription": {
              "name": "setRemoteDescription",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "description",
                      "type": "RTCSessionDescriptionInit"
                    },
                    {
                      "name": "successCallback",
                      "type": "VoidFunction"
                    },
                    {
                      "name": "failureCallback",
                      "type": "RTCPeerConnectionErrorCallback"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>"
              ]
            },
            "addIceCandidate": {
              "name": "addIceCandidate",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "candidate",
                      "type": "RTCIceCandidateInit"
                    },
                    {
                      "name": "successCallback",
                      "type": "VoidFunction"
                    },
                    {
                      "name": "failureCallback",
                      "type": "RTCPeerConnectionErrorCallback"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "addIceCandidate(candidate: RTCIceCandidateInit | RTCIceCandidate): Promise<void>"
              ]
            },
            "getDefaultIceServers": {
              "name": "getDefaultIceServers",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCIceServer"
                  },
                  "param": []
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "getConfiguration": {
              "name": "getConfiguration",
              "signature": [
                {
                  "type": "RTCConfiguration",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setConfiguration": {
              "name": "setConfiguration",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "configuration",
                      "type": "RTCConfiguration"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setIdentityProvider": {
              "name": "setIdentityProvider",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "provider",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": "RTCIdentityProviderOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getIdentityAssertion": {
              "name": "getIdentityAssertion",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "DOMString"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "generateCertificate": {
              "name": "generateCertificate",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "RTCCertificate"
                  },
                  "param": [
                    {
                      "name": "keygenAlgorithm",
                      "type": "AlgorithmIdentifier"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "getSenders": {
              "name": "getSenders",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCRtpSender"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getReceivers": {
              "name": "getReceivers",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCRtpReceiver"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getTransceivers": {
              "name": "getTransceivers",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCRtpTransceiver"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "addTrack": {
              "name": "addTrack",
              "signature": [
                {
                  "type": "RTCRtpSender",
                  "param": [
                    {
                      "name": "track",
                      "type": "MediaStreamTrack"
                    },
                    {
                      "name": "streams",
                      "type": "MediaStream",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeTrack": {
              "name": "removeTrack",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sender",
                      "type": "RTCRtpSender"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "addTransceiver": {
              "name": "addTransceiver",
              "signature": [
                {
                  "type": "RTCRtpTransceiver",
                  "param": [
                    {
                      "name": "trackOrKind",
                      "type": [
                        {
                          "type": "MediaStreamTrack"
                        },
                        {
                          "type": "DOMString"
                        }
                      ]
                    },
                    {
                      "name": "init",
                      "type": "RTCRtpTransceiverInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createDataChannel": {
              "name": "createDataChannel",
              "signature": [
                {
                  "type": "RTCDataChannel",
                  "param": [
                    {
                      "name": "label",
                      "type": "USVString"
                    },
                    {
                      "name": "dataChannelDict",
                      "type": "RTCDataChannelInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getStats": {
              "name": "getStats",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "RTCStatsReport"
                  },
                  "param": [
                    {
                      "name": "selector",
                      "type": "MediaStreamTrack",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "localDescription": {
              "name": "localDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "currentLocalDescription": {
              "name": "currentLocalDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "pendingLocalDescription": {
              "name": "pendingLocalDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "remoteDescription": {
              "name": "remoteDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "currentRemoteDescription": {
              "name": "currentRemoteDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "pendingRemoteDescription": {
              "name": "pendingRemoteDescription",
              "type": "RTCSessionDescription",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "signalingState": {
              "name": "signalingState",
              "type": "RTCSignalingState",
              "read-only": 1,
              "exposed": "Window"
            },
            "iceGatheringState": {
              "name": "iceGatheringState",
              "type": "RTCIceGatheringState",
              "read-only": 1,
              "exposed": "Window"
            },
            "iceConnectionState": {
              "name": "iceConnectionState",
              "type": "RTCIceConnectionState",
              "read-only": 1,
              "exposed": "Window"
            },
            "connectionState": {
              "name": "connectionState",
              "type": "RTCPeerConnectionState",
              "read-only": 1,
              "exposed": "Window"
            },
            "canTrickleIceCandidates": {
              "name": "canTrickleIceCandidates",
              "type": "boolean",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "onnegotiationneeded": {
              "name": "onnegotiationneeded",
              "type": "EventHandler",
              "event-handler": "negotiationneeded",
              "exposed": "Window"
            },
            "onicecandidate": {
              "name": "onicecandidate",
              "type": "EventHandler",
              "event-handler": "icecandidate",
              "exposed": "Window"
            },
            "onicecandidateerror": {
              "name": "onicecandidateerror",
              "type": "EventHandler",
              "event-handler": "icecandidateerror",
              "exposed": "Window"
            },
            "onsignalingstatechange": {
              "name": "onsignalingstatechange",
              "type": "EventHandler",
              "event-handler": "signalingstatechange",
              "exposed": "Window"
            },
            "oniceconnectionstatechange": {
              "name": "oniceconnectionstatechange",
              "type": "EventHandler",
              "event-handler": "iceconnectionstatechange",
              "exposed": "Window"
            },
            "onicegatheringstatechange": {
              "name": "onicegatheringstatechange",
              "type": "EventHandler",
              "event-handler": "icegatheringstatechange",
              "exposed": "Window"
            },
            "onconnectionstatechange": {
              "name": "onconnectionstatechange",
              "type": "EventHandler",
              "event-handler": "connectionstatechange",
              "exposed": "Window"
            },
            "peerIdentity": {
              "name": "peerIdentity",
              "type": "Promise",
              "subtype": {
                "type": "RTCIdentityAssertion"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "idpLoginUrl": {
              "name": "idpLoginUrl",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "idpErrorInfo": {
              "name": "idpErrorInfo",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "ontrack": {
              "name": "ontrack",
              "type": "EventHandler",
              "event-handler": "track",
              "exposed": "Window"
            },
            "sctp": {
              "name": "sctp",
              "type": "RTCSctpTransport",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "ondatachannel": {
              "name": "ondatachannel",
              "type": "EventHandler",
              "event-handler": "datachannel",
              "exposed": "Window"
            },
            "onstatsended": {
              "name": "onstatsended",
              "type": "EventHandler",
              "event-handler": "statsended",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCPeerConnection",
              "param": [
                {
                  "name": "configuration",
                  "type": "RTCConfiguration",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.",
        "events": {
          "event": [
            {
              "name": "track",
              "type": "RTCTrackEvent"
            },
            {
              "name": "negotiationneeded",
              "type": "Event"
            },
            {
              "name": "signalingstatechange",
              "type": "Event"
            },
            {
              "name": "iceconnectionstatechange",
              "type": "Event"
            },
            {
              "name": "icegatheringstatechange",
              "type": "Event"
            },
            {
              "name": "icecandidate",
              "type": "RTCPeerConnectionIceEvent"
            },
            {
              "name": "connectionstatechange",
              "type": "Event"
            },
            {
              "name": "icecandidateerror",
              "type": "RTCPeerConnectionIceErrorEvent"
            },
            {
              "name": "datachannel",
              "type": "RTCDataChannelEvent"
            },
            {
              "name": "isolationchange",
              "type": "Event"
            },
            {
              "name": "statsended",
              "type": "RTCStatsEvent"
            }
          ]
        }
      },
      "History": {
        "name": "History",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "go": {
              "name": "go",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "delta",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "back": {
              "name": "back",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "forward": {
              "name": "forward",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "pushState": {
              "name": "pushState",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "any"
                    },
                    {
                      "name": "title",
                      "type": "DOMString"
                    },
                    {
                      "name": "url",
                      "type": "USVString",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceState": {
              "name": "replaceState",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "any"
                    },
                    {
                      "name": "title",
                      "type": "DOMString"
                    },
                    {
                      "name": "url",
                      "type": "USVString",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "scrollRestoration": {
              "name": "scrollRestoration",
              "type": "ScrollRestoration",
              "exposed": "Window"
            },
            "state": {
              "name": "state",
              "type": "any",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in."
      },
      "TimeRanges": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "end": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "double",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "double"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "end"
            },
            "start": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "double",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "double"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "start"
            }
          }
        },
        "name": "TimeRanges",
        "extends": "Object",
        "properties": {
          "property": {
            "length": {
              "specs": "html5",
              "name": "length",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "comment": "Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements."
      },
      "SVGPathSegCurvetoQuadraticAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoQuadraticAbs",
        "properties": {
          "property": {
            "y1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y1",
              "type": "float",
              "type-original": "float"
            },
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "x1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "webkitRTCPeerConnection": {
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "param-min-required": 1,
              "type": "webkitRTCPeerConnection",
              "param": [
                {
                  "name": "configuration",
                  "type": "RTCConfiguration",
                  "type-original": "RTCConfiguration"
                }
              ],
              "type-original": "webkitRTCPeerConnection"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "webkitRTCPeerConnection",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "RTCPeerConnection"
      },
      "ServiceWorkerRegistration": {
        "name": "ServiceWorkerRegistration",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "update": {
              "name": "update",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "unregister": {
              "name": "unregister",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "showNotification": {
              "name": "showNotification",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "title",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": "NotificationOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getNotifications": {
              "name": "getNotifications",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "sequence",
                    "subtype": {
                      "type": "Notification"
                    }
                  },
                  "param": [
                    {
                      "name": "filter",
                      "type": "GetNotificationOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "installing": {
              "name": "installing",
              "type": "ServiceWorker",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "waiting": {
              "name": "waiting",
              "type": "ServiceWorker",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "active": {
              "name": "active",
              "type": "ServiceWorker",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "navigationPreload": {
              "name": "navigationPreload",
              "type": "NavigationPreloadManager",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "scope": {
              "name": "scope",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "updateViaCache": {
              "name": "updateViaCache",
              "type": "ServiceWorkerUpdateViaCache",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "onupdatefound": {
              "name": "onupdatefound",
              "type": "EventHandler",
              "event-handler": "updatefound",
              "exposed": "Window Worker"
            },
            "pushManager": {
              "name": "pushManager",
              "type": "PushManager",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "sync": {
              "name": "sync",
              "type": "SyncManager",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin."
      },
      "WebGLUniformLocation": {
        "name": "WebGLUniformLocation",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents the location of a uniform variable in a shader program."
      },
      "HTMLModElement": {
        "name": "HTMLModElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cite": {
              "name": "cite",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves reference information about the object.\n */"
            },
            "dateTime": {
              "name": "dateTime",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the date and time of a modification to the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
        "element": [
          {
            "name": "del"
          },
          {
            "name": "ins"
          }
        ]
      },
      "WEBGL_compressed_texture_s3tc": {
        "name": "WEBGL_compressed_texture_s3tc",
        "extends": "Object",
        "constants": {
          "constant": {
            "COMPRESSED_RGB_S3TC_DXT1_EXT": {
              "name": "COMPRESSED_RGB_S3TC_DXT1_EXT",
              "type": "GLenum",
              "value": "0x83F0"
            },
            "COMPRESSED_RGBA_S3TC_DXT1_EXT": {
              "name": "COMPRESSED_RGBA_S3TC_DXT1_EXT",
              "type": "GLenum",
              "value": "0x83F1"
            },
            "COMPRESSED_RGBA_S3TC_DXT3_EXT": {
              "name": "COMPRESSED_RGBA_S3TC_DXT3_EXT",
              "type": "GLenum",
              "value": "0x83F2"
            },
            "COMPRESSED_RGBA_S3TC_DXT5_EXT": {
              "name": "COMPRESSED_RGBA_S3TC_DXT5_EXT",
              "type": "GLenum",
              "value": "0x83F3"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.",
        "override-exposed": "Window Worker"
      },
      "SVGUseElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "clip-rule"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial",
              "value-syntax": "enum",
              "name": "pointer-events"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGUseElement",
        "properties": {
          "property": {
            "width": {
              "specs": "svg2",
              "name": "width",
              "constant": 1,
              "content-attribute": "width",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "y": {
              "specs": "svg2",
              "name": "y",
              "constant": 1,
              "content-attribute": "y",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "animatedInstanceRoot": {
              "specs": "svg2",
              "name": "animatedInstanceRoot",
              "constant": 1,
              "type-original": "SVGElementInstance?",
              "nullable": 1,
              "exposed": "Window",
              "type": "SVGElementInstance",
              "read-only": 1
            },
            "instanceRoot": {
              "specs": "svg2",
              "name": "instanceRoot",
              "constant": 1,
              "type-original": "SVGElementInstance?",
              "nullable": 1,
              "exposed": "Window",
              "type": "SVGElementInstance",
              "read-only": 1
            },
            "x": {
              "specs": "svg2",
              "name": "x",
              "constant": 1,
              "content-attribute": "x",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "height": {
              "specs": "svg2",
              "name": "height",
              "constant": 1,
              "content-attribute": "height",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "use"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Corresponds to the <use> element."
      },
      "Event": {
        "name": "Event",
        "extends": "Object",
        "constants": {
          "constant": {
            "NONE": {
              "name": "NONE",
              "type": "unsigned short",
              "value": "0"
            },
            "CAPTURING_PHASE": {
              "name": "CAPTURING_PHASE",
              "type": "unsigned short",
              "value": "1"
            },
            "AT_TARGET": {
              "name": "AT_TARGET",
              "type": "unsigned short",
              "value": "2"
            },
            "BUBBLING_PHASE": {
              "name": "BUBBLING_PHASE",
              "type": "unsigned short",
              "value": "3"
            }
          }
        },
        "methods": {
          "method": {
            "composedPath": {
              "name": "composedPath",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "EventTarget"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget.\n */"
            },
            "stopPropagation": {
              "name": "stopPropagation",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.\n */"
            },
            "stopImmediatePropagation": {
              "name": "stopImmediatePropagation",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.\n */"
            },
            "preventDefault": {
              "name": "preventDefault",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.\n */"
            },
            "initEvent": {
              "name": "initEvent",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    },
                    {
                      "name": "bubbles",
                      "type": "boolean",
                      "optional": 1
                    },
                    {
                      "name": "cancelable",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker AudioWorklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".\n */"
            },
            "target": {
              "name": "target",
              "type": "EventTarget",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the object to which event is dispatched (its target).\n */"
            },
            "srcElement": {
              "name": "srcElement",
              "type": "EventTarget",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "deprecated": 1
            },
            "currentTarget": {
              "name": "currentTarget",
              "type": "EventTarget",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the object whose event listener's callback is currently being invoked.\n */"
            },
            "eventPhase": {
              "name": "eventPhase",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.\n */"
            },
            "cancelBubble": {
              "name": "cancelBubble",
              "type": "boolean",
              "exposed": "Window Worker AudioWorklet"
            },
            "bubbles": {
              "name": "bubbles",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.\n */"
            },
            "cancelable": {
              "name": "cancelable",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.\n */"
            },
            "returnValue": {
              "name": "returnValue",
              "type": "boolean",
              "exposed": "Window Worker AudioWorklet"
            },
            "defaultPrevented": {
              "name": "defaultPrevented",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.\n */"
            },
            "composed": {
              "name": "composed",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.\n */"
            },
            "isTrusted": {
              "name": "isTrusted",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns true if event was dispatched by the user agent, and false otherwise.\n */"
            },
            "timeStamp": {
              "name": "timeStamp",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Returns the event's timestamp as the number of milliseconds measured relative to the time origin.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Event",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "EventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker AudioWorklet",
        "legacy-window-alias": [],
        "comment": "An event which takes place in the DOM."
      },
      "ImageData": {
        "name": "ImageData",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the actual dimensions of the data in the ImageData object, in pixels.\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the actual dimensions of the data in the ImageData object, in pixels.\n */"
            },
            "data": {
              "name": "data",
              "type": "Uint8ClampedArray",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ImageData",
              "param": [
                {
                  "name": "sw",
                  "type": "unsigned long"
                },
                {
                  "name": "sh",
                  "type": "unsigned long"
                }
              ]
            },
            {
              "type": "ImageData",
              "param": [
                {
                  "name": "data",
                  "type": "Uint8ClampedArray"
                },
                {
                  "name": "sw",
                  "type": "unsigned long"
                },
                {
                  "name": "sh",
                  "type": "unsigned long",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new(width: number, height: number): ImageData",
            "new(array: Uint8ClampedArray, width: number, height: number): ImageData"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData()."
      },
      "Headers": {
        "name": "Headers",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "append": {
              "name": "append",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    },
                    {
                      "name": "value",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "ByteString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "has": {
              "name": "has",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "set": {
              "name": "set",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    },
                    {
                      "name": "value",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Headers",
              "param": [
                {
                  "name": "init",
                  "type": "HeadersInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "ByteString"
            },
            {
              "type": "ByteString"
            }
          ],
          "comments": {
            "comment": {
              "entries": "/**\n * Returns an iterator allowing to go through all key/value pairs contained in this object.\n */",
              "keys": "/**\n * Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.\n */",
              "values": "/**\n * Returns an iterator allowing to go through all values of the key/value pairs contained in this object.\n */"
            }
          }
        },
        "comment": "This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence."
      },
      "HTMLTableColElement": {
        "name": "HTMLTableColElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "span": {
              "name": "span",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of columns in the group.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the alignment of the object relative to the display or table.\n */"
            },
            "ch": {
              "name": "ch",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "chOff": {
              "name": "chOff",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "vAlign": {
              "name": "vAlign",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
        "element": [
          {
            "name": "col"
          },
          {
            "name": "colgroup"
          }
        ]
      },
      "HTMLDocument": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "HTMLDocument",
        "extends": "Document",
        "properties": {
          "property": {}
        },
        "comment": "The HTMLDocument property of Window objects is an alias that browsers expose for the Document interface object."
      },
      "MediaStreamTrackEvent": {
        "name": "MediaStreamTrackEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "track": {
              "name": "track",
              "type": "MediaStreamTrack",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaStreamTrackEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaStreamTrackEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur."
      },
      "SVGAnimatedEnumeration": {
        "name": "SVGAnimatedEnumeration",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "unsigned short",
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes whose value must be a constant from a particular enumeration and which can be animated."
      },
      "SVGFEFuncBElement": {
        "name": "SVGFEFuncBElement",
        "extends": "SVGComponentTransferFunctionElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feFuncB> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feFuncB"
          }
        ]
      },
      "RTCStatsProvider": {
        "constants": {
          "constant": {}
        },
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "msGetStats": {
              "signature": [
                {
                  "subtype": {
                    "type": "RTCStatsReport"
                  },
                  "type": "Promise",
                  "type-original": "Promise<RTCStatsReport>"
                }
              ],
              "specs": "webrtc-stats",
              "exposed": "Window",
              "name": "msGetStats"
            },
            "getStats": {
              "signature": [
                {
                  "subtype": {
                    "type": "RTCStatsReport"
                  },
                  "type": "Promise",
                  "type-original": "Promise<RTCStatsReport>"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "getStats"
            }
          }
        },
        "name": "RTCStatsProvider",
        "extends": "EventTarget",
        "properties": {
          "property": {}
        }
      },
      "HTMLUListElement": {
        "name": "HTMLUListElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "compact": {
              "name": "compact",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
        "element": [
          {
            "name": "ul"
          }
        ]
      },
      "WritableStream": {
        "name": "WritableStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getWriter": {
              "name": "getWriter",
              "signature": [
                {
                  "type": "WritableStreamDefaultWriter",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "getWriter(): WritableStreamDefaultWriter<W>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "locked": {
              "name": "locked",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "WritableStream",
              "param": [
                {
                  "name": "underlyingSink",
                  "type": "UnderlyingSink",
                  "optional": 1
                },
                {
                  "name": "strategy",
                  "type": "QueuingStrategy",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.",
        "override-exposed": "Window Worker",
        "type-parameters": [
          {
            "name": "W",
            "default": "any"
          }
        ]
      },
      "HTMLDivElement": {
        "name": "HTMLDivElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.",
        "element": [
          {
            "name": "div"
          }
        ]
      },
      "ChannelMergerNode": {
        "name": "ChannelMergerNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ChannelMergerNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "ChannelMergerOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel."
      },
      "MediaList": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "legacy-array-class": 1,
        "name": "MediaList",
        "properties": {
          "property": {
            "length": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "length",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "mediaText": {
              "specs": "cssom",
              "name": "mediaText",
              "type-original": "long",
              "treat-null-as": "EmptyString",
              "exposed": "Window",
              "type": "long",
              "stringifier": 1,
              "override-type": "string"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "deleteMedium": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "medium",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "deleteMedium"
            },
            "appendMedium": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "medium",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "appendMedium"
            },
            "item": {
              "getter": 1,
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "DOMString?"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "item"
            },
            "toString": {
              "signature": [
                {
                  "type": "long",
                  "type-original": "long"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "toString",
              "stringifier": 1
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "SVGPathSegCurvetoCubicSmoothRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoCubicSmoothRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x2",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "y2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y2",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "DataTransferItemList": {
        "name": "DataTransferItemList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "DataTransferItem",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    },
                    {
                      "name": "type",
                      "type": "DOMString"
                    }
                  ]
                },
                {
                  "type": "DataTransferItem",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "data",
                      "type": "File"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also.\n */"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the indexth entry in the drag data store.\n */"
            },
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes all the entries in the drag data store.\n */"
            },
            "item": {
              "name": "item",
              "override-signatures": [
                "item(index: number): DataTransferItem"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "DataTransferItem",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of items in the drag data store.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
        "override-index-signatures": [
          "[name: number]: DataTransferItem"
        ]
      },
      "DocumentFragment": {
        "name": "DocumentFragment",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getElementById": {
              "name": "getElementById",
              "exposed": "Window",
              "override-signatures": [
                "getElementById(elementId: string): HTMLElement | null"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DocumentFragment",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "NonElementParentNode",
          "ParentNode"
        ],
        "comment": "A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made."
      },
      "Position": {
        "name": "Position",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "coords": {
              "name": "coords",
              "type": "Coordinates",
              "read-only": 1,
              "exposed": "Window"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "DOMTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The position of the concerned device at a given time. The position, represented by a Coordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed."
      },
      "SVGFEColorMatrixElement": {
        "name": "SVGFEColorMatrixElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_FECOLORMATRIX_TYPE_UNKNOWN": {
              "name": "SVG_FECOLORMATRIX_TYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_FECOLORMATRIX_TYPE_MATRIX": {
              "name": "SVG_FECOLORMATRIX_TYPE_MATRIX",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_FECOLORMATRIX_TYPE_SATURATE": {
              "name": "SVG_FECOLORMATRIX_TYPE_SATURATE",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_FECOLORMATRIX_TYPE_HUEROTATE": {
              "name": "SVG_FECOLORMATRIX_TYPE_HUEROTATE",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA": {
              "name": "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
              "type": "unsigned short",
              "value": "4"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "values": {
              "name": "values",
              "type": "SVGAnimatedNumberList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feColorMatrix> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feColorMatrix"
          }
        ]
      },
      "PerformanceMark": {
        "name": "PerformanceMark",
        "extends": "PerformanceEntry",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of \"mark\". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline."
      },
      "SVGForeignObjectElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_shape_rect",
              "name": "clip"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "visible hidden scroll auto inherit",
              "value-syntax": "enum",
              "name": "overflow"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGForeignObjectElement",
        "properties": {
          "property": {
            "width": {
              "specs": "svg2",
              "same-object": 1,
              "name": "width",
              "constant": 1,
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "y": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y",
              "constant": 1,
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "x": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x",
              "constant": 1,
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "height": {
              "specs": "svg2",
              "same-object": 1,
              "name": "height",
              "constant": 1,
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "type": "SVGAnimatedLength",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "foreignObject"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Provides access to the properties of <foreignObject> elements, as well as methods to manipulate them."
      },
      "CSSPageRule": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSPageRule",
        "extends": "CSSRule",
        "properties": {
          "property": {
            "pseudoClass": {
              "extension": 1,
              "specs": "none",
              "name": "pseudoClass",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "selector": {
              "extension": 1,
              "specs": "none",
              "name": "selector",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "selectorText": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "selectorText",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "style": {
              "specs": "cssom",
              "same-object": 1,
              "name": "style",
              "type-original": "CSSStyleDeclaration",
              "exposed": "Window",
              "type": "CSSStyleDeclaration",
              "read-only": 1
            }
          }
        },
        "comment": "CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE)."
      },
      "HTMLBRElement": {
        "name": "HTMLBRElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clear": {
              "name": "clear",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A HTML line break element (<br>). It inherits from HTMLElement.",
        "element": [
          {
            "name": "br"
          }
        ]
      },
      "HTMLProgressElement": {
        "name": "HTMLProgressElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "double",
              "exposed": "Window",
              "comment": "/**\n * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\n */"
            },
            "max": {
              "name": "max",
              "type": "double",
              "exposed": "Window",
              "comment": "/**\n * Defines the maximum, or \"done\" value for a progress element.\n */"
            },
            "position": {
              "name": "position",
              "type": "double",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\n */"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
        "element": [
          {
            "name": "progress"
          }
        ]
      },
      "HTMLHeadElement": {
        "name": "HTMLHeadElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
        "element": [
          {
            "name": "head"
          }
        ]
      },
      "SVGZoomAndPan": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGZoomAndPan",
        "static": 1,
        "properties": {
          "property": {
            "zoomAndPan": {
              "content-attribute-enum-values": "disable magnify",
              "specs": "svg2",
              "name": "zoomAndPan",
              "content-attribute": "zoomAndPan",
              "type-original": "unsigned short",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "unsigned short",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "SVG_ZOOMANDPAN_MAGNIFY": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "SVG_ZOOMANDPAN_MAGNIFY",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_ZOOMANDPAN_DISABLE": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "SVG_ZOOMANDPAN_DISABLE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_ZOOMANDPAN_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "SVG_ZOOMANDPAN_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object",
        "comment": "Used to reflect the zoomAndPan attribute, and is mixed in to other interfaces for elements that support this attribute."
      },
      "MimeTypeArray": {
        "name": "MimeTypeArray",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "MimeType",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": "MimeType",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes."
      },
      "HTMLMediaElement": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLMediaElement",
        "properties": {
          "property": {
            "videoTracks": {
              "specs": "html5",
              "same-object": 1,
              "name": "videoTracks",
              "type-original": "VideoTrackList",
              "exposed": "Window",
              "type": "VideoTrackList",
              "read-only": 1
            },
            "onencrypted": {
              "name": "onencrypted",
              "type": "EventHandler",
              "event-handler": "encrypted",
              "exposed": "Window"
            },
            "loop": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "loop",
              "content-attribute": "loop",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1,
              "comment": "/**\n * Gets or sets a flag to specify whether playback should restart after it completes.\n */"
            },
            "srcObject": {
              "specs": "html5",
              "exposed": "Window",
              "name": "srcObject",
              "type": [
                {
                  "nullable": 1,
                  "type": "MediaStream"
                },
                {
                  "nullable": 1,
                  "type": "MediaSource"
                },
                {
                  "nullable": 1,
                  "type": "Blob"
                }
              ],
              "type-original": "MediaProvider?"
            },
            "textTracks": {
              "specs": "html5",
              "same-object": 1,
              "name": "textTracks",
              "type-original": "TextTrackList",
              "exposed": "Window",
              "type": "TextTrackList",
              "read-only": 1
            },
            "buffered": {
              "specs": "html5",
              "name": "buffered",
              "type-original": "TimeRanges",
              "exposed": "Window",
              "type": "TimeRanges",
              "read-only": 1,
              "comment": "/**\n * Gets a collection of buffered time ranges.\n */"
            },
            "controls": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "controls",
              "content-attribute": "controls",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1,
              "comment": "/**\n * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\n */"
            },
            "autoplay": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "autoplay",
              "content-attribute": "autoplay",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1,
              "comment": "/**\n * Gets or sets a value that indicates whether to start playing the media automatically.\n */"
            },
            "msAudioDeviceType": {
              "extension": 1,
              "specs": "none",
              "name": "msAudioDeviceType",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "comment": "/**\n * Specifies the output device id that the audio will be sent to.\n */"
            },
            "msAudioCategory": {
              "extension": 1,
              "specs": "none",
              "name": "msAudioCategory",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "comment": "/**\n * Specifies the purpose of the audio or video media, such as background audio or alerts.\n */"
            },
            "src": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "src",
              "content-attribute": "src",
              "type-original": "USVString",
              "exposed": "Window",
              "content-attribute-value-syntax": "url",
              "type": "USVString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
            },
            "playbackRate": {
              "specs": "html5",
              "exposed": "Window",
              "name": "playbackRate",
              "type": "double",
              "type-original": "double",
              "comment": "/**\n * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\n */"
            },
            "muted": {
              "specs": "html5",
              "exposed": "Window",
              "name": "muted",
              "type": "boolean",
              "type-original": "boolean",
              "comment": "/**\n * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\n */"
            },
            "duration": {
              "specs": "html5",
              "name": "duration",
              "type-original": "double",
              "exposed": "Window",
              "type": "double",
              "read-only": 1,
              "comment": "/**\n * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\n */"
            },
            "audioTracks": {
              "specs": "html5",
              "same-object": 1,
              "name": "audioTracks",
              "type-original": "AudioTrackList",
              "exposed": "Window",
              "type": "AudioTrackList",
              "read-only": 1,
              "comment": "/**\n * Returns an AudioTrackList object with the audio tracks for a given video element.\n */"
            },
            "paused": {
              "specs": "html5",
              "name": "paused",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1,
              "comment": "/**\n * Gets a flag that specifies whether playback is paused.\n */"
            },
            "msGraphicsTrustStatus": {
              "extension": 1,
              "specs": "none",
              "name": "msGraphicsTrustStatus",
              "type-original": "MSGraphicsTrust",
              "exposed": "Window",
              "type": "MSGraphicsTrust",
              "read-only": 1
            },
            "seeking": {
              "specs": "html5",
              "name": "seeking",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1,
              "comment": "/**\n * Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.\n */"
            },
            "crossOrigin": {
              "content-attribute-enum-values": "anonymous use-credentials",
              "specs": "html5",
              "ce-reactions": 1,
              "name": "crossOrigin",
              "content-attribute": "crossorigin",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "preload": {
              "content-attribute-enum-values": "none metadata auto",
              "specs": "html5",
              "ce-reactions": 1,
              "name": "preload",
              "content-attribute": "preload",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Gets or sets the current playback position, in seconds.\n */"
            },
            "played": {
              "specs": "html5",
              "name": "played",
              "type-original": "TimeRanges",
              "exposed": "Window",
              "type": "TimeRanges",
              "read-only": 1,
              "comment": "/**\n * Gets TimeRanges for the current media resource that has been played.\n */"
            },
            "msPlayToPrimary": {
              "extension": 1,
              "specs": "none",
              "ce-reactions": 1,
              "name": "msPlayToPrimary",
              "type-original": "boolean",
              "content-attribute": "x-ms-playtoprimary",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "boolean",
              "content-attribute-boolean": 1,
              "comment": "/**\n * Gets or sets the primary DLNA PlayTo device.\n */"
            },
            "currentSrc": {
              "specs": "html5",
              "name": "currentSrc",
              "type-original": "USVString",
              "exposed": "Window",
              "type": "USVString",
              "read-only": 1,
              "comment": "/**\n * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\n */"
            },
            "onmsneedkey": {
              "specs": "encrypted-media-20130510",
              "name": "onmsneedkey",
              "type-original": "EventHandler",
              "deprecated": 1,
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "msneedkey"
            },
            "readyState": {
              "specs": "html5",
              "name": "readyState",
              "type-original": "any",
              "exposed": "Window",
              "type": "any",
              "read-only": 1,
              "override-type": "number"
            },
            "msPlayToDisabled": {
              "extension": 1,
              "specs": "none",
              "ce-reactions": 1,
              "name": "msPlayToDisabled",
              "type-original": "boolean",
              "content-attribute": "x-ms-playtodisabled",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "boolean",
              "content-attribute-boolean": 1,
              "comment": "/**\n * Gets or sets whether the DLNA PlayTo device is available.\n */"
            },
            "msRealTime": {
              "extension": 1,
              "specs": "none",
              "name": "msRealTime",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "comment": "/**\n * Specifies whether or not to enable low-latency playback on the media element.\n */"
            },
            "ended": {
              "specs": "html5",
              "name": "ended",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1,
              "comment": "/**\n * Gets information about whether the playback has ended or not.\n */"
            },
            "defaultMuted": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "defaultMuted",
              "content-attribute": "muted",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1
            },
            "error": {
              "specs": "html5",
              "name": "error",
              "type-original": "MediaError?",
              "nullable": 1,
              "exposed": "Window",
              "type": "MediaError",
              "read-only": 1,
              "comment": "/**\n * Returns an object representing the current error state of the audio or video element.\n */"
            },
            "seekable": {
              "specs": "html5",
              "name": "seekable",
              "type-original": "TimeRanges",
              "exposed": "Window",
              "type": "TimeRanges",
              "read-only": 1,
              "comment": "/**\n * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\n */"
            },
            "msKeys": {
              "specs": "encrypted-media-20130510",
              "name": "msKeys",
              "type-original": "MSMediaKeys",
              "deprecated": 1,
              "exposed": "Window",
              "type": "MSMediaKeys",
              "read-only": 1,
              "comment": "/**\n * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\n */"
            },
            "msPlayToSource": {
              "extension": 1,
              "specs": "none",
              "name": "msPlayToSource",
              "type-original": "any",
              "exposed": "Window",
              "type": "any",
              "read-only": 1,
              "comment": "/**\n * Gets the source associated with the media element for use by the PlayToManager.\n */"
            },
            "msPlayToPreferredSourceUri": {
              "extension": 1,
              "specs": "none",
              "ce-reactions": 1,
              "name": "msPlayToPreferredSourceUri",
              "type-original": "DOMString",
              "content-attribute": "x-ms-playtopreferredsourceuri",
              "content-attribute-value-syntax": "url",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "DOMString",
              "comment": "/**\n * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n */"
            },
            "volume": {
              "specs": "html5",
              "exposed": "Window",
              "name": "volume",
              "type": "double",
              "type-original": "double",
              "comment": "/**\n * Gets or sets the volume level for audio portions of the media element.\n */"
            },
            "mediaKeys": {
              "name": "mediaKeys",
              "type": "MediaKeys",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "defaultPlaybackRate": {
              "specs": "html5",
              "exposed": "Window",
              "name": "defaultPlaybackRate",
              "type": "double",
              "type-original": "double",
              "comment": "/**\n * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\n */"
            },
            "currentTime": {
              "specs": "html5",
              "exposed": "Window",
              "name": "currentTime",
              "type": "double",
              "type-original": "double",
              "comment": "/**\n * Gets or sets the current playback position, in seconds.\n */"
            },
            "networkState": {
              "specs": "html5",
              "name": "networkState",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short",
              "read-only": 1,
              "comment": "/**\n * Gets the current network activity for the element.\n */"
            },
            "onwaitingforkey": {
              "name": "onwaitingforkey",
              "type": "EventHandler",
              "event-handler": "waitingforkey",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constants": {
          "constant": {
            "HAVE_CURRENT_DATA": {
              "specs": "html5",
              "value": "2",
              "exposed": "Window",
              "name": "HAVE_CURRENT_DATA",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "HAVE_METADATA": {
              "specs": "html5",
              "value": "1",
              "exposed": "Window",
              "name": "HAVE_METADATA",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "HAVE_NOTHING": {
              "specs": "html5",
              "value": "0",
              "exposed": "Window",
              "name": "HAVE_NOTHING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NETWORK_NO_SOURCE": {
              "specs": "html5",
              "value": "3",
              "exposed": "Window",
              "name": "NETWORK_NO_SOURCE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "HAVE_ENOUGH_DATA": {
              "specs": "html5",
              "value": "4",
              "exposed": "Window",
              "name": "HAVE_ENOUGH_DATA",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NETWORK_EMPTY": {
              "specs": "html5",
              "value": "0",
              "exposed": "Window",
              "name": "NETWORK_EMPTY",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NETWORK_LOADING": {
              "specs": "html5",
              "value": "2",
              "exposed": "Window",
              "name": "NETWORK_LOADING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NETWORK_IDLE": {
              "specs": "html5",
              "value": "1",
              "exposed": "Window",
              "name": "NETWORK_IDLE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "HAVE_FUTURE_DATA": {
              "specs": "html5",
              "value": "3",
              "exposed": "Window",
              "name": "HAVE_FUTURE_DATA",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "events": {
          "event": [
            {
              "precedes": "progress",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "loadstart",
              "type": "Event"
            },
            {
              "precedes": "loadedmetadata",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "progress",
              "follows": "loadstart",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "suspend",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "abort",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "error",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "emptied",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "stalled",
              "follows": "playing",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "play",
              "follows": "pause",
              "type": "Event"
            },
            {
              "precedes": "play",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "pause",
              "type": "Event"
            },
            {
              "precedes": "loadeddata waiting seeking",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "loadedmetadata",
              "follows": "loadstart",
              "type": "Event"
            },
            {
              "precedes": "canplay",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "loadeddata",
              "follows": "loadedmetadata",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "waiting",
              "type": "Event"
            },
            {
              "precedes": "stalled",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "playing",
              "follows": "canplay",
              "type": "Event"
            },
            {
              "precedes": "canplaythrough",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "canplay",
              "follows": "loadeddata",
              "type": "Event"
            },
            {
              "precedes": "ended",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "canplaythrough",
              "follows": "canplay",
              "type": "Event"
            },
            {
              "precedes": "seeked",
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "seeking",
              "follows": "loadedmetadata",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "seeked",
              "follows": "seeking",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "timeupdate",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "ended",
              "follows": "canplaythrough",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "ratechange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "durationchange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "volumechange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "EME",
              "name": "encrypted",
              "follows": "loadedmetadata",
              "type": "MediaEncryptedEvent"
            },
            {
              "dispatch": "sync",
              "specs": "EME",
              "name": "waitingforkey",
              "follows": "playing",
              "type": "Event"
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "msClearEffects": {
              "extension": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "msClearEffects",
              "exposed": "Window",
              "comment": "/**\n * Clears all effects from the media pipeline.\n */"
            },
            "play": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "play",
              "override-signatures": [
                "play(): Promise<void>"
              ],
              "comment": "/**\n * Loads and starts playback of a media resource.\n */"
            },
            "canPlayType": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "CanPlayTypeResult",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "CanPlayTypeResult"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "canPlayType",
              "comment": "/**\n * Returns a string that specifies whether the client can play a given media resource type.\n */"
            },
            "msInsertAudioEffect": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "activatableClassId",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "effectRequired",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "config",
                      "optional": 1,
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msInsertAudioEffect",
              "comment": "/**\n * Inserts the specified audio effect into media pipeline.\n */"
            },
            "pause": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "pause",
              "comment": "/**\n * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\n */"
            },
            "msGetAsCastingSource": {
              "extension": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "any",
                  "type-original": "any"
                }
              ],
              "name": "msGetAsCastingSource",
              "exposed": "Window"
            },
            "msSetMediaProtectionManager": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "mediaProtectionManager",
                      "optional": 1,
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msSetMediaProtectionManager",
              "comment": "/**\n * Specifies the media protection manager for a given media pipeline.\n */"
            },
            "setMediaKeys": {
              "name": "setMediaKeys",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "mediaKeys",
                      "type": "MediaKeys",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "msSetMediaKeys": {
              "deprecated": 1,
              "specs": "encrypted-media-20130510",
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "mediaKeys",
                      "type": "MSMediaKeys",
                      "type-original": "MSMediaKeys"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "name": "msSetMediaKeys",
              "exposed": "Window"
            },
            "addTextTrack": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "TextTrack",
                  "param": [
                    {
                      "name": "kind",
                      "type": "TextTrackKind",
                      "type-original": "TextTrackKind"
                    },
                    {
                      "name": "label",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "language",
                      "default": "\"\"",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "TextTrack"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "addTextTrack"
            },
            "load": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "load",
              "comment": "/**\n * Resets the audio or video object and loads a new media resource.\n */"
            }
          }
        },
        "extends": "HTMLElement",
        "comment": "Adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video."
      },
      "StyleSheet": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "StyleSheet",
        "extends": "Object",
        "properties": {
          "property": {
            "disabled": {
              "pure": 1,
              "specs": "cssom",
              "name": "disabled",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean"
            },
            "ownerNode": {
              "pure": 1,
              "specs": "cssom",
              "name": "ownerNode",
              "type-original": "Node",
              "exposed": "Window",
              "type": "Node",
              "read-only": 1
            },
            "media": {
              "put-forwards": "mediaText",
              "specs": "cssom",
              "same-object": 1,
              "name": "media",
              "constant": 1,
              "type-original": "MediaList",
              "exposed": "Window",
              "type": "MediaList",
              "read-only": 1
            },
            "parentStyleSheet": {
              "pure": 1,
              "specs": "cssom",
              "name": "parentStyleSheet",
              "type-original": "StyleSheet?",
              "nullable": 1,
              "exposed": "Window",
              "type": "StyleSheet",
              "read-only": 1
            },
            "href": {
              "specs": "cssom",
              "name": "href",
              "constant": 1,
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "title": {
              "pure": 1,
              "specs": "cssom",
              "name": "title",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "type": {
              "specs": "cssom",
              "name": "type",
              "constant": 1,
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "comment": "A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface."
      },
      "MessagePort": {
        "name": "MessagePort",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "postMessage": {
              "name": "postMessage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "transfer",
                      "type": "sequence",
                      "subtype": {
                        "type": "object"
                      }
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "options",
                      "type": "PostMessageOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.\n * \n * Throws a \"DataCloneError\" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.\n */",
              "override-signatures": [
                "postMessage(message: any, transfer: Transferable[]): void",
                "postMessage(message: any, options?: PostMessageOptions): void"
              ]
            },
            "start": {
              "name": "start",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Begins dispatching messages received on the port.\n */"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker AudioWorklet",
              "comment": "/**\n * Disconnects the port, so that it is no longer active.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window Worker AudioWorklet"
            },
            "onmessageerror": {
              "name": "onmessageerror",
              "type": "EventHandler",
              "event-handler": "messageerror",
              "exposed": "Window Worker AudioWorklet"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker AudioWorklet",
        "legacy-window-alias": [],
        "comment": "This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other."
      },
      "FileReader": {
        "name": "FileReader",
        "extends": "EventTarget",
        "constants": {
          "constant": {
            "EMPTY": {
              "name": "EMPTY",
              "type": "unsigned short",
              "value": "0"
            },
            "LOADING": {
              "name": "LOADING",
              "type": "unsigned short",
              "value": "1"
            },
            "DONE": {
              "name": "DONE",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {
            "readAsArrayBuffer": {
              "name": "readAsArrayBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "readAsBinaryString": {
              "name": "readAsBinaryString",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "readAsText": {
              "name": "readAsText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    },
                    {
                      "name": "encoding",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "readAsDataURL": {
              "name": "readAsDataURL",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "readyState": {
              "name": "readyState",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "result": {
              "name": "result",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "ArrayBuffer"
                }
              ],
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "error": {
              "name": "error",
              "type": "DOMException",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "onloadstart": {
              "name": "onloadstart",
              "type": "EventHandler",
              "event-handler": "loadstart",
              "exposed": "Window Worker"
            },
            "onprogress": {
              "name": "onprogress",
              "type": "EventHandler",
              "event-handler": "progress",
              "exposed": "Window Worker"
            },
            "onload": {
              "name": "onload",
              "type": "EventHandler",
              "event-handler": "load",
              "exposed": "Window Worker"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            },
            "onloadend": {
              "name": "onloadend",
              "type": "EventHandler",
              "event-handler": "loadend",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "FileReader",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",
        "events": {
          "event": [
            {
              "name": "loadstart",
              "type": "ProgressEvent"
            },
            {
              "name": "progress",
              "type": "ProgressEvent"
            },
            {
              "name": "load",
              "type": "ProgressEvent"
            },
            {
              "name": "abort",
              "type": "ProgressEvent"
            },
            {
              "name": "error",
              "type": "ProgressEvent"
            },
            {
              "name": "loadend",
              "type": "ProgressEvent"
            }
          ]
        }
      },
      "SVGTextPathElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto baseline before-edge text-before-edge middle central after-edge text-after-edge ideographic alphabetic hanging mathematical inherit",
              "value-syntax": "enum",
              "name": "alignment-baseline"
            },
            {
              "enum-values": "baseline sub super inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "baseline-shift"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "css_color",
              "name": "color"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "ltr rtl inherit",
              "value-syntax": "enum",
              "name": "direction"
            },
            {
              "enum-values": "auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit",
              "value-syntax": "enum",
              "name": "dominant-baseline"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "fill"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "fill-opacity"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "fill-rule"
            },
            {
              "enum-values": "caption icon menu message-box small-caption status-bar inherit",
              "value-syntax": "css_font",
              "name": "font"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "comma_separated_css_font_family_followed_by_generic_family",
              "name": "font-family"
            },
            {
              "enum-values": "smaller larger xx-small x-small small medium large x-large xx-large inherit initial",
              "value-syntax": "css_percentage_or_length",
              "name": "font-size"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "floating_point_number",
              "name": "font-size-adjust"
            },
            {
              "enum-values": "normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit",
              "value-syntax": "enum",
              "name": "font-stretch"
            },
            {
              "enum-values": "normal italic oblique inherit initial",
              "value-syntax": "enum",
              "name": "font-style"
            },
            {
              "enum-values": "normal small-caps inherit initial",
              "value-syntax": "enum",
              "name": "font-variant"
            },
            {
              "enum-values": "normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial",
              "value-syntax": "enum",
              "name": "font-weight"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-horizontal"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-vertical"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_length",
              "name": "kerning"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "letter-spacing"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "stroke"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "comma_or_space_separated_css_percentage_or_length",
              "name": "stroke-dasharray"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-dashoffset"
            },
            {
              "enum-values": "butt round square inherit",
              "value-syntax": "enum",
              "name": "stroke-linecap"
            },
            {
              "enum-values": "miter round bevel inherit",
              "value-syntax": "enum",
              "name": "stroke-linejoin"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "1_or_greater_floating_point_number",
              "name": "stroke-miterlimit"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "stroke-opacity"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-width"
            },
            {
              "enum-values": "start middle end inherit",
              "value-syntax": "enum",
              "name": "text-anchor"
            },
            {
              "enum-values": "none underline overline line-through blink inherit",
              "value-syntax": "enum",
              "name": "text-decoration"
            },
            {
              "enum-values": "normal embed bidi-override inherit",
              "value-syntax": "enum",
              "name": "unicode-bidi"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "word-spacing"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTextPathElement",
        "properties": {
          "property": {
            "startOffset": {
              "specs": "svg2",
              "same-object": 1,
              "name": "startOffset",
              "constant": 1,
              "content-attribute": "startOffset",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "method": {
              "content-attribute-enum-values": "align stretch",
              "specs": "svg2",
              "same-object": 1,
              "name": "method",
              "constant": 1,
              "content-attribute": "method",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "spacing": {
              "content-attribute-enum-values": "auto exact",
              "specs": "svg2",
              "same-object": 1,
              "name": "spacing",
              "constant": 1,
              "content-attribute": "spacing",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "textPath"
          }
        ],
        "constants": {
          "constant": {
            "TEXTPATH_SPACINGTYPE_EXACT": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "TEXTPATH_SPACINGTYPE_EXACT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "TEXTPATH_SPACINGTYPE_AUTO": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "TEXTPATH_SPACINGTYPE_AUTO",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "TEXTPATH_METHODTYPE_STRETCH": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "TEXTPATH_METHODTYPE_STRETCH",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "TEXTPATH_SPACINGTYPE_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "TEXTPATH_SPACINGTYPE_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "TEXTPATH_METHODTYPE_ALIGN": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "TEXTPATH_METHODTYPE_ALIGN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "TEXTPATH_METHODTYPE_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "TEXTPATH_METHODTYPE_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGTextContentElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Corresponds to the <textPath> element."
      },
      "AbortSignal": {
        "name": "AbortSignal",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "aborted": {
              "name": "aborted",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n */"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.",
        "events": {
          "event": [
            {
              "name": "abort",
              "type": "Event"
            }
          ]
        },
        "override-exposed": "Window Worker"
      },
      "NodeList": {
        "name": "NodeList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the node with index index from the collection. The nodes are sorted in tree order.\n */"
            },
            "forEach": {
              "comment": "/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of nodes in the collection.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "Node"
            }
          ],
          "comments": {
            "comment": {
              "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
              "keys": "/**\n * Returns an list of keys in the list.\n */",
              "values": "/**\n * Returns an list of values in the list.\n */"
            }
          }
        },
        "comment": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll()."
      },
      "XMLSerializer": {
        "name": "XMLSerializer",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "serializeToString": {
              "name": "serializeToString",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "root",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "XMLSerializer",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides the serializeToString() method to construct an XML string representing a DOM tree."
      },
      "ServiceWorkerContainer": {
        "name": "ServiceWorkerContainer",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "register": {
              "name": "register",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ServiceWorkerRegistration"
                  },
                  "param": [
                    {
                      "name": "scriptURL",
                      "type": "USVString"
                    },
                    {
                      "name": "options",
                      "type": "RegistrationOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getRegistration": {
              "name": "getRegistration",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "clientURL",
                      "type": "USVString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "getRegistration(clientURL?: string): Promise<ServiceWorkerRegistration | undefined>"
              ]
            },
            "getRegistrations": {
              "name": "getRegistrations",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "FrozenArray",
                    "subtype": {
                      "type": "ServiceWorkerRegistration"
                    }
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "startMessages": {
              "name": "startMessages",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "controller": {
              "name": "controller",
              "type": "ServiceWorker",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "ready": {
              "name": "ready",
              "type": "Promise",
              "subtype": {
                "type": "ServiceWorkerRegistration"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "oncontrollerchange": {
              "name": "oncontrollerchange",
              "type": "EventHandler",
              "event-handler": "controllerchange",
              "exposed": "Window Worker"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window Worker"
            },
            "onmessageerror": {
              "name": "onmessageerror",
              "type": "EventHandler",
              "event-handler": "messageerror",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.",
        "events": {
          "event": [
            {
              "name": "controllerchange",
              "type": "Event"
            },
            {
              "name": "message",
              "type": "MessageEvent"
            },
            {
              "name": "messageerror",
              "type": "MessageEvent"
            }
          ]
        }
      },
      "PerformanceMeasure": {
        "name": "PerformanceMeasure",
        "extends": "PerformanceEntry",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of \"measure\". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline."
      },
      "SVGGradientElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGGradientElement",
        "properties": {
          "property": {
            "spreadMethod": {
              "content-attribute-enum-values": "pad reflect repeat",
              "specs": "svg2",
              "same-object": 1,
              "name": "spreadMethod",
              "constant": 1,
              "content-attribute": "spreadMethod",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "gradientTransform": {
              "specs": "svg2",
              "same-object": 1,
              "name": "gradientTransform",
              "constant": 1,
              "content-attribute": "gradientTransform",
              "type-original": "SVGAnimatedTransformList",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_transform_list",
              "type": "SVGAnimatedTransformList",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "gradientUnits": {
              "content-attribute-enum-values": "objectBoundingBox userSpaceOnUse",
              "specs": "svg2",
              "same-object": 1,
              "name": "gradientUnits",
              "constant": 1,
              "content-attribute": "gradientUnits",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "SVG_SPREADMETHOD_REFLECT": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "SVG_SPREADMETHOD_REFLECT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_SPREADMETHOD_PAD": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "SVG_SPREADMETHOD_PAD",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_SPREADMETHOD_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "SVG_SPREADMETHOD_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_SPREADMETHOD_REPEAT": {
              "specs": "svg2",
              "value": "3",
              "exposed": "Window",
              "name": "SVG_SPREADMETHOD_REPEAT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement."
      },
      "CSSKeyframeRule": {
        "name": "CSSKeyframeRule",
        "extends": "CSSRule",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "keyText": {
              "name": "keyText",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "style": {
              "name": "style",
              "type": "CSSStyleDeclaration",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE)."
      },
      "OES_texture_half_float_linear": {
        "name": "OES_texture_half_float_linear",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.",
        "override-exposed": "Window Worker"
      },
      "RTCDtmfSender": {
        "specs": "ortc",
        "constructor": {
          "specs": "ortc",
          "signature": [
            {
              "param-min-required": 1,
              "type": "RTCDtmfSender",
              "param": [
                {
                  "name": "sender",
                  "type": "RTCRtpSender",
                  "type-original": "RTCRtpSender"
                }
              ],
              "type-original": "RTCDtmfSender"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCDtmfSender",
        "properties": {
          "property": {
            "ontonechange": {
              "specs": "ortc",
              "name": "ontonechange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "tonechange"
            },
            "sender": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "sender",
              "type": "RTCRtpSender",
              "type-original": "RTCRtpSender",
              "read-only": 1
            },
            "toneBuffer": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "toneBuffer",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "duration": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "duration",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "canInsertDTMF": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "canInsertDTMF",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "interToneGap": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "interToneGap",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "ORTC",
              "name": "tonechange",
              "type": "RTCDTMFToneChangeEvent",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "insertDTMF": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "tones",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "duration",
                      "type": "long",
                      "optional": 1,
                      "type-original": "long"
                    },
                    {
                      "name": "interToneGap",
                      "type": "long",
                      "optional": 1,
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "insertDTMF"
            }
          }
        },
        "extends": "EventTarget"
      },
      "MSStream": {
        "constants": {
          "constant": {}
        },
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "msDetachStream": {
              "signature": [
                {
                  "type": "any",
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msDetachStream"
            },
            "msClose": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msClose"
            }
          }
        },
        "name": "MSStream",
        "extends": "Object",
        "properties": {
          "property": {
            "type": {
              "specs": "none",
              "name": "type",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        }
      },
      "XMLDocument": {
        "name": "XMLDocument",
        "extends": "Document",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents."
      },
      "SVGNumberList": {
        "name": "SVGNumberList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "initialize": {
              "name": "initialize",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGNumber"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getItem": {
              "name": "getItem",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "insertItemBefore": {
              "name": "insertItemBefore",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGNumber"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceItem": {
              "name": "replaceItem",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGNumber"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeItem": {
              "name": "removeItem",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "appendItem": {
              "name": "appendItem",
              "signature": [
                {
                  "type": "SVGNumber",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGNumber"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "newItem",
                      "type": "SVGNumber"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfItems": {
              "name": "numberOfItems",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The SVGNumberList defines a list of SVGNumber objects."
      },
      "MSFIDOSignature": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSFIDOSignature",
        "properties": {
          "property": {
            "authnrData": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "authnrData",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "signature": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "signature",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "clientData": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "clientData",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "MediaKeyStatusMap": {
        "name": "MediaKeyStatusMap",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "has": {
              "name": "has",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "keyId",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "keyId",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "size": {
              "name": "size",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "BufferSource"
            },
            {
              "type": "MediaKeyStatus"
            }
          ]
        },
        "comment": "This EncryptedMediaExtensions API interface is a read-only map of media key statuses by key IDs."
      },
      "HashChangeEvent": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 1,
              "type": "HashChangeEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "HashChangeEventInit",
                  "optional": 1,
                  "type-original": "HashChangeEventInit"
                }
              ],
              "type-original": "HashChangeEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "HashChangeEvent",
        "properties": {
          "property": {
            "newURL": {
              "specs": "html5",
              "exposed": "Window",
              "name": "newURL",
              "type": "USVString",
              "type-original": "USVString",
              "read-only": 1
            },
            "oldURL": {
              "specs": "html5",
              "exposed": "Window",
              "name": "oldURL",
              "type": "USVString",
              "type-original": "USVString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "Events that fire when the fragment identifier of the URL has changed."
      },
      "RTCPeerConnectionIceEvent": {
        "name": "RTCPeerConnectionIceEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "candidate": {
              "name": "candidate",
              "type": "RTCIceCandidate",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "url": {
              "name": "url",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCPeerConnectionIceEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCPeerConnectionIceEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate."
      },
      "MediaDeviceInfo": {
        "name": "MediaDeviceInfo",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "deviceId": {
              "name": "deviceId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "kind": {
              "name": "kind",
              "type": "MediaDeviceKind",
              "read-only": 1,
              "exposed": "Window"
            },
            "label": {
              "name": "label",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "groupId": {
              "name": "groupId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The MediaDevicesInfo interface contains information that describes a single media input or output device."
      },
      "HTMLObjectElement": {
        "name": "HTMLObjectElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getSVGDocument": {
              "name": "getSVGDocument",
              "signature": [
                {
                  "type": "Document",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the URL that references the data of the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the MIME type of the object.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "useMap": {
              "name": "useMap",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "height": {
              "name": "height",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "contentDocument": {
              "name": "contentDocument",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
            },
            "contentWindow": {
              "name": "contentWindow",
              "type": "WindowProxy",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "archive": {
              "name": "archive",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n */"
            },
            "code": {
              "name": "code",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the URL of the file containing the compiled Java class.\n */"
            },
            "declare": {
              "name": "declare",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            },
            "hspace": {
              "name": "hspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "standby": {
              "name": "standby",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a message to be displayed while an object is loading.\n */"
            },
            "vspace": {
              "name": "vspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "codeBase": {
              "name": "codeBase",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the URL of the component.\n */"
            },
            "codeType": {
              "name": "codeType",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the Internet media type for the code associated with the object.\n */"
            },
            "border": {
              "name": "border",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
        "element": [
          {
            "name": "object"
          }
        ]
      },
      "StorageEvent": {
        "name": "StorageEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "key": {
              "name": "key",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the key of the storage item being changed.\n */"
            },
            "oldValue": {
              "name": "oldValue",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the old value of the key of the storage item whose value is being changed.\n */"
            },
            "newValue": {
              "name": "newValue",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the new value of the key of the storage item whose value is being changed.\n */"
            },
            "url": {
              "name": "url",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the URL of the document whose storage item changed.\n */"
            },
            "storageArea": {
              "name": "storageArea",
              "type": "Storage",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the Storage object that was affected.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "StorageEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "StorageEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document."
      },
      "HTMLEmbedElement": {
        "name": "HTMLEmbedElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getSVGDocument": {
              "name": "getSVGDocument",
              "signature": [
                {
                  "type": "Document",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "height": {
              "name": "height",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
        "element": [
          {
            "name": "embed"
          }
        ]
      },
      "DOMException": {
        "name": "DOMException",
        "extends": "Object",
        "constants": {
          "constant": {
            "INDEX_SIZE_ERR": {
              "name": "INDEX_SIZE_ERR",
              "type": "unsigned short",
              "value": "1"
            },
            "DOMSTRING_SIZE_ERR": {
              "name": "DOMSTRING_SIZE_ERR",
              "type": "unsigned short",
              "value": "2"
            },
            "HIERARCHY_REQUEST_ERR": {
              "name": "HIERARCHY_REQUEST_ERR",
              "type": "unsigned short",
              "value": "3"
            },
            "WRONG_DOCUMENT_ERR": {
              "name": "WRONG_DOCUMENT_ERR",
              "type": "unsigned short",
              "value": "4"
            },
            "INVALID_CHARACTER_ERR": {
              "name": "INVALID_CHARACTER_ERR",
              "type": "unsigned short",
              "value": "5"
            },
            "NO_DATA_ALLOWED_ERR": {
              "name": "NO_DATA_ALLOWED_ERR",
              "type": "unsigned short",
              "value": "6"
            },
            "NO_MODIFICATION_ALLOWED_ERR": {
              "name": "NO_MODIFICATION_ALLOWED_ERR",
              "type": "unsigned short",
              "value": "7"
            },
            "NOT_FOUND_ERR": {
              "name": "NOT_FOUND_ERR",
              "type": "unsigned short",
              "value": "8"
            },
            "NOT_SUPPORTED_ERR": {
              "name": "NOT_SUPPORTED_ERR",
              "type": "unsigned short",
              "value": "9"
            },
            "INUSE_ATTRIBUTE_ERR": {
              "name": "INUSE_ATTRIBUTE_ERR",
              "type": "unsigned short",
              "value": "10"
            },
            "INVALID_STATE_ERR": {
              "name": "INVALID_STATE_ERR",
              "type": "unsigned short",
              "value": "11"
            },
            "SYNTAX_ERR": {
              "name": "SYNTAX_ERR",
              "type": "unsigned short",
              "value": "12"
            },
            "INVALID_MODIFICATION_ERR": {
              "name": "INVALID_MODIFICATION_ERR",
              "type": "unsigned short",
              "value": "13"
            },
            "NAMESPACE_ERR": {
              "name": "NAMESPACE_ERR",
              "type": "unsigned short",
              "value": "14"
            },
            "INVALID_ACCESS_ERR": {
              "name": "INVALID_ACCESS_ERR",
              "type": "unsigned short",
              "value": "15"
            },
            "VALIDATION_ERR": {
              "name": "VALIDATION_ERR",
              "type": "unsigned short",
              "value": "16"
            },
            "TYPE_MISMATCH_ERR": {
              "name": "TYPE_MISMATCH_ERR",
              "type": "unsigned short",
              "value": "17"
            },
            "SECURITY_ERR": {
              "name": "SECURITY_ERR",
              "type": "unsigned short",
              "value": "18"
            },
            "NETWORK_ERR": {
              "name": "NETWORK_ERR",
              "type": "unsigned short",
              "value": "19"
            },
            "ABORT_ERR": {
              "name": "ABORT_ERR",
              "type": "unsigned short",
              "value": "20"
            },
            "URL_MISMATCH_ERR": {
              "name": "URL_MISMATCH_ERR",
              "type": "unsigned short",
              "value": "21"
            },
            "QUOTA_EXCEEDED_ERR": {
              "name": "QUOTA_EXCEEDED_ERR",
              "type": "unsigned short",
              "value": "22"
            },
            "TIMEOUT_ERR": {
              "name": "TIMEOUT_ERR",
              "type": "unsigned short",
              "value": "23"
            },
            "INVALID_NODE_TYPE_ERR": {
              "name": "INVALID_NODE_TYPE_ERR",
              "type": "unsigned short",
              "value": "24"
            },
            "DATA_CLONE_ERR": {
              "name": "DATA_CLONE_ERR",
              "type": "unsigned short",
              "value": "25"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "message": {
              "name": "message",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "code": {
              "name": "code",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMException",
              "param": [
                {
                  "name": "message",
                  "type": "DOMString",
                  "optional": 1
                },
                {
                  "name": "name",
                  "type": "DOMString",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new(message?: string, name?: string): DOMException"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API."
      },
      "SVGAnimatedBoolean": {
        "name": "SVGAnimatedBoolean",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "boolean",
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of type boolean which can be animated."
      },
      "OES_texture_float": {
        "name": "OES_texture_float",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.",
        "override-exposed": "Window Worker"
      },
      "SyncEvent": {
        "name": "SyncEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "tag": {
              "name": "tag",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "lastChance": {
              "name": "lastChance",
              "type": "boolean",
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "SyncEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "init",
                  "type": "SyncEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "A sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. "
      },
      "FormData": {
        "name": "FormData",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "append": {
              "name": "append",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "value",
                      "type": "USVString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "blobValue",
                      "type": "Blob"
                    },
                    {
                      "name": "filename",
                      "type": "USVString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "flavor": "Web",
              "override-signatures": [
                "append(name: string, value: string | Blob, fileName?: string): void"
              ]
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "FormDataEntryValue",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getAll": {
              "name": "getAll",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "FormDataEntryValue"
                  },
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "has": {
              "name": "has",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "set": {
              "name": "set",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "value",
                      "type": "USVString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "blobValue",
                      "type": "Blob"
                    },
                    {
                      "name": "filename",
                      "type": "USVString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "flavor": "Web",
              "override-signatures": [
                "set(name: string, value: string | Blob, fileName?: string): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "FormData",
              "param": [
                {
                  "name": "form",
                  "type": "HTMLFormElement",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "USVString"
            },
            {
              "type": "FormDataEntryValue"
            }
          ],
          "comments": {
            "comment": {
              "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
              "keys": "/**\n * Returns a list of keys in the list.\n */",
              "values": "/**\n * Returns a list of values in the list.\n */"
            }
          }
        },
        "comment": "Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\"."
      },
      "PushEvent": {
        "name": "PushEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "PushMessageData",
              "nullable": 1,
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PushEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PushEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription."
      },
      "SVGFECompositeElement": {
        "name": "SVGFECompositeElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_FECOMPOSITE_OPERATOR_UNKNOWN": {
              "name": "SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_FECOMPOSITE_OPERATOR_OVER": {
              "name": "SVG_FECOMPOSITE_OPERATOR_OVER",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_FECOMPOSITE_OPERATOR_IN": {
              "name": "SVG_FECOMPOSITE_OPERATOR_IN",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_FECOMPOSITE_OPERATOR_OUT": {
              "name": "SVG_FECOMPOSITE_OPERATOR_OUT",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_FECOMPOSITE_OPERATOR_ATOP": {
              "name": "SVG_FECOMPOSITE_OPERATOR_ATOP",
              "type": "unsigned short",
              "value": "4"
            },
            "SVG_FECOMPOSITE_OPERATOR_XOR": {
              "name": "SVG_FECOMPOSITE_OPERATOR_XOR",
              "type": "unsigned short",
              "value": "5"
            },
            "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC": {
              "name": "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
              "type": "unsigned short",
              "value": "6"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "in2": {
              "name": "in2",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "operator": {
              "name": "operator",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "k1": {
              "name": "k1",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "k2": {
              "name": "k2",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "k3": {
              "name": "k3",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "k4": {
              "name": "k4",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feComposite> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feComposite"
          }
        ]
      },
      "SVGSymbolElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_shape_rect",
              "name": "clip"
            },
            {
              "enum-values": "visible hidden scroll auto inherit",
              "value-syntax": "enum",
              "name": "overflow"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGSymbolElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "symbol"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "implements": [
          "SVGFitToViewBox"
        ],
        "comment": "Corresponds to the <symbol> element."
      },
      "SVGElementInstanceList": {
        "constants": {
          "constant": {}
        },
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "item": {
              "deprecated": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGElementInstance",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGElementInstance"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "item"
            }
          }
        },
        "name": "SVGElementInstanceList",
        "extends": "Object",
        "properties": {
          "property": {
            "length": {
              "specs": "svg11",
              "name": "length",
              "type-original": "unsigned long",
              "deprecated": 1,
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        }
      },
      "PageTransitionEvent": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "PageTransitionEvent",
        "extends": "Event",
        "properties": {
          "property": {
            "persisted": {
              "specs": "html5",
              "exposed": "Window",
              "name": "persisted",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            }
          }
        },
        "comment": "The PageTransitionEvent is fired when a document is being loaded or unloaded."
      },
      "HTMLVideoElement": {
        "specs": "html5",
        "html-constructor": 1,
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLVideoElement",
        "properties": {
          "property": {
            "videoWidth": {
              "specs": "html5",
              "name": "videoWidth",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1,
              "comment": "/**\n * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\n */"
            },
            "width": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "width",
              "content-attribute": "width",
              "type-original": "unsigned long",
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "unsigned long",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Gets or sets the width of the video element.\n */"
            },
            "msStereo3DPackingMode": {
              "extension": 1,
              "specs": "none",
              "name": "msStereo3DPackingMode",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString"
            },
            "onMSVideoFrameStepCompleted": {
              "extension": 1,
              "specs": "none",
              "name": "onMSVideoFrameStepCompleted",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSVideoFrameStepCompleted"
            },
            "msIsLayoutOptimalForPlayback": {
              "extension": 1,
              "specs": "none",
              "name": "msIsLayoutOptimalForPlayback",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "webkitSupportsFullscreen": {
              "extension": 1,
              "specs": "none",
              "name": "webkitSupportsFullscreen",
              "type-original": "boolean",
              "interop": 1,
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "height": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "height",
              "content-attribute": "height",
              "type-original": "unsigned long",
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "unsigned long",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Gets or sets the height of the video element.\n */"
            },
            "msZoom": {
              "extension": 1,
              "specs": "none",
              "exposed": "Window",
              "name": "msZoom",
              "type": "boolean",
              "type-original": "boolean"
            },
            "msIsStereo3D": {
              "extension": 1,
              "specs": "none",
              "name": "msIsStereo3D",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "webkitDisplayingFullscreen": {
              "extension": 1,
              "specs": "none",
              "name": "webkitDisplayingFullscreen",
              "type-original": "boolean",
              "interop": 1,
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "onMSVideoOptimalLayoutChanged": {
              "extension": 1,
              "specs": "none",
              "name": "onMSVideoOptimalLayoutChanged",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSVideoOptimalLayoutChanged"
            },
            "videoHeight": {
              "specs": "html5",
              "name": "videoHeight",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1,
              "comment": "/**\n * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\n */"
            },
            "msStereo3DRenderMode": {
              "extension": 1,
              "specs": "none",
              "name": "msStereo3DRenderMode",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString"
            },
            "msHorizontalMirror": {
              "extension": 1,
              "specs": "none",
              "name": "msHorizontalMirror",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean"
            },
            "onMSVideoFormatChanged": {
              "extension": 1,
              "specs": "none",
              "name": "onMSVideoFormatChanged",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSVideoFormatChanged"
            },
            "poster": {
              "specs": "html5",
              "ce-reactions": 1,
              "name": "poster",
              "content-attribute": "poster",
              "type-original": "USVString",
              "exposed": "Window",
              "content-attribute-value-syntax": "url",
              "type": "USVString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\n */"
            }
          }
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "video"
          }
        ],
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "resize",
              "type": "Event"
            }
          ]
        },
        "methods": {
          "method": {
            "webkitExitFullScreen": {
              "extension": 1,
              "interop": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "webkitExitFullScreen",
              "exposed": "Window"
            },
            "getVideoPlaybackQuality": {
              "specs": "media-playback-quality",
              "signature": [
                {
                  "type": "VideoPlaybackQuality",
                  "type-original": "VideoPlaybackQuality"
                }
              ],
              "name": "getVideoPlaybackQuality",
              "exposed": "Window"
            },
            "msInsertVideoEffect": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "activatableClassId",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "effectRequired",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "config",
                      "optional": 1,
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msInsertVideoEffect"
            },
            "msFrameStep": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "forward",
                      "type": "boolean",
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msFrameStep"
            },
            "webkitExitFullscreen": {
              "extension": 1,
              "interop": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "webkitExitFullscreen",
              "exposed": "Window"
            },
            "webkitEnterFullScreen": {
              "extension": 1,
              "interop": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "webkitEnterFullScreen",
              "exposed": "Window"
            },
            "webkitEnterFullscreen": {
              "extension": 1,
              "interop": 1,
              "specs": "none",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "webkitEnterFullscreen",
              "exposed": "Window"
            },
            "msSetVideoRectangle": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "void",
                  "param": [
                    {
                      "name": "left",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "top",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "right",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "bottom",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "msSetVideoRectangle"
            }
          }
        },
        "exposed": "Window",
        "extends": "HTMLMediaElement",
        "comment": "Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement."
      },
      "SVGFEDiffuseLightingElement": {
        "name": "SVGFEDiffuseLightingElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "surfaceScale": {
              "name": "surfaceScale",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "diffuseConstant": {
              "name": "diffuseConstant",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthX": {
              "name": "kernelUnitLengthX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthY": {
              "name": "kernelUnitLengthY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feDiffuseLighting> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feDiffuseLighting"
          }
        ]
      },
      "SVGFEComponentTransferElement": {
        "name": "SVGFEComponentTransferElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feComponentTransfer> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feComponentTransfer"
          }
        ]
      },
      "OES_texture_float_linear": {
        "name": "OES_texture_float_linear",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.",
        "override-exposed": "Window Worker"
      },
      "ServiceWorkerGlobalScope": {
        "name": "ServiceWorkerGlobalScope",
        "extends": "WorkerGlobalScope",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "skipWaiting": {
              "name": "skipWaiting",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clients": {
              "name": "clients",
              "type": "Clients",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "registration": {
              "name": "registration",
              "type": "ServiceWorkerRegistration",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "oninstall": {
              "name": "oninstall",
              "type": "EventHandler",
              "event-handler": "install",
              "exposed": "ServiceWorker"
            },
            "onactivate": {
              "name": "onactivate",
              "type": "EventHandler",
              "event-handler": "activate",
              "exposed": "ServiceWorker"
            },
            "onfetch": {
              "name": "onfetch",
              "type": "EventHandler",
              "event-handler": "fetch",
              "exposed": "ServiceWorker"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "ServiceWorker"
            },
            "onmessageerror": {
              "name": "onmessageerror",
              "type": "EventHandler",
              "event-handler": "messageerror",
              "exposed": "ServiceWorker"
            },
            "onnotificationclick": {
              "name": "onnotificationclick",
              "type": "EventHandler",
              "event-handler": "notificationclick",
              "exposed": "ServiceWorker"
            },
            "onnotificationclose": {
              "name": "onnotificationclose",
              "type": "EventHandler",
              "event-handler": "notificationclose",
              "exposed": "ServiceWorker"
            },
            "onpush": {
              "name": "onpush",
              "type": "EventHandler",
              "event-handler": "push",
              "exposed": "ServiceWorker"
            },
            "onpushsubscriptionchange": {
              "name": "onpushsubscriptionchange",
              "type": "EventHandler",
              "event-handler": "pushsubscriptionchange",
              "exposed": "ServiceWorker"
            },
            "onsync": {
              "name": "onsync",
              "type": "EventHandler",
              "event-handler": "sync",
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "exposed": "ServiceWorker",
        "global": "Worker ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This ServiceWorker API interface represents the global execution context of a service worker.",
        "events": {
          "event": [
            {
              "name": "install",
              "type": "ExtendableEvent"
            },
            {
              "name": "activate",
              "type": "ExtendableEvent"
            },
            {
              "name": "fetch",
              "type": "FetchEvent"
            },
            {
              "name": "message",
              "type": "ExtendableMessageEvent"
            },
            {
              "name": "messageerror",
              "type": "MessageEvent"
            },
            {
              "name": "notificationclick",
              "type": "NotificationEvent"
            },
            {
              "name": "notificationclose",
              "type": "NotificationEvent"
            },
            {
              "name": "push",
              "type": "PushEvent"
            },
            {
              "name": "pushsubscriptionchange",
              "type": "PushSubscriptionChangeEvent"
            },
            {
              "name": "sync",
              "type": "SyncEvent"
            }
          ]
        }
      },
      "PaymentRequest": {
        "specs": "payment-request",
        "constructor": {
          "specs": "payment-request",
          "signature": [
            {
              "param-min-required": 2,
              "type": "PaymentRequest",
              "param": [
                {
                  "subtype": {
                    "type": "PaymentMethodData"
                  },
                  "name": "methodData",
                  "type": "sequence",
                  "type-original": "sequence<PaymentMethodData>"
                },
                {
                  "name": "details",
                  "type": "PaymentDetailsInit",
                  "type-original": "PaymentDetailsInit"
                },
                {
                  "name": "options",
                  "type": "PaymentOptions",
                  "optional": 1,
                  "type-original": "PaymentOptions"
                }
              ],
              "type-original": "PaymentRequest"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "PaymentRequest",
        "properties": {
          "property": {
            "onshippingaddresschange": {
              "specs": "payment-request",
              "name": "onshippingaddresschange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "shippingaddresschange"
            },
            "onshippingoptionchange": {
              "specs": "payment-request",
              "name": "onshippingoptionchange",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "shippingoptionchange"
            },
            "shippingType": {
              "specs": "payment-request",
              "name": "shippingType",
              "type-original": "PaymentShippingType?",
              "nullable": 1,
              "exposed": "Window",
              "type": "PaymentShippingType",
              "read-only": 1
            },
            "shippingAddress": {
              "specs": "payment-request",
              "name": "shippingAddress",
              "type-original": "PaymentAddress?",
              "nullable": 1,
              "exposed": "Window",
              "type": "PaymentAddress",
              "read-only": 1
            },
            "id": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "shippingOption": {
              "specs": "payment-request",
              "name": "shippingOption",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "payment-request",
              "name": "shippingaddresschange",
              "type": "Event"
            },
            {
              "dispatch": "sync",
              "specs": "payment-request",
              "name": "shippingoptionchange",
              "type": "Event"
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "show": {
              "signature": [
                {
                  "subtype": {
                    "type": "PaymentResponse"
                  },
                  "type": "Promise",
                  "type-original": "Promise<PaymentResponse>"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "name": "show"
            },
            "abort": {
              "signature": [
                {
                  "subtype": {
                    "type": "void"
                  },
                  "type": "Promise",
                  "type-original": "Promise<void>"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "name": "abort"
            },
            "canMakePayment": {
              "signature": [
                {
                  "subtype": {
                    "type": "boolean"
                  },
                  "type": "Promise",
                  "type-original": "Promise<boolean>"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "name": "canMakePayment"
            }
          }
        },
        "extends": "EventTarget",
        "secure-context": 1,
        "comment": "This Payment Request API interface is the primary access point into the API, and lets web content and apps accept payments from the end user."
      },
      "WorkerNavigator": {
        "specs": "workers",
        "anonymous-methods": {
          "method": []
        },
        "name": "WorkerNavigator",
        "properties": {
          "property": {
            "permissions": {
              "name": "permissions",
              "type": "Permissions",
              "read-only": 1,
              "exposed": "Worker"
            },
            "serviceWorker": {
              "name": "serviceWorker",
              "type": "ServiceWorkerContainer",
              "read-only": 1,
              "exposed": "Worker"
            }
          },
          "namesakes": {}
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Worker",
        "methods": {
          "method": {}
        },
        "extends": "Object",
        "implements": [
          "NavigatorID",
          "NavigatorOnLine",
          "NavigatorBeacon",
          "NavigatorConcurrentHardware",
          "NavigatorStorage"
        ],
        "comment": "A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator."
      },
      "HTMLFormControlsCollection": {
        "name": "HTMLFormControlsCollection",
        "extends": "HTMLCollection",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": [
                    {
                      "type": "RadioNodeList"
                    },
                    {
                      "type": "Element"
                    }
                  ],
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the item with ID or name name from the collection.\n * \n * If there are multiple matching items, then a RadioNodeList object containing all those elements is returned.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A collection of HTML form control elements. "
      },
      "XPathEvaluator": {
        "name": "XPathEvaluator",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "XPathEvaluator",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "XPathEvaluatorBase"
        ],
        "comment": "The XPathEvaluator interface allows to compile and evaluate XPath expressions."
      },
      "SVGFEFloodElement": {
        "name": "SVGFEFloodElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feFlood> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feFlood"
          }
        ]
      },
      "SVGFEMergeNodeElement": {
        "name": "SVGFEMergeNodeElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feMergeNode> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feMergeNode"
          }
        ]
      },
      "TrackEvent": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 1,
              "type": "TrackEvent",
              "param": [
                {
                  "name": "typeArg",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "TrackEventInit",
                  "optional": 1,
                  "type-original": "TrackEventInit"
                }
              ],
              "type-original": "TrackEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "TrackEvent",
        "properties": {
          "property": {
            "track": {
              "specs": "html5",
              "name": "track",
              "type-original": "(VideoTrack or AudioTrack or TextTrack)?",
              "exposed": "Window",
              "type": [
                {
                  "nullable": 1,
                  "type": "VideoTrack"
                },
                {
                  "nullable": 1,
                  "type": "AudioTrack"
                },
                {
                  "nullable": 1,
                  "type": "TextTrack"
                }
              ],
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack."
      },
      "IntersectionObserverEntry": {
        "name": "IntersectionObserverEntry",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "time": {
              "name": "time",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "rootBounds": {
              "name": "rootBounds",
              "type": "DOMRectReadOnly",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "boundingClientRect": {
              "name": "boundingClientRect",
              "type": "DOMRectReadOnly",
              "read-only": 1,
              "exposed": "Window"
            },
            "intersectionRect": {
              "name": "intersectionRect",
              "type": "DOMRectReadOnly",
              "read-only": 1,
              "exposed": "Window"
            },
            "isIntersecting": {
              "name": "isIntersecting",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "intersectionRatio": {
              "name": "intersectionRatio",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "target": {
              "name": "target",
              "type": "Element",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "IntersectionObserverEntry",
              "param": [
                {
                  "name": "intersectionObserverEntryInit",
                  "type": "IntersectionObserverEntryInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition."
      },
      "MSGesture": {
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "type": "MSGesture",
              "type-original": "MSGesture"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "MSGesture",
        "properties": {
          "property": {
            "target": {
              "specs": "none",
              "exposed": "Window",
              "name": "target",
              "type": "Element",
              "type-original": "Element"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "stop": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "stop"
            },
            "addPointer": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "pointerId",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "addPointer"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "SVGPathSegCurvetoQuadraticRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoQuadraticRel",
        "properties": {
          "property": {
            "y1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y1",
              "type": "float",
              "type-original": "float"
            },
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "x1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "WebGLRenderingContext": {
        "name": "WebGLRenderingContext",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "WebGLRenderingContextBase",
          "WebGLRenderingContextOverloads"
        ],
        "comment": "Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element."
      },
      "Performance": {
        "name": "Performance",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "now": {
              "name": "now",
              "signature": [
                {
                  "type": "DOMHighResTimeStamp",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "getEntries": {
              "name": "getEntries",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "getEntriesByType": {
              "name": "getEntriesByType",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getEntriesByName": {
              "name": "getEntriesByName",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "clearResourceTimings": {
              "name": "clearResourceTimings",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "setResourceTimingBufferSize": {
              "name": "setResourceTimingBufferSize",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "maxSize",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "mark": {
              "name": "mark",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "markName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "clearMarks": {
              "name": "clearMarks",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "markName",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "measure": {
              "name": "measure",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "measureName",
                      "type": "DOMString"
                    },
                    {
                      "name": "startMark",
                      "type": "DOMString",
                      "optional": 1
                    },
                    {
                      "name": "endMark",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "clearMeasures": {
              "name": "clearMeasures",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "measureName",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "timeOrigin": {
              "name": "timeOrigin",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "timing": {
              "name": "timing",
              "type": "PerformanceTiming",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "navigation": {
              "name": "navigation",
              "type": "PerformanceNavigation",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "onresourcetimingbufferfull": {
              "name": "onresourcetimingbufferfull",
              "type": "EventHandler",
              "event-handler": "resourcetimingbufferfull",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API."
      },
      "HTMLAllCollection": {
        "name": "HTMLAllCollection",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": [
                    {
                      "type": "HTMLCollection"
                    },
                    {
                      "type": "Element"
                    }
                  ],
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the item with ID or name name from the collection.\n * \n * If there are multiple matching items, then an HTMLCollection object containing all those elements is returned.\n * \n * Only button, form, iframe, input, map, meta, object, select, and textarea elements can have a name for the purpose of this method; their name is given by the value of their name attribute.\n */"
            },
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": [
                    {
                      "type": "HTMLCollection"
                    },
                    {
                      "type": "Element"
                    }
                  ],
                  "nullable": 1,
                  "param": [
                    {
                      "name": "nameOrIndex",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns the item with index index from the collection (determined by tree order).\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "Element",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of elements in the collection.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "CompositionEvent": {
        "name": "CompositionEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "CompositionEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "CompositionEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The DOM CompositionEvent represents events that occur due to the user indirectly entering text."
      },
      "HTMLPictureElement": {
        "name": "HTMLPictureElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A <picture> HTML element. It doesn't implement specific properties or methods.",
        "element": [
          {
            "name": "picture"
          }
        ]
      },
      "SVGMarkerElement": {
        "name": "SVGMarkerElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_MARKERUNITS_UNKNOWN": {
              "name": "SVG_MARKERUNITS_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_MARKERUNITS_USERSPACEONUSE": {
              "name": "SVG_MARKERUNITS_USERSPACEONUSE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_MARKERUNITS_STROKEWIDTH": {
              "name": "SVG_MARKERUNITS_STROKEWIDTH",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_MARKER_ORIENT_UNKNOWN": {
              "name": "SVG_MARKER_ORIENT_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_MARKER_ORIENT_AUTO": {
              "name": "SVG_MARKER_ORIENT_AUTO",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_MARKER_ORIENT_ANGLE": {
              "name": "SVG_MARKER_ORIENT_ANGLE",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {
            "setOrientToAuto": {
              "name": "setOrientToAuto",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setOrientToAngle": {
              "name": "setOrientToAngle",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "angle",
                      "type": "SVGAngle"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "refX": {
              "name": "refX",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "refY": {
              "name": "refY",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "markerUnits": {
              "name": "markerUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "markerWidth": {
              "name": "markerWidth",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "markerHeight": {
              "name": "markerHeight",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientType": {
              "name": "orientType",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientAngle": {
              "name": "orientAngle",
              "type": "SVGAnimatedAngle",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFitToViewBox"
        ],
        "element": [
          {
            "namespace": "SVG",
            "name": "marker"
          }
        ]
      },
      "TextDecoder": {
        "name": "TextDecoder",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "decode": {
              "name": "decode",
              "signature": [
                {
                  "type": "USVString",
                  "param": [
                    {
                      "name": "input",
                      "type": "BufferSource",
                      "optional": 1
                    },
                    {
                      "name": "options",
                      "type": "TextDecodeOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented stream. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.\n * \n * ```\n * var string = \"\", decoder = new TextDecoder(encoding), buffer;\n * while(buffer = next_chunk()) {\n *   string += decoder.decode(buffer, {stream:true});\n * }\n * string += decoder.decode(); // end-of-stream\n * ```\n * \n * If the error mode is \"fatal\" and encoding's decoder returns error, throws a TypeError.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TextDecoder",
              "param": [
                {
                  "name": "label",
                  "type": "DOMString",
                  "optional": 1
                },
                {
                  "name": "options",
                  "type": "TextDecoderOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "TextDecoderCommon"
        ],
        "comment": "A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays."
      },
      "HTMLMeterElement": {
        "name": "HTMLMeterElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "double",
              "exposed": "Window"
            },
            "min": {
              "name": "min",
              "type": "double",
              "exposed": "Window"
            },
            "max": {
              "name": "max",
              "type": "double",
              "exposed": "Window"
            },
            "low": {
              "name": "low",
              "type": "double",
              "exposed": "Window"
            },
            "high": {
              "name": "high",
              "type": "double",
              "exposed": "Window"
            },
            "optimum": {
              "name": "optimum",
              "type": "double",
              "exposed": "Window"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
        "element": [
          {
            "name": "meter"
          }
        ]
      },
      "SVGFEMergeElement": {
        "name": "SVGFEMergeElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feMerge> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feMerge"
          }
        ]
      },
      "SVGPathSegCurvetoCubicSmoothAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoCubicSmoothAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x2",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "y2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y2",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "TransitionEvent": {
        "name": "TransitionEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "propertyName": {
              "name": "propertyName",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "elapsedTime": {
              "name": "elapsedTime",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pseudoElement": {
              "name": "pseudoElement",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TransitionEvent",
              "param": [
                {
                  "name": "type",
                  "type": "CSSOMString"
                },
                {
                  "name": "transitionEventInitDict",
                  "type": "TransitionEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events providing information related to transitions."
      },
      "IDBObjectStore": {
        "name": "IDBObjectStore",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "put": {
              "name": "put",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "value",
                      "type": "any"
                    },
                    {
                      "name": "key",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Adds or updates a record in store with the given value and key.\n * \n * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n * \n * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n * \n * If successful, request's result will be the record's key.\n */",
              "override-signatures": [
                "put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>"
              ]
            },
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "value",
                      "type": "any"
                    },
                    {
                      "name": "key",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Adds or updates a record in store with the given value and key.\n * \n * If the store uses in-line keys and key is specified a \"DataError\" DOMException will be thrown.\n * \n * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a \"ConstraintError\" DOMException.\n * \n * If successful, request's result will be the record's key.\n */",
              "override-signatures": [
                "add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>"
              ]
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Deletes records in store with the given key or in the given key range in query.\n * \n * If successful, request's result will be undefined.\n */",
              "override-signatures": [
                "delete(key: IDBValidKey | IDBKeyRange): IDBRequest<undefined>"
              ]
            },
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Deletes all records in store.\n * \n * If successful, request's result will be undefined.\n */",
              "override-signatures": [
                "clear(): IDBRequest<undefined>"
              ]
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the value of the first record matching the given key or key range in query.\n * \n * If successful, request's result will be the value, or undefined if there was no matching record.\n */",
              "override-signatures": [
                "get(query: IDBValidKey | IDBKeyRange): IDBRequest<any | undefined>"
              ]
            },
            "getKey": {
              "name": "getKey",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the key of the first record matching the given key or key range in query.\n * \n * If successful, request's result will be the key, or undefined if there was no matching record.\n */",
              "override-signatures": [
                "getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>"
              ]
            },
            "getAll": {
              "name": "getAll",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "count",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the values of the records matching the given key or key range in query (up to count if given).\n * \n * If successful, request's result will be an Array of the values.\n */",
              "override-signatures": [
                "getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>"
              ]
            },
            "getAllKeys": {
              "name": "getAllKeys",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "count",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the keys of records matching the given key or key range in query (up to count if given).\n * \n * If successful, request's result will be an Array of the keys.\n */",
              "override-signatures": [
                "getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>"
              ]
            },
            "count": {
              "name": "count",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Retrieves the number of records matching the given key or key range in query.\n * \n * If successful, request's result will be the count.\n */",
              "override-signatures": [
                "count(key?: IDBValidKey | IDBKeyRange): IDBRequest<number>"
              ]
            },
            "openCursor": {
              "name": "openCursor",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "direction",
                      "type": "IDBCursorDirection",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.\n * \n * If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.\n */",
              "override-signatures": [
                "openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>"
              ]
            },
            "openKeyCursor": {
              "name": "openKeyCursor",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "query",
                      "type": "any",
                      "optional": 1
                    },
                    {
                      "name": "direction",
                      "type": "IDBCursorDirection",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.\n * \n * If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.\n */",
              "override-signatures": [
                "openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>"
              ]
            },
            "index": {
              "name": "index",
              "signature": [
                {
                  "type": "IDBIndex",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "createIndex": {
              "name": "createIndex",
              "signature": [
                {
                  "type": "IDBIndex",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "keyPath",
                      "type": [
                        {
                          "type": "DOMString"
                        },
                        {
                          "type": "sequence",
                          "subtype": {
                            "type": "DOMString"
                          }
                        }
                      ]
                    },
                    {
                      "name": "options",
                      "type": "IDBIndexParameters",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a \"ConstraintError\" DOMException.\n * \n * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n */"
            },
            "deleteIndex": {
              "name": "deleteIndex",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Deletes the index in store with the given name.\n * \n * Throws an \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the name of the store.\n */"
            },
            "keyPath": {
              "name": "keyPath",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the key path of the store, or null if none.\n */",
              "override-type": "string | string[]"
            },
            "indexNames": {
              "name": "indexNames",
              "type": "DOMStringList",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a list of the names of indexes in the store.\n */"
            },
            "transaction": {
              "name": "transaction",
              "type": "IDBTransaction",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the associated transaction.\n */"
            },
            "autoIncrement": {
              "name": "autoIncrement",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if the store has a key generator, and false otherwise.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)"
      },
      "DOMStringMap": {
        "name": "DOMStringMap",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used by the dataset HTML attribute to represent data for custom attributes added to elements.",
        "override-index-signatures": [
          "[name: string]: string | undefined"
        ]
      },
      "GamepadEvent": {
        "name": "GamepadEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "gamepad": {
              "name": "gamepad",
              "type": "Gamepad",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "GamepadEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "GamepadEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Gamepad API interface contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to."
      },
      "OES_element_index_uint": {
        "name": "OES_element_index_uint",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().",
        "override-exposed": "Window Worker"
      },
      "MSFIDOCredentialAssertion": {
        "specs": "webauthn",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSFIDOCredentialAssertion",
        "properties": {
          "property": {
            "algorithm": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "algorithm",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "Algorithm"
                }
              ],
              "type-original": "AlgorithmIdentifier",
              "read-only": 1
            },
            "transportHints": {
              "specs": "webauthn",
              "name": "transportHints",
              "type-original": "sequence<MSTransportType>",
              "subtype": {
                "type": "MSTransportType"
              },
              "exposed": "Window",
              "type": "sequence",
              "read-only": 1
            },
            "attestation": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "attestation",
              "type": "any",
              "type-original": "any",
              "read-only": 1
            },
            "publicKey": {
              "specs": "webauthn",
              "exposed": "Window",
              "name": "publicKey",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "MSAssertion"
      },
      "VREyeParameters": {
        "constants": {
          "constant": {}
        },
        "specs": "WebVR",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "VREyeParameters",
        "extends": "Object",
        "properties": {
          "property": {
            "renderWidth": {
              "specs": "WebVR",
              "name": "renderWidth",
              "constant": 1,
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "renderHeight": {
              "specs": "WebVR",
              "name": "renderHeight",
              "constant": 1,
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "fieldOfView": {
              "specs": "WebVR",
              "name": "fieldOfView",
              "constant": 1,
              "type-original": "VRFieldOfView",
              "deprecated": 1,
              "exposed": "Window",
              "type": "VRFieldOfView",
              "read-only": 1
            },
            "offset": {
              "specs": "WebVR",
              "name": "offset",
              "constant": 1,
              "type-original": "Float32Array",
              "exposed": "Window",
              "type": "Float32Array",
              "read-only": 1
            }
          }
        },
        "comment": "This WebVR API interface represents all the information required to correctly render a scene for a given eye, including field of view information."
      },
      "AudioNode": {
        "name": "AudioNode",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "connect": {
              "name": "connect",
              "signature": [
                {
                  "type": "AudioNode",
                  "param": [
                    {
                      "name": "destinationNode",
                      "type": "AudioNode"
                    },
                    {
                      "name": "output",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "input",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationParam",
                      "type": "AudioParam"
                    },
                    {
                      "name": "output",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "disconnect": {
              "name": "disconnect",
              "signature": [
                {
                  "type": "void",
                  "param": []
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "output",
                      "type": "unsigned long"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationNode",
                      "type": "AudioNode"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationNode",
                      "type": "AudioNode"
                    },
                    {
                      "name": "output",
                      "type": "unsigned long"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationNode",
                      "type": "AudioNode"
                    },
                    {
                      "name": "output",
                      "type": "unsigned long"
                    },
                    {
                      "name": "input",
                      "type": "unsigned long"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationParam",
                      "type": "AudioParam"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destinationParam",
                      "type": "AudioParam"
                    },
                    {
                      "name": "output",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "context": {
              "name": "context",
              "type": "BaseAudioContext",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfInputs": {
              "name": "numberOfInputs",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfOutputs": {
              "name": "numberOfOutputs",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "channelCount": {
              "name": "channelCount",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "channelCountMode": {
              "name": "channelCountMode",
              "type": "ChannelCountMode",
              "exposed": "Window"
            },
            "channelInterpretation": {
              "name": "channelInterpretation",
              "type": "ChannelInterpretation",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A generic interface for representing an audio processing module. Examples include:"
      },
      "IDBVersionChangeEvent": {
        "name": "IDBVersionChangeEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "oldVersion": {
              "name": "oldVersion",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "newVersion": {
              "name": "newVersion",
              "type": "unsigned long long",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "IDBVersionChangeEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "IDBVersionChangeEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function."
      },
      "PermissionRequest": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "PermissionRequest",
        "properties": {
          "property": {
            "state": {
              "specs": "none",
              "exposed": "Window",
              "name": "state",
              "type": "MSWebViewPermissionState",
              "type-original": "MSWebViewPermissionState",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "defer": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "defer"
            }
          }
        },
        "exposed": "Window",
        "extends": "DeferredPermissionRequest"
      },
      "MSInputMethodContext": {
        "specs": "ime-api",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSInputMethodContext",
        "properties": {
          "property": {
            "oncandidatewindowshow": {
              "specs": "ime-api",
              "name": "oncandidatewindowshow",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSCandidateWindowShow"
            },
            "compositionStartOffset": {
              "specs": "ime-api",
              "exposed": "Window",
              "name": "compositionStartOffset",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "target": {
              "specs": "ime-api",
              "exposed": "Window",
              "name": "target",
              "type": "HTMLElement",
              "type-original": "HTMLElement",
              "read-only": 1
            },
            "oncandidatewindowhide": {
              "specs": "ime-api",
              "name": "oncandidatewindowhide",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSCandidateWindowHide"
            },
            "oncandidatewindowupdate": {
              "specs": "ime-api",
              "name": "oncandidatewindowupdate",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "MSCandidateWindowUpdate"
            },
            "compositionEndOffset": {
              "specs": "ime-api",
              "exposed": "Window",
              "name": "compositionEndOffset",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": []
        },
        "methods": {
          "method": {
            "getCandidateWindowClientRect": {
              "signature": [
                {
                  "type": "ClientRect",
                  "type-original": "ClientRect"
                }
              ],
              "specs": "ime-api",
              "exposed": "Window",
              "name": "getCandidateWindowClientRect"
            },
            "getCompositionAlternatives": {
              "signature": [
                {
                  "subtype": {
                    "type": "DOMString"
                  },
                  "type": "sequence",
                  "type-original": "sequence<DOMString>"
                }
              ],
              "specs": "ime-api",
              "exposed": "Window",
              "name": "getCompositionAlternatives"
            },
            "isCandidateWindowVisible": {
              "signature": [
                {
                  "type": "boolean",
                  "type-original": "boolean"
                }
              ],
              "specs": "ime-api",
              "exposed": "Window",
              "name": "isCandidateWindowVisible"
            },
            "hasComposition": {
              "signature": [
                {
                  "type": "boolean",
                  "type-original": "boolean"
                }
              ],
              "specs": "ime-api",
              "exposed": "Window",
              "name": "hasComposition"
            }
          }
        },
        "exposed": "Window",
        "extends": "EventTarget"
      },
      "SVGPathSegMovetoRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegMovetoRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "PluginArray": {
        "name": "PluginArray",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "refresh": {
              "name": "refresh",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "reload",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Plugin",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": "Plugin",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods."
      },
      "SVGFESpecularLightingElement": {
        "name": "SVGFESpecularLightingElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "surfaceScale": {
              "name": "surfaceScale",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "specularConstant": {
              "name": "specularConstant",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "specularExponent": {
              "name": "specularExponent",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthX": {
              "name": "kernelUnitLengthX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthY": {
              "name": "kernelUnitLengthY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feSpecularLighting> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feSpecularLighting"
          }
        ]
      },
      "SVGDescElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGDescElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "filter-effects",
            "namespace": "SVG",
            "name": "desc"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "comment": "Corresponds to the <desc> element."
      },
      "BhxBrowser": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "BhxBrowser",
        "properties": {
          "property": {
            "lastError": {
              "specs": "none",
              "exposed": "Window",
              "name": "lastError",
              "type": "DOMException",
              "type-original": "DOMException",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fireExtensionApiTelemetry": {
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "void",
                  "param": [
                    {
                      "name": "functionName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "isSucceeded",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "isSupported",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "errorString",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "fireExtensionApiTelemetry"
            },
            "genericSynchronousFunction": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "functionId",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "genericSynchronousFunction"
            },
            "webPlatformGenericFunction": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "destination",
                      "type": "object",
                      "type-original": "object"
                    },
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "callbackId",
                      "type": "long",
                      "optional": 1,
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "webPlatformGenericFunction"
            },
            "setLastError": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "setLastError"
            },
            "clearLastError": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "clearLastError"
            },
            "checkMatchesUriExpression": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "pattern",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "checkMatchesUriExpression"
            },
            "getExtensionId": {
              "signature": [
                {
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getExtensionId"
            },
            "registerGenericListenerHandler": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "eventHandler",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "registerGenericListenerHandler"
            },
            "getThisAddress": {
              "signature": [
                {
                  "type": "object",
                  "type-original": "object"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getThisAddress"
            },
            "checkMatchesGlobExpression": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "pattern",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "checkMatchesGlobExpression"
            },
            "registerGenericFunctionCallbackHandler": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "callbackHandler",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "registerGenericFunctionCallbackHandler"
            },
            "genericFunction": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "functionId",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "destination",
                      "type": "object",
                      "type-original": "object"
                    },
                    {
                      "name": "parameters",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    },
                    {
                      "name": "callbackId",
                      "type": "long",
                      "optional": 1,
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "genericFunction"
            },
            "currentWindowId": {
              "signature": [
                {
                  "type": "long",
                  "type-original": "long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "currentWindowId"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "MediaElementAudioSourceNode": {
        "name": "MediaElementAudioSourceNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "mediaElement": {
              "name": "mediaElement",
              "type": "HTMLMediaElement",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaElementAudioSourceNode",
              "param": [
                {
                  "name": "context",
                  "type": "AudioContext"
                },
                {
                  "name": "options",
                  "type": "MediaElementAudioSourceOptions"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio."
      },
      "SVGClipPathElement": {
        "name": "SVGClipPathElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clipPathUnits": {
              "name": "clipPathUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "transform": {
              "name": "transform",
              "type": "SVGAnimatedTransformList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to the properties of <clipPath> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "clipPath"
          }
        ]
      },
      "VideoTrack": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "VideoTrack",
        "extends": "Object",
        "properties": {
          "property": {
            "kind": {
              "specs": "html5",
              "exposed": "Window",
              "name": "kind",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "language": {
              "specs": "html5",
              "exposed": "Window",
              "name": "language",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "sourceBuffer": {
              "name": "sourceBuffer",
              "type": "SourceBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "label": {
              "specs": "html5",
              "exposed": "Window",
              "name": "label",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "id": {
              "specs": "html5",
              "exposed": "Window",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "selected": {
              "specs": "html5",
              "exposed": "Window",
              "name": "selected",
              "type": "boolean",
              "type-original": "boolean"
            }
          },
          "namesakes": {}
        },
        "comment": "A single video track from a <video> element."
      },
      "ServiceUIFrameContext": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "ServiceUIFrameContext",
        "static": 1,
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCachedFrameMessage": {
              "property-descriptor-not-configurable": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "key",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "none",
              "property-descriptor-not-writable": 1,
              "exposed": "Window",
              "name": "getCachedFrameMessage",
              "static": 1
            },
            "postFrameMessage": {
              "property-descriptor-not-configurable": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "data",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "property-descriptor-not-writable": 1,
              "exposed": "Window",
              "name": "postFrameMessage",
              "static": 1
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "IDBCursorWithValue": {
        "name": "IDBCursorWithValue",
        "extends": "IDBCursor",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the cursor's current value.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property."
      },
      "HTMLAppletElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "off on",
              "value-syntax": "enum",
              "name": "unselectable"
            }
          ]
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLAppletElement",
        "properties": {
          "property": {
            "width": {
              "pure": 1,
              "specs": "html5",
              "name": "width",
              "content-attribute": "width",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "vspace": {
              "pure": 1,
              "specs": "html5",
              "name": "vspace",
              "content-attribute": "vspace",
              "type-original": "unsigned long",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "unsigned long",
              "content-attribute-reflects": 1
            },
            "object": {
              "pure": 1,
              "specs": "html5",
              "name": "object",
              "type-original": "USVString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "type": "USVString"
            },
            "archive": {
              "pure": 1,
              "specs": "html5",
              "name": "archive",
              "content-attribute": "archive",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n */"
            },
            "alt": {
              "pure": 1,
              "specs": "html5",
              "name": "alt",
              "content-attribute": "alt",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
            },
            "align": {
              "specs": "html5",
              "content-attribute": "align",
              "type-original": "DOMString",
              "interop": 1,
              "pure": 1,
              "content-attribute-enum-values": "absbottom absmiddle baseline bottom left middle right texttop top",
              "name": "align",
              "deprecated": 1,
              "content-attribute-value-syntax": "enum",
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "name": {
              "content-attribute-enum-values": "_blank _self _parent _top",
              "pure": 1,
              "specs": "html5",
              "name": "name",
              "content-attribute": "name",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "name_ref",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
            },
            "height": {
              "pure": 1,
              "specs": "html5",
              "name": "height",
              "content-attribute": "height",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "codeBase": {
              "pure": 1,
              "specs": "html5",
              "name": "codeBase",
              "content-attribute": "codebase",
              "type-original": "USVString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "url",
              "type": "USVString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves the URL of the component.\n */"
            },
            "hspace": {
              "pure": 1,
              "specs": "html5",
              "name": "hspace",
              "content-attribute": "hspace",
              "type-original": "unsigned long",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "non_negative_integer",
              "type": "unsigned long",
              "content-attribute-reflects": 1
            },
            "code": {
              "pure": 1,
              "specs": "html5",
              "name": "code",
              "content-attribute": "code",
              "type-original": "DOMString",
              "interop": 1,
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "url",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "form": {
              "name": "form",
              "read-only": 1,
              "override-type": "HTMLFormElement | null"
            }
          }
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "applet"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "HTMLElement"
      },
      "TextMetrics": {
        "name": "TextMetrics",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "actualBoundingBoxLeft": {
              "name": "actualBoundingBoxLeft",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "actualBoundingBoxRight": {
              "name": "actualBoundingBoxRight",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "fontBoundingBoxAscent": {
              "name": "fontBoundingBoxAscent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "fontBoundingBoxDescent": {
              "name": "fontBoundingBoxDescent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "actualBoundingBoxAscent": {
              "name": "actualBoundingBoxAscent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "actualBoundingBoxDescent": {
              "name": "actualBoundingBoxDescent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "emHeightAscent": {
              "name": "emHeightAscent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "emHeightDescent": {
              "name": "emHeightDescent",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "hangingBaseline": {
              "name": "hangingBaseline",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "alphabeticBaseline": {
              "name": "alphabeticBaseline",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            },
            "ideographicBaseline": {
              "name": "ideographicBaseline",
              "type": "double",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the measurement described below.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method."
      },
      "SVGAnimatedString": {
        "name": "SVGAnimatedString",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "DOMString",
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The SVGAnimatedString interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this."
      },
      "SVGPathSegLinetoVerticalRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoVerticalRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "CDATASection": {
        "name": "CDATASection",
        "extends": "Text",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section."
      },
      "HTMLSelectElement": {
        "name": "HTMLSelectElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a select object or an object from an options collection.\n * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n */"
            },
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": "HTMLOptionElement",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Retrieves a select object or an object from an options collection.\n * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\n */"
            },
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "element",
                      "type": [
                        {
                          "type": "HTMLOptionElement"
                        },
                        {
                          "type": "HTMLOptGroupElement"
                        }
                      ]
                    },
                    {
                      "name": "before",
                      "type": [
                        {
                          "type": "HTMLElement"
                        },
                        {
                          "type": "long"
                        }
                      ],
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Adds an element to the areas, controlRange, or options collection.\n * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\n * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.\n */"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": []
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes an element from the collection.\n * @param index Number that specifies the zero-based index of the element to remove from the collection.\n */"
            },
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "option",
                      "type": "HTMLOptionElement",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "autocomplete": {
              "name": "autocomplete",
              "type": "DOMString",
              "exposed": "Window"
            },
            "autofocus": {
              "name": "autofocus",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n */"
            },
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "multiple": {
              "name": "multiple",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "required": {
              "name": "required",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
            },
            "size": {
              "name": "size",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of rows in the list box.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves the type of select control based on the value of the MULTIPLE attribute.\n */"
            },
            "options": {
              "name": "options",
              "type": "HTMLOptionsCollection",
              "read-only": 1,
              "exposed": "Window"
            },
            "length": {
              "name": "length",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
            },
            "selectedOptions": {
              "name": "selectedOptions",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLOptionElement>"
            },
            "selectedIndex": {
              "name": "selectedIndex",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the index of the selected option in a select object.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value which is returned to the server when the form control is submitted.\n */"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
        "element": [
          {
            "name": "select"
          }
        ],
        "override-index-signatures": [
          "[name: number]: HTMLOptionElement | HTMLOptGroupElement"
        ]
      },
      "MSMediaKeyNeededEvent": {
        "constants": {
          "constant": {}
        },
        "specs": "encrypted-media-20130510",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "MSMediaKeyNeededEvent",
        "extends": "Event",
        "properties": {
          "property": {
            "initData": {
              "specs": "encrypted-media-20130510",
              "name": "initData",
              "type-original": "Uint8Array?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Uint8Array",
              "read-only": 1
            }
          }
        }
      },
      "RTCIceTransportStateChangedEvent": {
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCIceTransportStateChangedEvent",
        "properties": {
          "property": {
            "state": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "state",
              "type": "RTCIceTransportState",
              "type-original": "RTCIceTransportState",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "CSSStyleSheet": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "addImport": {
              "deprecated": 1,
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "bstrURL",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "lIndex",
                      "optional": 1,
                      "type": "long",
                      "default": "-1",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "addImport"
            },
            "addPageRule": {
              "deprecated": 1,
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "long",
                  "param": [
                    {
                      "name": "bstrSelector",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "bstrStyle",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "lIndex",
                      "optional": 1,
                      "type": "long",
                      "default": "-1",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "addPageRule"
            },
            "removeRule": {
              "interop": 1,
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "lIndex",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "removeRule"
            },
            "insertRule": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "rule",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "optional": 1,
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "unsigned long"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "insertRule"
            },
            "deleteRule": {
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "default": "-1",
                      "type": "unsigned long",
                      "optional": 1,
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "cssom",
              "exposed": "Window",
              "name": "deleteRule"
            },
            "addRule": {
              "interop": 1,
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "bstrSelector",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "bstrStyle",
                      "optional": 1,
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "lIndex",
                      "optional": 1,
                      "type": "long",
                      "default": "-1",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "addRule"
            },
            "removeImport": {
              "deprecated": 1,
              "extension": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "lIndex",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "removeImport"
            }
          }
        },
        "name": "CSSStyleSheet",
        "extends": "StyleSheet",
        "properties": {
          "property": {
            "owningElement": {
              "extension": 1,
              "specs": "none",
              "name": "owningElement",
              "type-original": "Element",
              "deprecated": 1,
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            },
            "imports": {
              "extension": 1,
              "specs": "none",
              "name": "imports",
              "type-original": "StyleSheetList",
              "deprecated": 1,
              "exposed": "Window",
              "type": "StyleSheetList",
              "read-only": 1
            },
            "rules": {
              "extension": 1,
              "specs": "none",
              "name": "rules",
              "type-original": "CSSRuleList",
              "interop": 1,
              "exposed": "Window",
              "type": "CSSRuleList",
              "read-only": 1
            },
            "isAlternate": {
              "extension": 1,
              "specs": "none",
              "name": "isAlternate",
              "type-original": "boolean",
              "deprecated": 1,
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "isPrefAlternate": {
              "extension": 1,
              "specs": "none",
              "name": "isPrefAlternate",
              "type-original": "boolean",
              "deprecated": 1,
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "readOnly": {
              "extension": 1,
              "specs": "none",
              "name": "readOnly",
              "type-original": "boolean",
              "deprecated": 1,
              "exposed": "Window",
              "type": "boolean",
              "read-only": 1
            },
            "cssText": {
              "deprecated": 1,
              "extension": 1,
              "specs": "none",
              "exposed": "Window",
              "name": "cssText",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "ownerRule": {
              "pure": 1,
              "specs": "cssom",
              "name": "ownerRule",
              "type-original": "CSSRule?",
              "nullable": 1,
              "exposed": "Window",
              "type": "CSSRule",
              "read-only": 1
            },
            "cssRules": {
              "specs": "cssom",
              "same-object": 1,
              "name": "cssRules",
              "type-original": "CSSRuleList",
              "exposed": "Window",
              "type": "CSSRuleList",
              "read-only": 1
            },
            "id": {
              "extension": 1,
              "specs": "none",
              "name": "id",
              "type-original": "DOMString",
              "deprecated": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "pages": {
              "extension": 1,
              "specs": "none",
              "name": "pages",
              "type-original": "StyleSheetPageList",
              "deprecated": 1,
              "exposed": "Window",
              "type": "StyleSheetPageList",
              "read-only": 1,
              "override-type": "any"
            }
          }
        },
        "comment": "A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet."
      },
      "AudioBuffer": {
        "name": "AudioBuffer",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getChannelData": {
              "name": "getChannelData",
              "signature": [
                {
                  "type": "Float32Array",
                  "param": [
                    {
                      "name": "channel",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "copyFromChannel": {
              "name": "copyFromChannel",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "destination",
                      "type": "Float32Array"
                    },
                    {
                      "name": "channelNumber",
                      "type": "unsigned long"
                    },
                    {
                      "name": "startInChannel",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "copyToChannel": {
              "name": "copyToChannel",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "source",
                      "type": "Float32Array"
                    },
                    {
                      "name": "channelNumber",
                      "type": "unsigned long"
                    },
                    {
                      "name": "startInChannel",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "sampleRate": {
              "name": "sampleRate",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "duration": {
              "name": "duration",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfChannels": {
              "name": "numberOfChannels",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioBuffer",
              "param": [
                {
                  "name": "options",
                  "type": "AudioBufferOptions"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode."
      },
      "HTMLMetaElement": {
        "name": "HTMLMetaElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value specified in the content attribute of the meta object.\n */"
            },
            "httpEquiv": {
              "name": "httpEquiv",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\n */"
            },
            "content": {
              "name": "content",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets meta-information to associate with httpEquiv or name.\n */"
            },
            "scheme": {
              "name": "scheme",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
        "element": [
          {
            "name": "meta"
          }
        ]
      },
      "Selection": {
        "name": "Selection",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getRangeAt": {
              "name": "getRangeAt",
              "signature": [
                {
                  "type": "Range",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "addRange": {
              "name": "addRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "range",
                      "type": "Range"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeRange": {
              "name": "removeRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "range",
                      "type": "Range"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeAllRanges": {
              "name": "removeAllRanges",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "empty": {
              "name": "empty",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "collapse": {
              "name": "collapse",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node",
                      "nullable": 1
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setPosition": {
              "name": "setPosition",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node",
                      "nullable": 1
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "collapseToStart": {
              "name": "collapseToStart",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "collapseToEnd": {
              "name": "collapseToEnd",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "extend": {
              "name": "extend",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setBaseAndExtent": {
              "name": "setBaseAndExtent",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "anchorNode",
                      "type": "Node"
                    },
                    {
                      "name": "anchorOffset",
                      "type": "unsigned long"
                    },
                    {
                      "name": "focusNode",
                      "type": "Node"
                    },
                    {
                      "name": "focusOffset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "selectAllChildren": {
              "name": "selectAllChildren",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "deleteFromDocument": {
              "name": "deleteFromDocument",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "containsNode": {
              "name": "containsNode",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "allowPartialContainment",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "DOMString",
                  "param": []
                }
              ],
              "stringifier": 1,
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "anchorNode": {
              "name": "anchorNode",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "anchorOffset": {
              "name": "anchorOffset",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "focusNode": {
              "name": "focusNode",
              "type": "Node",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "focusOffset": {
              "name": "focusOffset",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "isCollapsed": {
              "name": "isCollapsed",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "rangeCount": {
              "name": "rangeCount",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call Window.getSelection()."
      },
      "SVGAnimatedAngle": {
        "name": "SVGAnimatedAngle",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "SVGAngle",
              "read-only": 1,
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "SVGAngle",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of basic type <angle> which can be animated."
      },
      "SVGScriptElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGScriptElement",
        "properties": {
          "property": {
            "type": {
              "specs": "svg2",
              "name": "type",
              "content-attribute": "type",
              "type-original": "DOMString",
              "content-attribute-value-syntax": "mime_type",
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "script"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Corresponds to the SVG <script> element."
      },
      "CSSStyleRule": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSStyleRule",
        "extends": "CSSRule",
        "properties": {
          "property": {
            "selectorText": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "selectorText",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "style": {
              "specs": "cssom",
              "same-object": 1,
              "name": "style",
              "type-original": "CSSStyleDeclaration",
              "exposed": "Window",
              "type": "CSSStyleDeclaration",
              "read-only": 1
            }
          }
        },
        "comment": "CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE)."
      },
      "NodeIterator": {
        "name": "NodeIterator",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "nextNode": {
              "name": "nextNode",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "previousNode": {
              "name": "previousNode",
              "signature": [
                {
                  "type": "Node",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "detach": {
              "name": "detach",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "root": {
              "name": "root",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window"
            },
            "referenceNode": {
              "name": "referenceNode",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointerBeforeReferenceNode": {
              "name": "pointerBeforeReferenceNode",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "whatToShow": {
              "name": "whatToShow",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "filter": {
              "name": "filter",
              "type": "NodeFilter",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order."
      },
      "Notification": {
        "name": "Notification",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "requestPermission": {
              "name": "requestPermission",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "NotificationPermission"
                  },
                  "param": [
                    {
                      "name": "deprecatedCallback",
                      "type": "NotificationPermissionCallback",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "permission": {
              "name": "permission",
              "type": "NotificationPermission",
              "static": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "maxActions": {
              "name": "maxActions",
              "type": "unsigned long",
              "static": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "onclick": {
              "name": "onclick",
              "type": "EventHandler",
              "event-handler": "click",
              "exposed": "Window Worker"
            },
            "onshow": {
              "name": "onshow",
              "type": "EventHandler",
              "event-handler": "show",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            },
            "onclose": {
              "name": "onclose",
              "type": "EventHandler",
              "event-handler": "close",
              "exposed": "Window Worker"
            },
            "title": {
              "name": "title",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "dir": {
              "name": "dir",
              "type": "NotificationDirection",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "lang": {
              "name": "lang",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "body": {
              "name": "body",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "tag": {
              "name": "tag",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "image": {
              "name": "image",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "icon": {
              "name": "icon",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "badge": {
              "name": "badge",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "vibrate": {
              "name": "vibrate",
              "type": "FrozenArray",
              "subtype": {
                "type": "unsigned long"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "DOMTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "renotify": {
              "name": "renotify",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "silent": {
              "name": "silent",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "requireInteraction": {
              "name": "requireInteraction",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "data": {
              "name": "data",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "actions": {
              "name": "actions",
              "type": "FrozenArray",
              "subtype": {
                "type": "NotificationAction"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Notification",
              "param": [
                {
                  "name": "title",
                  "type": "DOMString"
                },
                {
                  "name": "options",
                  "type": "NotificationOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Notifications API interface is used to configure and display desktop notifications to the user.",
        "events": {
          "event": [
            {
              "name": "click",
              "type": "Event"
            },
            {
              "name": "close",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "Event"
            },
            {
              "name": "show",
              "type": "Event"
            }
          ]
        }
      },
      "SVGFEDistantLightElement": {
        "name": "SVGFEDistantLightElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "azimuth": {
              "name": "azimuth",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "elevation": {
              "name": "elevation",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feDistantLight> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feDistantLight"
          }
        ]
      },
      "SVGTitleElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTitleElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "title"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "comment": "Corresponds to the <title> element."
      },
      "HTMLTableCaptionElement": {
        "name": "HTMLTableCaptionElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the alignment of the caption or legend.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
        "element": [
          {
            "name": "caption"
          }
        ]
      },
      "SVGAnimatedTransformList": {
        "constants": {
          "constant": {}
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "SVGAnimatedTransformList",
        "extends": "Object",
        "properties": {
          "property": {
            "animVal": {
              "specs": "svg2",
              "same-object": 1,
              "name": "animVal",
              "constant": 1,
              "type-original": "SVGTransformList",
              "exposed": "Window",
              "type": "SVGTransformList",
              "read-only": 1
            },
            "baseVal": {
              "specs": "svg2",
              "same-object": 1,
              "name": "baseVal",
              "constant": 1,
              "type-original": "SVGTransformList",
              "exposed": "Window",
              "type": "SVGTransformList",
              "read-only": 1
            }
          }
        },
        "comment": "Used for attributes which take a list of numbers and which can be animated."
      },
      "AudioTrack": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "AudioTrack",
        "extends": "Object",
        "properties": {
          "property": {
            "kind": {
              "specs": "html5",
              "exposed": "Window",
              "name": "kind",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "language": {
              "specs": "html5",
              "exposed": "Window",
              "name": "language",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "sourceBuffer": {
              "name": "sourceBuffer",
              "type": "SourceBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "label": {
              "specs": "html5",
              "exposed": "Window",
              "name": "label",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "id": {
              "specs": "html5",
              "exposed": "Window",
              "name": "id",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "enabled": {
              "specs": "html5",
              "exposed": "Window",
              "name": "enabled",
              "type": "boolean",
              "type-original": "boolean"
            }
          },
          "namesakes": {}
        },
        "comment": "A single audio track from one of the HTML media elements, <audio> or <video>. "
      },
      "SVGFEConvolveMatrixElement": {
        "name": "SVGFEConvolveMatrixElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_EDGEMODE_UNKNOWN": {
              "name": "SVG_EDGEMODE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_EDGEMODE_DUPLICATE": {
              "name": "SVG_EDGEMODE_DUPLICATE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_EDGEMODE_WRAP": {
              "name": "SVG_EDGEMODE_WRAP",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_EDGEMODE_NONE": {
              "name": "SVG_EDGEMODE_NONE",
              "type": "unsigned short",
              "value": "3"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "orderX": {
              "name": "orderX",
              "type": "SVGAnimatedInteger",
              "read-only": 1,
              "exposed": "Window"
            },
            "orderY": {
              "name": "orderY",
              "type": "SVGAnimatedInteger",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelMatrix": {
              "name": "kernelMatrix",
              "type": "SVGAnimatedNumberList",
              "read-only": 1,
              "exposed": "Window"
            },
            "divisor": {
              "name": "divisor",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "bias": {
              "name": "bias",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "targetX": {
              "name": "targetX",
              "type": "SVGAnimatedInteger",
              "read-only": 1,
              "exposed": "Window"
            },
            "targetY": {
              "name": "targetY",
              "type": "SVGAnimatedInteger",
              "read-only": 1,
              "exposed": "Window"
            },
            "edgeMode": {
              "name": "edgeMode",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthX": {
              "name": "kernelUnitLengthX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "kernelUnitLengthY": {
              "name": "kernelUnitLengthY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "preserveAlpha": {
              "name": "preserveAlpha",
              "type": "SVGAnimatedBoolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feConvolveMatrix> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feConvolveMatrix"
          }
        ]
      },
      "CSSKeyframesRule": {
        "name": "CSSKeyframesRule",
        "extends": "CSSRule",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "appendRule": {
              "name": "appendRule",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "rule",
                      "type": "CSSOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "deleteRule": {
              "name": "deleteRule",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "select",
                      "type": "CSSOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "findRule": {
              "name": "findRule",
              "signature": [
                {
                  "type": "CSSKeyframeRule",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "select",
                      "type": "CSSOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "CSSOMString",
              "exposed": "Window"
            },
            "cssRules": {
              "name": "cssRules",
              "type": "CSSRuleList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE)."
      },
      "VRDisplayCapabilities": {
        "constants": {
          "constant": {}
        },
        "specs": "WebVR",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "VRDisplayCapabilities",
        "extends": "Object",
        "properties": {
          "property": {
            "canPresent": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "canPresent",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "hasPosition": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "hasPosition",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "maxLayers": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "maxLayers",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "hasOrientation": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "hasOrientation",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "hasExternalDisplay": {
              "specs": "WebVR",
              "exposed": "Window",
              "name": "hasExternalDisplay",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            }
          }
        },
        "comment": "This WebVR API interface describes the capabilities of a VRDisplay — its features can be used to perform VR device capability tests, for example can it return position information."
      },
      "TextTrackList": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "TextTrackList",
        "properties": {
          "property": {
            "length": {
              "specs": "html5",
              "name": "length",
              "tags": "Captions",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "onaddtrack": {
              "specs": "html5",
              "name": "onaddtrack",
              "tags": "Captions",
              "type-original": "EventHandler?",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "addtrack"
            }
          }
        },
        "tags": "Captions",
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "addtrack",
              "type": "TrackEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "HTML5",
              "name": "removetrack",
              "type": "TrackEvent",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "item": {
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "TextTrack",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "TextTrack"
                }
              ],
              "specs": "html5",
              "exposed": "Window",
              "name": "item",
              "tags": "Captions"
            }
          }
        },
        "extends": "EventTarget"
      },
      "SVGFEFuncGElement": {
        "name": "SVGFEFuncGElement",
        "extends": "SVGComponentTransferFunctionElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feFuncG> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feFuncG"
          }
        ]
      },
      "MediaKeySystemAccess": {
        "name": "MediaKeySystemAccess",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getConfiguration": {
              "name": "getConfiguration",
              "signature": [
                {
                  "type": "MediaKeySystemConfiguration",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createMediaKeys": {
              "name": "createMediaKeys",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "MediaKeys"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "keySystem": {
              "name": "keySystem",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This EncryptedMediaExtensions API interface provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method."
      },
      "HTMLCollection": {
        "name": "HTMLCollection",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves an object from various collections.\n */"
            },
            "namedItem": {
              "name": "namedItem",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a select object or an object from an options collection.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list."
      },
      "HTMLAreaElement": {
        "name": "HTMLAreaElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "alt": {
              "name": "alt",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
            },
            "coords": {
              "name": "coords",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the coordinates of the object.\n */"
            },
            "shape": {
              "name": "shape",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
            },
            "target": {
              "name": "target",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
            },
            "download": {
              "name": "download",
              "type": "DOMString",
              "exposed": "Window"
            },
            "ping": {
              "name": "ping",
              "type": "USVString",
              "exposed": "Window"
            },
            "rel": {
              "name": "rel",
              "type": "DOMString",
              "exposed": "Window"
            },
            "relList": {
              "name": "relList",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "DOMString",
              "exposed": "Window"
            },
            "noHref": {
              "name": "noHref",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets whether clicks in this region cause action.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "HTMLHyperlinkElementUtils"
        ],
        "comment": "Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.",
        "element": [
          {
            "name": "area"
          }
        ]
      },
      "EventTarget": {
        "name": "EventTarget",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addEventListener": {
              "name": "addEventListener",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    },
                    {
                      "name": "callback",
                      "type": "EventListener",
                      "nullable": 1
                    },
                    {
                      "name": "options",
                      "type": [
                        {
                          "type": "AddEventListenerOptions"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n * \n * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n * \n * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n * \n * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\n * \n * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n * \n * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n */",
              "override-signatures": [
                "addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void"
              ]
            },
            "removeEventListener": {
              "name": "removeEventListener",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    },
                    {
                      "name": "callback",
                      "type": "EventListener",
                      "nullable": 1
                    },
                    {
                      "name": "options",
                      "type": [
                        {
                          "type": "EventListenerOptions"
                        },
                        {
                          "type": "boolean"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Removes the event listener in target's event listener list with the same type, callback, and options.\n */"
            },
            "dispatchEvent": {
              "name": "dispatchEvent",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "event",
                      "type": "Event"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "EventTarget",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.",
        "override-exposed": "Window Worker"
      },
      "IDBDatabase": {
        "name": "IDBDatabase",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "transaction": {
              "name": "transaction",
              "signature": [
                {
                  "type": "IDBTransaction",
                  "param": [
                    {
                      "name": "storeNames",
                      "type": [
                        {
                          "type": "DOMString"
                        },
                        {
                          "type": "sequence",
                          "subtype": {
                            "type": "DOMString"
                          }
                        }
                      ]
                    },
                    {
                      "name": "mode",
                      "type": "IDBTransactionMode",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a new transaction with the given mode (\"readonly\" or \"readwrite\") and scope which can be a single object store name or an array of names.\n */",
              "override-signatures": [
                "transaction(storeNames: string | string[], mode?: IDBTransactionMode): IDBTransaction"
              ]
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Closes the connection once all running transactions have finished.\n */"
            },
            "createObjectStore": {
              "name": "createObjectStore",
              "signature": [
                {
                  "type": "IDBObjectStore",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "options",
                      "type": "IDBObjectStoreParameters",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Creates a new object store with the given name and options and returns a new IDBObjectStore.\n * \n * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n */",
              "override-signatures": [
                "createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore"
              ]
            },
            "deleteObjectStore": {
              "name": "deleteObjectStore",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Deletes the object store with the given name.\n * \n * Throws a \"InvalidStateError\" DOMException if not called within an upgrade transaction.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the name of the database.\n */"
            },
            "version": {
              "name": "version",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the version of the database.\n */",
              "override-type": "number"
            },
            "objectStoreNames": {
              "name": "objectStoreNames",
              "type": "DOMStringList",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a list of the names of object stores in the database.\n */"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window Worker"
            },
            "onclose": {
              "name": "onclose",
              "type": "EventHandler",
              "event-handler": "close",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            },
            "onversionchange": {
              "name": "onversionchange",
              "type": "EventHandler",
              "event-handler": "versionchange",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.",
        "events": {
          "event": [
            {
              "name": "abort",
              "type": "Event"
            },
            {
              "name": "close",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "Event"
            },
            {
              "name": "versionchange",
              "type": "IDBVersionChangeEvent"
            }
          ]
        }
      },
      "DOMStringList": {
        "name": "DOMStringList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the string with index index from strings.\n */"
            },
            "contains": {
              "name": "contains",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "string",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if strings contains string, and false otherwise.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the number of strings in strings.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "A type returned by some APIs which contains a list of DOMString (strings)."
      },
      "SVGAngle": {
        "name": "SVGAngle",
        "extends": "Object",
        "constants": {
          "constant": {
            "SVG_ANGLETYPE_UNKNOWN": {
              "name": "SVG_ANGLETYPE_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_ANGLETYPE_UNSPECIFIED": {
              "name": "SVG_ANGLETYPE_UNSPECIFIED",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_ANGLETYPE_DEG": {
              "name": "SVG_ANGLETYPE_DEG",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_ANGLETYPE_RAD": {
              "name": "SVG_ANGLETYPE_RAD",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_ANGLETYPE_GRAD": {
              "name": "SVG_ANGLETYPE_GRAD",
              "type": "unsigned short",
              "value": "4"
            }
          }
        },
        "methods": {
          "method": {
            "newValueSpecifiedUnits": {
              "name": "newValueSpecifiedUnits",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "unitType",
                      "type": "unsigned short"
                    },
                    {
                      "name": "valueInSpecifiedUnits",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "convertToSpecifiedUnits": {
              "name": "convertToSpecifiedUnits",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "unitType",
                      "type": "unsigned short"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "unitType": {
              "name": "unitType",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "value": {
              "name": "value",
              "type": "float",
              "exposed": "Window"
            },
            "valueInSpecifiedUnits": {
              "name": "valueInSpecifiedUnits",
              "type": "float",
              "exposed": "Window"
            },
            "valueAsString": {
              "name": "valueAsString",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only."
      },
      "HTMLButtonElement": {
        "name": "HTMLButtonElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "autofocus": {
              "name": "autofocus",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n */"
            },
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "formAction": {
              "name": "formAction",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n */"
            },
            "formEnctype": {
              "name": "formEnctype",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Used to override the encoding (formEnctype attribute) specified on the form element.\n */"
            },
            "formMethod": {
              "name": "formMethod",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the submit method attribute previously specified on a form element.\n */"
            },
            "formNoValidate": {
              "name": "formNoValidate",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n */"
            },
            "formTarget": {
              "name": "formTarget",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the target attribute on a form element.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets the classification and default behavior of the button.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the default or selected value of the control.\n */"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.",
        "element": [
          {
            "name": "button"
          }
        ]
      },
      "IDBOpenDBRequest": {
        "name": "IDBOpenDBRequest",
        "extends": "IDBRequest<IDBDatabase>",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onblocked": {
              "name": "onblocked",
              "type": "EventHandler",
              "event-handler": "blocked",
              "exposed": "Window Worker"
            },
            "onupgradeneeded": {
              "name": "onupgradeneeded",
              "type": "EventHandler",
              "event-handler": "upgradeneeded",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Also inherits methods from its parents IDBRequest and EventTarget.",
        "events": {
          "event": [
            {
              "name": "block",
              "type": "Event"
            },
            {
              "name": "upgradeneeded",
              "type": "IDBVersionChangeEvent"
            }
          ]
        }
      },
      "HTMLSourceElement": {
        "name": "HTMLSourceElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the MIME type of a media resource.\n */"
            },
            "srcset": {
              "name": "srcset",
              "type": "USVString",
              "exposed": "Window"
            },
            "sizes": {
              "name": "sizes",
              "type": "DOMString",
              "exposed": "Window"
            },
            "media": {
              "name": "media",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the intended media type of the media source.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
        "element": [
          {
            "name": "source"
          }
        ]
      },
      "WebGLTexture": {
        "name": "WebGLTexture",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations."
      },
      "KeyboardEvent": {
        "name": "KeyboardEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {
            "DOM_KEY_LOCATION_STANDARD": {
              "name": "DOM_KEY_LOCATION_STANDARD",
              "type": "unsigned long",
              "value": "0x00"
            },
            "DOM_KEY_LOCATION_LEFT": {
              "name": "DOM_KEY_LOCATION_LEFT",
              "type": "unsigned long",
              "value": "0x01"
            },
            "DOM_KEY_LOCATION_RIGHT": {
              "name": "DOM_KEY_LOCATION_RIGHT",
              "type": "unsigned long",
              "value": "0x02"
            },
            "DOM_KEY_LOCATION_NUMPAD": {
              "name": "DOM_KEY_LOCATION_NUMPAD",
              "type": "unsigned long",
              "value": "0x03"
            }
          }
        },
        "methods": {
          "method": {
            "getModifierState": {
              "name": "getModifierState",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "keyArg",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "key": {
              "name": "key",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "code": {
              "name": "code",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "location": {
              "name": "location",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "ctrlKey": {
              "name": "ctrlKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "shiftKey": {
              "name": "shiftKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "altKey": {
              "name": "altKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "metaKey": {
              "name": "metaKey",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "repeat": {
              "name": "repeat",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "isComposing": {
              "name": "isComposing",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "charCode": {
              "name": "charCode",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "keyCode": {
              "name": "keyCode",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "char": {
              "name": "char",
              "override-type": "string",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "KeyboardEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "KeyboardEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard."
      },
      "CacheStorage": {
        "name": "CacheStorage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "match": {
              "name": "match",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "request",
                      "type": "RequestInfo"
                    },
                    {
                      "name": "options",
                      "type": "MultiCacheQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>"
              ]
            },
            "has": {
              "name": "has",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "cacheName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "open": {
              "name": "open",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Cache"
                  },
                  "param": [
                    {
                      "name": "cacheName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "cacheName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "keys": {
              "name": "keys",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "sequence",
                    "subtype": {
                      "type": "DOMString"
                    }
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The storage for Cache objects."
      },
      "CanvasRenderingContext2D": {
        "name": "CanvasRenderingContext2D",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "canvas": {
              "name": "canvas",
              "type": "HTMLCanvasElement",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "CanvasState",
          "CanvasTransform",
          "CanvasCompositing",
          "CanvasImageSmoothing",
          "CanvasFillStrokeStyles",
          "CanvasShadowStyles",
          "CanvasFilters",
          "CanvasRect",
          "CanvasDrawPath",
          "CanvasUserInterface",
          "CanvasText",
          "CanvasDrawImage",
          "CanvasImageData",
          "CanvasPathDrawingStyles",
          "CanvasTextDrawingStyles",
          "CanvasPath"
        ],
        "comment": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects."
      },
      "SVGPathSegLinetoHorizontalAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoHorizontalAbs",
        "properties": {
          "property": {
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "SVGPathSegArcAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegArcAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "sweepFlag": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "sweepFlag",
              "type": "boolean",
              "type-original": "boolean"
            },
            "r2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "r2",
              "type": "float",
              "type-original": "float"
            },
            "angle": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "angle",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "largeArcFlag": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "largeArcFlag",
              "type": "boolean",
              "type-original": "boolean"
            },
            "r1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "r1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "HTMLHtmlElement": {
        "name": "HTMLHtmlElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "version": {
              "name": "version",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the DTD version that governs the current document.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
        "element": [
          {
            "name": "html"
          }
        ]
      },
      "SVGTransformList": {
        "constants": {
          "constant": {}
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "getItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getItem"
            },
            "consolidate": {
              "signature": [
                {
                  "type": "SVGTransform",
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "consolidate"
            },
            "appendItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGTransform",
                      "type-original": "SVGTransform"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "appendItem"
            },
            "clear": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "clear"
            },
            "removeItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "removeItem"
            },
            "initialize": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGTransform",
                      "type-original": "SVGTransform"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "initialize"
            },
            "insertItemBefore": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGTransform",
                      "type-original": "SVGTransform"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "insertItemBefore"
            },
            "replaceItem": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGTransform",
                      "type-original": "SVGTransform"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "replaceItem"
            },
            "createSVGTransformFromMatrix": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "matrix",
                      "type": "SVGMatrix",
                      "type-original": "SVGMatrix"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGTransformFromMatrix"
            }
          }
        },
        "name": "SVGTransformList",
        "extends": "Object",
        "properties": {
          "property": {
            "numberOfItems": {
              "specs": "svg2",
              "name": "numberOfItems",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "comment": "The SVGTransformList defines a list of SVGTransform objects."
      },
      "EXT_frag_depth": {
        "name": "EXT_frag_depth",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.",
        "override-exposed": "Window Worker"
      },
      "SVGPathSegClosePath": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegClosePath",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "SVGPathSeg"
      },
      "OES_standard_derivatives": {
        "name": "OES_standard_derivatives",
        "extends": "Object",
        "constants": {
          "constant": {
            "FRAGMENT_SHADER_DERIVATIVE_HINT_OES": {
              "name": "FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
              "type": "GLenum",
              "value": "0x8B8B"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.",
        "override-exposed": "Window Worker"
      },
      "Path2D": {
        "name": "Path2D",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addPath": {
              "name": "addPath",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "transform",
                      "type": "DOMMatrix2DInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Adds to the path the path given by the argument.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Path2D",
              "param": [
                {
                  "name": "path",
                  "type": [
                    {
                      "type": "Path2D"
                    },
                    {
                      "type": "DOMString"
                    }
                  ],
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "CanvasPath"
        ],
        "comment": "This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired."
      },
      "SVGAnimatedLength": {
        "name": "SVGAnimatedLength",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "SVGLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "SVGLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of basic type <length> which can be animated."
      },
      "ApplicationCache": {
        "name": "ApplicationCache",
        "extends": "EventTarget",
        "constants": {
          "constant": {
            "UNCACHED": {
              "name": "UNCACHED",
              "type": "unsigned short",
              "value": "0"
            },
            "IDLE": {
              "name": "IDLE",
              "type": "unsigned short",
              "value": "1"
            },
            "CHECKING": {
              "name": "CHECKING",
              "type": "unsigned short",
              "value": "2"
            },
            "DOWNLOADING": {
              "name": "DOWNLOADING",
              "type": "unsigned short",
              "value": "3"
            },
            "UPDATEREADY": {
              "name": "UPDATEREADY",
              "type": "unsigned short",
              "value": "4"
            },
            "OBSOLETE": {
              "name": "OBSOLETE",
              "type": "unsigned short",
              "value": "5"
            }
          }
        },
        "methods": {
          "method": {
            "update": {
              "name": "update",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "swapCache": {
              "name": "swapCache",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "status": {
              "name": "status",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            },
            "onchecking": {
              "name": "onchecking",
              "type": "EventHandler",
              "event-handler": "checking",
              "exposed": "Window",
              "deprecated": 1
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window",
              "deprecated": 1
            },
            "onnoupdate": {
              "name": "onnoupdate",
              "type": "EventHandler",
              "event-handler": "noupdate",
              "exposed": "Window",
              "deprecated": 1
            },
            "ondownloading": {
              "name": "ondownloading",
              "type": "EventHandler",
              "event-handler": "downloading",
              "exposed": "Window",
              "deprecated": 1
            },
            "onprogress": {
              "name": "onprogress",
              "type": "EventHandler",
              "event-handler": "progress",
              "exposed": "Window",
              "deprecated": 1
            },
            "onupdateready": {
              "name": "onupdateready",
              "type": "EventHandler",
              "event-handler": "updateready",
              "exposed": "Window",
              "deprecated": 1
            },
            "oncached": {
              "name": "oncached",
              "type": "EventHandler",
              "event-handler": "cached",
              "exposed": "Window",
              "deprecated": 1
            },
            "onobsolete": {
              "name": "onobsolete",
              "type": "EventHandler",
              "event-handler": "obsolete",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "checking",
              "type": "Event"
            },
            {
              "name": "noupdate",
              "type": "Event"
            },
            {
              "name": "downloading",
              "type": "Event"
            },
            {
              "name": "progress",
              "type": "ProgressEvent"
            },
            {
              "name": "cached",
              "type": "Event"
            },
            {
              "name": "updateready",
              "type": "Event"
            },
            {
              "name": "obsolete",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "Event"
            }
          ]
        }
      },
      "HTMLQuoteElement": {
        "name": "HTMLQuoteElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cite": {
              "name": "cite",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves reference information about the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
        "element": [
          {
            "name": "blockquote"
          },
          {
            "name": "q"
          }
        ]
      },
      "SVGDefsElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGDefsElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "filter-effects",
            "namespace": "SVG",
            "name": "defs"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Corresponds to the <defs> element."
      },
      "Clients": {
        "name": "Clients",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "id",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            },
            "matchAll": {
              "name": "matchAll",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "FrozenArray",
                    "subtype": {
                      "type": "Client"
                    }
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "ClientQueryOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            },
            "openWindow": {
              "name": "openWindow",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "WindowClient",
                    "nullable": 1
                  },
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            },
            "claim": {
              "name": "claim",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "Provides access to Client objects. Access it via self.clients within a service worker."
      },
      "XMLHttpRequest": {
        "name": "XMLHttpRequest",
        "extends": "XMLHttpRequestEventTarget",
        "constants": {
          "constant": {
            "UNSENT": {
              "name": "UNSENT",
              "type": "unsigned short",
              "value": "0"
            },
            "OPENED": {
              "name": "OPENED",
              "type": "unsigned short",
              "value": "1"
            },
            "HEADERS_RECEIVED": {
              "name": "HEADERS_RECEIVED",
              "type": "unsigned short",
              "value": "2"
            },
            "LOADING": {
              "name": "LOADING",
              "type": "unsigned short",
              "value": "3"
            },
            "DONE": {
              "name": "DONE",
              "type": "unsigned short",
              "value": "4"
            }
          }
        },
        "methods": {
          "method": {
            "open": {
              "name": "open",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "method",
                      "type": "ByteString"
                    },
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "method",
                      "type": "ByteString"
                    },
                    {
                      "name": "url",
                      "type": "USVString"
                    },
                    {
                      "name": "async",
                      "type": "boolean"
                    },
                    {
                      "name": "username",
                      "type": "USVString",
                      "nullable": 1,
                      "optional": 1
                    },
                    {
                      "name": "password",
                      "type": "USVString",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Sets the request method, request URL, and synchronous flag.\n * \n * Throws a \"SyntaxError\" DOMException if either method is not a valid HTTP method or url cannot be parsed.\n * \n * Throws a \"SecurityError\" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.\n * \n * Throws an \"InvalidAccessError\" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.\n */"
            },
            "setRequestHeader": {
              "name": "setRequestHeader",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    },
                    {
                      "name": "value",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Combines a header in author request headers.\n * \n * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n * \n * Throws a \"SyntaxError\" DOMException if name is not a header name or if value is not a header value.\n */"
            },
            "send": {
              "name": "send",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "body",
                      "type": [
                        {
                          "type": "Document"
                        },
                        {
                          "type": "BodyInit"
                        }
                      ],
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.\n * \n * Throws an \"InvalidStateError\" DOMException if either state is not opened or the send() flag is set.\n */"
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Cancels any network activity.\n */"
            },
            "getResponseHeader": {
              "name": "getResponseHeader",
              "signature": [
                {
                  "type": "ByteString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "getAllResponseHeaders": {
              "name": "getAllResponseHeaders",
              "signature": [
                {
                  "type": "ByteString",
                  "param": []
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "overrideMimeType": {
              "name": "overrideMimeType",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mime",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Acts as if the `Content-Type` header value for response is mime. (It does not actually change the header though.)\n * \n * Throws an \"InvalidStateError\" DOMException if state is loading or done.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onreadystatechange": {
              "name": "onreadystatechange",
              "type": "EventHandler",
              "event-handler": "readystatechange",
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "readyState": {
              "name": "readyState",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Returns client's state.\n */"
            },
            "timeout": {
              "name": "timeout",
              "type": "unsigned long",
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and the synchronous flag is unset, a timeout event will then be dispatched, or a \"TimeoutError\" DOMException will be thrown otherwise (for the send() method).\n * \n * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n */"
            },
            "withCredentials": {
              "name": "withCredentials",
              "type": "boolean",
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.\n * \n * When set: throws an \"InvalidStateError\" DOMException if state is not unsent or opened, or if the send() flag is set.\n */"
            },
            "upload": {
              "name": "upload",
              "type": "XMLHttpRequestUpload",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.\n */"
            },
            "responseURL": {
              "name": "responseURL",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "status": {
              "name": "status",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "statusText": {
              "name": "statusText",
              "type": "ByteString",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker"
            },
            "responseType": {
              "name": "responseType",
              "type": "XMLHttpRequestResponseType",
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Returns the response type.\n * \n * Can be set to change the response type. Values are: the empty string (default), \"arraybuffer\", \"blob\", \"document\", \"json\", and \"text\".\n * \n * When set: setting to \"document\" is ignored if current global object is not a Window object.\n * \n * When set: throws an \"InvalidStateError\" DOMException if state is loading or done.\n * \n * When set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.\n */"
            },
            "response": {
              "name": "response",
              "type": "any",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Returns the response's body.\n */"
            },
            "responseText": {
              "name": "responseText",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window DedicatedWorker SharedWorker",
              "comment": "/**\n * Returns the text response.\n * \n * Throws an \"InvalidStateError\" DOMException if responseType is not the empty string or \"text\".\n */"
            },
            "responseXML": {
              "name": "responseXML",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the document response.\n * \n * Throws an \"InvalidStateError\" DOMException if responseType is not the empty string or \"document\".\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "XMLHttpRequest",
              "param": []
            }
          ]
        },
        "exposed": "Window DedicatedWorker SharedWorker",
        "legacy-window-alias": [],
        "comment": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.",
        "events": {
          "event": [
            {
              "name": "readystatechange",
              "type": "Event"
            }
          ]
        }
      },
      "WaveShaperNode": {
        "name": "WaveShaperNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "curve": {
              "name": "curve",
              "type": "Float32Array",
              "nullable": 1,
              "exposed": "Window"
            },
            "oversample": {
              "name": "oversample",
              "type": "OverSampleType",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "WaveShaperNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "WaveShaperOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A WaveShaperNode always has exactly one input and one output."
      },
      "HTMLDListElement": {
        "name": "HTMLDListElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "compact": {
              "name": "compact",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.",
        "element": [
          {
            "name": "dl"
          }
        ]
      },
      "DeviceRotationRate": {
        "constants": {
          "constant": {}
        },
        "specs": "orientation-event",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "DeviceRotationRate",
        "extends": "Object",
        "properties": {
          "property": {
            "gamma": {
              "specs": "orientation-event",
              "name": "gamma",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            },
            "alpha": {
              "specs": "orientation-event",
              "name": "alpha",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            },
            "beta": {
              "specs": "orientation-event",
              "name": "beta",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            }
          }
        },
        "comment": "Provides information about the rate at which the device is rotating around all three axes."
      },
      "SVGAElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGAElement",
        "properties": {
          "property": {
            "target": {
              "content-attribute-enum-values": "_blank _self _parent _top",
              "specs": "svg2",
              "same-object": 1,
              "name": "target",
              "content-attribute": "target",
              "type-original": "SVGAnimatedString",
              "exposed": "Window",
              "content-attribute-value-syntax": "name_ref",
              "type": "SVGAnimatedString",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "a"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "implements": [
          "SVGURIReference"
        ],
        "comment": "Provides access to the properties of <a> element, as well as methods to manipulate them."
      },
      "MSMediaKeyError": {
        "specs": "encrypted-media-20130510",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSMediaKeyError",
        "properties": {
          "property": {
            "systemCode": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "systemCode",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "code": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "code",
              "type": "unsigned short",
              "type-original": "unsigned short",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "MS_MEDIA_KEYERR_HARDWARECHANGE": {
              "specs": "encrypted-media-20130510",
              "value": "5",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_HARDWARECHANGE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MS_MEDIA_KEYERR_SERVICE": {
              "specs": "encrypted-media-20130510",
              "value": "3",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_SERVICE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MS_MEDIA_KEYERR_OUTPUT": {
              "specs": "encrypted-media-20130510",
              "value": "4",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_OUTPUT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MS_MEDIA_KEYERR_DOMAIN": {
              "specs": "encrypted-media-20130510",
              "value": "6",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_DOMAIN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MS_MEDIA_KEYERR_CLIENT": {
              "specs": "encrypted-media-20130510",
              "value": "2",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_CLIENT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MS_MEDIA_KEYERR_UNKNOWN": {
              "specs": "encrypted-media-20130510",
              "value": "1",
              "exposed": "Window",
              "name": "MS_MEDIA_KEYERR_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "HTMLFrameSetElement": {
        "name": "HTMLFrameSetElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cols": {
              "name": "cols",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the frame widths of the object.\n */"
            },
            "rows": {
              "name": "rows",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the frame heights of the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "WindowEventHandlers"
        ],
        "comment": "Provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.",
        "element": [
          {
            "name": "frameset"
          }
        ]
      },
      "Screen": {
        "name": "Screen",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "availWidth": {
              "name": "availWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "availHeight": {
              "name": "availHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "colorDepth": {
              "name": "colorDepth",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "pixelDepth": {
              "name": "pixelDepth",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "orientation": {
              "name": "orientation",
              "type": "ScreenOrientation",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A screen, usually the one on which the current window is being rendered, and is obtained using window.screen."
      },
      "ScriptProcessorNode": {
        "name": "ScriptProcessorNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onaudioprocess": {
              "name": "onaudioprocess",
              "type": "EventHandler",
              "event-handler": "audioprocess",
              "exposed": "Window",
              "deprecated": 1
            },
            "bufferSize": {
              "name": "bufferSize",
              "type": "long",
              "read-only": 1,
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Allows the generation, processing, or analyzing of audio using JavaScript.",
        "events": {
          "event": [
            {
              "name": "audioprocess",
              "type": "AudioProcessingEvent"
            }
          ]
        }
      },
      "Coordinates": {
        "name": "Coordinates",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "latitude": {
              "name": "latitude",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "longitude": {
              "name": "longitude",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "altitude": {
              "name": "altitude",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "accuracy": {
              "name": "accuracy",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "altitudeAccuracy": {
              "name": "altitudeAccuracy",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "heading": {
              "name": "heading",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "speed": {
              "name": "speed",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated."
      },
      "RTCDtlsTransportStateChangedEvent": {
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCDtlsTransportStateChangedEvent",
        "properties": {
          "property": {
            "state": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "state",
              "type": "RTCDtlsTransportState",
              "type-original": "RTCDtlsTransportState",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "FocusEvent": {
        "name": "FocusEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "relatedTarget": {
              "name": "relatedTarget",
              "type": "EventTarget",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "FocusEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "FocusEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Focus-related events like focus, blur, focusin, or focusout."
      },
      "DOMSettableTokenList": {
        "specs": "dom4",
        "anonymous-methods": {
          "method": []
        },
        "name": "DOMSettableTokenList",
        "properties": {
          "property": {
            "value": {
              "specs": "dom4",
              "ce-reactions": 1,
              "name": "value",
              "tags": "TreeNavigation",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString"
            }
          }
        },
        "tags": "TreeNavigation",
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "DOMTokenList"
      },
      "PaymentResponse": {
        "specs": "payment-request",
        "anonymous-methods": {
          "method": []
        },
        "name": "PaymentResponse",
        "properties": {
          "property": {
            "shippingAddress": {
              "specs": "payment-request",
              "name": "shippingAddress",
              "type-original": "PaymentAddress?",
              "nullable": 1,
              "exposed": "Window",
              "type": "PaymentAddress",
              "read-only": 1
            },
            "requestId": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "requestId",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "payerName": {
              "specs": "payment-request",
              "name": "payerName",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "payerEmail": {
              "specs": "payment-request",
              "name": "payerEmail",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "details": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "details",
              "type": "object",
              "type-original": "object",
              "read-only": 1
            },
            "methodName": {
              "specs": "payment-request",
              "exposed": "Window",
              "name": "methodName",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "payerPhone": {
              "specs": "payment-request",
              "name": "payerPhone",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "shippingOption": {
              "specs": "payment-request",
              "name": "shippingOption",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "serializer": 1,
              "signature": [
                {
                  "type": "any",
                  "type-original": "any"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "serializer-info": "attribute",
              "name": "toJSON"
            },
            "complete": {
              "signature": [
                {
                  "subtype": {
                    "type": "void"
                  },
                  "param-min-required": 0,
                  "type": "Promise",
                  "param": [
                    {
                      "name": "result",
                      "default": "\"unknown\"",
                      "type": "PaymentComplete",
                      "optional": 1,
                      "type-original": "PaymentComplete"
                    }
                  ],
                  "type-original": "Promise<void>"
                }
              ],
              "specs": "payment-request",
              "exposed": "Window",
              "name": "complete"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object",
        "secure-context": 1,
        "comment": "This Payment Request API interface is returned after a user selects a payment method and approves a payment request."
      },
      "Range": {
        "name": "Range",
        "extends": "AbstractRange",
        "constants": {
          "constant": {
            "START_TO_START": {
              "name": "START_TO_START",
              "type": "unsigned short",
              "value": "0"
            },
            "START_TO_END": {
              "name": "START_TO_END",
              "type": "unsigned short",
              "value": "1"
            },
            "END_TO_END": {
              "name": "END_TO_END",
              "type": "unsigned short",
              "value": "2"
            },
            "END_TO_START": {
              "name": "END_TO_START",
              "type": "unsigned short",
              "value": "3"
            }
          }
        },
        "methods": {
          "method": {
            "setStart": {
              "name": "setStart",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setEnd": {
              "name": "setEnd",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setStartBefore": {
              "name": "setStartBefore",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setStartAfter": {
              "name": "setStartAfter",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setEndBefore": {
              "name": "setEndBefore",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setEndAfter": {
              "name": "setEndAfter",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "collapse": {
              "name": "collapse",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "toStart",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "selectNode": {
              "name": "selectNode",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "selectNodeContents": {
              "name": "selectNodeContents",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "compareBoundaryPoints": {
              "name": "compareBoundaryPoints",
              "signature": [
                {
                  "type": "short",
                  "param": [
                    {
                      "name": "how",
                      "type": "unsigned short"
                    },
                    {
                      "name": "sourceRange",
                      "type": "Range"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "deleteContents": {
              "name": "deleteContents",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "extractContents": {
              "name": "extractContents",
              "signature": [
                {
                  "type": "DocumentFragment",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "cloneContents": {
              "name": "cloneContents",
              "signature": [
                {
                  "type": "DocumentFragment",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "insertNode": {
              "name": "insertNode",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "surroundContents": {
              "name": "surroundContents",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "newParent",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "cloneRange": {
              "name": "cloneRange",
              "signature": [
                {
                  "type": "Range",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "detach": {
              "name": "detach",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "isPointInRange": {
              "name": "isPointInRange",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "comparePoint": {
              "name": "comparePoint",
              "signature": [
                {
                  "type": "short",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    },
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns −1 if the point is before the range, 0 if the point is in the range, and 1 if the point is after the range.\n */"
            },
            "intersectsNode": {
              "name": "intersectsNode",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether range intersects node.\n */"
            },
            "getClientRects": {
              "name": "getClientRects",
              "signature": [
                {
                  "type": "DOMRectList",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getBoundingClientRect": {
              "name": "getBoundingClientRect",
              "signature": [
                {
                  "type": "DOMRect",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createContextualFragment": {
              "name": "createContextualFragment",
              "signature": [
                {
                  "type": "DocumentFragment",
                  "param": [
                    {
                      "name": "fragment",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "commonAncestorContainer": {
              "name": "commonAncestorContainer",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node.\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Range",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A fragment of a document that can contain nodes and parts of text nodes."
      },
      "WorkerGlobalScope": {
        "specs": "workers",
        "anonymous-methods": {
          "method": []
        },
        "name": "WorkerGlobalScope",
        "properties": {
          "property": {
            "location": {
              "property-descriptor-not-configurable": 1,
              "specs": "workers",
              "name": "location",
              "type-original": "WorkerLocation",
              "exposed": "Worker",
              "type": "WorkerLocation",
              "read-only": 1
            },
            "caches": {
              "specs": "ServiceWorker",
              "same-object": 1,
              "name": "caches",
              "type-original": "CacheStorage",
              "exposed": "Worker",
              "type": "CacheStorage",
              "secure-context": 1,
              "read-only": 1
            },
            "onerror": {
              "specs": "workers",
              "name": "onerror",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            },
            "self": {
              "property-descriptor-not-configurable": 1,
              "specs": "workers",
              "name": "self",
              "type-original": "WorkerGlobalScope",
              "exposed": "Worker",
              "type": "WorkerGlobalScope",
              "read-only": 1,
              "override-type": "WorkerGlobalScope & typeof globalThis"
            },
            "isSecureContext": {
              "specs": "SecureContext",
              "exposed": "Worker",
              "name": "isSecureContext",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "performance": {
              "property-descriptor-not-configurable": 1,
              "specs": "workers",
              "name": "performance",
              "type-original": "Performance",
              "exposed": "Worker",
              "type": "Performance",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Worker",
        "methods": {
          "method": {
            "msWriteProfilerMark": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "profilerMarkName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Worker",
              "name": "msWriteProfilerMark"
            }
          }
        },
        "extends": "EventTarget",
        "implements": [
          "WorkerUtils",
          "WindowConsole",
          "WindowOrWorkerGlobalScope"
        ],
        "comment": "This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop."
      },
      "DelayNode": {
        "name": "DelayNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "delayTime": {
              "name": "delayTime",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DelayNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "DelayOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output."
      },
      "MSPointerEvent": {
        "specs": "pointer-events",
        "constructor": {
          "specs": "pointer-events",
          "signature": [
            {
              "param-min-required": 1,
              "type": "MSPointerEvent",
              "param": [
                {
                  "name": "typeArg",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PointerEventInit",
                  "optional": 1,
                  "type-original": "PointerEventInit"
                }
              ],
              "type-original": "MSPointerEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "MSPointerEvent",
        "properties": {
          "property": {
            "rotation": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "rotation",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "width": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "width",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "pressure": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "pressure",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "isPrimary": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "isPrimary",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "pointerType": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "pointerType",
              "type": "any",
              "type-original": "any",
              "read-only": 1
            },
            "tiltY": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "tiltY",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "height": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "height",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "intermediatePoints": {
              "specs": "pointer-events",
              "name": "intermediatePoints",
              "type-original": "any",
              "exposed": "Window",
              "type": "any",
              "read-only": 1
            },
            "currentPoint": {
              "specs": "pointer-events",
              "name": "currentPoint",
              "type-original": "any",
              "exposed": "Window",
              "type": "any",
              "read-only": 1
            },
            "tiltX": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "tiltX",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "pointerId": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "pointerId",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "hwTimestamp": {
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "hwTimestamp",
              "type": "unsigned long long",
              "type-original": "unsigned long long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "getCurrentPoint": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "element",
                      "type": "Element",
                      "type-original": "Element"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "getCurrentPoint"
            },
            "initPointerEvent": {
              "signature": [
                {
                  "param-min-required": 27,
                  "type": "void",
                  "param": [
                    {
                      "name": "typeArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "canBubbleArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "cancelableArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "viewArg",
                      "type": "Window",
                      "type-original": "Window"
                    },
                    {
                      "name": "detailArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "screenXArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "screenYArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "clientXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "clientYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "ctrlKeyArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "altKeyArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "shiftKeyArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "metaKeyArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "buttonArg",
                      "type": "unsigned short",
                      "type-original": "unsigned short"
                    },
                    {
                      "name": "relatedTargetArg",
                      "type": "EventTarget",
                      "type-original": "EventTarget"
                    },
                    {
                      "name": "offsetXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "offsetYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "widthArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "heightArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "pressure",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "rotation",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "tiltX",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "tiltY",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "pointerIdArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "pointerType",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "name": "hwTimestampArg",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long"
                    },
                    {
                      "name": "isPrimary",
                      "type": "boolean",
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "initPointerEvent"
            },
            "getIntermediatePoints": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "element",
                      "type": "Element",
                      "type-original": "Element"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "pointer-events",
              "exposed": "Window",
              "name": "getIntermediatePoints"
            }
          }
        },
        "extends": "MouseEvent"
      },
      "SVGSVGElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "value-syntax": "floating_point_number",
              "name": "version"
            },
            {
              "name": "baseProfile"
            },
            {
              "enum-values": "false true",
              "value-syntax": "enum",
              "name": "externalResourcesRequired"
            },
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_shape_rect",
              "name": "clip"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "visible hidden scroll auto inherit",
              "value-syntax": "enum",
              "name": "overflow"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGSVGElement",
        "properties": {
          "property": {
            "width": {
              "specs": "svg2",
              "same-object": 1,
              "name": "width",
              "constant": 1,
              "content-attribute": "width",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "contentStyleType": {
              "specs": "svg11",
              "name": "contentStyleType",
              "type-original": "DOMString",
              "content-attribute": "contentStyleType",
              "deprecated": 1,
              "interop": 1,
              "content-attribute-value-syntax": "mime_type",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "DOMString"
            },
            "onzoom": {
              "specs": "svg2",
              "name": "onzoom",
              "content-attribute": "onzoom",
              "type-original": "EventHandler",
              "nullable": 1,
              "content-attribute-value-syntax": "javascript",
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "SVGZoom"
            },
            "x": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x",
              "constant": 1,
              "content-attribute": "x",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "y": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y",
              "constant": 1,
              "content-attribute": "y",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "viewport": {
              "specs": "svg11",
              "name": "viewport",
              "type-original": "SVGRect",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "SVGRect",
              "read-only": 1
            },
            "pixelUnitToMillimeterY": {
              "specs": "svg11",
              "name": "pixelUnitToMillimeterY",
              "constant": 1,
              "type-original": "float",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "screenPixelToMillimeterY": {
              "specs": "svg11",
              "name": "screenPixelToMillimeterY",
              "constant": 1,
              "type-original": "float",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "height": {
              "specs": "svg2",
              "same-object": 1,
              "name": "height",
              "constant": 1,
              "content-attribute": "height",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "contentScriptType": {
              "specs": "svg11",
              "name": "contentScriptType",
              "type-original": "DOMString",
              "content-attribute": "contentScriptType",
              "deprecated": 1,
              "interop": 1,
              "content-attribute-value-syntax": "mime_type",
              "exposed": "Window",
              "content-attribute-reflects": 1,
              "type": "DOMString"
            },
            "currentTranslate": {
              "specs": "svg2",
              "same-object": 1,
              "name": "currentTranslate",
              "type-original": "SVGPoint",
              "exposed": "Window",
              "type": "SVGPoint",
              "read-only": 1
            },
            "pixelUnitToMillimeterX": {
              "specs": "svg11",
              "name": "pixelUnitToMillimeterX",
              "constant": 1,
              "type-original": "float",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            },
            "onunload": {
              "specs": "svg2",
              "name": "onunload",
              "content-attribute": "onunload",
              "type-original": "EventHandler",
              "nullable": 1,
              "content-attribute-value-syntax": "javascript",
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "SVGUnload"
            },
            "currentScale": {
              "specs": "svg2",
              "name": "currentScale",
              "type-original": "float",
              "exposed": "Window",
              "type": "float"
            },
            "screenPixelToMillimeterX": {
              "specs": "svg11",
              "name": "screenPixelToMillimeterX",
              "constant": 1,
              "type-original": "float",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "float",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "svg"
          }
        ],
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync-or-async",
              "specs": "svg11",
              "name": "SVGScroll",
              "type": "Event",
              "bubbles": 1
            },
            {
              "dispatch": "sync",
              "specs": "svg11",
              "name": "SVGZoom",
              "type": "SVGZoomEvent",
              "bubbles": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "setCurrentTime": {
              "deprecated": 0,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "seconds",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "setCurrentTime"
            },
            "createSVGLength": {
              "signature": [
                {
                  "type": "SVGLength",
                  "type-original": "SVGLength"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGLength"
            },
            "getIntersectionList": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "NodeList",
                  "param": [
                    {
                      "name": "rect",
                      "type": "SVGRect",
                      "type-original": "SVGRect"
                    },
                    {
                      "nullable": 1,
                      "name": "referenceElement",
                      "type": "SVGElement",
                      "type-original": "SVGElement?"
                    }
                  ],
                  "type-original": "NodeList"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getIntersectionList",
              "override-signatures": [
                "getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>"
              ]
            },
            "unpauseAnimations": {
              "interop": 1,
              "deprecated": 0,
              "specs": "svg11",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "unpauseAnimations",
              "exposed": "Window"
            },
            "createSVGRect": {
              "signature": [
                {
                  "type": "SVGRect",
                  "type-original": "SVGRect"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGRect"
            },
            "pauseAnimations": {
              "interop": 1,
              "deprecated": 0,
              "specs": "svg11",
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "name": "pauseAnimations",
              "exposed": "Window"
            },
            "unsuspendRedrawAll": {
              "specs": "svg2",
              "name": "unsuspendRedrawAll",
              "constant": 1,
              "interop": 1,
              "deprecated": 1,
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "exposed": "Window"
            },
            "checkIntersection": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "element",
                      "type": "SVGElement",
                      "type-original": "SVGElement"
                    },
                    {
                      "name": "rect",
                      "type": "SVGRect",
                      "type-original": "SVGRect"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "checkIntersection"
            },
            "suspendRedraw": {
              "specs": "svg2",
              "name": "suspendRedraw",
              "constant": 1,
              "interop": 1,
              "deprecated": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "maxWaitMilliseconds",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "unsigned long"
                }
              ],
              "exposed": "Window"
            },
            "deselectAll": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "deselectAll"
            },
            "createSVGAngle": {
              "signature": [
                {
                  "type": "SVGAngle",
                  "type-original": "SVGAngle"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGAngle"
            },
            "getEnclosureList": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "NodeList",
                  "param": [
                    {
                      "name": "rect",
                      "type": "SVGRect",
                      "type-original": "SVGRect"
                    },
                    {
                      "nullable": 1,
                      "name": "referenceElement",
                      "type": "SVGElement",
                      "type-original": "SVGElement?"
                    }
                  ],
                  "type-original": "NodeList"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getEnclosureList",
              "override-signatures": [
                "getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>"
              ]
            },
            "createSVGTransform": {
              "signature": [
                {
                  "type": "SVGTransform",
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGTransform"
            },
            "forceRedraw": {
              "specs": "svg2",
              "name": "forceRedraw",
              "constant": 1,
              "interop": 1,
              "deprecated": 1,
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "exposed": "Window"
            },
            "unsuspendRedraw": {
              "specs": "svg2",
              "name": "unsuspendRedraw",
              "constant": 1,
              "interop": 1,
              "deprecated": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "suspendHandleID",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "exposed": "Window"
            },
            "getCurrentTime": {
              "interop": 1,
              "deprecated": 0,
              "specs": "svg11",
              "signature": [
                {
                  "type": "float",
                  "type-original": "float"
                }
              ],
              "name": "getCurrentTime",
              "exposed": "Window"
            },
            "checkEnclosure": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "element",
                      "type": "SVGElement",
                      "type-original": "SVGElement"
                    },
                    {
                      "name": "rect",
                      "type": "SVGRect",
                      "type-original": "SVGRect"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "checkEnclosure"
            },
            "createSVGMatrix": {
              "signature": [
                {
                  "type": "SVGMatrix",
                  "type-original": "SVGMatrix"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGMatrix"
            },
            "createSVGPoint": {
              "signature": [
                {
                  "type": "SVGPoint",
                  "type-original": "SVGPoint"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGPoint"
            },
            "createSVGNumber": {
              "signature": [
                {
                  "type": "SVGNumber",
                  "type-original": "SVGNumber"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGNumber"
            },
            "createSVGTransformFromMatrix": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGTransform",
                  "param": [
                    {
                      "name": "matrix",
                      "type": "SVGMatrix",
                      "type-original": "SVGMatrix"
                    }
                  ],
                  "type-original": "SVGTransform"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "createSVGTransformFromMatrix"
            },
            "getComputedStyle": {
              "specs": "svg2",
              "name": "getComputedStyle",
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "CSSStyleDeclaration",
                  "param": [
                    {
                      "name": "elt",
                      "type": "Element",
                      "type-original": "Element"
                    },
                    {
                      "nullable": 1,
                      "name": "pseudoElt",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "CSSStyleDeclaration"
                }
              ],
              "exposed": "Window"
            },
            "getElementById": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "Element",
                  "param": [
                    {
                      "name": "elementId",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "Element"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getElementById"
            },
            "animationsPaused": {
              "name": "animationsPaused",
              "override-signatures": [
                "animationsPaused(): boolean"
              ]
            }
          }
        },
        "extends": "SVGGraphicsElement",
        "implements": [
          "DocumentEvent",
          "SVGFitToViewBox",
          "SVGZoomAndPan"
        ],
        "comment": "Provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices."
      },
      "SyncManager": {
        "name": "SyncManager",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "register": {
              "name": "register",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "tag",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getTags": {
              "name": "getTags",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "sequence",
                    "subtype": {
                      "type": "DOMString"
                    }
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This ServiceWorker API interface provides an interface for registering and listing sync registrations."
      },
      "HTMLLabelElement": {
        "name": "HTMLLabelElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLFormElement | null",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "htmlFor": {
              "name": "htmlFor",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the object to which the given label object is assigned.\n */"
            },
            "control": {
              "name": "control",
              "type": "HTMLElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.",
        "element": [
          {
            "name": "label"
          }
        ]
      },
      "WebGLContextEvent": {
        "name": "WebGLContextEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "statusMessage": {
              "name": "statusMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "WebGLContextEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInit",
                  "type": "WebGLContextEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context."
      },
      "HTMLDirectoryElement": {
        "name": "HTMLDirectoryElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "compact": {
              "name": "compact",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "dir"
          }
        ]
      },
      "HTMLLegendElement": {
        "name": "HTMLLegendElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
        "element": [
          {
            "name": "legend"
          }
        ]
      },
      "WebGLRenderbuffer": {
        "name": "WebGLRenderbuffer",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation."
      },
      "SVGAnimatedInteger": {
        "name": "SVGAnimatedInteger",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "long",
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of basic type <integer> which can be animated."
      },
      "GamepadHapticActuator": {
        "name": "GamepadHapticActuator",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "pulse": {
              "name": "pulse",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "value",
                      "type": "double"
                    },
                    {
                      "name": "duration",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "GamepadHapticActuatorType",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Gamepad API interface represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware."
      },
      "SVGTSpanElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "auto baseline before-edge text-before-edge middle central after-edge text-after-edge ideographic alphabetic hanging mathematical inherit",
              "value-syntax": "enum",
              "name": "alignment-baseline"
            },
            {
              "enum-values": "baseline sub super inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "baseline-shift"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "css_color",
              "name": "color"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "ltr rtl inherit",
              "value-syntax": "enum",
              "name": "direction"
            },
            {
              "enum-values": "auto use-script no-change reset-size ideographic alphabetic hanging mathematical central middle text-after-edge text-before-edge inherit",
              "value-syntax": "enum",
              "name": "dominant-baseline"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "fill"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "fill-opacity"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "fill-rule"
            },
            {
              "enum-values": "caption icon menu message-box small-caption status-bar inherit",
              "value-syntax": "css_font",
              "name": "font"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "comma_separated_css_font_family_followed_by_generic_family",
              "name": "font-family"
            },
            {
              "enum-values": "smaller larger xx-small x-small small medium large x-large xx-large inherit initial",
              "value-syntax": "css_percentage_or_length",
              "name": "font-size"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "floating_point_number",
              "name": "font-size-adjust"
            },
            {
              "enum-values": "normal wider narrower ultra-condensed extra-condensed condensed semi-condensed semi-expanded expanded extra-expanded ultra-expanded inherit",
              "value-syntax": "enum",
              "name": "font-stretch"
            },
            {
              "enum-values": "normal italic oblique inherit initial",
              "value-syntax": "enum",
              "name": "font-style"
            },
            {
              "enum-values": "normal small-caps inherit initial",
              "value-syntax": "enum",
              "name": "font-variant"
            },
            {
              "enum-values": "normal bold bolder lighter 100 200 300 400 500 600 700 800 900 inherit initial",
              "value-syntax": "enum",
              "name": "font-weight"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-horizontal"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_angle",
              "name": "glyph-orientation-vertical"
            },
            {
              "enum-values": "auto inherit",
              "value-syntax": "css_length",
              "name": "kerning"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "letter-spacing"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "stroke"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "comma_or_space_separated_css_percentage_or_length",
              "name": "stroke-dasharray"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-dashoffset"
            },
            {
              "enum-values": "butt round square inherit",
              "value-syntax": "enum",
              "name": "stroke-linecap"
            },
            {
              "enum-values": "miter round bevel inherit",
              "value-syntax": "enum",
              "name": "stroke-linejoin"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "1_or_greater_floating_point_number",
              "name": "stroke-miterlimit"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "stroke-opacity"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-width"
            },
            {
              "enum-values": "start middle end inherit",
              "value-syntax": "enum",
              "name": "text-anchor"
            },
            {
              "enum-values": "none underline overline line-through blink inherit",
              "value-syntax": "enum",
              "name": "text-decoration"
            },
            {
              "enum-values": "normal embed bidi-override inherit",
              "value-syntax": "enum",
              "name": "unicode-bidi"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            },
            {
              "enum-values": "normal inherit initial",
              "value-syntax": "css_length",
              "name": "word-spacing"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTSpanElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "tspan"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGTextPositioningElement",
        "comment": "A <tspan> element."
      },
      "HTMLLIElement": {
        "name": "HTMLLIElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value of a list item.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
        "element": [
          {
            "name": "li"
          }
        ]
      },
      "RTCSrtpSdesTransport": {
        "specs": "ortc",
        "constructor": {
          "specs": "ortc",
          "signature": [
            {
              "param-min-required": 3,
              "type": "RTCSrtpSdesTransport",
              "param": [
                {
                  "name": "transport",
                  "type": "RTCIceTransport",
                  "type-original": "RTCIceTransport"
                },
                {
                  "name": "encryptParameters",
                  "type": "RTCSrtpSdesParameters",
                  "type-original": "RTCSrtpSdesParameters"
                },
                {
                  "name": "decryptParameters",
                  "type": "RTCSrtpSdesParameters",
                  "type-original": "RTCSrtpSdesParameters"
                }
              ],
              "type-original": "RTCSrtpSdesTransport"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCSrtpSdesTransport",
        "properties": {
          "property": {
            "transport": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "transport",
              "type": "RTCIceTransport",
              "type-original": "RTCIceTransport",
              "read-only": 1
            },
            "onerror": {
              "specs": "ortc",
              "name": "onerror",
              "type-original": "EventHandler?",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "ORTC",
              "name": "error",
              "type": "Event",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "getLocalParameters": {
              "signature": [
                {
                  "subtype": {
                    "type": "RTCSrtpSdesParameters"
                  },
                  "type": "sequence",
                  "type-original": "sequence<RTCSrtpSdesParameters>"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "getLocalParameters",
              "static": 1
            }
          }
        },
        "extends": "EventTarget"
      },
      "SVGPathSegLinetoVerticalAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoVerticalAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "PerfWidgetExternal": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "PerfWidgetExternal",
        "properties": {
          "property": {
            "maxCpuSpeed": {
              "specs": "none",
              "exposed": "Window",
              "name": "maxCpuSpeed",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "irDisablingContentString": {
              "specs": "none",
              "exposed": "Window",
              "name": "irDisablingContentString",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "independentRenderingEnabled": {
              "specs": "none",
              "exposed": "Window",
              "name": "independentRenderingEnabled",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "irStatusAvailable": {
              "specs": "none",
              "exposed": "Window",
              "name": "irStatusAvailable",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "performanceCounter": {
              "specs": "none",
              "exposed": "Window",
              "name": "performanceCounter",
              "type": "unsigned long long",
              "type-original": "unsigned long long",
              "read-only": 1
            },
            "averagePaintTime": {
              "specs": "none",
              "exposed": "Window",
              "name": "averagePaintTime",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "paintRequestsPerSecond": {
              "specs": "none",
              "exposed": "Window",
              "name": "paintRequestsPerSecond",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "activeNetworkRequestCount": {
              "specs": "none",
              "exposed": "Window",
              "name": "activeNetworkRequestCount",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "extraInformationEnabled": {
              "specs": "none",
              "exposed": "Window",
              "name": "extraInformationEnabled",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "averageFrameTime": {
              "specs": "none",
              "exposed": "Window",
              "name": "averageFrameTime",
              "type": "double",
              "type-original": "double",
              "read-only": 1
            },
            "performanceCounterFrequency": {
              "specs": "none",
              "exposed": "Window",
              "name": "performanceCounterFrequency",
              "type": "unsigned long long",
              "type-original": "unsigned long long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "repositionWindow": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "y",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "repositionWindow"
            },
            "getRecentMemoryUsage": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "any",
                  "param": [
                    {
                      "nullable": 1,
                      "name": "last",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long?"
                    }
                  ],
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getRecentMemoryUsage"
            },
            "getMemoryUsage": {
              "signature": [
                {
                  "type": "unsigned long",
                  "type-original": "unsigned long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getMemoryUsage"
            },
            "resizeWindow": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "width",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    },
                    {
                      "name": "height",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "resizeWindow"
            },
            "getProcessCpuUsage": {
              "signature": [
                {
                  "type": "unsigned long",
                  "type-original": "unsigned long"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getProcessCpuUsage"
            },
            "removeEventListener": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "eventType",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "callback",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "removeEventListener"
            },
            "getRecentCpuUsage": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "any",
                  "param": [
                    {
                      "nullable": 1,
                      "name": "last",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long?"
                    }
                  ],
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getRecentCpuUsage"
            },
            "addEventListener": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "eventType",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "callback",
                      "type": "Function",
                      "type-original": "Function"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "addEventListener"
            },
            "getRecentFrames": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "any",
                  "param": [
                    {
                      "nullable": 1,
                      "name": "last",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long?"
                    }
                  ],
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getRecentFrames"
            },
            "getRecentPaintRequests": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "any",
                  "param": [
                    {
                      "nullable": 1,
                      "name": "last",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long?"
                    }
                  ],
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getRecentPaintRequests"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "ReadableStreamReader": {
        "constants": {
          "constant": {}
        },
        "specs": "whatwg-streams",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "releaseLock": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "whatwg-streams",
              "exposed": "Window Worker",
              "name": "releaseLock"
            },
            "read": {
              "signature": [
                {
                  "subtype": {
                    "type": "any"
                  },
                  "type": "Promise",
                  "type-original": "Promise<any>"
                }
              ],
              "specs": "whatwg-streams",
              "exposed": "Window Worker",
              "name": "read",
              "override-signatures": [
                "read(): Promise<ReadableStreamReadResult<R>>"
              ]
            },
            "cancel": {
              "signature": [
                {
                  "subtype": {
                    "type": "void"
                  },
                  "type": "Promise",
                  "type-original": "Promise<void>"
                }
              ],
              "specs": "whatwg-streams",
              "exposed": "Window Worker",
              "name": "cancel"
            }
          }
        },
        "name": "ReadableStreamReader",
        "extends": "Object",
        "properties": {
          "property": {}
        },
        "override-exposed": "Window Worker",
        "type-parameters": [
          {
            "name": "R",
            "default": "any"
          }
        ]
      },
      "SVGFEImageElement": {
        "name": "SVGFEImageElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "preserveAspectRatio": {
              "name": "preserveAspectRatio",
              "type": "SVGAnimatedPreserveAspectRatio",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes",
          "SVGURIReference"
        ],
        "comment": "Corresponds to the <feImage> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feImage"
          }
        ]
      },
      "MediaKeySession": {
        "name": "MediaKeySession",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "generateRequest": {
              "name": "generateRequest",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "initDataType",
                      "type": "DOMString"
                    },
                    {
                      "name": "initData",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "load": {
              "name": "load",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "sessionId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "update": {
              "name": "update",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "response",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "sessionId": {
              "name": "sessionId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "expiration": {
              "name": "expiration",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window"
            },
            "closed": {
              "name": "closed",
              "type": "Promise",
              "subtype": {
                "type": "void"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "keyStatuses": {
              "name": "keyStatuses",
              "type": "MediaKeyStatusMap",
              "read-only": 1,
              "exposed": "Window"
            },
            "onkeystatuseschange": {
              "name": "onkeystatuseschange",
              "type": "EventHandler",
              "event-handler": "keystatuseschange",
              "exposed": "Window"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This EncryptedMediaExtensions API interface represents a context for message exchange with a content decryption module (CDM)."
      },
      "SVGStyleElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "default preserve",
              "value-syntax": "enum",
              "name": "xml:space"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGStyleElement",
        "properties": {
          "property": {
            "disabled": {
              "interop": 1,
              "extension": 1,
              "specs": "none",
              "exposed": "Window",
              "name": "disabled",
              "type": "boolean",
              "type-original": "boolean"
            },
            "media": {
              "specs": "svg2",
              "name": "media",
              "content-attribute": "media",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "media_query",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "title": {
              "specs": "svg2",
              "name": "title",
              "content-attribute": "title",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "type": {
              "specs": "svg2",
              "name": "type",
              "content-attribute": "type",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "mime_type",
              "type": "DOMString",
              "content-attribute-reflects": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "style"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "comment": "Corresponds to the SVG <style> element."
      },
      "Worker": {
        "specs": "workers",
        "constructor": {
          "specs": "workers",
          "signature": [
            {
              "param-min-required": 1,
              "type": "Worker",
              "param": [
                {
                  "name": "stringUrl",
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "type-original": "Worker"
            }
          ],
          "name": "",
          "override-signatures": [
            "new(stringUrl: string | URL, options?: WorkerOptions): Worker"
          ]
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "Worker",
        "properties": {
          "property": {
            "onmessage": {
              "specs": "workers",
              "name": "onmessage",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "message"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "async",
              "specs": "Workers",
              "name": "error",
              "type": "ErrorEvent",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "Workers",
              "name": "message",
              "type": "MessageEvent",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "postMessage": {
              "deprecated": 0,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "subtype": {
                        "type": "object"
                      },
                      "name": "transfer",
                      "default": "[]",
                      "type": "sequence",
                      "optional": 1,
                      "type-original": "sequence<object>"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Window Worker",
              "name": "postMessage",
              "override-signatures": [
                "postMessage(message: any, transfer: Transferable[]): void",
                "postMessage(message: any, options?: PostMessageOptions): void"
              ]
            },
            "terminate": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Window Worker",
              "name": "terminate"
            }
          }
        },
        "extends": "EventTarget",
        "implements": [
          "AbstractWorker"
        ],
        "comment": "This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.",
        "override-exposed": "Window Worker"
      },
      "Gamepad": {
        "name": "Gamepad",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "id": {
              "name": "id",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "index": {
              "name": "index",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "connected": {
              "name": "connected",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            },
            "mapping": {
              "name": "mapping",
              "type": "GamepadMappingType",
              "read-only": 1,
              "exposed": "Window"
            },
            "axes": {
              "name": "axes",
              "type": "FrozenArray",
              "subtype": {
                "type": "double"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "buttons": {
              "name": "buttons",
              "type": "FrozenArray",
              "subtype": {
                "type": "GamepadButton"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "hand": {
              "name": "hand",
              "type": "GamepadHand",
              "read-only": 1,
              "exposed": "Window"
            },
            "hapticActuators": {
              "name": "hapticActuators",
              "type": "FrozenArray",
              "subtype": {
                "type": "GamepadHapticActuator"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "pose": {
              "name": "pose",
              "type": "GamepadPose",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This Gamepad API interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id."
      },
      "NotificationEvent": {
        "name": "NotificationEvent",
        "extends": "ExtendableEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "notification": {
              "name": "notification",
              "type": "Notification",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "action": {
              "name": "action",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "NotificationEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "NotificationEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker."
      },
      "WebKitPoint": {
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "param-min-required": 0,
              "type": "WebKitPoint",
              "param": [
                {
                  "name": "x",
                  "default": "0",
                  "type": "float",
                  "optional": 1,
                  "type-original": "float"
                },
                {
                  "name": "y",
                  "default": "0",
                  "type": "float",
                  "optional": 1,
                  "type-original": "float"
                }
              ],
              "type-original": "WebKitPoint"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "WebKitPoint",
        "properties": {
          "property": {
            "y": {
              "specs": "none",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "tags": "CSSOM",
              "type-original": "float"
            },
            "x": {
              "specs": "none",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "tags": "CSSOM",
              "type-original": "float"
            }
          }
        },
        "tags": "CSSOM",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "DocumentType": {
        "name": "DocumentType",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "publicId": {
              "name": "publicId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "systemId": {
              "name": "systemId",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "ChildNode"
        ],
        "comment": "A Node containing a doctype."
      },
      "SVGRadialGradientElement": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGRadialGradientElement",
        "properties": {
          "property": {
            "cx": {
              "specs": "svg2",
              "same-object": 1,
              "name": "cx",
              "constant": 1,
              "content-attribute": "cx",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "r": {
              "specs": "svg2",
              "same-object": 1,
              "name": "r",
              "constant": 1,
              "content-attribute": "r",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "fx": {
              "specs": "svg2",
              "same-object": 1,
              "name": "fx",
              "constant": 1,
              "content-attribute": "fx",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "cy": {
              "specs": "svg2",
              "same-object": 1,
              "name": "cy",
              "constant": 1,
              "content-attribute": "cy",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "fy": {
              "specs": "svg2",
              "same-object": 1,
              "name": "fy",
              "constant": 1,
              "content-attribute": "fy",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "radialGradient"
          }
        ],
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "SVGGradientElement",
        "comment": "Corresponds to the <RadialGradient> element."
      },
      "MSGestureEvent": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSGestureEvent",
        "properties": {
          "property": {
            "translationY": {
              "specs": "none",
              "exposed": "Window",
              "name": "translationY",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "offsetY": {
              "specs": "none",
              "exposed": "Window",
              "name": "offsetY",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "velocityExpansion": {
              "specs": "none",
              "exposed": "Window",
              "name": "velocityExpansion",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "velocityAngular": {
              "specs": "none",
              "exposed": "Window",
              "name": "velocityAngular",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "velocityY": {
              "specs": "none",
              "exposed": "Window",
              "name": "velocityY",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "translationX": {
              "specs": "none",
              "exposed": "Window",
              "name": "translationX",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "velocityX": {
              "specs": "none",
              "exposed": "Window",
              "name": "velocityX",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "hwTimestamp": {
              "specs": "none",
              "exposed": "Window",
              "name": "hwTimestamp",
              "type": "unsigned long long",
              "type-original": "unsigned long long",
              "read-only": 1
            },
            "offsetX": {
              "specs": "none",
              "exposed": "Window",
              "name": "offsetX",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "screenX": {
              "specs": "none",
              "exposed": "Window",
              "name": "screenX",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "rotation": {
              "specs": "none",
              "exposed": "Window",
              "name": "rotation",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "expansion": {
              "specs": "none",
              "exposed": "Window",
              "name": "expansion",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "clientY": {
              "specs": "none",
              "exposed": "Window",
              "name": "clientY",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "screenY": {
              "specs": "none",
              "exposed": "Window",
              "name": "screenY",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "scale": {
              "specs": "none",
              "exposed": "Window",
              "name": "scale",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "gestureObject": {
              "specs": "none",
              "exposed": "Window",
              "name": "gestureObject",
              "type": "any",
              "type-original": "any",
              "read-only": 1
            },
            "clientX": {
              "specs": "none",
              "exposed": "Window",
              "name": "clientX",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "MSGESTURE_FLAG_BEGIN": {
              "specs": "none",
              "value": "0x00000001",
              "exposed": "Window",
              "name": "MSGESTURE_FLAG_BEGIN",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "MSGESTURE_FLAG_CANCEL": {
              "specs": "none",
              "value": "0x00000004",
              "exposed": "Window",
              "name": "MSGESTURE_FLAG_CANCEL",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "MSGESTURE_FLAG_END": {
              "specs": "none",
              "value": "0x00000002",
              "exposed": "Window",
              "name": "MSGESTURE_FLAG_END",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "MSGESTURE_FLAG_INERTIA": {
              "specs": "none",
              "value": "0x00000008",
              "exposed": "Window",
              "name": "MSGESTURE_FLAG_INERTIA",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "MSGESTURE_FLAG_NONE": {
              "specs": "none",
              "value": "0x00000000",
              "exposed": "Window",
              "name": "MSGESTURE_FLAG_NONE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "methods": {
          "method": {
            "initGestureEvent": {
              "signature": [
                {
                  "param-min-required": 21,
                  "type": "void",
                  "param": [
                    {
                      "name": "typeArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "canBubbleArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "cancelableArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "viewArg",
                      "type": "Window",
                      "type-original": "Window"
                    },
                    {
                      "name": "detailArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "screenXArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "screenYArg",
                      "type": "long",
                      "type-original": "long"
                    },
                    {
                      "name": "clientXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "clientYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "offsetXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "offsetYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "translationXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "translationYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "scaleArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "expansionArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "rotationArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "velocityXArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "velocityYArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "velocityExpansionArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "velocityAngularArg",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "hwTimestampArg",
                      "type": "unsigned long long",
                      "type-original": "unsigned long long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "initGestureEvent"
            }
          }
        },
        "exposed": "Window",
        "extends": "UIEvent",
        "comment": "The MSGestureEvent is a proprietary interface specific to Internet Explorer and Microsoft Edge which represents events that occur due to touch gestures. Events using this interface include MSGestureStart, MSGestureEnd, MSGestureTap, MSGestureHold, MSGestureChange, and MSInertiaStart."
      },
      "SubtleCrypto": {
        "name": "SubtleCrypto",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "encrypt": {
              "name": "encrypt",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>"
              ]
            },
            "decrypt": {
              "name": "decrypt",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>"
              ]
            },
            "sign": {
              "name": "sign",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>"
              ]
            },
            "verify": {
              "name": "verify",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "signature",
                      "type": "BufferSource"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<boolean>"
              ]
            },
            "digest": {
              "name": "digest",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "digest(algorithm: string | Algorithm, data: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer): PromiseLike<ArrayBuffer>"
              ]
            },
            "generateKey": {
              "name": "generateKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "extractable",
                      "type": "boolean"
                    },
                    {
                      "name": "keyUsages",
                      "type": "sequence",
                      "subtype": {
                        "type": "KeyUsage"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>",
                "generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>",
                "generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
              ]
            },
            "deriveKey": {
              "name": "deriveKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "baseKey",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "derivedKeyType",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "extractable",
                      "type": "boolean"
                    },
                    {
                      "name": "keyUsages",
                      "type": "sequence",
                      "subtype": {
                        "type": "KeyUsage"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
              ]
            },
            "deriveBits": {
              "name": "deriveBits",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ArrayBuffer"
                  },
                  "param": [
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "baseKey",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "length",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>"
              ]
            },
            "importKey": {
              "name": "importKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "CryptoKey"
                  },
                  "param": [
                    {
                      "name": "format",
                      "type": "KeyFormat"
                    },
                    {
                      "name": "keyData",
                      "type": [
                        {
                          "type": "BufferSource"
                        },
                        {
                          "type": "JsonWebKey"
                        }
                      ]
                    },
                    {
                      "name": "algorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "extractable",
                      "type": "boolean"
                    },
                    {
                      "name": "keyUsages",
                      "type": "sequence",
                      "subtype": {
                        "type": "KeyUsage"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>",
                "importKey(format: \"raw\" | \"pkcs8\" | \"spki\", keyData: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>",
                "importKey(format: string, keyData: JsonWebKey | Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams | AesKeyAlgorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
              ]
            },
            "exportKey": {
              "name": "exportKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "format",
                      "type": "KeyFormat"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "exportKey(format: \"jwk\", key: CryptoKey): PromiseLike<JsonWebKey>",
                "exportKey(format: \"raw\" | \"pkcs8\" | \"spki\", key: CryptoKey): PromiseLike<ArrayBuffer>",
                "exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>"
              ]
            },
            "wrapKey": {
              "name": "wrapKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": [
                    {
                      "name": "format",
                      "type": "KeyFormat"
                    },
                    {
                      "name": "key",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "wrappingKey",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "wrapAlgorithm",
                      "type": "AlgorithmIdentifier"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): PromiseLike<ArrayBuffer>"
              ]
            },
            "unwrapKey": {
              "name": "unwrapKey",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "CryptoKey"
                  },
                  "param": [
                    {
                      "name": "format",
                      "type": "KeyFormat"
                    },
                    {
                      "name": "wrappedKey",
                      "type": "BufferSource"
                    },
                    {
                      "name": "unwrappingKey",
                      "type": "CryptoKey"
                    },
                    {
                      "name": "unwrapAlgorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "unwrappedKeyAlgorithm",
                      "type": "AlgorithmIdentifier"
                    },
                    {
                      "name": "extractable",
                      "type": "boolean"
                    },
                    {
                      "name": "keyUsages",
                      "type": "sequence",
                      "subtype": {
                        "type": "KeyUsage"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "unwrapKey(format: string, wrappedKey: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto)."
      },
      "HTMLTableSectionElement": {
        "name": "HTMLTableSectionElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "insertRow": {
              "name": "insertRow",
              "signature": [
                {
                  "type": "HTMLTableRowElement",
                  "param": [
                    {
                      "name": "index",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "insertRow(index?: number): HTMLTableRowElement"
              ],
              "comment": "/**\n * Creates a new row (tr) in the table, and adds the row to the rows collection.\n * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n */"
            },
            "deleteRow": {
              "name": "deleteRow",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the specified row (tr) from the element and from the rows collection.\n * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "rows": {
              "name": "rows",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLTableRowElement>",
              "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
            },
            "ch": {
              "name": "ch",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "chOff": {
              "name": "chOff",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "vAlign": {
              "name": "vAlign",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
        "element": [
          {
            "name": "tbody"
          },
          {
            "name": "tfoot"
          },
          {
            "name": "thead"
          }
        ]
      },
      "HTMLInputElement": {
        "name": "HTMLInputElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "stepUp": {
              "name": "stepUp",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "n",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\n * @param n Value to increment the value by.\n */"
            },
            "stepDown": {
              "name": "stepDown",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "n",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\n * @param n Value to decrement the value by.\n */"
            },
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            },
            "select": {
              "name": "select",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Makes the selection equal to the current object.\n */"
            },
            "setRangeText": {
              "name": "setRangeText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "replacement",
                      "type": "DOMString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "replacement",
                      "type": "DOMString"
                    },
                    {
                      "name": "start",
                      "type": "unsigned long"
                    },
                    {
                      "name": "end",
                      "type": "unsigned long"
                    },
                    {
                      "name": "selectionMode",
                      "type": "SelectionMode",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setSelectionRange": {
              "name": "setSelectionRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "start",
                      "type": "unsigned long"
                    },
                    {
                      "name": "end",
                      "type": "unsigned long"
                    },
                    {
                      "name": "direction",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setSelectionRange(start: number, end: number, direction?: \"forward\" | \"backward\" | \"none\"): void"
              ],
              "comment": "/**\n * Sets the start and end positions of a selection in a text field.\n * @param start The offset into the text field for the start of the selection.\n * @param end The offset into the text field for the end of the selection.\n * @param direction The direction in which the selection is performed.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "accept": {
              "name": "accept",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a comma-separated list of content types.\n */"
            },
            "alt": {
              "name": "alt",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
            },
            "autocomplete": {
              "name": "autocomplete",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Specifies whether autocomplete is applied to an editable text field.\n */"
            },
            "autofocus": {
              "name": "autofocus",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n */"
            },
            "defaultChecked": {
              "name": "defaultChecked",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the state of the check box or radio button.\n */"
            },
            "checked": {
              "name": "checked",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the state of the check box or radio button.\n */"
            },
            "dirName": {
              "name": "dirName",
              "type": "DOMString",
              "exposed": "Window"
            },
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLFormElement | null",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "files": {
              "name": "files",
              "type": "FileList",
              "nullable": 1,
              "read-only": 0,
              "exposed": "Window",
              "override-type": "FileList | null",
              "comment": "/**\n * Returns a FileList object on a file type input object.\n */"
            },
            "formAction": {
              "name": "formAction",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n */"
            },
            "formEnctype": {
              "name": "formEnctype",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Used to override the encoding (formEnctype attribute) specified on the form element.\n */"
            },
            "formMethod": {
              "name": "formMethod",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the submit method attribute previously specified on a form element.\n */"
            },
            "formNoValidate": {
              "name": "formNoValidate",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n */"
            },
            "formTarget": {
              "name": "formTarget",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Overrides the target attribute on a form element.\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the height of the object.\n */"
            },
            "indeterminate": {
              "name": "indeterminate",
              "type": "boolean",
              "exposed": "Window"
            },
            "list": {
              "name": "list",
              "type": "HTMLElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Specifies the ID of a pre-defined datalist of options for an input element.\n */"
            },
            "max": {
              "name": "max",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\n */"
            },
            "maxLength": {
              "name": "maxLength",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n */"
            },
            "min": {
              "name": "min",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\n */"
            },
            "minLength": {
              "name": "minLength",
              "type": "long",
              "exposed": "Window"
            },
            "multiple": {
              "name": "multiple",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "pattern": {
              "name": "pattern",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets a string containing a regular expression that the user's input must match.\n */"
            },
            "placeholder": {
              "name": "placeholder",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n */"
            },
            "readOnly": {
              "name": "readOnly",
              "type": "boolean",
              "exposed": "Window"
            },
            "required": {
              "name": "required",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
            },
            "size": {
              "name": "size",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "src": {
              "name": "src",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
            },
            "step": {
              "name": "step",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the content type of the object.\n */"
            },
            "defaultValue": {
              "name": "defaultValue",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the initial contents of the object.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the value of the data at the cursor's current position.\n */"
            },
            "valueAsDate": {
              "name": "valueAsDate",
              "type": "object",
              "nullable": 1,
              "exposed": "Window",
              "override-type": "Date | null",
              "comment": "/**\n * Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an \"InvalidStateError\" DOMException if the control isn't date- or time-based.\n */"
            },
            "valueAsNumber": {
              "name": "valueAsNumber",
              "type": "unrestricted double",
              "exposed": "Window",
              "comment": "/**\n * Returns the input field value as a number.\n */"
            },
            "width": {
              "name": "width",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement> | null"
            },
            "selectionStart": {
              "name": "selectionStart",
              "type": "unsigned long",
              "nullable": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the starting position or offset of a text selection.\n */"
            },
            "selectionEnd": {
              "name": "selectionEnd",
              "type": "unsigned long",
              "nullable": 1,
              "exposed": "Window",
              "comment": "/**\n * Gets or sets the end position or offset of a text selection.\n */"
            },
            "selectionDirection": {
              "name": "selectionDirection",
              "type": "DOMString",
              "nullable": 1,
              "exposed": "Window"
            },
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "useMap": {
              "name": "useMap",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
        "element": [
          {
            "name": "input"
          }
        ]
      },
      "HTMLAnchorElement": {
        "name": "HTMLAnchorElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "target": {
              "name": "target",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
            },
            "download": {
              "name": "download",
              "type": "DOMString",
              "exposed": "Window"
            },
            "ping": {
              "name": "ping",
              "type": "USVString",
              "exposed": "Window"
            },
            "rel": {
              "name": "rel",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
            },
            "relList": {
              "name": "relList",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "hreflang": {
              "name": "hreflang",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the language code of the object.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window"
            },
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
            },
            "referrerPolicy": {
              "name": "referrerPolicy",
              "type": "DOMString",
              "exposed": "Window"
            },
            "coords": {
              "name": "coords",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the coordinates of the object.\n */"
            },
            "charset": {
              "name": "charset",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
            },
            "rev": {
              "name": "rev",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
            },
            "shape": {
              "name": "shape",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "HTMLHyperlinkElementUtils"
        ],
        "comment": "Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.",
        "element": [
          {
            "name": "a"
          }
        ]
      },
      "AudioProcessingEvent": {
        "name": "AudioProcessingEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "playbackTime": {
              "name": "playbackTime",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "inputBuffer": {
              "name": "inputBuffer",
              "type": "AudioBuffer",
              "read-only": 1,
              "exposed": "Window"
            },
            "outputBuffer": {
              "name": "outputBuffer",
              "type": "AudioBuffer",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioProcessingEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "AudioProcessingEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The Web Audio API events that occur when a ScriptProcessorNode input buffer is ready to be processed."
      },
      "HTMLParamElement": {
        "name": "HTMLParamElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of an input parameter for an element.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the value of an input parameter for an element.\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the content type of the resource designated by the value attribute.\n */"
            },
            "valueType": {
              "name": "valueType",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the data type of the value attribute.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
        "element": [
          {
            "name": "param"
          }
        ]
      },
      "StereoPannerNode": {
        "name": "StereoPannerNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "pan": {
              "name": "pan",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "StereoPannerNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "StereoPannerOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode."
      },
      "SVGAnimatedNumber": {
        "name": "SVGAnimatedNumber",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "baseVal": {
              "name": "baseVal",
              "type": "float",
              "exposed": "Window"
            },
            "animVal": {
              "name": "animVal",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Used for attributes of basic type <Number> which can be animated."
      },
      "PushMessageData": {
        "name": "PushMessageData",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "arrayBuffer": {
              "name": "arrayBuffer",
              "signature": [
                {
                  "type": "ArrayBuffer",
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            },
            "blob": {
              "name": "blob",
              "signature": [
                {
                  "type": "Blob",
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            },
            "json": {
              "name": "json",
              "signature": [
                {
                  "type": "any",
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            },
            "text": {
              "name": "text",
              "signature": [
                {
                  "type": "USVString",
                  "param": []
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "This Push API interface provides methods which let you retrieve the push data sent by a server in various formats."
      },
      "HTMLPreElement": {
        "name": "HTMLPreElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "long",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or gets a value that you can use to implement your own width functionality for the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).",
        "element": [
          {
            "name": "pre"
          },
          {
            "name": "listing",
            "deprecated": true
          },
          {
            "name": "xmp",
            "deprecated": true
          }
        ]
      },
      "PushSubscriptionOptions": {
        "name": "PushSubscriptionOptions",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "userVisibleOnly": {
              "name": "userVisibleOnly",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "applicationServerKey": {
              "name": "applicationServerKey",
              "type": "ArrayBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "DOMTokenList": {
        "name": "DOMTokenList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the token with index index.\n */"
            },
            "contains": {
              "name": "contains",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "token",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if token is present, and false otherwise.\n */"
            },
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "tokens",
                      "type": "DOMString",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Adds all arguments passed, except those already present.\n * \n * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n * \n * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n */"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "tokens",
                      "type": "DOMString",
                      "variadic": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes arguments passed, if they are present.\n * \n * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n * \n * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n */"
            },
            "toggle": {
              "name": "toggle",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "token",
                      "type": "DOMString"
                    },
                    {
                      "name": "force",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * If force is not given, \"toggles\" token, removing it if it's present and adding it if it's not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).\n * \n * Returns true if token is now present, and false otherwise.\n * \n * Throws a \"SyntaxError\" DOMException if token is empty.\n * \n * Throws an \"InvalidCharacterError\" DOMException if token contains any spaces.\n */"
            },
            "replace": {
              "name": "replace",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "token",
                      "type": "DOMString"
                    },
                    {
                      "name": "newToken",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Replaces token with newToken.\n * \n * Returns true if token was replaced with newToken, and false otherwise.\n * \n * Throws a \"SyntaxError\" DOMException if one of the arguments is the empty string.\n * \n * Throws an \"InvalidCharacterError\" DOMException if one of the arguments contains any ASCII whitespace.\n */",
              "override-signatures": [
                "replace(oldToken: string, newToken: string): void"
              ]
            },
            "supports": {
              "name": "supports",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "token",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns true if token is in the associated attribute's supported tokens. Returns false otherwise.\n * \n * Throws a TypeError if the associated attribute has no supported tokens defined.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the number of tokens.\n */"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Returns the associated set as string.\n * \n * Can be set, to change the associated attribute.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "DOMString"
            }
          ]
        },
        "comment": "A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive."
      },
      "Response": {
        "name": "Response",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "error": {
              "name": "error",
              "signature": [
                {
                  "type": "Response",
                  "param": []
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "redirect": {
              "name": "redirect",
              "signature": [
                {
                  "type": "Response",
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    },
                    {
                      "name": "status",
                      "type": "unsigned short",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "clone": {
              "name": "clone",
              "signature": [
                {
                  "type": "Response",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "ResponseType",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "url": {
              "name": "url",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "redirected": {
              "name": "redirected",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "status": {
              "name": "status",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "ok": {
              "name": "ok",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "statusText": {
              "name": "statusText",
              "type": "ByteString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "headers": {
              "name": "headers",
              "type": "Headers",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "trailer": {
              "name": "trailer",
              "type": "Promise",
              "subtype": {
                "type": "Headers"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Response",
              "param": [
                {
                  "name": "body",
                  "type": "BodyInit",
                  "nullable": 1,
                  "optional": 1
                },
                {
                  "name": "init",
                  "type": "ResponseInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "Body"
        ],
        "comment": "This Fetch API interface represents the response to a request."
      },
      "SVGMetadataElement": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGMetadataElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "metadata"
          }
        ],
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "SVGElement",
        "comment": "Corresponds to the <metadata> element."
      },
      "SVGPathSegMovetoAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegMovetoAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "PeriodicWave": {
        "name": "PeriodicWave",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PeriodicWave",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "PeriodicWaveOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave()."
      },
      "RTCSsrcConflictEvent": {
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCSsrcConflictEvent",
        "properties": {
          "property": {
            "ssrc": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "ssrc",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "CryptoKeyPair": {
        "constants": {
          "constant": {}
        },
        "specs": "webcryptoapi",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CryptoKeyPair",
        "extends": "Object",
        "properties": {
          "property": {
            "privateKey": {
              "specs": "webcryptoapi",
              "exposed": "Window",
              "name": "privateKey",
              "type": "CryptoKey",
              "type-original": "CryptoKey"
            },
            "publicKey": {
              "specs": "webcryptoapi",
              "exposed": "Window",
              "name": "publicKey",
              "type": "CryptoKey",
              "type-original": "CryptoKey"
            }
          }
        },
        "comment": "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm."
      },
      "SVGPolygonElement": {
        "name": "SVGPolygonElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGAnimatedPoints"
        ],
        "comment": "Provides access to the properties of <polygon> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "polygon"
          }
        ]
      },
      "MediaStreamAudioSourceNode": {
        "name": "MediaStreamAudioSourceNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "mediaStream": {
              "name": "mediaStream",
              "type": "MediaStream",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaStreamAudioSourceNode",
              "param": [
                {
                  "name": "context",
                  "type": "AudioContext"
                },
                {
                  "name": "options",
                  "type": "MediaStreamAudioSourceOptions"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs."
      },
      "WebSocket": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 1,
              "type": "WebSocket",
              "param": [
                {
                  "name": "url",
                  "type": "USVString",
                  "type-original": "USVString"
                },
                {
                  "name": "protocols",
                  "default": "[]",
                  "type": [
                    {
                      "type": "DOMString"
                    },
                    {
                      "subtype": {
                        "type": "DOMString"
                      },
                      "type": "sequence"
                    }
                  ],
                  "optional": 1,
                  "type-original": "(DOMString or sequence<DOMString>)"
                }
              ],
              "type-original": "WebSocket"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "WebSocket",
        "properties": {
          "property": {
            "protocol": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "protocol",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "onopen": {
              "specs": "html5",
              "name": "onopen",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "open"
            },
            "bufferedAmount": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "bufferedAmount",
              "type": "unsigned long long",
              "type-original": "unsigned long long",
              "read-only": 1
            },
            "readyState": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "readyState",
              "type": "unsigned short",
              "type-original": "unsigned short",
              "read-only": 1
            },
            "extensions": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "extensions",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "onmessage": {
              "specs": "html5",
              "name": "onmessage",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "message"
            },
            "onclose": {
              "specs": "html5",
              "name": "onclose",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "close"
            },
            "binaryType": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "binaryType",
              "type": "BinaryType",
              "type-original": "BinaryType"
            },
            "url": {
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "url",
              "type": "USVString",
              "type-original": "USVString",
              "read-only": 1
            },
            "onerror": {
              "specs": "html5",
              "name": "onerror",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            }
          }
        },
        "constants": {
          "constant": {
            "CLOSING": {
              "specs": "html5",
              "value": "2",
              "exposed": "Window Worker",
              "name": "CLOSING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "OPEN": {
              "specs": "html5",
              "value": "1",
              "exposed": "Window Worker",
              "name": "OPEN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "CLOSED": {
              "specs": "html5",
              "value": "3",
              "exposed": "Window Worker",
              "name": "CLOSED",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "CONNECTING": {
              "specs": "html5",
              "value": "0",
              "exposed": "Window Worker",
              "name": "CONNECTING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "Sockets",
              "name": "error",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "async",
              "specs": "Sockets",
              "name": "message",
              "type": "MessageEvent",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "Sockets",
              "name": "open",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "Sockets",
              "name": "close",
              "type": "CloseEvent",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "close": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "clamp": 1,
                      "name": "code",
                      "type": "unsigned short",
                      "optional": 1,
                      "type-original": "unsigned short"
                    },
                    {
                      "name": "reason",
                      "type": "USVString",
                      "optional": 1,
                      "type-original": "USVString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "close"
            },
            "send": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "send",
              "override-signatures": [
                "send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void"
              ]
            }
          }
        },
        "extends": "EventTarget",
        "comment": "Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection."
      },
      "RTCIceCandidatePairChangedEvent": {
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCIceCandidatePairChangedEvent",
        "properties": {
          "property": {
            "pair": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "pair",
              "type": "RTCIceCandidatePair",
              "type-original": "RTCIceCandidatePair",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "SVGTextContentElement": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGTextContentElement",
        "properties": {
          "property": {
            "textLength": {
              "specs": "svg2",
              "same-object": 1,
              "name": "textLength",
              "constant": 1,
              "content-attribute": "textLength",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "type": "SVGAnimatedLength",
              "content-attribute-reflects": 1,
              "read-only": 1
            },
            "lengthAdjust": {
              "content-attribute-enum-values": "spacing spacingAndGlyphs",
              "specs": "svg2",
              "same-object": 1,
              "name": "lengthAdjust",
              "constant": 1,
              "content-attribute": "lengthAdjust",
              "type-original": "SVGAnimatedEnumeration",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "SVGAnimatedEnumeration",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "LENGTHADJUST_SPACING": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "LENGTHADJUST_SPACING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "LENGTHADJUST_SPACINGANDGLYPHS": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "LENGTHADJUST_SPACINGANDGLYPHS",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "LENGTHADJUST_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "LENGTHADJUST_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {
            "getCharNumAtPosition": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "point",
                      "type": "SVGPoint",
                      "type-original": "SVGPoint"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getCharNumAtPosition"
            },
            "getStartPositionOfChar": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPoint",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPoint"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getStartPositionOfChar"
            },
            "getExtentOfChar": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGRect",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGRect"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getExtentOfChar"
            },
            "selectSubString": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    },
                    {
                      "name": "nchars",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "selectSubString"
            },
            "getSubStringLength": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "float",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    },
                    {
                      "name": "nchars",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "float"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getSubStringLength"
            },
            "getComputedTextLength": {
              "signature": [
                {
                  "type": "float",
                  "type-original": "float"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getComputedTextLength"
            },
            "getNumberOfChars": {
              "signature": [
                {
                  "type": "long",
                  "type-original": "long"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getNumberOfChars"
            },
            "getRotationOfChar": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "float",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "float"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getRotationOfChar"
            },
            "getEndPositionOfChar": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPoint",
                  "param": [
                    {
                      "name": "charnum",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPoint"
                }
              ],
              "specs": "svg2",
              "exposed": "Window",
              "name": "getEndPositionOfChar"
            }
          }
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement."
      },
      "OES_texture_half_float": {
        "name": "OES_texture_half_float",
        "extends": "Object",
        "constants": {
          "constant": {
            "HALF_FLOAT_OES": {
              "name": "HALF_FLOAT_OES",
              "type": "GLenum",
              "value": "0x8D61"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.",
        "override-exposed": "Window Worker"
      },
      "Location": {
        "name": "Location",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "assign": {
              "name": "assign",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Navigates to the given URL.\n */"
            },
            "replace": {
              "name": "replace",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the current page from the session history and navigates to the given URL.\n */"
            },
            "reload": {
              "name": "reload",
              "signature": [
                {
                  "type": "void",
                  "param": []
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "forcedReload",
                      "type": "boolean"
                    }
                  ],
                  "deprecated": 1
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Reloads the current page.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL.\n * \n * Can be set, to navigate to the given URL.\n */"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's origin.\n */"
            },
            "protocol": {
              "name": "protocol",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's scheme.\n * \n * Can be set, to navigate to the same URL with a changed scheme.\n */"
            },
            "host": {
              "name": "host",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's host and port (if different from the default port for the scheme).\n * \n * Can be set, to navigate to the same URL with a changed host and port.\n */"
            },
            "hostname": {
              "name": "hostname",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's host.\n * \n * Can be set, to navigate to the same URL with a changed host.\n */"
            },
            "port": {
              "name": "port",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's port.\n * \n * Can be set, to navigate to the same URL with a changed port.\n */"
            },
            "pathname": {
              "name": "pathname",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's path.\n * \n * Can be set, to navigate to the same URL with a changed path.\n */"
            },
            "search": {
              "name": "search",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's query (includes leading \"?\" if non-empty).\n * \n * Can be set, to navigate to the same URL with a changed query (ignores leading \"?\").\n */"
            },
            "hash": {
              "name": "hash",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Returns the Location object's URL's fragment (includes leading \"#\" if non-empty).\n * \n * Can be set, to navigate to the same URL with a changed fragment (ignores leading \"#\").\n */"
            },
            "ancestorOrigins": {
              "name": "ancestorOrigins",
              "type": "DOMStringList",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively."
      },
      "RTCDTMFToneChangeEvent": {
        "name": "RTCDTMFToneChangeEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "tone": {
              "name": "tone",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCDTMFToneChangeEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCDTMFToneChangeEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event."
      },
      "SVGFEGaussianBlurElement": {
        "name": "SVGFEGaussianBlurElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setStdDeviation": {
              "name": "setStdDeviation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "stdDeviationX",
                      "type": "float"
                    },
                    {
                      "name": "stdDeviationY",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "stdDeviationX": {
              "name": "stdDeviationX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "stdDeviationY": {
              "name": "stdDeviationY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feGaussianBlur> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feGaussianBlur"
          }
        ]
      },
      "TouchList": {
        "name": "TouchList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Touch",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries."
      },
      "RTCIceCandidate": {
        "name": "RTCIceCandidate",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "RTCIceCandidateInit",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "candidate": {
              "name": "candidate",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "sdpMid": {
              "name": "sdpMid",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "sdpMLineIndex": {
              "name": "sdpMLineIndex",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "foundation": {
              "name": "foundation",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "component": {
              "name": "component",
              "type": "RTCIceComponent",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "priority": {
              "name": "priority",
              "type": "unsigned long",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "ip": {
              "name": "ip",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "protocol": {
              "name": "protocol",
              "type": "RTCIceProtocol",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "port": {
              "name": "port",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "RTCIceCandidateType",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "tcpType": {
              "name": "tcpType",
              "type": "RTCIceTcpCandidateType",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "relatedAddress": {
              "name": "relatedAddress",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "relatedPort": {
              "name": "relatedPort",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "usernameFragment": {
              "name": "usernameFragment",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCIceCandidate",
              "param": [
                {
                  "name": "candidateInitDict",
                  "type": "RTCIceCandidateInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The RTCIceCandidate interface—part of the WebRTC API—represents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection."
      },
      "PerformanceEntry": {
        "name": "PerformanceEntry",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "entryType": {
              "name": "entryType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "startTime": {
              "name": "startTime",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "duration": {
              "name": "duration",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image)."
      },
      "XSLTProcessor": {
        "constants": {
          "constant": {}
        },
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "type": "XSLTProcessor",
              "type-original": "XSLTProcessor"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "clearParameters": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "clearParameters"
            },
            "transformToDocument": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "Document",
                  "param": [
                    {
                      "name": "source",
                      "type": "Node",
                      "type-original": "Node"
                    }
                  ],
                  "type-original": "Document"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "transformToDocument"
            },
            "reset": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "reset"
            },
            "transformToFragment": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "DocumentFragment",
                  "param": [
                    {
                      "name": "source",
                      "type": "Node",
                      "type-original": "Node"
                    },
                    {
                      "name": "document",
                      "type": "Document",
                      "type-original": "Document"
                    }
                  ],
                  "type-original": "DocumentFragment"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "transformToFragment"
            },
            "importStylesheet": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "style",
                      "type": "Node",
                      "type-original": "Node"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "importStylesheet"
            },
            "setParameter": {
              "signature": [
                {
                  "param-min-required": 3,
                  "type": "void",
                  "param": [
                    {
                      "treat-null-as": "EmptyString",
                      "name": "namespaceURI",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "localName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "value",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "setParameter"
            },
            "removeParameter": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "treat-null-as": "EmptyString",
                      "name": "namespaceURI",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "localName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "removeParameter"
            },
            "getParameter": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "any",
                  "param": [
                    {
                      "treat-null-as": "EmptyString",
                      "name": "namespaceURI",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "localName",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "any"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "getParameter"
            }
          }
        },
        "name": "XSLTProcessor",
        "extends": "Object",
        "properties": {
          "property": {}
        },
        "comment": "An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents."
      },
      "MSMediaKeys": {
        "specs": "encrypted-media-20130510",
        "constructor": {
          "specs": "encrypted-media-20130510",
          "signature": [
            {
              "param-min-required": 1,
              "type": "MSMediaKeys",
              "param": [
                {
                  "name": "keySystem",
                  "type": "DOMString",
                  "type-original": "DOMString"
                }
              ],
              "type-original": "MSMediaKeys"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "MSMediaKeys",
        "properties": {
          "property": {
            "keySystem": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "keySystem",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createSession": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "MSMediaKeySession",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "initData",
                      "type": "Uint8Array",
                      "type-original": "Uint8Array"
                    },
                    {
                      "nullable": 1,
                      "name": "cdmData",
                      "type": "Uint8Array",
                      "optional": 1,
                      "type-original": "Uint8Array?"
                    }
                  ],
                  "type-original": "MSMediaKeySession"
                }
              ],
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "createSession"
            },
            "isTypeSupported": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "keySystem",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "nullable": 1,
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "isTypeSupported",
              "static": 1
            },
            "isTypeSupportedWithFeatures": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "keySystem",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "nullable": 1,
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString?"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "isTypeSupportedWithFeatures",
              "static": 1
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "WheelEvent": {
        "name": "WheelEvent",
        "extends": "MouseEvent",
        "constants": {
          "constant": {
            "DOM_DELTA_PIXEL": {
              "name": "DOM_DELTA_PIXEL",
              "type": "unsigned long",
              "value": "0x00"
            },
            "DOM_DELTA_LINE": {
              "name": "DOM_DELTA_LINE",
              "type": "unsigned long",
              "value": "0x01"
            },
            "DOM_DELTA_PAGE": {
              "name": "DOM_DELTA_PAGE",
              "type": "unsigned long",
              "value": "0x02"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "deltaX": {
              "name": "deltaX",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "deltaY": {
              "name": "deltaY",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "deltaZ": {
              "name": "deltaZ",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "deltaMode": {
              "name": "deltaMode",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "WheelEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "WheelEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Events that occur due to the user moving a mouse wheel or similar input device."
      },
      "SVGPathElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "value-syntax": "svg_path_data",
              "name": "d"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "clip-rule"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "css_color",
              "name": "color"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "fill"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "fill-opacity"
            },
            {
              "enum-values": "nonzero evenodd inherit",
              "value-syntax": "enum",
              "name": "fill-rule"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "marker"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "marker-end"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "marker-mid"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "marker-start"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            },
            {
              "enum-values": "auto none visiblePainted visibleFill visibleStroke visible painted fill stroke all inherit initial",
              "value-syntax": "enum",
              "name": "pointer-events"
            },
            {
              "enum-values": "none currentColor inherit",
              "value-syntax": "svg_paint_or_css_color",
              "name": "stroke"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "comma_or_space_separated_css_percentage_or_length",
              "name": "stroke-dasharray"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-dashoffset"
            },
            {
              "enum-values": "butt round square inherit",
              "value-syntax": "enum",
              "name": "stroke-linecap"
            },
            {
              "enum-values": "miter round bevel inherit",
              "value-syntax": "enum",
              "name": "stroke-linejoin"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "1_or_greater_floating_point_number",
              "name": "stroke-miterlimit"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "stroke-opacity"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "css_percentage_or_length",
              "name": "stroke-width"
            },
            {
              "enum-values": "visible hidden collapse inherit initial",
              "value-syntax": "enum",
              "name": "visibility"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathElement",
        "properties": {
          "property": {
            "pathSegList": {
              "specs": "svg11",
              "name": "pathSegList",
              "type-original": "SVGPathSegList",
              "deprecated": 1,
              "interop": 1,
              "exposed": "Window",
              "type": "SVGPathSegList",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "path"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getPathSegAtLength": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "distance",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "unsigned long"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "getPathSegAtLength"
            },
            "getPointAtLength": {
              "specs": "svg11",
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPoint",
                  "param": [
                    {
                      "name": "distance",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPoint"
                }
              ],
              "name": "getPointAtLength",
              "exposed": "Window"
            },
            "createSVGPathSegCurvetoQuadraticAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "SVGPathSegCurvetoQuadraticAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoQuadraticAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoQuadraticAbs"
            },
            "createSVGPathSegLinetoRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegLinetoRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoRel"
            },
            "createSVGPathSegCurvetoQuadraticRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "SVGPathSegCurvetoQuadraticRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoQuadraticRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoQuadraticRel"
            },
            "createSVGPathSegCurvetoCubicAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 6,
                  "type": "SVGPathSegCurvetoCubicAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoCubicAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoCubicAbs"
            },
            "createSVGPathSegLinetoAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegLinetoAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoAbs"
            },
            "createSVGPathSegClosePath": {
              "interop": 1,
              "deprecated": 1,
              "specs": "svg11",
              "signature": [
                {
                  "type": "SVGPathSegClosePath",
                  "type-original": "SVGPathSegClosePath"
                }
              ],
              "name": "createSVGPathSegClosePath",
              "exposed": "Window"
            },
            "createSVGPathSegCurvetoCubicRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 6,
                  "type": "SVGPathSegCurvetoCubicRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoCubicRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoCubicRel"
            },
            "createSVGPathSegCurvetoQuadraticSmoothRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegCurvetoQuadraticSmoothRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoQuadraticSmoothRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoQuadraticSmoothRel"
            },
            "createSVGPathSegMovetoRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegMovetoRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegMovetoRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegMovetoRel"
            },
            "createSVGPathSegCurvetoCubicSmoothAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "SVGPathSegCurvetoCubicSmoothAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoCubicSmoothAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoCubicSmoothAbs"
            },
            "createSVGPathSegMovetoAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegMovetoAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegMovetoAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegMovetoAbs"
            },
            "createSVGPathSegLinetoVerticalRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSegLinetoVerticalRel",
                  "param": [
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoVerticalRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoVerticalRel"
            },
            "createSVGPathSegArcRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 7,
                  "type": "SVGPathSegArcRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "r1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "r2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "angle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "largeArcFlag",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "sweepFlag",
                      "type": "boolean",
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "SVGPathSegArcRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegArcRel"
            },
            "createSVGPathSegCurvetoQuadraticSmoothAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSegCurvetoQuadraticSmoothAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoQuadraticSmoothAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoQuadraticSmoothAbs"
            },
            "createSVGPathSegLinetoHorizontalRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSegLinetoHorizontalRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoHorizontalRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoHorizontalRel"
            },
            "getTotalLength": {
              "specs": "svg11",
              "signature": [
                {
                  "type": "float",
                  "type-original": "float"
                }
              ],
              "name": "getTotalLength",
              "exposed": "Window"
            },
            "createSVGPathSegCurvetoCubicSmoothRel": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "SVGPathSegCurvetoCubicSmoothRel",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegCurvetoCubicSmoothRel"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegCurvetoCubicSmoothRel"
            },
            "createSVGPathSegLinetoHorizontalAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSegLinetoHorizontalAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoHorizontalAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoHorizontalAbs"
            },
            "createSVGPathSegLinetoVerticalAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSegLinetoVerticalAbs",
                  "param": [
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "SVGPathSegLinetoVerticalAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegLinetoVerticalAbs"
            },
            "createSVGPathSegArcAbs": {
              "deprecated": 1,
              "interop": 1,
              "signature": [
                {
                  "param-min-required": 7,
                  "type": "SVGPathSegArcAbs",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "r1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "r2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "angle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "largeArcFlag",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "sweepFlag",
                      "type": "boolean",
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "SVGPathSegArcAbs"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "createSVGPathSegArcAbs"
            }
          }
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Corresponds to the <path> element."
      },
      "IDBCursor": {
        "name": "IDBCursor",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "advance": {
              "name": "advance",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "count",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Advances the cursor through the next count records in range.\n */"
            },
            "continue": {
              "name": "continue",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Advances the cursor to the next record in range.\n */",
              "override-signatures": [
                "continue(key?: IDBValidKey): void"
              ]
            },
            "continuePrimaryKey": {
              "name": "continuePrimaryKey",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "any"
                    },
                    {
                      "name": "primaryKey",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Advances the cursor to the next record in range matching or after key and primaryKey. Throws an \"InvalidAccessError\" DOMException if the source is not an index.\n */",
              "override-signatures": [
                "continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void"
              ]
            },
            "update": {
              "name": "update",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": [
                    {
                      "name": "value",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Updated the record pointed at by the cursor with a new value.\n * \n * Throws a \"DataError\" DOMException if the effective object store uses in-line keys and the key would have changed.\n * \n * If successful, request's result will be the record's key.\n */",
              "override-signatures": [
                "update(value: any): IDBRequest<IDBValidKey>"
              ]
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "IDBRequest",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Delete the record pointed at by the cursor with a new value.\n * \n * If successful, request's result will be undefined.\n */",
              "override-signatures": [
                "delete(): IDBRequest<undefined>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "source": {
              "name": "source",
              "type": [
                {
                  "type": "IDBObjectStore"
                },
                {
                  "type": "IDBIndex"
                }
              ],
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the IDBObjectStore or IDBIndex the cursor was opened from.\n */"
            },
            "direction": {
              "name": "direction",
              "type": "IDBCursorDirection",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the direction (\"next\", \"nextunique\", \"prev\" or \"prevunique\") of the cursor.\n */"
            },
            "key": {
              "name": "key",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished.\n */",
              "override-type": "IDBValidKey"
            },
            "primaryKey": {
              "name": "primaryKey",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the effective key of the cursor. Throws a \"InvalidStateError\" DOMException if the cursor is advancing or is finished.\n */",
              "override-type": "IDBValidKey"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database."
      },
      "SVGPathSegList": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegList",
        "properties": {
          "property": {
            "numberOfItems": {
              "specs": "svg11",
              "name": "numberOfItems",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {
            "replaceItem": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGPathSeg",
                      "type-original": "SVGPathSeg"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "replaceItem"
            },
            "getItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "getItem"
            },
            "appendItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGPathSeg",
                      "type-original": "SVGPathSeg"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "appendItem"
            },
            "clear": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "clear"
            },
            "removeItem": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "removeItem"
            },
            "initialize": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGPathSeg",
                      "type-original": "SVGPathSeg"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "initialize"
            },
            "insertItemBefore": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "SVGPathSeg",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGPathSeg",
                      "type-original": "SVGPathSeg"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "SVGPathSeg"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "insertItemBefore"
            }
          }
        },
        "extends": "Object"
      },
      "HTMLAudioElement": {
        "specs": "html5",
        "html-constructor": 1,
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLAudioElement",
        "named-constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 0,
              "type": "HTMLAudioElement",
              "param": [
                {
                  "name": "src",
                  "type": "DOMString",
                  "optional": 1,
                  "type-original": "DOMString"
                }
              ],
              "type-original": "HTMLAudioElement"
            }
          ],
          "name": "Audio"
        },
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "audio"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "HTMLMediaElement",
        "comment": "Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface."
      },
      "Client": {
        "name": "Client",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "postMessage": {
              "name": "postMessage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "transfer",
                      "type": "sequence",
                      "subtype": {
                        "type": "object"
                      }
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "options",
                      "type": "PostMessageOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker",
              "override-signatures": [
                "postMessage(message: any, transfer?: Transferable[]): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "url": {
              "name": "url",
              "type": "USVString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "frameType": {
              "name": "frameType",
              "type": "FrameType",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "id": {
              "name": "id",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "ServiceWorker"
            },
            "type": {
              "name": "type",
              "type": "ClientType",
              "read-only": 1,
              "exposed": "ServiceWorker",
              "override-type": "ClientTypes"
            }
          },
          "namesakes": {}
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get()."
      },
      "MimeType": {
        "name": "MimeType",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the MIME type.\n */"
            },
            "description": {
              "name": "description",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the MIME type's description.\n */"
            },
            "suffixes": {
              "name": "suffixes",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the MIME type's typical file extensions, in a comma-separated list.\n */"
            },
            "enabledPlugin": {
              "name": "enabledPlugin",
              "type": "Plugin",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the Plugin object that implements this MIME type.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object."
      },
      "AudioBufferSourceNode": {
        "name": "AudioBufferSourceNode",
        "extends": "AudioScheduledSourceNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "start": {
              "name": "start",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "when",
                      "type": "double",
                      "optional": 1
                    },
                    {
                      "name": "offset",
                      "type": "double",
                      "optional": 1
                    },
                    {
                      "name": "duration",
                      "type": "double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "buffer": {
              "name": "buffer",
              "type": "AudioBuffer",
              "nullable": 1,
              "exposed": "Window"
            },
            "playbackRate": {
              "name": "playbackRate",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "detune": {
              "name": "detune",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "loop": {
              "name": "loop",
              "type": "boolean",
              "exposed": "Window"
            },
            "loopStart": {
              "name": "loopStart",
              "type": "double",
              "exposed": "Window"
            },
            "loopEnd": {
              "name": "loopEnd",
              "type": "double",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioBufferSourceNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "AudioBufferSourceOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network."
      },
      "PointerEvent": {
        "name": "PointerEvent",
        "extends": "MouseEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "pointerId": {
              "name": "pointerId",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "pressure": {
              "name": "pressure",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "tangentialPressure": {
              "name": "tangentialPressure",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "tiltX": {
              "name": "tiltX",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "tiltY": {
              "name": "tiltY",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "twist": {
              "name": "twist",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "pointerType": {
              "name": "pointerType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "isPrimary": {
              "name": "isPrimary",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PointerEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PointerEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc."
      },
      "SVGCircleElement": {
        "name": "SVGCircleElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cx": {
              "name": "cx",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "cy": {
              "name": "cy",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "r": {
              "name": "r",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "An interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.",
        "element": [
          {
            "namespace": "SVG",
            "name": "circle"
          }
        ]
      },
      "HTMLBaseFontElement": {
        "specs": "DOM-Level-2-HTML",
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLBaseFontElement",
        "properties": {
          "property": {
            "face": {
              "specs": "DOM-Level-2-HTML",
              "name": "face",
              "content-attribute": "face",
              "type-original": "DOMString",
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "font_family",
              "type": "DOMString",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves the current typeface family.\n */"
            },
            "size": {
              "specs": "DOM-Level-2-HTML",
              "name": "size",
              "content-attribute": "size",
              "type-original": "long",
              "deprecated": 1,
              "exposed": "Window",
              "content-attribute-value-syntax": "1_or_greater_integer",
              "type": "long",
              "content-attribute-reflects": 1,
              "comment": "/**\n * Sets or retrieves the font size of the object.\n */"
            }
          }
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "basefont",
            "html-self-closing": 1
          }
        ],
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "HTMLElement",
        "implements": [
          "DOML2DeprecatedColorProperty"
        ],
        "comment": "Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <basefont> elements."
      },
      "CSSImportRule": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "CSSImportRule",
        "extends": "CSSRule",
        "properties": {
          "property": {
            "styleSheet": {
              "specs": "cssom",
              "same-object": 1,
              "name": "styleSheet",
              "type-original": "CSSStyleSheet",
              "exposed": "Window",
              "type": "CSSStyleSheet",
              "read-only": 1
            },
            "media": {
              "put-forwards": "mediaText",
              "specs": "cssom",
              "same-object": 1,
              "name": "media",
              "type-original": "MediaList",
              "exposed": "Window",
              "type": "MediaList",
              "read-only": 1
            },
            "href": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "href",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        }
      },
      "Geolocation": {
        "name": "Geolocation",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCurrentPosition": {
              "name": "getCurrentPosition",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "successCallback",
                      "type": "PositionCallback"
                    },
                    {
                      "name": "errorCallback",
                      "type": "PositionErrorCallback",
                      "optional": 1
                    },
                    {
                      "name": "options",
                      "type": "PositionOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "watchPosition": {
              "name": "watchPosition",
              "signature": [
                {
                  "type": "long",
                  "param": [
                    {
                      "name": "successCallback",
                      "type": "PositionCallback"
                    },
                    {
                      "name": "errorCallback",
                      "type": "PositionErrorCallback",
                      "optional": 1
                    },
                    {
                      "name": "options",
                      "type": "PositionOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "clearWatch": {
              "name": "clearWatch",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "watchId",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location."
      },
      "XMLHttpRequestUpload": {
        "name": "XMLHttpRequestUpload",
        "extends": "XMLHttpRequestEventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window DedicatedWorker SharedWorker",
        "legacy-window-alias": []
      },
      "HTMLMarqueeElement": {
        "name": "HTMLMarqueeElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "start": {
              "name": "start",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "stop": {
              "name": "stop",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "behavior": {
              "name": "behavior",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "bgColor": {
              "name": "bgColor",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "direction": {
              "name": "direction",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "height": {
              "name": "height",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "hspace": {
              "name": "hspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "loop": {
              "name": "loop",
              "type": "long",
              "exposed": "Window",
              "deprecated": 1
            },
            "scrollAmount": {
              "name": "scrollAmount",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "scrollDelay": {
              "name": "scrollDelay",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "trueSpeed": {
              "name": "trueSpeed",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1
            },
            "vspace": {
              "name": "vspace",
              "type": "unsigned long",
              "exposed": "Window",
              "deprecated": 1
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "onbounce": {
              "name": "onbounce",
              "type": "EventHandler",
              "event-handler": "bounce",
              "exposed": "Window",
              "deprecated": 1
            },
            "onfinish": {
              "name": "onfinish",
              "type": "EventHandler",
              "event-handler": "finish",
              "exposed": "Window",
              "deprecated": 1
            },
            "onstart": {
              "name": "onstart",
              "type": "EventHandler",
              "event-handler": "start",
              "exposed": "Window",
              "deprecated": 1
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides methods to manipulate <marquee> elements.",
        "events": {
          "event": [
            {
              "name": "bounce",
              "type": "Event"
            },
            {
              "name": "finish",
              "type": "Event"
            },
            {
              "name": "start",
              "type": "Event"
            }
          ]
        },
        "element": [
          {
            "name": "marquee"
          }
        ]
      },
      "EXT_texture_filter_anisotropic": {
        "name": "EXT_texture_filter_anisotropic",
        "extends": "Object",
        "constants": {
          "constant": {
            "TEXTURE_MAX_ANISOTROPY_EXT": {
              "name": "TEXTURE_MAX_ANISOTROPY_EXT",
              "type": "GLenum",
              "value": "0x84FE"
            },
            "MAX_TEXTURE_MAX_ANISOTROPY_EXT": {
              "name": "MAX_TEXTURE_MAX_ANISOTROPY_EXT",
              "type": "GLenum",
              "value": "0x84FF"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).",
        "override-exposed": "Window Worker"
      },
      "FileReaderSync": {
        "name": "FileReaderSync",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "readAsArrayBuffer": {
              "name": "readAsArrayBuffer",
              "signature": [
                {
                  "type": "ArrayBuffer",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "DedicatedWorker SharedWorker"
            },
            "readAsBinaryString": {
              "name": "readAsBinaryString",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "DedicatedWorker SharedWorker"
            },
            "readAsText": {
              "name": "readAsText",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    },
                    {
                      "name": "encoding",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "DedicatedWorker SharedWorker"
            },
            "readAsDataURL": {
              "name": "readAsDataURL",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "blob",
                      "type": "Blob"
                    }
                  ]
                }
              ],
              "exposed": "DedicatedWorker SharedWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "FileReaderSync",
              "param": []
            }
          ]
        },
        "exposed": "DedicatedWorker SharedWorker",
        "legacy-window-alias": [],
        "comment": "Allows to read File or Blob objects in a synchronous way."
      },
      "OscillatorNode": {
        "name": "OscillatorNode",
        "extends": "AudioScheduledSourceNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setPeriodicWave": {
              "name": "setPeriodicWave",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "periodicWave",
                      "type": "PeriodicWave"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "OscillatorType",
              "exposed": "Window"
            },
            "frequency": {
              "name": "frequency",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "detune": {
              "name": "detune",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "OscillatorNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "OscillatorOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone."
      },
      "SVGPathSegCurvetoCubicAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoCubicAbs",
        "properties": {
          "property": {
            "y1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y1",
              "type": "float",
              "type-original": "float"
            },
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x2",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            },
            "y2": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y2",
              "type": "float",
              "type-original": "float"
            },
            "x1": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x1",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "ListeningStateChangedEvent": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "ListeningStateChangedEvent",
        "properties": {
          "property": {
            "label": {
              "specs": "none",
              "exposed": "Window",
              "name": "label",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "state": {
              "specs": "none",
              "exposed": "Window",
              "name": "state",
              "type": "ListeningState",
              "type-original": "ListeningState",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "CSSRule": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "name": "CSSRule",
        "properties": {
          "property": {
            "cssText": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "cssText",
              "type": "DOMString",
              "type-original": "DOMString"
            },
            "parentStyleSheet": {
              "specs": "cssom",
              "name": "parentStyleSheet",
              "type-original": "CSSStyleSheet?",
              "nullable": 1,
              "exposed": "Window",
              "type": "CSSStyleSheet",
              "read-only": 1
            },
            "parentRule": {
              "specs": "cssom",
              "name": "parentRule",
              "type-original": "CSSRule?",
              "nullable": 1,
              "exposed": "Window",
              "type": "CSSRule",
              "read-only": 1
            },
            "type": {
              "specs": "cssom",
              "exposed": "Window",
              "name": "type",
              "type": "unsigned short",
              "type-original": "unsigned short",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "constants": {
          "constant": {
            "SUPPORTS_RULE": {
              "specs": "css-conditional",
              "value": "12",
              "name": "SUPPORTS_RULE",
              "exposed": "Window",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "VIEWPORT_RULE": {
              "specs": "css-device-adapt",
              "value": "15",
              "name": "VIEWPORT_RULE",
              "exposed": "Window",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "KEYFRAME_RULE": {
              "name": "KEYFRAME_RULE",
              "type": "unsigned short",
              "value": "8"
            },
            "FONT_FACE_RULE": {
              "specs": "cssom",
              "value": "5",
              "exposed": "Window",
              "name": "FONT_FACE_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "IMPORT_RULE": {
              "specs": "cssom",
              "value": "3",
              "exposed": "Window",
              "name": "IMPORT_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "STYLE_RULE": {
              "specs": "cssom",
              "value": "1",
              "exposed": "Window",
              "name": "STYLE_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "MEDIA_RULE": {
              "specs": "cssom",
              "value": "4",
              "exposed": "Window",
              "name": "MEDIA_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "KEYFRAMES_RULE": {
              "name": "KEYFRAMES_RULE",
              "type": "unsigned short",
              "value": "7"
            },
            "UNKNOWN_RULE": {
              "specs": "cssom",
              "value": "0",
              "exposed": "Window",
              "name": "UNKNOWN_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "PAGE_RULE": {
              "specs": "cssom",
              "value": "6",
              "exposed": "Window",
              "name": "PAGE_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NAMESPACE_RULE": {
              "specs": "cssom",
              "value": "10",
              "exposed": "Window",
              "name": "NAMESPACE_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "CHARSET_RULE": {
              "specs": "cssom",
              "value": "2",
              "exposed": "Window",
              "name": "CHARSET_RULE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object",
        "comment": "A single CSS rule. There are several types of rules, listed in the Type constants section below."
      },
      "SVGFEFuncRElement": {
        "name": "SVGFEFuncRElement",
        "extends": "SVGComponentTransferFunctionElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Corresponds to the <feFuncR> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feFuncR"
          }
        ]
      },
      "WritableStreamDefaultWriter": {
        "name": "WritableStreamDefaultWriter",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "releaseLock": {
              "name": "releaseLock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "write": {
              "name": "write",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "chunk",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "write(chunk: W): Promise<void>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "closed": {
              "name": "closed",
              "type": "Promise",
              "subtype": {
                "type": "void"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "desiredSize": {
              "name": "desiredSize",
              "type": "unrestricted double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "ready": {
              "name": "ready",
              "type": "Promise",
              "subtype": {
                "type": "void"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "WritableStreamDefaultWriter",
              "param": [
                {
                  "name": "stream",
                  "type": "ReadableStream"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.",
        "override-exposed": "Window Worker",
        "type-parameters": [
          {
            "name": "W",
            "default": "any"
          }
        ]
      },
      "SVGFEDisplacementMapElement": {
        "name": "SVGFEDisplacementMapElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {
            "SVG_CHANNEL_UNKNOWN": {
              "name": "SVG_CHANNEL_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_CHANNEL_R": {
              "name": "SVG_CHANNEL_R",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_CHANNEL_G": {
              "name": "SVG_CHANNEL_G",
              "type": "unsigned short",
              "value": "2"
            },
            "SVG_CHANNEL_B": {
              "name": "SVG_CHANNEL_B",
              "type": "unsigned short",
              "value": "3"
            },
            "SVG_CHANNEL_A": {
              "name": "SVG_CHANNEL_A",
              "type": "unsigned short",
              "value": "4"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "in2": {
              "name": "in2",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "scale": {
              "name": "scale",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "xChannelSelector": {
              "name": "xChannelSelector",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "yChannelSelector": {
              "name": "yChannelSelector",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feDisplacementMap> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feDisplacementMap"
          }
        ]
      },
      "SVGPathSegLinetoAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "HTMLOptionsCollection": {
        "name": "HTMLOptionsCollection",
        "extends": "HTMLCollectionOf<HTMLOptionElement>",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "add": {
              "name": "add",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "element",
                      "type": [
                        {
                          "type": "HTMLOptionElement"
                        },
                        {
                          "type": "HTMLOptGroupElement"
                        }
                      ]
                    },
                    {
                      "name": "before",
                      "type": [
                        {
                          "type": "HTMLElement"
                        },
                        {
                          "type": "long"
                        }
                      ],
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Inserts element before the node given by before.\n * \n * The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.\n * \n * If before is omitted, null, or a number out of range, then element will be added at the end of the list.\n * \n * This method will throw a \"HierarchyRequestError\" DOMException if element is an ancestor of the element into which it is to be inserted.\n */"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "long"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Removes the item with index index from the collection.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "option",
                      "type": "HTMLOptionElement",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "exposed": "Window",
              "comment": "/**\n * Returns the number of elements in the collection.\n * \n * When set to a smaller number, truncates the number of option elements in the corresponding container.\n * \n * When set to a greater number, adds new blank option elements to that container.\n */"
            },
            "selectedIndex": {
              "name": "selectedIndex",
              "type": "long",
              "exposed": "Window",
              "comment": "/**\n * Returns the index of the first selected item, if any, or −1 if there is no selected item.\n * \n * Can be set, to change the selection.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the \"options\" property of select."
      },
      "RTCIceGathererEvent": {
        "specs": "ortc",
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCIceGathererEvent",
        "properties": {
          "property": {
            "candidate": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "candidate",
              "type": [
                {
                  "type": "RTCIceCandidateDictionary"
                },
                {
                  "type": "RTCIceCandidateComplete"
                }
              ],
              "type-original": "RTCIceGatherCandidate",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "BeforeUnloadEvent": {
        "constants": {
          "constant": {}
        },
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "BeforeUnloadEvent",
        "extends": "Event",
        "properties": {
          "property": {
            "returnValue": {
              "specs": "html5",
              "name": "returnValue",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "override-type": "any"
            }
          }
        },
        "comment": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded."
      },
      "DataTransferItem": {
        "name": "DataTransferItem",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getAsString": {
              "name": "getAsString",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "callback",
                      "type": "FunctionStringCallback",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Invokes the callback with the string data as the argument, if the drag data item kind is Plain Unicode string.\n */"
            },
            "getAsFile": {
              "name": "getAsFile",
              "signature": [
                {
                  "type": "File",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns a File object, if the drag data item kind is File.\n */"
            },
            "webkitGetAsEntry": {
              "name": "webkitGetAsEntry",
              "override-signatures": [
                "webkitGetAsEntry(): any"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "kind": {
              "name": "kind",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the drag data item kind, one of: \"string\", \"file\".\n */"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the drag data item type string.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "One drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object."
      },
      "CryptoKey": {
        "name": "CryptoKey",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "KeyType",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "extractable": {
              "name": "extractable",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "algorithm": {
              "name": "algorithm",
              "type": "KeyAlgorithm",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "usages": {
              "name": "usages",
              "type": "sequence",
              "read-only": 1,
              "exposed": "Window Worker",
              "subtype": {
                "type": "KeyUsage"
              }
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "The CryptoKey dictionary of the Web Crypto API represents a cryptographic key."
      },
      "SVGLinearGradientElement": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGLinearGradientElement",
        "properties": {
          "property": {
            "y1": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y1",
              "constant": 1,
              "content-attribute": "y1",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "x2": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x2",
              "constant": 1,
              "content-attribute": "x2",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "y2": {
              "specs": "svg2",
              "same-object": 1,
              "name": "y2",
              "constant": 1,
              "content-attribute": "y2",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "x1": {
              "specs": "svg2",
              "same-object": 1,
              "name": "x1",
              "constant": 1,
              "content-attribute": "x1",
              "type-original": "SVGAnimatedLength",
              "exposed": "Window",
              "content-attribute-value-syntax": "svg_number_with_optional_unit",
              "content-attribute-reflects": 1,
              "type": "SVGAnimatedLength",
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "linearGradient"
          }
        ],
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "SVGGradientElement",
        "comment": "Corresponds to the <linearGradient> element."
      },
      "SVGRectElement": {
        "name": "SVGRectElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "rx": {
              "name": "rx",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "ry": {
              "name": "ry",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to the properties of <rect> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "rect"
          }
        ]
      },
      "IDBKeyRange": {
        "name": "IDBKeyRange",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "only": {
              "name": "only",
              "signature": [
                {
                  "type": "IDBKeyRange",
                  "param": [
                    {
                      "name": "value",
                      "type": "any"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a new IDBKeyRange spanning only key.\n */"
            },
            "lowerBound": {
              "name": "lowerBound",
              "signature": [
                {
                  "type": "IDBKeyRange",
                  "param": [
                    {
                      "name": "lower",
                      "type": "any"
                    },
                    {
                      "name": "open",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.\n */"
            },
            "upperBound": {
              "name": "upperBound",
              "signature": [
                {
                  "type": "IDBKeyRange",
                  "param": [
                    {
                      "name": "upper",
                      "type": "any"
                    },
                    {
                      "name": "open",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.\n */"
            },
            "bound": {
              "name": "bound",
              "signature": [
                {
                  "type": "IDBKeyRange",
                  "param": [
                    {
                      "name": "lower",
                      "type": "any"
                    },
                    {
                      "name": "upper",
                      "type": "any"
                    },
                    {
                      "name": "lowerOpen",
                      "type": "boolean",
                      "optional": 1
                    },
                    {
                      "name": "upperOpen",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.\n */"
            },
            "includes": {
              "name": "includes",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "key",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if key is included in the range, and false otherwise.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "lower": {
              "name": "lower",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns lower bound, or undefined if none.\n */"
            },
            "upper": {
              "name": "upper",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns upper bound, or undefined if none.\n */"
            },
            "lowerOpen": {
              "name": "lowerOpen",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if the lower open flag is set, and false otherwise.\n */"
            },
            "upperOpen": {
              "name": "upperOpen",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if the upper open flag is set, and false otherwise.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:"
      },
      "NamedNodeMap": {
        "name": "NamedNodeMap",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "getNamedItem": {
              "name": "getNamedItem",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "getNamedItemNS": {
              "name": "getNamedItemNS",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setNamedItem": {
              "name": "setNamedItem",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "attr",
                      "type": "Attr"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setNamedItemNS": {
              "name": "setNamedItemNS",
              "signature": [
                {
                  "type": "Attr",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "attr",
                      "type": "Attr"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeNamedItem": {
              "name": "removeNamedItem",
              "signature": [
                {
                  "type": "Attr",
                  "param": [
                    {
                      "name": "qualifiedName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeNamedItemNS": {
              "name": "removeNamedItemNS",
              "signature": [
                {
                  "type": "Attr",
                  "param": [
                    {
                      "name": "namespace",
                      "type": "DOMString",
                      "nullable": 1
                    },
                    {
                      "name": "localName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array."
      },
      "SVGPathSegCurvetoQuadraticSmoothAbs": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegCurvetoQuadraticSmoothAbs",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "SVGLengthList": {
        "name": "SVGLengthList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "initialize": {
              "name": "initialize",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGLength"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getItem": {
              "name": "getItem",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "insertItemBefore": {
              "name": "insertItemBefore",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGLength"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceItem": {
              "name": "replaceItem",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGLength"
                    },
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "removeItem": {
              "name": "removeItem",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "appendItem": {
              "name": "appendItem",
              "signature": [
                {
                  "type": "SVGLength",
                  "param": [
                    {
                      "name": "newItem",
                      "type": "SVGLength"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "newItem",
                      "type": "SVGLength"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "numberOfItems": {
              "name": "numberOfItems",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The SVGLengthList defines a list of SVGLength objects."
      },
      "ProcessingInstruction": {
        "name": "ProcessingInstruction",
        "extends": "CharacterData",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "target": {
              "name": "target",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them."
      },
      "MSGraphicsTrust": {
        "constants": {
          "constant": {}
        },
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "MSGraphicsTrust",
        "extends": "Object",
        "properties": {
          "property": {
            "status": {
              "specs": "none",
              "exposed": "Window",
              "name": "status",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "constrictionActive": {
              "specs": "none",
              "exposed": "Window",
              "name": "constrictionActive",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            }
          }
        },
        "comment": "The msGraphicsTrust() constructor returns an object that provides properties for info on protected video playback."
      },
      "CSSFontFaceRule": {
        "name": "CSSFontFaceRule",
        "extends": "CSSRule",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "style": {
              "name": "style",
              "type": "CSSStyleDeclaration",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "GainNode": {
        "name": "GainNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "gain": {
              "name": "gain",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "GainNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "GainOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels."
      },
      "TextEvent": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "TextEvent",
        "properties": {
          "property": {
            "data": {
              "specs": "none",
              "name": "data",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "DOM_INPUT_METHOD_DROP": {
              "specs": "none",
              "value": "0x03",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_DROP",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_KEYBOARD": {
              "specs": "none",
              "value": "0x01",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_KEYBOARD",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_IME": {
              "specs": "none",
              "value": "0x04",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_IME",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_SCRIPT": {
              "specs": "none",
              "value": "0x09",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_SCRIPT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_VOICE": {
              "specs": "none",
              "value": "0x07",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_VOICE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_UNKNOWN": {
              "specs": "none",
              "value": "0x00",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_UNKNOWN",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_PASTE": {
              "specs": "none",
              "value": "0x02",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_PASTE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_HANDWRITING": {
              "specs": "none",
              "value": "0x06",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_HANDWRITING",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_OPTION": {
              "specs": "none",
              "value": "0x05",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_OPTION",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "DOM_INPUT_METHOD_MULTIMODAL": {
              "specs": "none",
              "value": "0x08",
              "exposed": "Window",
              "name": "DOM_INPUT_METHOD_MULTIMODAL",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "deprecated": 1,
        "exposed": "Window",
        "methods": {
          "method": {
            "initTextEvent": {
              "signature": [
                {
                  "param-min-required": 7,
                  "type": "void",
                  "param": [
                    {
                      "name": "typeArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "canBubbleArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "cancelableArg",
                      "type": "boolean",
                      "type-original": "boolean"
                    },
                    {
                      "name": "viewArg",
                      "type": "Window",
                      "type-original": "Window"
                    },
                    {
                      "name": "dataArg",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    },
                    {
                      "name": "inputMethod",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    },
                    {
                      "name": "locale",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "initTextEvent"
            }
          }
        },
        "extends": "UIEvent"
      },
      "SVGPolylineElement": {
        "name": "SVGPolylineElement",
        "extends": "SVGGeometryElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGAnimatedPoints"
        ],
        "comment": "Provides access to the properties of <polyline> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "polyline"
          }
        ]
      },
      "RTCSessionDescription": {
        "name": "RTCSessionDescription",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "RTCSdpType",
              "read-only": 1,
              "exposed": "Window"
            },
            "sdp": {
              "name": "sdp",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCSessionDescription",
              "param": [
                {
                  "name": "descriptionInitDict",
                  "type": "RTCSessionDescriptionInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "One end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session."
      },
      "DeviceAcceleration": {
        "constants": {
          "constant": {}
        },
        "specs": "orientation-event",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "DeviceAcceleration",
        "extends": "Object",
        "properties": {
          "property": {
            "y": {
              "specs": "orientation-event",
              "name": "y",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            },
            "x": {
              "specs": "orientation-event",
              "name": "x",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            },
            "z": {
              "specs": "orientation-event",
              "name": "z",
              "type-original": "double?",
              "nullable": 1,
              "exposed": "Window",
              "type": "double",
              "read-only": 1
            }
          }
        },
        "comment": "Provides information about the amount of acceleration the device is experiencing along all three axes."
      },
      "RTCIceGatherer": {
        "specs": "ortc",
        "constructor": {
          "specs": "ortc",
          "signature": [
            {
              "param-min-required": 1,
              "type": "RTCIceGatherer",
              "param": [
                {
                  "name": "options",
                  "type": "RTCIceGatherOptions",
                  "type-original": "RTCIceGatherOptions"
                }
              ],
              "type-original": "RTCIceGatherer"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCIceGatherer",
        "properties": {
          "property": {
            "component": {
              "specs": "ortc",
              "exposed": "Window",
              "name": "component",
              "type": "RTCIceComponent",
              "type-original": "RTCIceComponent",
              "read-only": 1
            },
            "onerror": {
              "specs": "ortc",
              "name": "onerror",
              "type-original": "EventHandler?",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            },
            "onlocalcandidate": {
              "specs": "ortc",
              "name": "onlocalcandidate",
              "type-original": "EventHandler?",
              "nullable": 1,
              "exposed": "Window",
              "type": "EventHandlerNonNull",
              "event-handler": "localcandidate"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "ORTC",
              "name": "error",
              "type": "Event",
              "skips-window": 1
            },
            {
              "dispatch": "sync",
              "specs": "ORTC",
              "name": "localcandidate",
              "type": "RTCIceGathererEvent",
              "skips-window": 1
            }
          ]
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "createAssociatedGatherer": {
              "signature": [
                {
                  "type": "RTCIceGatherer",
                  "type-original": "RTCIceGatherer"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "createAssociatedGatherer"
            },
            "getLocalCandidates": {
              "signature": [
                {
                  "subtype": {
                    "type": "RTCIceCandidateDictionary"
                  },
                  "type": "sequence",
                  "type-original": "sequence<RTCIceCandidateDictionary>"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "getLocalCandidates"
            },
            "getLocalParameters": {
              "signature": [
                {
                  "type": "RTCIceParameters",
                  "type-original": "RTCIceParameters"
                }
              ],
              "specs": "ortc",
              "exposed": "Window",
              "name": "getLocalParameters"
            }
          }
        },
        "extends": "RTCStatsProvider"
      },
      "MediaKeys": {
        "name": "MediaKeys",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createSession": {
              "name": "createSession",
              "signature": [
                {
                  "type": "MediaKeySession",
                  "param": [
                    {
                      "name": "sessionType",
                      "type": "MediaKeySessionType",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setServerCertificate": {
              "name": "setServerCertificate",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": [
                    {
                      "name": "serverCertificate",
                      "type": "BufferSource"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback."
      },
      "TextEncoder": {
        "name": "TextEncoder",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "encode": {
              "name": "encode",
              "signature": [
                {
                  "type": "Uint8Array",
                  "param": [
                    {
                      "name": "input",
                      "type": "USVString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the result of running UTF-8's encoder.\n */"
            },
            "encodeInto": {
              "name": "encodeInto",
              "signature": [
                {
                  "type": "TextEncoderEncodeIntoResult",
                  "param": [
                    {
                      "name": "source",
                      "type": "USVString"
                    },
                    {
                      "name": "destination",
                      "type": "Uint8Array"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as a dictionary whereby read is the number of converted code units of source and written is the number of bytes modified in destination.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TextEncoder",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "TextEncoderCommon"
        ],
        "comment": "TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays."
      },
      "HTMLSpanElement": {
        "name": "HTMLSpanElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
        "element": [
          {
            "name": "span"
          }
        ]
      },
      "HTMLHeadingElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "off on",
              "value-syntax": "enum",
              "name": "unselectable"
            }
          ]
        },
        "specs": "html5",
        "html-constructor": 1,
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLHeadingElement",
        "properties": {
          "property": {
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
            }
          },
          "namesakes": {}
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h1"
          },
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h2"
          },
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h3"
          },
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h4"
          },
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h5"
          },
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "h6"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "HTMLElement",
        "comment": "The different heading elements. It inherits methods and properties from the HTMLElement interface."
      },
      "SVGFEOffsetElement": {
        "name": "SVGFEOffsetElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window"
            },
            "dx": {
              "name": "dx",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            },
            "dy": {
              "name": "dy",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes"
        ],
        "comment": "Corresponds to the <feOffset> element.",
        "element": [
          {
            "namespace": "SVG",
            "name": "feOffset"
          }
        ]
      },
      "HTMLFormElement": {
        "name": "HTMLFormElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "submit": {
              "name": "submit",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Fires when a FORM is about to be submitted.\n */"
            },
            "reset": {
              "name": "reset",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Fires when the user resets a form.\n */"
            },
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "Element",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            {
              "signature": [
                {
                  "type": [
                    {
                      "type": "RadioNodeList"
                    },
                    {
                      "type": "Element"
                    }
                  ],
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "acceptCharset": {
              "name": "acceptCharset",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\n */"
            },
            "action": {
              "name": "action",
              "type": "USVString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the URL to which the form content is sent for processing.\n */"
            },
            "autocomplete": {
              "name": "autocomplete",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Specifies whether autocomplete is applied to an editable text field.\n */"
            },
            "enctype": {
              "name": "enctype",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the encoding type for the form.\n */"
            },
            "encoding": {
              "name": "encoding",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the MIME encoding for the form.\n */"
            },
            "method": {
              "name": "method",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves how to send the form data to the server.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the name of the object.\n */"
            },
            "noValidate": {
              "name": "noValidate",
              "type": "boolean",
              "exposed": "Window",
              "comment": "/**\n * Designates a form that is not validated when submitted.\n */"
            },
            "target": {
              "name": "target",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
            },
            "elements": {
              "name": "elements",
              "type": "HTMLFormControlsCollection",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a collection, in source order, of all controls in a given form.\n */"
            },
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.",
        "element": [
          {
            "name": "form"
          }
        ],
        "override-index-signatures": [
          "[index: number]: Element",
          "[name: string]: any"
        ]
      },
      "MediaStreamErrorEvent": {
        "specs": "media-capture-api",
        "constructor": {
          "specs": "media-capture-api",
          "signature": [
            {
              "param-min-required": 1,
              "type": "MediaStreamErrorEvent",
              "param": [
                {
                  "name": "typeArg",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaStreamErrorEventInit",
                  "optional": 1,
                  "type-original": "MediaStreamErrorEventInit"
                }
              ],
              "type-original": "MediaStreamErrorEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "MediaStreamErrorEvent",
        "properties": {
          "property": {
            "error": {
              "specs": "media-capture-api",
              "name": "error",
              "type-original": "MediaStreamError?",
              "nullable": 1,
              "exposed": "Window",
              "type": "MediaStreamError",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event"
      },
      "DOMParser": {
        "name": "DOMParser",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "parseFromString": {
              "name": "parseFromString",
              "signature": [
                {
                  "type": "Document",
                  "param": [
                    {
                      "name": "str",
                      "type": "DOMString"
                    },
                    {
                      "name": "type",
                      "type": "SupportedType"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMParser",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides the ability to parse XML or HTML source code from a string into a DOM Document."
      },
      "AudioParam": {
        "name": "AudioParam",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setValueAtTime": {
              "name": "setValueAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "value",
                      "type": "float"
                    },
                    {
                      "name": "startTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "linearRampToValueAtTime": {
              "name": "linearRampToValueAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "value",
                      "type": "float"
                    },
                    {
                      "name": "endTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "exponentialRampToValueAtTime": {
              "name": "exponentialRampToValueAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "value",
                      "type": "float"
                    },
                    {
                      "name": "endTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setTargetAtTime": {
              "name": "setTargetAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "target",
                      "type": "float"
                    },
                    {
                      "name": "startTime",
                      "type": "double"
                    },
                    {
                      "name": "timeConstant",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "setValueCurveAtTime": {
              "name": "setValueCurveAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "values",
                      "type": "sequence",
                      "subtype": {
                        "type": "float"
                      }
                    },
                    {
                      "name": "startTime",
                      "type": "double"
                    },
                    {
                      "name": "duration",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "cancelScheduledValues": {
              "name": "cancelScheduledValues",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "cancelTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "cancelAndHoldAtTime": {
              "name": "cancelAndHoldAtTime",
              "signature": [
                {
                  "type": "AudioParam",
                  "param": [
                    {
                      "name": "cancelTime",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "float",
              "exposed": "Window"
            },
            "automationRate": {
              "name": "automationRate",
              "type": "AutomationRate",
              "exposed": "Window"
            },
            "defaultValue": {
              "name": "defaultValue",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "minValue": {
              "name": "minValue",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "maxValue": {
              "name": "maxValue",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain)."
      },
      "ServiceWorker": {
        "name": "ServiceWorker",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "postMessage": {
              "name": "postMessage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "transfer",
                      "type": "sequence",
                      "subtype": {
                        "type": "object"
                      }
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    },
                    {
                      "name": "options",
                      "type": "PostMessageOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "postMessage(message: any, transfer: Transferable[]): void",
                "postMessage(message: any, options?: PostMessageOptions): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "scriptURL": {
              "name": "scriptURL",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "state": {
              "name": "state",
              "type": "ServiceWorkerState",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "onstatechange": {
              "name": "onstatechange",
              "type": "EventHandler",
              "event-handler": "statechange",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "AbstractWorker"
        ],
        "comment": "This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object."
      },
      "RTCRtpReceiver": {
        "name": "RTCRtpReceiver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCapabilities": {
              "name": "getCapabilities",
              "signature": [
                {
                  "type": "RTCRtpCapabilities",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "kind",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "getParameters": {
              "name": "getParameters",
              "signature": [
                {
                  "type": "RTCRtpReceiveParameters",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getContributingSources": {
              "name": "getContributingSources",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCRtpContributingSource"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getSynchronizationSources": {
              "name": "getSynchronizationSources",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCRtpSynchronizationSource"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getStats": {
              "name": "getStats",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "RTCStatsReport"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "track": {
              "name": "track",
              "type": "MediaStreamTrack",
              "read-only": 1,
              "exposed": "Window"
            },
            "transport": {
              "name": "transport",
              "type": "RTCDtlsTransport",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "rtcpTransport": {
              "name": "rtcpTransport",
              "type": "RTCDtlsTransport",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This WebRTC API interface manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection."
      },
      "DeviceOrientationEvent": {
        "name": "DeviceOrientationEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "alpha": {
              "name": "alpha",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "beta": {
              "name": "beta",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "gamma": {
              "name": "gamma",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "absolute": {
              "name": "absolute",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DeviceOrientationEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "DeviceOrientationEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page."
      },
      "Blob": {
        "name": "Blob",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "slice": {
              "name": "slice",
              "signature": [
                {
                  "type": "Blob",
                  "param": [
                    {
                      "name": "start",
                      "type": "long long",
                      "optional": 1
                    },
                    {
                      "name": "end",
                      "type": "long long",
                      "optional": 1
                    },
                    {
                      "name": "contentType",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "size": {
              "name": "size",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Blob",
              "param": [
                {
                  "name": "blobParts",
                  "type": "sequence",
                  "subtype": {
                    "type": "BlobPart"
                  },
                  "optional": 1
                },
                {
                  "name": "options",
                  "type": "BlobPropertyBag",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system."
      },
      "ContentScriptGlobalScope": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "ContentScriptGlobalScope",
        "properties": {
          "property": {
            "window": {
              "specs": "none",
              "exposed": "Extension",
              "name": "window",
              "type": "Window",
              "type-original": "Window",
              "read-only": 1
            },
            "msContentScript": {
              "specs": "none",
              "exposed": "Extension",
              "name": "msContentScript",
              "type": "ExtensionScriptApis",
              "type-original": "ExtensionScriptApis",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "mirror-from": "Window",
        "exposed": "Extension",
        "methods": {
          "method": {}
        },
        "extends": "EventTarget"
      },
      "AudioDestinationNode": {
        "name": "AudioDestinationNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "maxChannelCount": {
              "name": "maxChannelCount",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised."
      },
      "PopStateEvent": {
        "specs": "html5",
        "constructor": {
          "specs": "html5",
          "signature": [
            {
              "param-min-required": 1,
              "type": "PopStateEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PopStateEventInit",
                  "optional": 1,
                  "type-original": "PopStateEventInit"
                }
              ],
              "type-original": "PopStateEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "PopStateEvent",
        "properties": {
          "property": {
            "state": {
              "specs": "html5",
              "exposed": "Window",
              "name": "state",
              "type": "any",
              "type-original": "any",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "PopStateEvent is an event handler for the popstate event on the window."
      },
      "NodeFilter": {
        "specs": "dom",
        "anonymous-methods": {
          "method": []
        },
        "name": "NodeFilter",
        "static": 1,
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {
            "SHOW_NOTATION": {
              "specs": "dom",
              "value": "0x800",
              "exposed": "Window",
              "name": "SHOW_NOTATION",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_DOCUMENT": {
              "specs": "dom",
              "value": "0x100",
              "exposed": "Window",
              "name": "SHOW_DOCUMENT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "FILTER_REJECT": {
              "specs": "dom",
              "value": "2",
              "exposed": "Window",
              "name": "FILTER_REJECT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SHOW_CDATA_SECTION": {
              "specs": "dom",
              "value": "0x8",
              "exposed": "Window",
              "name": "SHOW_CDATA_SECTION",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_DOCUMENT_TYPE": {
              "specs": "dom",
              "value": "0x200",
              "exposed": "Window",
              "name": "SHOW_DOCUMENT_TYPE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_TEXT": {
              "specs": "dom",
              "value": "0x4",
              "exposed": "Window",
              "name": "SHOW_TEXT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_COMMENT": {
              "specs": "dom",
              "value": "0x80",
              "exposed": "Window",
              "name": "SHOW_COMMENT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_ATTRIBUTE": {
              "specs": "dom",
              "value": "0x2",
              "exposed": "Window",
              "name": "SHOW_ATTRIBUTE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_ENTITY_REFERENCE": {
              "specs": "dom",
              "value": "0x10",
              "exposed": "Window",
              "name": "SHOW_ENTITY_REFERENCE",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_ENTITY": {
              "specs": "dom",
              "value": "0x20",
              "exposed": "Window",
              "name": "SHOW_ENTITY",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_PROCESSING_INSTRUCTION": {
              "specs": "dom",
              "value": "0x40",
              "exposed": "Window",
              "name": "SHOW_PROCESSING_INSTRUCTION",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "SHOW_ALL": {
              "specs": "dom",
              "value": "0xFFFFFFFF",
              "exposed": "Window",
              "name": "SHOW_ALL",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "FILTER_ACCEPT": {
              "specs": "dom",
              "value": "1",
              "exposed": "Window",
              "name": "FILTER_ACCEPT",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SHOW_ELEMENT": {
              "specs": "dom",
              "value": "0x1",
              "exposed": "Window",
              "name": "SHOW_ELEMENT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            },
            "FILTER_SKIP": {
              "specs": "dom",
              "value": "3",
              "exposed": "Window",
              "name": "FILTER_SKIP",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SHOW_DOCUMENT_FRAGMENT": {
              "specs": "dom",
              "value": "0x400",
              "exposed": "Window",
              "name": "SHOW_DOCUMENT_FRAGMENT",
              "type": "unsigned long",
              "type-original": "unsigned long"
            }
          }
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "acceptNode": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "unsigned short",
                  "param": [
                    {
                      "name": "node",
                      "type": "Node",
                      "type-original": "Node"
                    }
                  ],
                  "type-original": "unsigned short"
                }
              ],
              "specs": "dom",
              "exposed": "Window",
              "name": "acceptNode"
            }
          }
        },
        "extends": "Object",
        "comment": "An object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter."
      },
      "PushSubscription": {
        "name": "PushSubscription",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getKey": {
              "name": "getKey",
              "signature": [
                {
                  "type": "ArrayBuffer",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "PushEncryptionKeyName"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "unsubscribe": {
              "name": "unsubscribe",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "PushSubscriptionJSON",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "endpoint": {
              "name": "endpoint",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "expirationTime": {
              "name": "expirationTime",
              "type": "DOMTimeStamp",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "options": {
              "name": "options",
              "type": "PushSubscriptionOptions",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service."
      },
      "OverflowEvent": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "OverflowEvent",
        "properties": {
          "property": {
            "verticalOverflow": {
              "specs": "none",
              "exposed": "Window",
              "name": "verticalOverflow",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            },
            "orient": {
              "specs": "none",
              "exposed": "Window",
              "name": "orient",
              "type": "unsigned long",
              "type-original": "unsigned long",
              "read-only": 1
            },
            "horizontalOverflow": {
              "specs": "none",
              "exposed": "Window",
              "name": "horizontalOverflow",
              "type": "boolean",
              "type-original": "boolean",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {
            "BOTH": {
              "specs": "none",
              "value": "2",
              "exposed": "Window",
              "name": "BOTH",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "HORIZONTAL": {
              "specs": "none",
              "value": "0",
              "exposed": "Window",
              "name": "HORIZONTAL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "VERTICAL": {
              "specs": "none",
              "value": "1",
              "exposed": "Window",
              "name": "VERTICAL",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "UIEvent"
      },
      "SVGGraphicsElement": {
        "name": "SVGGraphicsElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getBBox": {
              "name": "getBBox",
              "signature": [
                {
                  "type": "DOMRect",
                  "param": [
                    {
                      "name": "options",
                      "type": "SVGBoundingBoxOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getCTM": {
              "name": "getCTM",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getScreenCTM": {
              "name": "getScreenCTM",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "transform": {
              "name": "transform",
              "type": "SVGAnimatedTransformList",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGTests"
        ],
        "comment": "SVG elements whose primary purpose is to directly render graphics into a group."
      },
      "MediaError": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "MediaError",
        "properties": {
          "property": {
            "msExtendedCode": {
              "specs": "html5",
              "name": "msExtendedCode",
              "tags": "Media",
              "type-original": "long",
              "exposed": "Window",
              "type": "long",
              "read-only": 1
            },
            "code": {
              "specs": "html5",
              "name": "code",
              "constant": 1,
              "tags": "Media",
              "type-original": "short",
              "exposed": "Window",
              "type": "short",
              "read-only": 1
            },
            "message": {
              "specs": "html5",
              "name": "message",
              "tags": "Media",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "default": "\"\""
            }
          }
        },
        "tags": "Media",
        "constants": {
          "constant": {
            "MEDIA_ERR_SRC_NOT_SUPPORTED": {
              "specs": "html5",
              "value": "4",
              "name": "MEDIA_ERR_SRC_NOT_SUPPORTED",
              "tags": "Media",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "MEDIA_ERR_NETWORK": {
              "specs": "html5",
              "value": "2",
              "name": "MEDIA_ERR_NETWORK",
              "tags": "Media",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "MEDIA_ERR_ABORTED": {
              "specs": "html5",
              "value": "1",
              "name": "MEDIA_ERR_ABORTED",
              "tags": "Media",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "MS_MEDIA_ERR_ENCRYPTED": {
              "specs": "html5",
              "value": "5",
              "name": "MS_MEDIA_ERR_ENCRYPTED",
              "tags": "Media",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "MEDIA_ERR_DECODE": {
              "specs": "html5",
              "value": "3",
              "name": "MEDIA_ERR_DECODE",
              "tags": "Media",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object",
        "comment": "An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>."
      },
      "HTMLFieldSetElement": {
        "name": "HTMLFieldSetElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "elements": {
              "name": "elements",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.",
        "element": [
          {
            "name": "fieldset"
          }
        ]
      },
      "SourceBufferList": {
        "name": "SourceBufferList",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": [
            {
              "signature": [
                {
                  "type": "SourceBuffer",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          ]
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "onaddsourcebuffer": {
              "name": "onaddsourcebuffer",
              "type": "EventHandler",
              "event-handler": "addsourcebuffer",
              "exposed": "Window"
            },
            "onremovesourcebuffer": {
              "name": "onremovesourcebuffer",
              "type": "EventHandler",
              "event-handler": "removesourcebuffer",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A simple container list for multiple SourceBuffer objects."
      },
      "WebGLActiveInfo": {
        "name": "WebGLActiveInfo",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "size": {
              "name": "size",
              "type": "GLint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "type": {
              "name": "type",
              "type": "GLenum",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods."
      },
      "DeviceMotionEvent": {
        "name": "DeviceMotionEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "acceleration": {
              "name": "acceleration",
              "type": "DeviceMotionEventAcceleration",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "accelerationIncludingGravity": {
              "name": "accelerationIncludingGravity",
              "type": "DeviceMotionEventAcceleration",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "rotationRate": {
              "name": "rotationRate",
              "type": "DeviceMotionEventRotationRate",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "interval": {
              "name": "interval",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DeviceMotionEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "DeviceMotionEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation."
      },
      "CountQueuingStrategy": {
        "name": "CountQueuingStrategy",
        "extends": "QueuingStrategy",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "size": {
              "name": "size",
              "signature": [
                {
                  "type": "double",
                  "param": [
                    {
                      "name": "chunk",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "size(chunk: any): 1"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "highWaterMark": {
              "name": "highWaterMark",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "CountQueuingStrategy",
              "param": [
                {
                  "name": "options",
                  "type": "any"
                }
              ]
            }
          ],
          "override-signatures": [
            "new(options: { highWaterMark: number }): CountQueuingStrategy"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.",
        "override-exposed": "Window Worker"
      },
      "HTMLElement": {
        "name": "HTMLElement",
        "extends": "Element",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "click": {
              "name": "click",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "title": {
              "name": "title",
              "type": "DOMString",
              "exposed": "Window"
            },
            "lang": {
              "name": "lang",
              "type": "DOMString",
              "exposed": "Window"
            },
            "translate": {
              "name": "translate",
              "type": "boolean",
              "exposed": "Window"
            },
            "dir": {
              "name": "dir",
              "type": "DOMString",
              "exposed": "Window"
            },
            "hidden": {
              "name": "hidden",
              "type": "boolean",
              "exposed": "Window"
            },
            "accessKey": {
              "name": "accessKey",
              "type": "DOMString",
              "exposed": "Window"
            },
            "accessKeyLabel": {
              "name": "accessKeyLabel",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "draggable": {
              "name": "draggable",
              "type": "boolean",
              "exposed": "Window"
            },
            "spellcheck": {
              "name": "spellcheck",
              "type": "boolean",
              "exposed": "Window"
            },
            "autocapitalize": {
              "name": "autocapitalize",
              "type": "DOMString",
              "exposed": "Window"
            },
            "innerText": {
              "name": "innerText",
              "type": "DOMString",
              "exposed": "Window"
            },
            "offsetParent": {
              "name": "offsetParent",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetTop": {
              "name": "offsetTop",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetLeft": {
              "name": "offsetLeft",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetWidth": {
              "name": "offsetWidth",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            },
            "offsetHeight": {
              "name": "offsetHeight",
              "type": "long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "GlobalEventHandlers",
          "DocumentAndElementEventHandlers",
          "ElementContentEditable",
          "HTMLOrSVGElement",
          "ElementCSSInlineStyle"
        ],
        "comment": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
        "element": [
          {
            "name": "abbr"
          },
          {
            "name": "address"
          },
          {
            "name": "article"
          },
          {
            "name": "aside"
          },
          {
            "name": "b"
          },
          {
            "name": "bdi"
          },
          {
            "name": "bdo"
          },
          {
            "name": "cite"
          },
          {
            "name": "code"
          },
          {
            "name": "dd"
          },
          {
            "name": "dfn"
          },
          {
            "name": "dt"
          },
          {
            "name": "em"
          },
          {
            "name": "figcaption"
          },
          {
            "name": "figure"
          },
          {
            "name": "footer"
          },
          {
            "name": "header"
          },
          {
            "name": "hgroup"
          },
          {
            "name": "i"
          },
          {
            "name": "kbd"
          },
          {
            "name": "main"
          },
          {
            "name": "mark"
          },
          {
            "name": "nav"
          },
          {
            "name": "noscript"
          },
          {
            "name": "rp"
          },
          {
            "name": "rt"
          },
          {
            "name": "ruby"
          },
          {
            "name": "s"
          },
          {
            "name": "samp"
          },
          {
            "name": "section"
          },
          {
            "name": "small"
          },
          {
            "name": "strong"
          },
          {
            "name": "sub"
          },
          {
            "name": "summary"
          },
          {
            "name": "sup"
          },
          {
            "name": "u"
          },
          {
            "name": "var"
          },
          {
            "name": "wbr"
          }
        ]
      },
      "Comment": {
        "name": "Comment",
        "extends": "CharacterData",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Comment",
              "param": [
                {
                  "name": "data",
                  "type": "DOMString",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view."
      },
      "PerformanceResourceTiming": {
        "name": "PerformanceResourceTiming",
        "extends": "PerformanceEntry",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "initiatorType": {
              "name": "initiatorType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "nextHopProtocol": {
              "name": "nextHopProtocol",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "workerStart": {
              "name": "workerStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "redirectStart": {
              "name": "redirectStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "redirectEnd": {
              "name": "redirectEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "fetchStart": {
              "name": "fetchStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "domainLookupStart": {
              "name": "domainLookupStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "domainLookupEnd": {
              "name": "domainLookupEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "connectStart": {
              "name": "connectStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "connectEnd": {
              "name": "connectEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "secureConnectionStart": {
              "name": "secureConnectionStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "requestStart": {
              "name": "requestStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "responseStart": {
              "name": "responseStart",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "responseEnd": {
              "name": "responseEnd",
              "type": "DOMHighResTimeStamp",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "transferSize": {
              "name": "transferSize",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "encodedBodySize": {
              "name": "encodedBodySize",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "decodedBodySize": {
              "name": "decodedBodySize",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script."
      },
      "CanvasPattern": {
        "name": "CanvasPattern",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setTransform": {
              "name": "setTransform",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "transform",
                      "type": "DOMMatrix2DInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "comment": "An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method."
      },
      "MediaStreamError": {
        "constants": {
          "constant": {}
        },
        "specs": "media-capture-api",
        "anonymous-methods": {
          "method": []
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "name": "MediaStreamError",
        "extends": "Object",
        "properties": {
          "property": {
            "constraintName": {
              "specs": "media-capture-api",
              "name": "constraintName",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            },
            "name": {
              "specs": "media-capture-api",
              "exposed": "Window",
              "name": "name",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "message": {
              "specs": "media-capture-api",
              "name": "message",
              "type-original": "DOMString?",
              "nullable": 1,
              "exposed": "Window",
              "type": "DOMString",
              "read-only": 1
            }
          }
        }
      },
      "HTMLHRElement": {
        "name": "HTMLHRElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "align": {
              "name": "align",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
            },
            "color": {
              "name": "color",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "noShade": {
              "name": "noShade",
              "type": "boolean",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\n */"
            },
            "size": {
              "name": "size",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1
            },
            "width": {
              "name": "width",
              "type": "DOMString",
              "exposed": "Window",
              "deprecated": 1,
              "comment": "/**\n * Sets or retrieves the width of the object.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
        "element": [
          {
            "name": "hr"
          }
        ]
      },
      "FocusNavigationEvent": {
        "specs": "none",
        "constructor": {
          "specs": "none",
          "signature": [
            {
              "param-min-required": 1,
              "type": "FocusNavigationEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "FocusNavigationEventInit",
                  "optional": 1,
                  "type-original": "FocusNavigationEventInit"
                }
              ],
              "type-original": "FocusNavigationEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "FocusNavigationEvent",
        "properties": {
          "property": {
            "navigationReason": {
              "specs": "none",
              "exposed": "Window",
              "name": "navigationReason",
              "type": "NavigationReason",
              "type-original": "NavigationReason",
              "read-only": 1
            },
            "originHeight": {
              "specs": "none",
              "exposed": "Window",
              "name": "originHeight",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "originTop": {
              "specs": "none",
              "exposed": "Window",
              "name": "originTop",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "originLeft": {
              "specs": "none",
              "exposed": "Window",
              "name": "originLeft",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            },
            "originWidth": {
              "specs": "none",
              "exposed": "Window",
              "name": "originWidth",
              "type": "float",
              "type-original": "float",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "requestFocus": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "none",
              "exposed": "Window",
              "name": "requestFocus"
            }
          }
        },
        "extends": "Event"
      },
      "CharacterData": {
        "name": "CharacterData",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "substringData": {
              "name": "substringData",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    },
                    {
                      "name": "count",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "appendData": {
              "name": "appendData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "insertData": {
              "name": "insertData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    },
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "deleteData": {
              "name": "deleteData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    },
                    {
                      "name": "count",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "replaceData": {
              "name": "replaceData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "offset",
                      "type": "unsigned long"
                    },
                    {
                      "name": "count",
                      "type": "unsigned long"
                    },
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "DOMString",
              "exposed": "Window"
            },
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "NonDocumentTypeChildNode",
          "ChildNode"
        ],
        "comment": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract."
      },
      "HTMLOptGroupElement": {
        "name": "HTMLOptGroupElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "disabled": {
              "name": "disabled",
              "type": "boolean",
              "exposed": "Window"
            },
            "label": {
              "name": "label",
              "type": "DOMString",
              "exposed": "Window",
              "comment": "/**\n * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n */"
            },
            "form": {
              "name": "form",
              "read-only": 1,
              "override-type": "HTMLFormElement | null",
              "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
        "element": [
          {
            "name": "optgroup"
          }
        ]
      },
      "WritableStreamDefaultController": {
        "name": "WritableStreamDefaultController",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "error": {
              "name": "error",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "comment": "This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.",
        "override-exposed": "Window Worker"
      },
      "SVGPathSegLinetoRel": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPathSegLinetoRel",
        "properties": {
          "property": {
            "y": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "y",
              "type": "float",
              "type-original": "float"
            },
            "x": {
              "specs": "svg11",
              "exposed": "Window",
              "name": "x",
              "type": "float",
              "type-original": "float"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "interop": 1,
        "deprecated": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGPathSeg"
      },
      "XPathExpression": {
        "name": "XPathExpression",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "evaluate": {
              "name": "evaluate",
              "signature": [
                {
                  "type": "XPathResult",
                  "param": [
                    {
                      "name": "contextNode",
                      "type": "Node"
                    },
                    {
                      "name": "type",
                      "type": "unsigned short",
                      "optional": 1
                    },
                    {
                      "name": "result",
                      "type": "XPathResult",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree."
      },
      "SVGSwitchElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "clip-path"
            },
            {
              "enum-values": "auto default none context-menu help pointer progress wait cell crosshair text vertical-text alias copy move no-drop not-allowed e-resize n-resize ne-resize nw-resize s-resize se-resize sw-resize w-resize ew-resize ns-resize nesw-resize nwse-resize col-resize row-resize all-scroll zoom-in zoom-out inherit",
              "value-syntax": "comma_separated_css_url_with_optional_x_y_offset_followed_by_enum",
              "name": "cursor"
            },
            {
              "enum-values": "inline block inline-block list-item table inline-table table-header-group table-footer-group table-row-group table-column-group table-row table-column table-cell table-caption run-in ruby ruby-base ruby-text ruby-base-container flex inline-flex -ms-grid -ms-inline-grid none inherit initial",
              "value-syntax": "enum",
              "name": "display"
            },
            {
              "enum-values": "accumulate inherit",
              "value-syntax": "svg_enum_new_followed_by_svg_viewbox",
              "name": "enable-background"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "filter"
            },
            {
              "enum-values": "none inherit",
              "value-syntax": "css_url_of_local_id_ref",
              "name": "mask"
            },
            {
              "enum-values": "inherit initial",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "opacity"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGSwitchElement",
        "properties": {
          "property": {}
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "switch"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGGraphicsElement",
        "comment": "Corresponds to the <switch> element."
      },
      "SVGPreserveAspectRatio": {
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGPreserveAspectRatio",
        "properties": {
          "property": {
            "align": {
              "specs": "svg2",
              "name": "align",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            },
            "meetOrSlice": {
              "specs": "svg2",
              "name": "meetOrSlice",
              "type-original": "unsigned short",
              "exposed": "Window",
              "type": "unsigned short"
            }
          }
        },
        "constants": {
          "constant": {
            "SVG_PRESERVEASPECTRATIO_XMINYMID": {
              "specs": "svg2",
              "value": "5",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMINYMID",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_NONE": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_NONE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMAXYMIN": {
              "specs": "svg2",
              "value": "4",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMAXYMAX": {
              "specs": "svg2",
              "value": "10",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMINYMAX": {
              "specs": "svg2",
              "value": "8",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMINYMAX",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_MEETORSLICE_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "SVG_MEETORSLICE_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMIDYMAX": {
              "specs": "svg2",
              "value": "9",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMINYMIN": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMINYMIN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMAXYMID": {
              "specs": "svg2",
              "value": "7",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMAXYMID",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_MEETORSLICE_MEET": {
              "specs": "svg2",
              "value": "1",
              "exposed": "Window",
              "name": "SVG_MEETORSLICE_MEET",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMIDYMIN": {
              "specs": "svg2",
              "value": "3",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_XMIDYMID": {
              "specs": "svg2",
              "value": "6",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_XMIDYMID",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_MEETORSLICE_SLICE": {
              "specs": "svg2",
              "value": "2",
              "exposed": "Window",
              "name": "SVG_MEETORSLICE_SLICE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "SVG_PRESERVEASPECTRATIO_UNKNOWN": {
              "specs": "svg2",
              "value": "0",
              "exposed": "Window",
              "name": "SVG_PRESERVEASPECTRATIO_UNKNOWN",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object",
        "comment": "Corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements."
      },
      "Attr": {
        "name": "Attr",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "namespaceURI": {
              "name": "namespaceURI",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "prefix": {
              "name": "prefix",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "localName": {
              "name": "localName",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window"
            },
            "ownerElement": {
              "name": "ownerElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "specified": {
              "name": "specified",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "A DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types."
      },
      "PerformanceNavigation": {
        "name": "PerformanceNavigation",
        "extends": "Object",
        "constants": {
          "constant": {
            "TYPE_NAVIGATE": {
              "name": "TYPE_NAVIGATE",
              "type": "unsigned short",
              "value": "0"
            },
            "TYPE_RELOAD": {
              "name": "TYPE_RELOAD",
              "type": "unsigned short",
              "value": "1"
            },
            "TYPE_BACK_FORWARD": {
              "name": "TYPE_BACK_FORWARD",
              "type": "unsigned short",
              "value": "2"
            },
            "TYPE_RESERVED": {
              "name": "TYPE_RESERVED",
              "type": "unsigned short",
              "value": "255"
            }
          }
        },
        "methods": {
          "method": {
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "redirectCount": {
              "name": "redirectCount",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done."
      },
      "HTMLDataListElement": {
        "name": "HTMLDataListElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "options": {
              "name": "options",
              "type": "HTMLCollection",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "HTMLCollectionOf<HTMLOptionElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
        "element": [
          {
            "name": "datalist"
          }
        ]
      },
      "SVGStopElement": {
        "anonymous-content-attributes": {
          "parsedattribute": [
            {
              "enum-values": "inherit initial",
              "value-syntax": "css_color",
              "name": "color"
            },
            {
              "enum-values": "currentColor inherit initial",
              "value-syntax": "css_color",
              "name": "stop-color"
            },
            {
              "enum-values": "inherit",
              "value-syntax": "0_to_1_floating_point_number",
              "name": "stop-opacity"
            }
          ]
        },
        "specs": "svg2",
        "anonymous-methods": {
          "method": []
        },
        "name": "SVGStopElement",
        "properties": {
          "property": {
            "offset": {
              "specs": "svg2",
              "same-object": 1,
              "name": "offset",
              "constant": 1,
              "content-attribute": "offset",
              "type-original": "SVGAnimatedNumber",
              "exposed": "Window",
              "content-attribute-value-syntax": "floating_point_number",
              "type": "SVGAnimatedNumber",
              "content-attribute-reflects": 1,
              "read-only": 1
            }
          }
        },
        "element": [
          {
            "specs": "svg2",
            "namespace": "SVG",
            "name": "stop"
          }
        ],
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "SVGElement",
        "comment": "Corresponds to the <stop> element."
      },
      "ExtendableEvent": {
        "name": "ExtendableEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "waitUntil": {
              "name": "waitUntil",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "f",
                      "type": "Promise",
                      "subtype": {
                        "type": "any"
                      }
                    }
                  ]
                }
              ],
              "exposed": "ServiceWorker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ExtendableEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "ExtendableEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "ServiceWorker",
        "legacy-window-alias": [],
        "comment": "Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries."
      },
      "MediaStreamEvent": {
        "specs": "webrtc",
        "constructor": {
          "specs": "webrtc",
          "signature": [
            {
              "param-min-required": 2,
              "type": "MediaStreamEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaStreamEventInit",
                  "type-original": "MediaStreamEventInit"
                }
              ],
              "type-original": "MediaStreamEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "MediaStreamEvent",
        "properties": {
          "property": {
            "stream": {
              "specs": "webrtc",
              "name": "stream",
              "type-original": "MediaStream?",
              "nullable": 1,
              "exposed": "Window",
              "type": "MediaStream",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Event",
        "comment": "Events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream."
      },
      "CSSRuleList": {
        "constants": {
          "constant": {}
        },
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "exposed": "Window",
        "methods": {
          "method": {
            "item": {
              "specs": "cssom",
              "name": "item",
              "getter": 1,
              "signature": [
                {
                  "nullable": 1,
                  "param-min-required": 1,
                  "type": "CSSRule",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "CSSRule?"
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "name": "CSSRuleList",
        "extends": "Object",
        "properties": {
          "property": {
            "length": {
              "specs": "cssom",
              "name": "length",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "comment": "A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects."
      },
      "SecurityPolicyViolationEvent": {
        "specs": "csp",
        "constructor": {
          "specs": "csp",
          "signature": [
            {
              "param-min-required": 1,
              "type": "SecurityPolicyViolationEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString",
                  "type-original": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "SecurityPolicyViolationEventInit",
                  "optional": 1,
                  "type-original": "SecurityPolicyViolationEventInit"
                }
              ],
              "type-original": "SecurityPolicyViolationEvent"
            }
          ],
          "name": ""
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "SecurityPolicyViolationEvent",
        "properties": {
          "property": {
            "sourceFile": {
              "specs": "csp",
              "exposed": "Window",
              "name": "sourceFile",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "violatedDirective": {
              "specs": "csp",
              "exposed": "Window",
              "name": "violatedDirective",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "lineNumber": {
              "specs": "csp",
              "exposed": "Window",
              "name": "lineNumber",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "referrer": {
              "specs": "csp",
              "exposed": "Window",
              "name": "referrer",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "columnNumber": {
              "specs": "csp",
              "exposed": "Window",
              "name": "columnNumber",
              "type": "long",
              "type-original": "long",
              "read-only": 1
            },
            "statusCode": {
              "specs": "csp",
              "exposed": "Window",
              "name": "statusCode",
              "type": "unsigned short",
              "type-original": "unsigned short",
              "read-only": 1
            },
            "originalPolicy": {
              "specs": "csp",
              "exposed": "Window",
              "name": "originalPolicy",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "effectiveDirective": {
              "specs": "csp",
              "exposed": "Window",
              "name": "effectiveDirective",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "blockedURI": {
              "specs": "csp",
              "exposed": "Window",
              "name": "blockedURI",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "documentURI": {
              "specs": "csp",
              "exposed": "Window",
              "name": "documentURI",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Event",
        "comment": "Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated."
      },
      "MSMediaKeySession": {
        "specs": "encrypted-media-20130510",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSMediaKeySession",
        "properties": {
          "property": {
            "sessionId": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "sessionId",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            },
            "error": {
              "specs": "encrypted-media-20130510",
              "name": "error",
              "type-original": "MSMediaKeyError?",
              "nullable": 1,
              "exposed": "Window",
              "type": "MSMediaKeyError",
              "read-only": 1
            },
            "keySystem": {
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "keySystem",
              "type": "DOMString",
              "type-original": "DOMString",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "events": {
          "event": []
        },
        "methods": {
          "method": {
            "close": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "close"
            },
            "update": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "key",
                      "type": "Uint8Array",
                      "type-original": "Uint8Array"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "encrypted-media-20130510",
              "exposed": "Window",
              "name": "update"
            }
          }
        },
        "exposed": "Window",
        "extends": "EventTarget"
      },
      "HTMLTrackElement": {
        "specs": "html5",
        "html-constructor": 1,
        "anonymous-methods": {
          "method": []
        },
        "name": "HTMLTrackElement",
        "properties": {
          "property": {
            "kind": {
              "content-attribute-enum-values": "subtitles captions descriptions chapters metadata",
              "pure": 1,
              "specs": "html5",
              "ce-reactions": 1,
              "name": "kind",
              "content-attribute": "kind",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "enum",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "track": {
              "specs": "html5",
              "exposed": "Window",
              "name": "track",
              "type": "TextTrack",
              "type-original": "TextTrack",
              "read-only": 1
            },
            "srclang": {
              "pure": 1,
              "specs": "html5",
              "ce-reactions": 1,
              "name": "srclang",
              "content-attribute": "srclang",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "bcp47_lang",
              "type": "DOMString",
              "content-attribute-reflects": 1
            },
            "src": {
              "pure": 1,
              "specs": "html5",
              "ce-reactions": 1,
              "name": "src",
              "content-attribute": "src",
              "type-original": "USVString",
              "exposed": "Window",
              "content-attribute-value-syntax": "url",
              "type": "USVString",
              "content-attribute-reflects": 1
            },
            "readyState": {
              "specs": "html5",
              "exposed": "Window",
              "name": "readyState",
              "type": "unsigned short",
              "type-original": "unsigned short",
              "read-only": 1
            },
            "default": {
              "pure": 1,
              "specs": "html5",
              "ce-reactions": 1,
              "name": "default",
              "content-attribute": "default",
              "type-original": "boolean",
              "exposed": "Window",
              "type": "boolean",
              "content-attribute-reflects": 1,
              "content-attribute-boolean": 1
            },
            "label": {
              "pure": 1,
              "specs": "html5",
              "ce-reactions": 1,
              "name": "label",
              "content-attribute": "label",
              "type-original": "DOMString",
              "exposed": "Window",
              "type": "DOMString",
              "content-attribute-reflects": 1
            }
          }
        },
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "track",
            "html-self-closing": 1
          }
        ],
        "constants": {
          "constant": {
            "ERROR": {
              "specs": "html5",
              "value": "3",
              "exposed": "Window",
              "name": "ERROR",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "LOADED": {
              "specs": "html5",
              "value": "2",
              "exposed": "Window",
              "name": "LOADED",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "LOADING": {
              "specs": "html5",
              "value": "1",
              "exposed": "Window",
              "name": "LOADING",
              "type": "unsigned short",
              "type-original": "unsigned short"
            },
            "NONE": {
              "specs": "html5",
              "value": "0",
              "exposed": "Window",
              "name": "NONE",
              "type": "unsigned short",
              "type-original": "unsigned short"
            }
          }
        },
        "events": {
          "event": [
            {
              "dispatch": "sync",
              "specs": "HTML5",
              "name": "cuechange",
              "type": "Event"
            }
          ]
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "HTMLElement",
        "comment": "The HTMLTrackElement"
      },
      "HTMLOutputElement": {
        "name": "HTMLOutputElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "checkValidity": {
              "name": "checkValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "reportValidity": {
              "name": "reportValidity",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCustomValidity": {
              "name": "setCustomValidity",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "htmlFor": {
              "name": "htmlFor",
              "type": "DOMTokenList",
              "read-only": 1,
              "exposed": "Window"
            },
            "form": {
              "name": "form",
              "type": "HTMLFormElement",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "defaultValue": {
              "name": "defaultValue",
              "type": "DOMString",
              "exposed": "Window"
            },
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window"
            },
            "willValidate": {
              "name": "willValidate",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "validity": {
              "name": "validity",
              "type": "ValidityState",
              "read-only": 1,
              "exposed": "Window"
            },
            "validationMessage": {
              "name": "validationMessage",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "labels": {
              "name": "labels",
              "type": "NodeList",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "NodeListOf<HTMLLabelElement>"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
        "element": [
          {
            "name": "output"
          }
        ]
      },
      "ClientRectList": {
        "specs": "cssom-view",
        "anonymous-methods": {
          "method": []
        },
        "name": "ClientRectList",
        "properties": {
          "property": {
            "length": {
              "specs": "cssom-view",
              "name": "length",
              "tags": "CSSOM",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            }
          }
        },
        "tags": "CSSOM",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "specs": "cssom-view",
              "name": "item",
              "tags": "CSSOM",
              "getter": 1,
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "ClientRect",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long",
                      "type-original": "unsigned long"
                    }
                  ],
                  "type-original": "ClientRect"
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "HTMLDataElement": {
        "name": "HTMLDataElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
        "element": [
          {
            "name": "data"
          }
        ]
      },
      "AudioListener": {
        "name": "AudioListener",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setPosition": {
              "name": "setPosition",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float"
                    },
                    {
                      "name": "y",
                      "type": "float"
                    },
                    {
                      "name": "z",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "setOrientation": {
              "name": "setOrientation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float"
                    },
                    {
                      "name": "y",
                      "type": "float"
                    },
                    {
                      "name": "z",
                      "type": "float"
                    },
                    {
                      "name": "xUp",
                      "type": "float"
                    },
                    {
                      "name": "yUp",
                      "type": "float"
                    },
                    {
                      "name": "zUp",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "positionX": {
              "name": "positionX",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "positionY": {
              "name": "positionY",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "positionZ": {
              "name": "positionZ",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "forwardX": {
              "name": "forwardX",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "forwardY": {
              "name": "forwardY",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "forwardZ": {
              "name": "forwardZ",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "upX": {
              "name": "upX",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "upY": {
              "name": "upY",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            },
            "upZ": {
              "name": "upZ",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "The position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute."
      },
      "SVGMaskElement": {
        "name": "SVGMaskElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "maskUnits": {
              "name": "maskUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "maskContentUnits": {
              "name": "maskContentUnits",
              "type": "SVGAnimatedEnumeration",
              "read-only": 1,
              "exposed": "Window"
            },
            "x": {
              "name": "x",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            },
            "height": {
              "name": "height",
              "type": "SVGAnimatedLength",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "comment": "Provides access to the properties of <mask> elements, as well as methods to manipulate them.",
        "element": [
          {
            "namespace": "SVG",
            "name": "mask"
          }
        ]
      },
      "External": {
        "name": "External",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "AddSearchProvider": {
              "name": "AddSearchProvider",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            },
            "IsSearchProviderInstalled": {
              "name": "IsSearchProviderInstalled",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window",
              "deprecated": 1
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "Clipboard": {
        "name": "Clipboard",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "readText": {
              "name": "readText",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "DOMString"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "writeText": {
              "name": "writeText",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "Credential": {
        "name": "Credential",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "id": {
              "name": "id",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window"
            },
            "type": {
              "name": "type",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "CredentialsContainer": {
        "name": "CredentialsContainer",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Credential",
                    "nullable": 1
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "CredentialRequestOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "store": {
              "name": "store",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Credential"
                  },
                  "param": [
                    {
                      "name": "credential",
                      "type": "Credential"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "create": {
              "name": "create",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Credential",
                    "nullable": 1
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "CredentialCreationOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "preventSilentAccess": {
              "name": "preventSilentAccess",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "MediaQueryListEvent": {
        "name": "MediaQueryListEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "media": {
              "name": "media",
              "type": "CSSOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "matches": {
              "name": "matches",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaQueryListEvent",
              "param": [
                {
                  "name": "type",
                  "type": "CSSOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "MediaQueryListEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "CaretPosition": {
        "name": "CaretPosition",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getClientRect": {
              "name": "getClientRect",
              "signature": [
                {
                  "type": "DOMRect",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "offsetNode": {
              "name": "offsetNode",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window"
            },
            "offset": {
              "name": "offset",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "DeviceMotionEventAcceleration": {
        "name": "DeviceMotionEventAcceleration",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "y": {
              "name": "y",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "z": {
              "name": "z",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": []
      },
      "DeviceMotionEventRotationRate": {
        "name": "DeviceMotionEventRotationRate",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "alpha": {
              "name": "alpha",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "beta": {
              "name": "beta",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "gamma": {
              "name": "gamma",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "no-interface-object": 1,
        "legacy-window-alias": []
      },
      "ShadowRoot": {
        "name": "ShadowRoot",
        "extends": "DocumentFragment",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "mode": {
              "name": "mode",
              "type": "ShadowRootMode",
              "read-only": 1,
              "exposed": "Window"
            },
            "host": {
              "name": "host",
              "type": "Element",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "DocumentOrShadowRoot",
          "InnerHTML"
        ]
      },
      "AbstractRange": {
        "name": "AbstractRange",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "startContainer": {
              "name": "startContainer",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns range's start node.\n */"
            },
            "startOffset": {
              "name": "startOffset",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns range's start offset.\n */"
            },
            "endContainer": {
              "name": "endContainer",
              "type": "Node",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns range's end node.\n */"
            },
            "endOffset": {
              "name": "endOffset",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns range's end offset.\n */"
            },
            "collapsed": {
              "name": "collapsed",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window",
              "comment": "/**\n * Returns true if range is collapsed, and false otherwise.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "StaticRange": {
        "name": "StaticRange",
        "extends": "AbstractRange",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "TextDecoderStream": {
        "name": "TextDecoderStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TextDecoderStream",
              "param": [
                {
                  "name": "label",
                  "type": "DOMString",
                  "optional": 1
                },
                {
                  "name": "options",
                  "type": "TextDecoderOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "TextDecoderCommon",
          "GenericTransformStream"
        ]
      },
      "TextEncoderStream": {
        "name": "TextEncoderStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TextEncoderStream",
              "param": []
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "TextEncoderCommon",
          "GenericTransformStream"
        ]
      },
      "SVGFEDropShadowElement": {
        "name": "SVGFEDropShadowElement",
        "extends": "SVGElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setStdDeviation": {
              "name": "setStdDeviation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "stdDeviationX",
                      "type": "float"
                    },
                    {
                      "name": "stdDeviationY",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setStdDeviation(stdDeviationX: number, stdDeviationY: number): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "in1": {
              "name": "in1",
              "type": "SVGAnimatedString",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "SVGAnimatedString"
            },
            "dx": {
              "name": "dx",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "SVGAnimatedNumber"
            },
            "dy": {
              "name": "dy",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "SVGAnimatedNumber"
            },
            "stdDeviationX": {
              "name": "stdDeviationX",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "SVGAnimatedNumber"
            },
            "stdDeviationY": {
              "name": "stdDeviationY",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window",
              "override-type": "SVGAnimatedNumber"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "implements": [
          "SVGFilterPrimitiveStandardAttributes",
          "SVGFilterPrimitiveStandardAttributes"
        ]
      },
      "DOMPointReadOnly": {
        "name": "DOMPointReadOnly",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromPoint": {
              "name": "fromPoint",
              "signature": [
                {
                  "type": "DOMPointReadOnly",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMPointInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "matrixTransform": {
              "name": "matrixTransform",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "matrix",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "y": {
              "name": "y",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "z": {
              "name": "z",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "w": {
              "name": "w",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMPointReadOnly",
              "param": [
                {
                  "name": "x",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "y",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "z",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "w",
                  "type": "unrestricted double",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "DOMPoint": {
        "name": "DOMPoint",
        "extends": "DOMPointReadOnly",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromPoint": {
              "name": "fromPoint",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMPointInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "y": {
              "name": "y",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "z": {
              "name": "z",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "w": {
              "name": "w",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMPoint",
              "param": [
                {
                  "name": "x",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "y",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "z",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "w",
                  "type": "unrestricted double",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [
          "SVGPoint"
        ]
      },
      "DOMRectReadOnly": {
        "name": "DOMRectReadOnly",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromRect": {
              "name": "fromRect",
              "signature": [
                {
                  "type": "DOMRectReadOnly",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMRectInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "y": {
              "name": "y",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "width": {
              "name": "width",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "height": {
              "name": "height",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "top": {
              "name": "top",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "right": {
              "name": "right",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "bottom": {
              "name": "bottom",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "left": {
              "name": "left",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMRectReadOnly",
              "param": [
                {
                  "name": "x",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "y",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "width",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "height",
                  "type": "unrestricted double",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "DOMRect": {
        "name": "DOMRect",
        "extends": "DOMRectReadOnly",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromRect": {
              "name": "fromRect",
              "signature": [
                {
                  "type": "DOMRect",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMRectInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "y": {
              "name": "y",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "width": {
              "name": "width",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "height": {
              "name": "height",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMRect",
              "param": [
                {
                  "name": "x",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "y",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "width",
                  "type": "unrestricted double",
                  "optional": 1
                },
                {
                  "name": "height",
                  "type": "unrestricted double",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [
          "SVGRect"
        ]
      },
      "DOMRectList": {
        "name": "DOMRectList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "DOMRect",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "DOMQuad": {
        "name": "DOMQuad",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromRect": {
              "name": "fromRect",
              "signature": [
                {
                  "type": "DOMQuad",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMRectInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "fromQuad": {
              "name": "fromQuad",
              "signature": [
                {
                  "type": "DOMQuad",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMQuadInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "getBounds": {
              "name": "getBounds",
              "signature": [
                {
                  "type": "DOMRect",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "p1": {
              "name": "p1",
              "type": "DOMPoint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "p2": {
              "name": "p2",
              "type": "DOMPoint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "p3": {
              "name": "p3",
              "type": "DOMPoint",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "p4": {
              "name": "p4",
              "type": "DOMPoint",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMQuad",
              "param": [
                {
                  "name": "p1",
                  "type": "DOMPointInit",
                  "optional": 1
                },
                {
                  "name": "p2",
                  "type": "DOMPointInit",
                  "optional": 1
                },
                {
                  "name": "p3",
                  "type": "DOMPointInit",
                  "optional": 1
                },
                {
                  "name": "p4",
                  "type": "DOMPointInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "DOMMatrixReadOnly": {
        "name": "DOMMatrixReadOnly",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromMatrix": {
              "name": "fromMatrix",
              "signature": [
                {
                  "type": "DOMMatrixReadOnly",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "fromFloat32Array": {
              "name": "fromFloat32Array",
              "signature": [
                {
                  "type": "DOMMatrixReadOnly",
                  "param": [
                    {
                      "name": "array32",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "fromFloat64Array": {
              "name": "fromFloat64Array",
              "signature": [
                {
                  "type": "DOMMatrixReadOnly",
                  "param": [
                    {
                      "name": "array64",
                      "type": "Float64Array"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "translate": {
              "name": "translate",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "tx",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "ty",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "tz",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "scale": {
              "name": "scale",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "scaleX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "scaleY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "scaleZ",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "scaleNonUniform": {
              "name": "scaleNonUniform",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "scaleX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "scaleY",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "deprecated": 1
            },
            "scale3d": {
              "name": "scale3d",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "scale",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotate": {
              "name": "rotate",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "rotX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "rotY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "rotZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotateFromVector": {
              "name": "rotateFromVector",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotateAxisAngle": {
              "name": "rotateAxisAngle",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "z",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "angle",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "skewX": {
              "name": "skewX",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "sx",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "skewY": {
              "name": "skewY",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "sy",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "multiply": {
              "name": "multiply",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "flipX": {
              "name": "flipX",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "flipY": {
              "name": "flipY",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "inverse": {
              "name": "inverse",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "transformPoint": {
              "name": "transformPoint",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "point",
                      "type": "DOMPointInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "toFloat32Array": {
              "name": "toFloat32Array",
              "signature": [
                {
                  "type": "Float32Array",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "toFloat64Array": {
              "name": "toFloat64Array",
              "signature": [
                {
                  "type": "Float64Array",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "toJSON": {
              "name": "toJSON",
              "signature": [
                {
                  "type": "object",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "a": {
              "name": "a",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "b": {
              "name": "b",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "c": {
              "name": "c",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "d": {
              "name": "d",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "e": {
              "name": "e",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "f": {
              "name": "f",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m11": {
              "name": "m11",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m12": {
              "name": "m12",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m13": {
              "name": "m13",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m14": {
              "name": "m14",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m21": {
              "name": "m21",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m22": {
              "name": "m22",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m23": {
              "name": "m23",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m24": {
              "name": "m24",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m31": {
              "name": "m31",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m32": {
              "name": "m32",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m33": {
              "name": "m33",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m34": {
              "name": "m34",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m41": {
              "name": "m41",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m42": {
              "name": "m42",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m43": {
              "name": "m43",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "m44": {
              "name": "m44",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "is2D": {
              "name": "is2D",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "isIdentity": {
              "name": "isIdentity",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMMatrixReadOnly",
              "param": [
                {
                  "name": "init",
                  "type": [
                    {
                      "type": "DOMString"
                    },
                    {
                      "type": "sequence",
                      "subtype": {
                        "type": "unrestricted double"
                      }
                    }
                  ],
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "DOMMatrix": {
        "name": "DOMMatrix",
        "extends": "DOMMatrixReadOnly",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fromMatrix": {
              "name": "fromMatrix",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "fromFloat32Array": {
              "name": "fromFloat32Array",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "array32",
                      "type": "Float32Array"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "fromFloat64Array": {
              "name": "fromFloat64Array",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "array64",
                      "type": "Float64Array"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker"
            },
            "multiplySelf": {
              "name": "multiplySelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "preMultiplySelf": {
              "name": "preMultiplySelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "other",
                      "type": "DOMMatrixInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "translateSelf": {
              "name": "translateSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "tx",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "ty",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "tz",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "scaleSelf": {
              "name": "scaleSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "scaleX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "scaleY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "scaleZ",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "scale3dSelf": {
              "name": "scale3dSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "scale",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "originZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotateSelf": {
              "name": "rotateSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "rotX",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "rotY",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "rotZ",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotateFromVectorSelf": {
              "name": "rotateFromVectorSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "rotateAxisAngleSelf": {
              "name": "rotateAxisAngleSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "z",
                      "type": "unrestricted double",
                      "optional": 1
                    },
                    {
                      "name": "angle",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "skewXSelf": {
              "name": "skewXSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "sx",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "skewYSelf": {
              "name": "skewYSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "sy",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "invertSelf": {
              "name": "invertSelf",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "setMatrixValue": {
              "name": "setMatrixValue",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": [
                    {
                      "name": "transformList",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "a": {
              "name": "a",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "b": {
              "name": "b",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "c": {
              "name": "c",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "d": {
              "name": "d",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "e": {
              "name": "e",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "f": {
              "name": "f",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m11": {
              "name": "m11",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m12": {
              "name": "m12",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m13": {
              "name": "m13",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m14": {
              "name": "m14",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m21": {
              "name": "m21",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m22": {
              "name": "m22",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m23": {
              "name": "m23",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m24": {
              "name": "m24",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m31": {
              "name": "m31",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m32": {
              "name": "m32",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m33": {
              "name": "m33",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m34": {
              "name": "m34",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m41": {
              "name": "m41",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m42": {
              "name": "m42",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m43": {
              "name": "m43",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            },
            "m44": {
              "name": "m44",
              "type": "unrestricted double",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DOMMatrix",
              "param": [
                {
                  "name": "init",
                  "type": [
                    {
                      "type": "DOMString"
                    },
                    {
                      "type": "sequence",
                      "subtype": {
                        "type": "unrestricted double"
                      }
                    }
                  ],
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [
          "SVGMatrix",
          "WebKitCSSMatrix"
        ]
      },
      "ImageBitmapRenderingContext": {
        "name": "ImageBitmapRenderingContext",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "transferFromImageBitmap": {
              "name": "transferFromImageBitmap",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "bitmap",
                      "type": "ImageBitmap",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "canvas": {
              "name": "canvas",
              "type": [
                {
                  "type": "HTMLCanvasElement"
                },
                {
                  "type": "OffscreenCanvas"
                }
              ],
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the canvas element that the context is bound to.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "OffscreenCanvas": {
        "name": "OffscreenCanvas",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getContext": {
              "name": "getContext",
              "signature": [
                {
                  "type": "OffscreenRenderingContext",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "contextId",
                      "type": "OffscreenRenderingContextId"
                    },
                    {
                      "name": "options",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: \"2d\", \"bitmaprenderer\", \"webgl\", or \"webgl2\". options is handled by that API.\n * \n * This specification defines the \"2d\" context below, which is similar but distinct from the \"2d\" context that is created from a canvas element. The WebGL specifications define the \"webgl\" and \"webgl2\" contexts. [WEBGL]\n * \n * Returns null if the canvas has already been initialized with another context type (e.g., trying to get a \"2d\" context after getting a \"webgl\" context).\n */",
              "additional-signatures": [
                "getContext(contextId: \"2d\", options?: CanvasRenderingContext2DSettings): OffscreenCanvasRenderingContext2D | null",
                "getContext(contextId: \"bitmaprenderer\", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null",
                "getContext(contextId: \"webgl\", options?: WebGLContextAttributes): WebGLRenderingContext | null",
                "getContext(contextId: \"webgl2\", options?: WebGLContextAttributes): WebGL2RenderingContext | null"
              ]
            },
            "transferToImageBitmap": {
              "name": "transferToImageBitmap",
              "signature": [
                {
                  "type": "ImageBitmap",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.\n */"
            },
            "convertToBlob": {
              "name": "convertToBlob",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Blob"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "ImageEncodeOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.\n * \n * The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of \"image/png\"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as \"image/jpeg\"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "unsigned long long",
              "exposed": "Window Worker",
              "comment": "/**\n * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\n * \n * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long long",
              "exposed": "Window Worker",
              "comment": "/**\n * These attributes return the dimensions of the OffscreenCanvas object's bitmap.\n * \n * They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).\n */"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "OffscreenCanvas",
              "param": [
                {
                  "name": "width",
                  "type": "unsigned long long"
                },
                {
                  "name": "height",
                  "type": "unsigned long long"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "OffscreenCanvasRenderingContext2D": {
        "name": "OffscreenCanvasRenderingContext2D",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "commit": {
              "name": "commit",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "canvas": {
              "name": "canvas",
              "type": "OffscreenCanvas",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "CanvasState",
          "CanvasTransform",
          "CanvasCompositing",
          "CanvasImageSmoothing",
          "CanvasFillStrokeStyles",
          "CanvasShadowStyles",
          "CanvasFilters",
          "CanvasRect",
          "CanvasDrawPath",
          "CanvasText",
          "CanvasDrawImage",
          "CanvasImageData",
          "CanvasPathDrawingStyles",
          "CanvasTextDrawingStyles",
          "CanvasPath"
        ]
      },
      "RadioNodeList": {
        "name": "RadioNodeList",
        "extends": "NodeList",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "CustomElementRegistry": {
        "name": "CustomElementRegistry",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "define": {
              "name": "define",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "constructor",
                      "type": "CustomElementConstructor"
                    },
                    {
                      "name": "options",
                      "type": "ElementDefinitionOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "whenDefined": {
              "name": "whenDefined",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "upgrade": {
              "name": "upgrade",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "root",
                      "type": "Node"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "HTMLDetailsElement": {
        "name": "HTMLDetailsElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "open": {
              "name": "open",
              "type": "boolean",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "details"
          }
        ]
      },
      "HTMLDialogElement": {
        "name": "HTMLDialogElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "show": {
              "name": "show",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "showModal": {
              "name": "showModal",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "returnValue",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "open": {
              "name": "open",
              "type": "boolean",
              "exposed": "Window"
            },
            "returnValue": {
              "name": "returnValue",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "dialog"
          }
        ]
      },
      "ImageBitmap": {
        "name": "ImageBitmap",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Releases imageBitmap's underlying bitmap data.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "width": {
              "name": "width",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the intrinsic width of the image, in CSS pixels.\n */"
            },
            "height": {
              "name": "height",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the intrinsic height of the image, in CSS pixels.\n */"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "HTMLSlotElement": {
        "name": "HTMLSlotElement",
        "extends": "HTMLElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "assignedNodes": {
              "name": "assignedNodes",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Node"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "AssignedNodesOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "assignedElements": {
              "name": "assignedElements",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Element"
                  },
                  "param": [
                    {
                      "name": "options",
                      "type": "AssignedNodesOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "element": [
          {
            "name": "slot"
          }
        ]
      },
      "EventSource": {
        "name": "EventSource",
        "extends": "EventTarget",
        "constants": {
          "constant": {
            "CONNECTING": {
              "name": "CONNECTING",
              "type": "unsigned short",
              "value": "0"
            },
            "OPEN": {
              "name": "OPEN",
              "type": "unsigned short",
              "value": "1"
            },
            "CLOSED": {
              "name": "CLOSED",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "url": {
              "name": "url",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the URL providing the event stream.\n */"
            },
            "withCredentials": {
              "name": "withCredentials",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns true if the credentials mode for connection requests to the URL providing the event stream is set to \"include\", and false otherwise.\n */"
            },
            "readyState": {
              "name": "readyState",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the state of this EventSource object's connection. It can have the values described below.\n */"
            },
            "onopen": {
              "name": "onopen",
              "type": "EventHandler",
              "event-handler": "open",
              "exposed": "Window Worker"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window Worker"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "EventSource",
              "param": [
                {
                  "name": "url",
                  "type": "USVString"
                },
                {
                  "name": "eventSourceInitDict",
                  "type": "EventSourceInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "error",
              "type": "Event"
            }
          ]
        }
      },
      "PromiseRejectionEvent": {
        "name": "PromiseRejectionEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "promise": {
              "name": "promise",
              "type": "Promise",
              "subtype": {
                "type": "any"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "reason": {
              "name": "reason",
              "type": "any",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PromiseRejectionEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "PromiseRejectionEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "RTCIdentityProviderGlobalScope": {
        "name": "RTCIdentityProviderGlobalScope",
        "extends": "WorkerGlobalScope",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "rtcIdentityProvider": {
              "name": "rtcIdentityProvider",
              "type": "RTCIdentityProviderRegistrar",
              "read-only": 1,
              "exposed": "RTCIdentityProviderGlobalScope"
            }
          },
          "namesakes": {}
        },
        "exposed": "RTCIdentityProviderGlobalScope",
        "legacy-window-alias": []
      },
      "RTCIdentityProviderRegistrar": {
        "name": "RTCIdentityProviderRegistrar",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "register": {
              "name": "register",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "idp",
                      "type": "RTCIdentityProvider"
                    }
                  ]
                }
              ],
              "exposed": "RTCIdentityProviderGlobalScope"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "RTCIdentityProviderGlobalScope",
        "legacy-window-alias": []
      },
      "RTCIdentityAssertion": {
        "name": "RTCIdentityAssertion",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "idp": {
              "name": "idp",
              "type": "DOMString",
              "exposed": "Window"
            },
            "name": {
              "name": "name",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCIdentityAssertion",
              "param": [
                {
                  "name": "idp",
                  "type": "DOMString"
                },
                {
                  "name": "name",
                  "type": "DOMString"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "InputDeviceInfo": {
        "name": "InputDeviceInfo",
        "extends": "MediaDeviceInfo",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCapabilities": {
              "name": "getCapabilities",
              "signature": [
                {
                  "type": "MediaTrackCapabilities",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "PerformanceObserver": {
        "name": "PerformanceObserver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "observe": {
              "name": "observe",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "PerformanceObserverInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "disconnect": {
              "name": "disconnect",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "takeRecords": {
              "name": "takeRecords",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "supportedEntryTypes": {
              "name": "supportedEntryTypes",
              "type": "FrozenArray",
              "subtype": {
                "type": "DOMString"
              },
              "static": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "PerformanceObserver",
              "param": [
                {
                  "name": "callback",
                  "type": "PerformanceObserverCallback"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "PerformanceObserverEntryList": {
        "name": "PerformanceObserverEntryList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getEntries": {
              "name": "getEntries",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "getEntriesByType": {
              "name": "getEntriesByType",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": [
                    {
                      "name": "type",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getEntriesByName": {
              "name": "getEntriesByName",
              "signature": [
                {
                  "type": "PerformanceEntryList",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "type",
                      "type": "DOMString",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "PermissionStatus": {
        "name": "PermissionStatus",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "state": {
              "name": "state",
              "type": "PermissionState",
              "read-only": 1,
              "exposed": "Window Worker"
            },
            "onchange": {
              "name": "onchange",
              "type": "EventHandler",
              "event-handler": "change",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "Permissions": {
        "name": "Permissions",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "query": {
              "name": "query",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "PermissionStatus"
                  },
                  "param": [
                    {
                      "name": "permissionDesc",
                      "type": "object"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "query(permissionDesc: PermissionDescriptor | DevicePermissionDescriptor | MidiPermissionDescriptor | PushPermissionDescriptor): Promise<PermissionStatus>"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "ScreenOrientation": {
        "name": "ScreenOrientation",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "lock": {
              "name": "lock",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "orientation",
                      "type": "OrientationLockType"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "unlock": {
              "name": "unlock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "type": {
              "name": "type",
              "type": "OrientationType",
              "read-only": 1,
              "exposed": "Window"
            },
            "angle": {
              "name": "angle",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "onchange": {
              "name": "onchange",
              "type": "EventHandler",
              "event-handler": "change",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "NavigationPreloadManager": {
        "name": "NavigationPreloadManager",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "enable": {
              "name": "enable",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "disable": {
              "name": "disable",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "setHeaderValue": {
              "name": "setHeaderValue",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "value",
                      "type": "ByteString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "getState": {
              "name": "getState",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "NavigationPreloadState"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "StorageManager": {
        "name": "StorageManager",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "persisted": {
              "name": "persisted",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "persist": {
              "name": "persist",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "estimate": {
              "name": "estimate",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "StorageEstimate"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "ReadableStreamReadResult": {
        "name": "ReadableStreamReadResult",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "done": {
              "name": "done",
              "type": "boolean",
              "exposed": "Window Worker"
            },
            "value": {
              "name": "value",
              "type": "any",
              "exposed": "Window Worker",
              "override-type": "T"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": "1",
        "legacy-window-alias": [],
        "type-parameters": [
          {
            "name": "T"
          }
        ]
      },
      "ReadableStreamDefaultReader": {
        "name": "ReadableStreamDefaultReader",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "cancel": {
              "name": "cancel",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "read": {
              "name": "read",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ReadableStreamReadResult"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "read(): Promise<ReadableStreamReadResult<R>>"
              ]
            },
            "releaseLock": {
              "name": "releaseLock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "closed": {
              "name": "closed",
              "type": "Promise",
              "subtype": {
                "type": "void"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ReadableStreamDefaultReader",
              "param": [
                {
                  "name": "stream",
                  "type": "ReadableStream"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "type-parameters": [
          {
            "name": "R",
            "default": "any"
          }
        ]
      },
      "ReadableStreamBYOBReader": {
        "name": "ReadableStreamBYOBReader",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "cancel": {
              "name": "cancel",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "read": {
              "name": "read",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ReadableStreamReadResult"
                  },
                  "param": [
                    {
                      "name": "view",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>"
              ]
            },
            "releaseLock": {
              "name": "releaseLock",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "closed": {
              "name": "closed",
              "type": "Promise",
              "subtype": {
                "type": "void"
              },
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ReadableStreamBYOBReader",
              "param": [
                {
                  "name": "stream",
                  "type": "ReadableStream"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": []
      },
      "ReadableStreamDefaultController": {
        "name": "ReadableStreamDefaultController",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "enqueue": {
              "name": "enqueue",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "chunk",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "enqueue(chunk: R): void"
              ]
            },
            "error": {
              "name": "error",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "desiredSize": {
              "name": "desiredSize",
              "type": "unrestricted double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "type-parameters": [
          {
            "name": "R",
            "default": "any"
          }
        ]
      },
      "ReadableByteStreamController": {
        "name": "ReadableByteStreamController",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "enqueue": {
              "name": "enqueue",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "chunk",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "error": {
              "name": "error",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "error",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "byobRequest": {
              "name": "byobRequest",
              "type": "ReadableStreamBYOBRequest",
              "read-only": 1,
              "exposed": "Window Worker",
              "override-type": "ReadableStreamBYOBRequest | undefined"
            },
            "desiredSize": {
              "name": "desiredSize",
              "type": "unrestricted double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": []
      },
      "ReadableStreamBYOBRequest": {
        "name": "ReadableStreamBYOBRequest",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "respond": {
              "name": "respond",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "bytesWritten",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "respondWithNewView": {
              "name": "respondWithNewView",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "view",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "view": {
              "name": "view",
              "type": "ArrayBufferView",
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": []
      },
      "TransformStream": {
        "name": "TransformStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "readable": {
              "name": "readable",
              "type": "ReadableStream",
              "read-only": 1,
              "exposed": "Window Worker",
              "override-type": "ReadableStream<O>"
            },
            "writable": {
              "name": "writable",
              "type": "WritableStream",
              "read-only": 1,
              "exposed": "Window Worker",
              "override-type": "WritableStream<I>"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "TransformStream",
              "param": [
                {
                  "name": "transformer",
                  "type": "Transformer",
                  "optional": 1
                },
                {
                  "name": "writableStrategy",
                  "type": "QueuingStrategy",
                  "optional": 1
                },
                {
                  "name": "readableStrategy",
                  "type": "QueuingStrategy",
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "type-parameters": [
          {
            "name": "I",
            "default": "any"
          },
          {
            "name": "O",
            "default": "any"
          }
        ]
      },
      "TransformStreamDefaultController": {
        "name": "TransformStreamDefaultController",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "enqueue": {
              "name": "enqueue",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "chunk",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "override-signatures": [
                "enqueue(chunk: O): void"
              ]
            },
            "error": {
              "name": "error",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "reason",
                      "type": "any",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "terminate": {
              "name": "terminate",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "desiredSize": {
              "name": "desiredSize",
              "type": "unrestricted double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker",
        "type-parameters": [
          {
            "name": "O",
            "default": "any"
          }
        ]
      },
      "SVGGeometryElement": {
        "name": "SVGGeometryElement",
        "extends": "SVGGraphicsElement",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "isPointInFill": {
              "name": "isPointInFill",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "point",
                      "type": "DOMPointInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "isPointInStroke": {
              "name": "isPointInStroke",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "point",
                      "type": "DOMPointInit",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "getTotalLength": {
              "name": "getTotalLength",
              "signature": [
                {
                  "type": "float",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getPointAtLength": {
              "name": "getPointAtLength",
              "signature": [
                {
                  "type": "DOMPoint",
                  "param": [
                    {
                      "name": "distance",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "pathLength": {
              "name": "pathLength",
              "type": "SVGAnimatedNumber",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "InputEvent": {
        "name": "InputEvent",
        "extends": "UIEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "data": {
              "name": "data",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "isComposing": {
              "name": "isComposing",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "inputType": {
              "name": "inputType",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "InputEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "InputEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "URLSearchParams": {
        "name": "URLSearchParams",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "append": {
              "name": "append",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "value",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Appends a specified key/value pair as a new search parameter.\n */"
            },
            "delete": {
              "name": "delete",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Deletes the given search parameter, and its associated value, from the list of all search parameters.\n */"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "USVString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the first value associated to the given search parameter.\n */"
            },
            "getAll": {
              "name": "getAll",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "USVString"
                  },
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns all the values association with a given search parameter.\n */"
            },
            "has": {
              "name": "has",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Returns a Boolean indicating if such a search parameter exists.\n */"
            },
            "set": {
              "name": "set",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "USVString"
                    },
                    {
                      "name": "value",
                      "type": "USVString"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.\n */"
            },
            "sort": {
              "name": "sort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          },
          "constructor": "/**\n * Constructor returning a URLSearchParams object.\n */"
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "URLSearchParams",
              "param": [
                {
                  "name": "init",
                  "type": [
                    {
                      "type": "sequence",
                      "subtype": {
                        "type": "sequence",
                        "subtype": {
                          "type": "USVString"
                        }
                      }
                    },
                    {
                      "type": "record",
                      "subtype": [
                        {
                          "type": "USVString"
                        },
                        {
                          "type": "USVString"
                        }
                      ]
                    },
                    {
                      "type": "USVString"
                    }
                  ],
                  "optional": 1
                }
              ]
            }
          ],
          "override-signatures": [
            "new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams"
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "iterable",
          "readonly": false,
          "type": [
            {
              "type": "USVString"
            },
            {
              "type": "USVString"
            }
          ],
          "comments": {
            "comment": {
              "entries": "/**\n * Returns an array of key, value pairs for every entry in the search params.\n */",
              "keys": "/**\n * Returns a list of keys in the search params.\n */",
              "values": "/**\n * Returns a list of values in the search params.\n */"
            }
          }
        }
      },
      "AnimationTimeline": {
        "name": "AnimationTimeline",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "currentTime": {
              "name": "currentTime",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "DocumentTimeline": {
        "name": "DocumentTimeline",
        "extends": "AnimationTimeline",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "DocumentTimeline",
              "param": [
                {
                  "name": "options",
                  "type": "DocumentTimelineOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "Animation": {
        "name": "Animation",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "cancel": {
              "name": "cancel",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "finish": {
              "name": "finish",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "play": {
              "name": "play",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "pause": {
              "name": "pause",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "updatePlaybackRate": {
              "name": "updatePlaybackRate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "playbackRate",
                      "type": "double"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "reverse": {
              "name": "reverse",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "id": {
              "name": "id",
              "type": "DOMString",
              "exposed": "Window"
            },
            "effect": {
              "name": "effect",
              "type": "AnimationEffect",
              "nullable": 1,
              "exposed": "Window"
            },
            "timeline": {
              "name": "timeline",
              "type": "AnimationTimeline",
              "nullable": 1,
              "exposed": "Window"
            },
            "startTime": {
              "name": "startTime",
              "type": "double",
              "nullable": 1,
              "exposed": "Window"
            },
            "currentTime": {
              "name": "currentTime",
              "type": "double",
              "nullable": 1,
              "exposed": "Window"
            },
            "playbackRate": {
              "name": "playbackRate",
              "type": "double",
              "exposed": "Window"
            },
            "playState": {
              "name": "playState",
              "type": "AnimationPlayState",
              "read-only": 1,
              "exposed": "Window"
            },
            "pending": {
              "name": "pending",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "ready": {
              "name": "ready",
              "type": "Promise",
              "subtype": {
                "type": "Animation"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "finished": {
              "name": "finished",
              "type": "Promise",
              "subtype": {
                "type": "Animation"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "onfinish": {
              "name": "onfinish",
              "type": "EventHandler",
              "event-handler": "finish",
              "exposed": "Window"
            },
            "oncancel": {
              "name": "oncancel",
              "type": "EventHandler",
              "event-handler": "cancel",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Animation",
              "param": [
                {
                  "name": "effect",
                  "type": "AnimationEffect",
                  "nullable": 1,
                  "optional": 1
                },
                {
                  "name": "timeline",
                  "type": "AnimationTimeline",
                  "nullable": 1,
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "finish",
              "type": "AnimationPlaybackEvent"
            },
            {
              "name": "cancel",
              "type": "AnimationPlaybackEvent"
            }
          ]
        }
      },
      "AnimationEffect": {
        "name": "AnimationEffect",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getTiming": {
              "name": "getTiming",
              "signature": [
                {
                  "type": "EffectTiming",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "getComputedTiming": {
              "name": "getComputedTiming",
              "signature": [
                {
                  "type": "ComputedEffectTiming",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "updateTiming": {
              "name": "updateTiming",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "timing",
                      "type": "OptionalEffectTiming",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "KeyframeEffect": {
        "name": "KeyframeEffect",
        "extends": "AnimationEffect",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getKeyframes": {
              "name": "getKeyframes",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "object"
                  },
                  "param": []
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "getKeyframes(): ComputedKeyframe[]"
              ]
            },
            "setKeyframes": {
              "name": "setKeyframes",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "keyframes",
                      "type": "object",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window",
              "override-signatures": [
                "setKeyframes(keyframes: Keyframe[] | PropertyIndexedKeyframes | null): void"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "target": {
              "name": "target",
              "type": [
                {
                  "type": "Element"
                },
                {
                  "type": "CSSPseudoElement"
                }
              ],
              "nullable": 1,
              "exposed": "Window",
              "override-type": "Element | null"
            },
            "iterationComposite": {
              "name": "iterationComposite",
              "type": "IterationCompositeOperation",
              "exposed": "Window"
            },
            "composite": {
              "name": "composite",
              "type": "CompositeOperation",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "KeyframeEffect",
              "param": [
                {
                  "name": "target",
                  "type": [
                    {
                      "type": "Element"
                    },
                    {
                      "type": "CSSPseudoElement"
                    }
                  ],
                  "nullable": 1
                },
                {
                  "name": "keyframes",
                  "type": "object",
                  "nullable": 1
                },
                {
                  "name": "options",
                  "type": [
                    {
                      "type": "unrestricted double"
                    },
                    {
                      "type": "KeyframeEffectOptions"
                    }
                  ],
                  "optional": 1
                }
              ]
            },
            {
              "type": "KeyframeEffect",
              "param": [
                {
                  "name": "source",
                  "type": "KeyframeEffect"
                }
              ]
            }
          ],
          "override-signatures": [
            "new(target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions): KeyframeEffect",
            "new(source: KeyframeEffect): KeyframeEffect"
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AnimationPlaybackEvent": {
        "name": "AnimationPlaybackEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "currentTime": {
              "name": "currentTime",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "timelineTime": {
              "name": "timelineTime",
              "type": "double",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AnimationPlaybackEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "AnimationPlaybackEventInit",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "Module": {
        "name": "Module",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "exports": {
              "name": "exports",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "ModuleExportDescriptor"
                  },
                  "param": [
                    {
                      "name": "moduleObject",
                      "type": "Module"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker Worklet"
            },
            "imports": {
              "name": "imports",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "ModuleImportDescriptor"
                  },
                  "param": [
                    {
                      "name": "moduleObject",
                      "type": "Module"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker Worklet"
            },
            "customSections": {
              "name": "customSections",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "ArrayBuffer"
                  },
                  "param": [
                    {
                      "name": "moduleObject",
                      "type": "Module"
                    },
                    {
                      "name": "sectionName",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "static": 1,
              "exposed": "Window Worker Worklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Module",
              "param": [
                {
                  "name": "bytes",
                  "type": "BufferSource"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker Worklet",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "Instance": {
        "name": "Instance",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "exports": {
              "name": "exports",
              "type": "Exports",
              "read-only": 1,
              "exposed": "Window Worker Worklet"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Instance",
              "param": [
                {
                  "name": "module",
                  "type": "Module"
                },
                {
                  "name": "importObject",
                  "type": "object",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker Worklet",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "Memory": {
        "name": "Memory",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "grow": {
              "name": "grow",
              "signature": [
                {
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "delta",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker Worklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "buffer": {
              "name": "buffer",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window Worker Worklet"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Memory",
              "param": [
                {
                  "name": "descriptor",
                  "type": "MemoryDescriptor"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker Worklet",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "Table": {
        "name": "Table",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "grow": {
              "name": "grow",
              "signature": [
                {
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "delta",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker Worklet"
            },
            "get": {
              "name": "get",
              "signature": [
                {
                  "type": "Function",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker Worklet"
            },
            "set": {
              "name": "set",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    },
                    {
                      "name": "value",
                      "type": "Function",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker Worklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window Worker Worklet"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Table",
              "param": [
                {
                  "name": "descriptor",
                  "type": "TableDescriptor"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker Worklet",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "Global": {
        "name": "Global",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "valueOf": {
              "name": "valueOf",
              "signature": [
                {
                  "type": "any",
                  "param": []
                }
              ],
              "exposed": "Window Worker Worklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "value": {
              "name": "value",
              "type": "any",
              "exposed": "Window Worker Worklet"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "Global",
              "param": [
                {
                  "name": "descriptor",
                  "type": "GlobalDescriptor"
                },
                {
                  "name": "v",
                  "type": "any",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker Worklet",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "CompileError": {
        "name": "CompileError",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "LinkError": {
        "name": "LinkError",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "RuntimeError": {
        "name": "RuntimeError",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "legacy-namespace": "WebAssembly"
      },
      "BaseAudioContext": {
        "name": "BaseAudioContext",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createAnalyser": {
              "name": "createAnalyser",
              "signature": [
                {
                  "type": "AnalyserNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createBiquadFilter": {
              "name": "createBiquadFilter",
              "signature": [
                {
                  "type": "BiquadFilterNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createBuffer": {
              "name": "createBuffer",
              "signature": [
                {
                  "type": "AudioBuffer",
                  "param": [
                    {
                      "name": "numberOfChannels",
                      "type": "unsigned long"
                    },
                    {
                      "name": "length",
                      "type": "unsigned long"
                    },
                    {
                      "name": "sampleRate",
                      "type": "float"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createBufferSource": {
              "name": "createBufferSource",
              "signature": [
                {
                  "type": "AudioBufferSourceNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createChannelMerger": {
              "name": "createChannelMerger",
              "signature": [
                {
                  "type": "ChannelMergerNode",
                  "param": [
                    {
                      "name": "numberOfInputs",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createChannelSplitter": {
              "name": "createChannelSplitter",
              "signature": [
                {
                  "type": "ChannelSplitterNode",
                  "param": [
                    {
                      "name": "numberOfOutputs",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createConstantSource": {
              "name": "createConstantSource",
              "signature": [
                {
                  "type": "ConstantSourceNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createConvolver": {
              "name": "createConvolver",
              "signature": [
                {
                  "type": "ConvolverNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createDelay": {
              "name": "createDelay",
              "signature": [
                {
                  "type": "DelayNode",
                  "param": [
                    {
                      "name": "maxDelayTime",
                      "type": "double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createDynamicsCompressor": {
              "name": "createDynamicsCompressor",
              "signature": [
                {
                  "type": "DynamicsCompressorNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createGain": {
              "name": "createGain",
              "signature": [
                {
                  "type": "GainNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createIIRFilter": {
              "name": "createIIRFilter",
              "signature": [
                {
                  "type": "IIRFilterNode",
                  "param": [
                    {
                      "name": "feedforward",
                      "type": "sequence",
                      "subtype": {
                        "type": "double"
                      }
                    },
                    {
                      "name": "feedback",
                      "type": "sequence",
                      "subtype": {
                        "type": "double"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createOscillator": {
              "name": "createOscillator",
              "signature": [
                {
                  "type": "OscillatorNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createPanner": {
              "name": "createPanner",
              "signature": [
                {
                  "type": "PannerNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createPeriodicWave": {
              "name": "createPeriodicWave",
              "signature": [
                {
                  "type": "PeriodicWave",
                  "param": [
                    {
                      "name": "real",
                      "type": "sequence",
                      "subtype": {
                        "type": "float"
                      }
                    },
                    {
                      "name": "imag",
                      "type": "sequence",
                      "subtype": {
                        "type": "float"
                      }
                    },
                    {
                      "name": "constraints",
                      "type": "PeriodicWaveConstraints",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createScriptProcessor": {
              "name": "createScriptProcessor",
              "signature": [
                {
                  "type": "ScriptProcessorNode",
                  "param": [
                    {
                      "name": "bufferSize",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "numberOfInputChannels",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "numberOfOutputChannels",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "createStereoPanner": {
              "name": "createStereoPanner",
              "signature": [
                {
                  "type": "StereoPannerNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "createWaveShaper": {
              "name": "createWaveShaper",
              "signature": [
                {
                  "type": "WaveShaperNode",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "decodeAudioData": {
              "name": "decodeAudioData",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "AudioBuffer"
                  },
                  "param": [
                    {
                      "name": "audioData",
                      "type": "ArrayBuffer"
                    },
                    {
                      "name": "successCallback",
                      "type": "DecodeSuccessCallback",
                      "nullable": 1,
                      "optional": 1
                    },
                    {
                      "name": "errorCallback",
                      "type": "DecodeErrorCallback",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "destination": {
              "name": "destination",
              "type": "AudioDestinationNode",
              "read-only": 1,
              "exposed": "Window"
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            },
            "currentTime": {
              "name": "currentTime",
              "type": "double",
              "read-only": 1,
              "exposed": "Window"
            },
            "listener": {
              "name": "listener",
              "type": "AudioListener",
              "read-only": 1,
              "exposed": "Window"
            },
            "state": {
              "name": "state",
              "type": "AudioContextState",
              "read-only": 1,
              "exposed": "Window"
            },
            "audioWorklet": {
              "name": "audioWorklet",
              "type": "AudioWorklet",
              "read-only": 1,
              "exposed": "Window"
            },
            "onstatechange": {
              "name": "onstatechange",
              "type": "EventHandler",
              "event-handler": "statechange",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AudioScheduledSourceNode": {
        "name": "AudioScheduledSourceNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "start": {
              "name": "start",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "when",
                      "type": "double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "stop": {
              "name": "stop",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "when",
                      "type": "double",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onended": {
              "name": "onended",
              "type": "EventHandler",
              "event-handler": "ended",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "ConstantSourceNode": {
        "name": "ConstantSourceNode",
        "extends": "AudioScheduledSourceNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "offset": {
              "name": "offset",
              "type": "AudioParam",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "ConstantSourceNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "options",
                  "type": "ConstantSourceOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "MediaStreamAudioDestinationNode": {
        "name": "MediaStreamAudioDestinationNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "stream": {
              "name": "stream",
              "type": "MediaStream",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaStreamAudioDestinationNode",
              "param": [
                {
                  "name": "context",
                  "type": "AudioContext"
                },
                {
                  "name": "options",
                  "type": "AudioNodeOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "MediaStreamTrackAudioSourceNode": {
        "name": "MediaStreamTrackAudioSourceNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "MediaStreamTrackAudioSourceNode",
              "param": [
                {
                  "name": "context",
                  "type": "AudioContext"
                },
                {
                  "name": "options",
                  "type": "MediaStreamTrackAudioSourceOptions"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AudioWorklet": {
        "name": "AudioWorklet",
        "extends": "Worklet",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AudioWorkletGlobalScope": {
        "name": "AudioWorkletGlobalScope",
        "extends": "WorkletGlobalScope",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "registerProcessor": {
              "name": "registerProcessor",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    },
                    {
                      "name": "processorCtor",
                      "type": "AudioWorkletProcessorConstructor"
                    }
                  ]
                }
              ],
              "exposed": "AudioWorklet"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "currentFrame": {
              "name": "currentFrame",
              "type": "unsigned long long",
              "read-only": 1,
              "exposed": "AudioWorklet"
            },
            "currentTime": {
              "name": "currentTime",
              "type": "double",
              "read-only": 1,
              "exposed": "AudioWorklet"
            },
            "sampleRate": {
              "name": "sampleRate",
              "type": "float",
              "read-only": 1,
              "exposed": "AudioWorklet"
            }
          },
          "namesakes": {}
        },
        "exposed": "AudioWorklet",
        "global": "Worklet AudioWorklet",
        "legacy-window-alias": []
      },
      "AudioParamMap": {
        "name": "AudioParamMap",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "maplike",
          "readonly": true,
          "type": [
            {
              "type": "DOMString"
            },
            {
              "type": "AudioParam"
            }
          ]
        }
      },
      "AudioWorkletNode": {
        "name": "AudioWorkletNode",
        "extends": "AudioNode",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "parameters": {
              "name": "parameters",
              "type": "AudioParamMap",
              "read-only": 1,
              "exposed": "Window"
            },
            "port": {
              "name": "port",
              "type": "MessagePort",
              "read-only": 1,
              "exposed": "Window"
            },
            "onprocessorerror": {
              "name": "onprocessorerror",
              "type": "EventHandler",
              "event-handler": "processorerror",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioWorkletNode",
              "param": [
                {
                  "name": "context",
                  "type": "BaseAudioContext"
                },
                {
                  "name": "name",
                  "type": "DOMString"
                },
                {
                  "name": "options",
                  "type": "AudioWorkletNodeOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AudioWorkletProcessor": {
        "name": "AudioWorkletProcessor",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "port": {
              "name": "port",
              "type": "MessagePort",
              "read-only": 1,
              "exposed": "AudioWorklet"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "AudioWorkletProcessor",
              "param": [
                {
                  "name": "options",
                  "type": "AudioWorkletNodeOptions",
                  "optional": 1
                }
              ]
            }
          ]
        },
        "exposed": "AudioWorklet",
        "legacy-window-alias": []
      },
      "PublicKeyCredential": {
        "name": "PublicKeyCredential",
        "extends": "Credential",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getClientExtensionResults": {
              "name": "getClientExtensionResults",
              "signature": [
                {
                  "type": "AuthenticationExtensionsClientOutputs",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "isUserVerifyingPlatformAuthenticatorAvailable": {
              "name": "isUserVerifyingPlatformAuthenticatorAvailable",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "boolean"
                  },
                  "param": []
                }
              ],
              "static": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "rawId": {
              "name": "rawId",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            },
            "response": {
              "name": "response",
              "type": "AuthenticatorResponse",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AuthenticatorResponse": {
        "name": "AuthenticatorResponse",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "clientDataJSON": {
              "name": "clientDataJSON",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AuthenticatorAttestationResponse": {
        "name": "AuthenticatorAttestationResponse",
        "extends": "AuthenticatorResponse",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "attestationObject": {
              "name": "attestationObject",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "AuthenticatorAssertionResponse": {
        "name": "AuthenticatorAssertionResponse",
        "extends": "AuthenticatorResponse",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "authenticatorData": {
              "name": "authenticatorData",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            },
            "signature": {
              "name": "signature",
              "type": "ArrayBuffer",
              "read-only": 1,
              "exposed": "Window"
            },
            "userHandle": {
              "name": "userHandle",
              "type": "ArrayBuffer",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "WebGLQuery": {
        "name": "WebGLQuery",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "WebGLSampler": {
        "name": "WebGLSampler",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "WebGLSync": {
        "name": "WebGLSync",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "WebGLTransformFeedback": {
        "name": "WebGLTransformFeedback",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "WebGLVertexArrayObject": {
        "name": "WebGLVertexArrayObject",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "WebGL2RenderingContext": {
        "name": "WebGL2RenderingContext",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "legacy-window-alias": [],
        "implements": [
          "WebGLRenderingContextBase",
          "WebGL2RenderingContextBase",
          "WebGL2RenderingContextOverloads"
        ]
      },
      "EXT_blend_minmax": {
        "name": "EXT_blend_minmax",
        "extends": "Object",
        "constants": {
          "constant": {
            "MIN_EXT": {
              "name": "MIN_EXT",
              "type": "GLenum",
              "value": "0x8007"
            },
            "MAX_EXT": {
              "name": "MAX_EXT",
              "type": "GLenum",
              "value": "0x8008"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "EXT_shader_texture_lod": {
        "name": "EXT_shader_texture_lod",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "EXT_sRGB": {
        "name": "EXT_sRGB",
        "extends": "Object",
        "constants": {
          "constant": {
            "SRGB_EXT": {
              "name": "SRGB_EXT",
              "type": "GLenum",
              "value": "0x8C40"
            },
            "SRGB_ALPHA_EXT": {
              "name": "SRGB_ALPHA_EXT",
              "type": "GLenum",
              "value": "0x8C42"
            },
            "SRGB8_ALPHA8_EXT": {
              "name": "SRGB8_ALPHA8_EXT",
              "type": "GLenum",
              "value": "0x8C43"
            },
            "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT": {
              "name": "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT",
              "type": "GLenum",
              "value": "0x8210"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WebGLVertexArrayObjectOES": {
        "name": "WebGLVertexArrayObjectOES",
        "extends": "WebGLObject",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "OES_vertex_array_object": {
        "name": "OES_vertex_array_object",
        "extends": "Object",
        "constants": {
          "constant": {
            "VERTEX_ARRAY_BINDING_OES": {
              "name": "VERTEX_ARRAY_BINDING_OES",
              "type": "GLenum",
              "value": "0x85B5"
            }
          }
        },
        "methods": {
          "method": {
            "createVertexArrayOES": {
              "name": "createVertexArrayOES",
              "signature": [
                {
                  "type": "WebGLVertexArrayObjectOES",
                  "nullable": 1,
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "deleteVertexArrayOES": {
              "name": "deleteVertexArrayOES",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "arrayObject",
                      "type": "WebGLVertexArrayObjectOES",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "isVertexArrayOES": {
              "name": "isVertexArrayOES",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "arrayObject",
                      "type": "WebGLVertexArrayObjectOES",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            },
            "bindVertexArrayOES": {
              "name": "bindVertexArrayOES",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "arrayObject",
                      "type": "WebGLVertexArrayObjectOES",
                      "nullable": 1
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_color_buffer_float": {
        "name": "WEBGL_color_buffer_float",
        "extends": "Object",
        "constants": {
          "constant": {
            "RGBA32F_EXT": {
              "name": "RGBA32F_EXT",
              "type": "GLenum",
              "value": "0x8814"
            },
            "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": {
              "name": "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT",
              "type": "GLenum",
              "value": "0x8211"
            },
            "UNSIGNED_NORMALIZED_EXT": {
              "name": "UNSIGNED_NORMALIZED_EXT",
              "type": "GLenum",
              "value": "0x8C17"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_compressed_texture_astc": {
        "name": "WEBGL_compressed_texture_astc",
        "extends": "Object",
        "constants": {
          "constant": {
            "COMPRESSED_RGBA_ASTC_4x4_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_4x4_KHR",
              "type": "GLenum",
              "value": "0x93B0"
            },
            "COMPRESSED_RGBA_ASTC_5x4_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_5x4_KHR",
              "type": "GLenum",
              "value": "0x93B1"
            },
            "COMPRESSED_RGBA_ASTC_5x5_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_5x5_KHR",
              "type": "GLenum",
              "value": "0x93B2"
            },
            "COMPRESSED_RGBA_ASTC_6x5_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_6x5_KHR",
              "type": "GLenum",
              "value": "0x93B3"
            },
            "COMPRESSED_RGBA_ASTC_6x6_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_6x6_KHR",
              "type": "GLenum",
              "value": "0x93B4"
            },
            "COMPRESSED_RGBA_ASTC_8x5_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_8x5_KHR",
              "type": "GLenum",
              "value": "0x93B5"
            },
            "COMPRESSED_RGBA_ASTC_8x6_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_8x6_KHR",
              "type": "GLenum",
              "value": "0x93B6"
            },
            "COMPRESSED_RGBA_ASTC_8x8_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_8x8_KHR",
              "type": "GLenum",
              "value": "0x93B7"
            },
            "COMPRESSED_RGBA_ASTC_10x5_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_10x5_KHR",
              "type": "GLenum",
              "value": "0x93B8"
            },
            "COMPRESSED_RGBA_ASTC_10x6_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_10x6_KHR",
              "type": "GLenum",
              "value": "0x93B9"
            },
            "COMPRESSED_RGBA_ASTC_10x8_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_10x8_KHR",
              "type": "GLenum",
              "value": "0x93BA"
            },
            "COMPRESSED_RGBA_ASTC_10x10_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_10x10_KHR",
              "type": "GLenum",
              "value": "0x93BB"
            },
            "COMPRESSED_RGBA_ASTC_12x10_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_12x10_KHR",
              "type": "GLenum",
              "value": "0x93BC"
            },
            "COMPRESSED_RGBA_ASTC_12x12_KHR": {
              "name": "COMPRESSED_RGBA_ASTC_12x12_KHR",
              "type": "GLenum",
              "value": "0x93BD"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",
              "type": "GLenum",
              "value": "0x93D0"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",
              "type": "GLenum",
              "value": "0x93D1"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",
              "type": "GLenum",
              "value": "0x93D2"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",
              "type": "GLenum",
              "value": "0x93D3"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",
              "type": "GLenum",
              "value": "0x93D4"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",
              "type": "GLenum",
              "value": "0x93D5"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",
              "type": "GLenum",
              "value": "0x93D6"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",
              "type": "GLenum",
              "value": "0x93D7"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",
              "type": "GLenum",
              "value": "0x93D8"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",
              "type": "GLenum",
              "value": "0x93D9"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",
              "type": "GLenum",
              "value": "0x93DA"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",
              "type": "GLenum",
              "value": "0x93DB"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",
              "type": "GLenum",
              "value": "0x93DC"
            },
            "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR": {
              "name": "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR",
              "type": "GLenum",
              "value": "0x93DD"
            }
          }
        },
        "methods": {
          "method": {
            "getSupportedProfiles": {
              "name": "getSupportedProfiles",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  },
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_compressed_texture_s3tc_srgb": {
        "name": "WEBGL_compressed_texture_s3tc_srgb",
        "extends": "Object",
        "constants": {
          "constant": {
            "COMPRESSED_SRGB_S3TC_DXT1_EXT": {
              "name": "COMPRESSED_SRGB_S3TC_DXT1_EXT",
              "type": "GLenum",
              "value": "0x8C4C"
            },
            "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT": {
              "name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT",
              "type": "GLenum",
              "value": "0x8C4D"
            },
            "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT": {
              "name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT",
              "type": "GLenum",
              "value": "0x8C4E"
            },
            "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT": {
              "name": "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT",
              "type": "GLenum",
              "value": "0x8C4F"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_debug_shaders": {
        "name": "WEBGL_debug_shaders",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getTranslatedShaderSource": {
              "name": "getTranslatedShaderSource",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_draw_buffers": {
        "name": "WEBGL_draw_buffers",
        "extends": "Object",
        "constants": {
          "constant": {
            "COLOR_ATTACHMENT0_WEBGL": {
              "name": "COLOR_ATTACHMENT0_WEBGL",
              "type": "GLenum",
              "value": "0x8CE0"
            },
            "COLOR_ATTACHMENT1_WEBGL": {
              "name": "COLOR_ATTACHMENT1_WEBGL",
              "type": "GLenum",
              "value": "0x8CE1"
            },
            "COLOR_ATTACHMENT2_WEBGL": {
              "name": "COLOR_ATTACHMENT2_WEBGL",
              "type": "GLenum",
              "value": "0x8CE2"
            },
            "COLOR_ATTACHMENT3_WEBGL": {
              "name": "COLOR_ATTACHMENT3_WEBGL",
              "type": "GLenum",
              "value": "0x8CE3"
            },
            "COLOR_ATTACHMENT4_WEBGL": {
              "name": "COLOR_ATTACHMENT4_WEBGL",
              "type": "GLenum",
              "value": "0x8CE4"
            },
            "COLOR_ATTACHMENT5_WEBGL": {
              "name": "COLOR_ATTACHMENT5_WEBGL",
              "type": "GLenum",
              "value": "0x8CE5"
            },
            "COLOR_ATTACHMENT6_WEBGL": {
              "name": "COLOR_ATTACHMENT6_WEBGL",
              "type": "GLenum",
              "value": "0x8CE6"
            },
            "COLOR_ATTACHMENT7_WEBGL": {
              "name": "COLOR_ATTACHMENT7_WEBGL",
              "type": "GLenum",
              "value": "0x8CE7"
            },
            "COLOR_ATTACHMENT8_WEBGL": {
              "name": "COLOR_ATTACHMENT8_WEBGL",
              "type": "GLenum",
              "value": "0x8CE8"
            },
            "COLOR_ATTACHMENT9_WEBGL": {
              "name": "COLOR_ATTACHMENT9_WEBGL",
              "type": "GLenum",
              "value": "0x8CE9"
            },
            "COLOR_ATTACHMENT10_WEBGL": {
              "name": "COLOR_ATTACHMENT10_WEBGL",
              "type": "GLenum",
              "value": "0x8CEA"
            },
            "COLOR_ATTACHMENT11_WEBGL": {
              "name": "COLOR_ATTACHMENT11_WEBGL",
              "type": "GLenum",
              "value": "0x8CEB"
            },
            "COLOR_ATTACHMENT12_WEBGL": {
              "name": "COLOR_ATTACHMENT12_WEBGL",
              "type": "GLenum",
              "value": "0x8CEC"
            },
            "COLOR_ATTACHMENT13_WEBGL": {
              "name": "COLOR_ATTACHMENT13_WEBGL",
              "type": "GLenum",
              "value": "0x8CED"
            },
            "COLOR_ATTACHMENT14_WEBGL": {
              "name": "COLOR_ATTACHMENT14_WEBGL",
              "type": "GLenum",
              "value": "0x8CEE"
            },
            "COLOR_ATTACHMENT15_WEBGL": {
              "name": "COLOR_ATTACHMENT15_WEBGL",
              "type": "GLenum",
              "value": "0x8CEF"
            },
            "DRAW_BUFFER0_WEBGL": {
              "name": "DRAW_BUFFER0_WEBGL",
              "type": "GLenum",
              "value": "0x8825"
            },
            "DRAW_BUFFER1_WEBGL": {
              "name": "DRAW_BUFFER1_WEBGL",
              "type": "GLenum",
              "value": "0x8826"
            },
            "DRAW_BUFFER2_WEBGL": {
              "name": "DRAW_BUFFER2_WEBGL",
              "type": "GLenum",
              "value": "0x8827"
            },
            "DRAW_BUFFER3_WEBGL": {
              "name": "DRAW_BUFFER3_WEBGL",
              "type": "GLenum",
              "value": "0x8828"
            },
            "DRAW_BUFFER4_WEBGL": {
              "name": "DRAW_BUFFER4_WEBGL",
              "type": "GLenum",
              "value": "0x8829"
            },
            "DRAW_BUFFER5_WEBGL": {
              "name": "DRAW_BUFFER5_WEBGL",
              "type": "GLenum",
              "value": "0x882A"
            },
            "DRAW_BUFFER6_WEBGL": {
              "name": "DRAW_BUFFER6_WEBGL",
              "type": "GLenum",
              "value": "0x882B"
            },
            "DRAW_BUFFER7_WEBGL": {
              "name": "DRAW_BUFFER7_WEBGL",
              "type": "GLenum",
              "value": "0x882C"
            },
            "DRAW_BUFFER8_WEBGL": {
              "name": "DRAW_BUFFER8_WEBGL",
              "type": "GLenum",
              "value": "0x882D"
            },
            "DRAW_BUFFER9_WEBGL": {
              "name": "DRAW_BUFFER9_WEBGL",
              "type": "GLenum",
              "value": "0x882E"
            },
            "DRAW_BUFFER10_WEBGL": {
              "name": "DRAW_BUFFER10_WEBGL",
              "type": "GLenum",
              "value": "0x882F"
            },
            "DRAW_BUFFER11_WEBGL": {
              "name": "DRAW_BUFFER11_WEBGL",
              "type": "GLenum",
              "value": "0x8830"
            },
            "DRAW_BUFFER12_WEBGL": {
              "name": "DRAW_BUFFER12_WEBGL",
              "type": "GLenum",
              "value": "0x8831"
            },
            "DRAW_BUFFER13_WEBGL": {
              "name": "DRAW_BUFFER13_WEBGL",
              "type": "GLenum",
              "value": "0x8832"
            },
            "DRAW_BUFFER14_WEBGL": {
              "name": "DRAW_BUFFER14_WEBGL",
              "type": "GLenum",
              "value": "0x8833"
            },
            "DRAW_BUFFER15_WEBGL": {
              "name": "DRAW_BUFFER15_WEBGL",
              "type": "GLenum",
              "value": "0x8834"
            },
            "MAX_COLOR_ATTACHMENTS_WEBGL": {
              "name": "MAX_COLOR_ATTACHMENTS_WEBGL",
              "type": "GLenum",
              "value": "0x8CDF"
            },
            "MAX_DRAW_BUFFERS_WEBGL": {
              "name": "MAX_DRAW_BUFFERS_WEBGL",
              "type": "GLenum",
              "value": "0x8824"
            }
          }
        },
        "methods": {
          "method": {
            "drawBuffersWEBGL": {
              "name": "drawBuffersWEBGL",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffers",
                      "type": "sequence",
                      "subtype": {
                        "type": "GLenum"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "WEBGL_lose_context": {
        "name": "WEBGL_lose_context",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "loseContext": {
              "name": "loseContext",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            },
            "restoreContext": {
              "name": "restoreContext",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window Worker",
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "override-exposed": "Window Worker"
      },
      "RTCPeerConnectionIceErrorEvent": {
        "name": "RTCPeerConnectionIceErrorEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "hostCandidate": {
              "name": "hostCandidate",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "url": {
              "name": "url",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "errorCode": {
              "name": "errorCode",
              "type": "unsigned short",
              "read-only": 1,
              "exposed": "Window"
            },
            "errorText": {
              "name": "errorText",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCPeerConnectionIceErrorEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCPeerConnectionIceErrorEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCCertificate": {
        "name": "RTCCertificate",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getSupportedAlgorithms": {
              "name": "getSupportedAlgorithms",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "AlgorithmIdentifier"
                  },
                  "param": []
                }
              ],
              "static": 1,
              "exposed": "Window"
            },
            "getFingerprints": {
              "name": "getFingerprints",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "RTCDtlsFingerprint"
                  },
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "expires": {
              "name": "expires",
              "type": "DOMTimeStamp",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCRtpTransceiver": {
        "name": "RTCRtpTransceiver",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "stop": {
              "name": "stop",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "setCodecPreferences": {
              "name": "setCodecPreferences",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "codecs",
                      "type": "sequence",
                      "subtype": {
                        "type": "RTCRtpCodecCapability"
                      }
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "mid": {
              "name": "mid",
              "type": "DOMString",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "sender": {
              "name": "sender",
              "type": "RTCRtpSender",
              "read-only": 1,
              "exposed": "Window"
            },
            "receiver": {
              "name": "receiver",
              "type": "RTCRtpReceiver",
              "read-only": 1,
              "exposed": "Window"
            },
            "stopped": {
              "name": "stopped",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "direction": {
              "name": "direction",
              "type": "RTCRtpTransceiverDirection",
              "exposed": "Window"
            },
            "currentDirection": {
              "name": "currentDirection",
              "type": "RTCRtpTransceiverDirection",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCTrackEvent": {
        "name": "RTCTrackEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "receiver": {
              "name": "receiver",
              "type": "RTCRtpReceiver",
              "read-only": 1,
              "exposed": "Window"
            },
            "track": {
              "name": "track",
              "type": "MediaStreamTrack",
              "read-only": 1,
              "exposed": "Window"
            },
            "streams": {
              "name": "streams",
              "type": "FrozenArray",
              "subtype": {
                "type": "MediaStream"
              },
              "read-only": 1,
              "exposed": "Window"
            },
            "transceiver": {
              "name": "transceiver",
              "type": "RTCRtpTransceiver",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCTrackEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCTrackEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCSctpTransport": {
        "name": "RTCSctpTransport",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "transport": {
              "name": "transport",
              "type": "RTCDtlsTransport",
              "read-only": 1,
              "exposed": "Window"
            },
            "state": {
              "name": "state",
              "type": "RTCSctpTransportState",
              "read-only": 1,
              "exposed": "Window"
            },
            "maxMessageSize": {
              "name": "maxMessageSize",
              "type": "unrestricted double",
              "read-only": 1,
              "exposed": "Window"
            },
            "maxChannels": {
              "name": "maxChannels",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "onstatechange": {
              "name": "onstatechange",
              "type": "EventHandler",
              "event-handler": "statechange",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCDataChannel": {
        "name": "RTCDataChannel",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "send": {
              "name": "send",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "USVString"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "Blob"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "ArrayBuffer"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "data",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "label": {
              "name": "label",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window"
            },
            "ordered": {
              "name": "ordered",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "maxPacketLifeTime": {
              "name": "maxPacketLifeTime",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "maxRetransmits": {
              "name": "maxRetransmits",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "protocol": {
              "name": "protocol",
              "type": "USVString",
              "read-only": 1,
              "exposed": "Window"
            },
            "negotiated": {
              "name": "negotiated",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "id": {
              "name": "id",
              "type": "unsigned short",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            },
            "priority": {
              "name": "priority",
              "type": "RTCPriorityType",
              "read-only": 1,
              "exposed": "Window"
            },
            "readyState": {
              "name": "readyState",
              "type": "RTCDataChannelState",
              "read-only": 1,
              "exposed": "Window"
            },
            "bufferedAmount": {
              "name": "bufferedAmount",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "bufferedAmountLowThreshold": {
              "name": "bufferedAmountLowThreshold",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "onopen": {
              "name": "onopen",
              "type": "EventHandler",
              "event-handler": "open",
              "exposed": "Window"
            },
            "onbufferedamountlow": {
              "name": "onbufferedamountlow",
              "type": "EventHandler",
              "event-handler": "bufferedamountlow",
              "exposed": "Window"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window"
            },
            "onclose": {
              "name": "onclose",
              "type": "EventHandler",
              "event-handler": "close",
              "exposed": "Window"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window"
            },
            "binaryType": {
              "name": "binaryType",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "open",
              "type": "Event"
            },
            {
              "name": "message",
              "type": "MessageEvent"
            },
            {
              "name": "bufferedamountlow",
              "type": "Event"
            },
            {
              "name": "error",
              "type": "RTCErrorEvent"
            },
            {
              "name": "close",
              "type": "Event"
            }
          ]
        }
      },
      "RTCDataChannelEvent": {
        "name": "RTCDataChannelEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "channel": {
              "name": "channel",
              "type": "RTCDataChannel",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCDataChannelEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCDataChannelEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCDTMFSender": {
        "name": "RTCDTMFSender",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "insertDTMF": {
              "name": "insertDTMF",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "tones",
                      "type": "DOMString"
                    },
                    {
                      "name": "duration",
                      "type": "unsigned long",
                      "optional": 1
                    },
                    {
                      "name": "interToneGap",
                      "type": "unsigned long",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "ontonechange": {
              "name": "ontonechange",
              "type": "EventHandler",
              "event-handler": "tonechange",
              "exposed": "Window"
            },
            "canInsertDTMF": {
              "name": "canInsertDTMF",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            },
            "toneBuffer": {
              "name": "toneBuffer",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCStatsReport": {
        "name": "RTCStatsReport",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "iterator": {
          "kind": "maplike",
          "readonly": true,
          "type": [
            {
              "type": "DOMString"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "RTCStatsEvent": {
        "name": "RTCStatsEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "report": {
              "name": "report",
              "type": "RTCStatsReport",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCStatsEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCStatsEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "RTCErrorEvent": {
        "name": "RTCErrorEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "error": {
              "name": "error",
              "type": "RTCError",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "RTCErrorEvent",
              "param": [
                {
                  "name": "type",
                  "type": "DOMString"
                },
                {
                  "name": "eventInitDict",
                  "type": "RTCErrorEventInit"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechRecognition": {
        "name": "SpeechRecognition",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "start": {
              "name": "start",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "stop": {
              "name": "stop",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            },
            "abort": {
              "name": "abort",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "grammars": {
              "name": "grammars",
              "type": "SpeechGrammarList",
              "exposed": "Window"
            },
            "lang": {
              "name": "lang",
              "type": "DOMString",
              "exposed": "Window"
            },
            "continuous": {
              "name": "continuous",
              "type": "boolean",
              "exposed": "Window"
            },
            "interimResults": {
              "name": "interimResults",
              "type": "boolean",
              "exposed": "Window"
            },
            "maxAlternatives": {
              "name": "maxAlternatives",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "serviceURI": {
              "name": "serviceURI",
              "type": "DOMString",
              "exposed": "Window"
            },
            "onaudiostart": {
              "name": "onaudiostart",
              "type": "EventHandler",
              "event-handler": "audiostart",
              "exposed": "Window"
            },
            "onsoundstart": {
              "name": "onsoundstart",
              "type": "EventHandler",
              "event-handler": "soundstart",
              "exposed": "Window"
            },
            "onspeechstart": {
              "name": "onspeechstart",
              "type": "EventHandler",
              "event-handler": "speechstart",
              "exposed": "Window"
            },
            "onspeechend": {
              "name": "onspeechend",
              "type": "EventHandler",
              "event-handler": "speechend",
              "exposed": "Window"
            },
            "onsoundend": {
              "name": "onsoundend",
              "type": "EventHandler",
              "event-handler": "soundend",
              "exposed": "Window"
            },
            "onaudioend": {
              "name": "onaudioend",
              "type": "EventHandler",
              "event-handler": "audioend",
              "exposed": "Window"
            },
            "onresult": {
              "name": "onresult",
              "type": "EventHandler",
              "event-handler": "result",
              "exposed": "Window"
            },
            "onnomatch": {
              "name": "onnomatch",
              "type": "EventHandler",
              "event-handler": "nomatch",
              "exposed": "Window"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window"
            },
            "onstart": {
              "name": "onstart",
              "type": "EventHandler",
              "event-handler": "start",
              "exposed": "Window"
            },
            "onend": {
              "name": "onend",
              "type": "EventHandler",
              "event-handler": "end",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "SpeechRecognition",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "result",
              "type": "SpeechRecognitionEvent"
            },
            {
              "name": "nomatch",
              "type": "SpeechRecognitionEvent"
            },
            {
              "name": "error",
              "type": "SpeechRecognitionError"
            },
            {
              "name": "end",
              "type": "Event"
            }
          ]
        }
      },
      "SpeechRecognitionError": {
        "name": "SpeechRecognitionError",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "error": {
              "name": "error",
              "type": "SpeechRecognitionErrorCode",
              "read-only": 1,
              "exposed": "Window"
            },
            "message": {
              "name": "message",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechRecognitionAlternative": {
        "name": "SpeechRecognitionAlternative",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "transcript": {
              "name": "transcript",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "confidence": {
              "name": "confidence",
              "type": "float",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechRecognitionResult": {
        "name": "SpeechRecognitionResult",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "SpeechRecognitionAlternative",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "isFinal": {
              "name": "isFinal",
              "type": "boolean",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechRecognitionResultList": {
        "name": "SpeechRecognitionResultList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "SpeechRecognitionResult",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechRecognitionEvent": {
        "name": "SpeechRecognitionEvent",
        "extends": "Event",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "resultIndex": {
              "name": "resultIndex",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            },
            "results": {
              "name": "results",
              "type": "SpeechRecognitionResultList",
              "read-only": 1,
              "exposed": "Window"
            },
            "interpretation": {
              "name": "interpretation",
              "type": "any",
              "read-only": 1,
              "exposed": "Window"
            },
            "emma": {
              "name": "emma",
              "type": "Document",
              "nullable": 1,
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechGrammar": {
        "name": "SpeechGrammar",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "src": {
              "name": "src",
              "type": "DOMString",
              "exposed": "Window"
            },
            "weight": {
              "name": "weight",
              "type": "float",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "SpeechGrammar",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechGrammarList": {
        "name": "SpeechGrammarList",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "signature": [
                {
                  "type": "SpeechGrammar",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "getter": 1,
              "exposed": "Window"
            },
            "addFromURI": {
              "name": "addFromURI",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "src",
                      "type": "DOMString"
                    },
                    {
                      "name": "weight",
                      "type": "float",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            },
            "addFromString": {
              "name": "addFromString",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "string",
                      "type": "DOMString"
                    },
                    {
                      "name": "weight",
                      "type": "float",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "type": "unsigned long",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "SpeechGrammarList",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "SpeechSynthesisErrorEvent": {
        "name": "SpeechSynthesisErrorEvent",
        "extends": "SpeechSynthesisEvent",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "error": {
              "name": "error",
              "type": "SpeechSynthesisErrorCode",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "VTTCue": {
        "name": "VTTCue",
        "extends": "TextTrackCue",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getCueAsHTML": {
              "name": "getCueAsHTML",
              "signature": [
                {
                  "type": "DocumentFragment",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "region": {
              "name": "region",
              "type": "VTTRegion",
              "nullable": 1,
              "exposed": "Window"
            },
            "vertical": {
              "name": "vertical",
              "type": "DirectionSetting",
              "exposed": "Window"
            },
            "snapToLines": {
              "name": "snapToLines",
              "type": "boolean",
              "exposed": "Window"
            },
            "line": {
              "name": "line",
              "type": "LineAndPositionSetting",
              "exposed": "Window"
            },
            "lineAlign": {
              "name": "lineAlign",
              "type": "LineAlignSetting",
              "exposed": "Window"
            },
            "position": {
              "name": "position",
              "type": "LineAndPositionSetting",
              "exposed": "Window"
            },
            "positionAlign": {
              "name": "positionAlign",
              "type": "PositionAlignSetting",
              "exposed": "Window"
            },
            "size": {
              "name": "size",
              "type": "double",
              "exposed": "Window"
            },
            "align": {
              "name": "align",
              "type": "AlignSetting",
              "exposed": "Window"
            },
            "text": {
              "name": "text",
              "type": "DOMString",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "VTTCue",
              "param": [
                {
                  "name": "startTime",
                  "type": "double"
                },
                {
                  "name": "endTime",
                  "type": "double"
                },
                {
                  "name": "text",
                  "type": "DOMString"
                }
              ]
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "VTTRegion": {
        "name": "VTTRegion",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "id": {
              "name": "id",
              "type": "DOMString",
              "exposed": "Window"
            },
            "width": {
              "name": "width",
              "type": "double",
              "exposed": "Window"
            },
            "lines": {
              "name": "lines",
              "type": "unsigned long",
              "exposed": "Window"
            },
            "regionAnchorX": {
              "name": "regionAnchorX",
              "type": "double",
              "exposed": "Window"
            },
            "regionAnchorY": {
              "name": "regionAnchorY",
              "type": "double",
              "exposed": "Window"
            },
            "viewportAnchorX": {
              "name": "viewportAnchorX",
              "type": "double",
              "exposed": "Window"
            },
            "viewportAnchorY": {
              "name": "viewportAnchorY",
              "type": "double",
              "exposed": "Window"
            },
            "scroll": {
              "name": "scroll",
              "type": "ScrollSetting",
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "VTTRegion",
              "param": []
            }
          ]
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "WorkletGlobalScope": {
        "name": "WorkletGlobalScope",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Worklet",
        "legacy-window-alias": []
      },
      "Worklet": {
        "name": "Worklet",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "addModule": {
              "name": "addModule",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "void"
                  },
                  "param": [
                    {
                      "name": "moduleURL",
                      "type": "USVString"
                    },
                    {
                      "name": "options",
                      "type": "WorkletOptions",
                      "optional": 1
                    }
                  ]
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "exposed": "Window",
        "legacy-window-alias": []
      },
      "XMLHttpRequestEventTarget": {
        "name": "XMLHttpRequestEventTarget",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onloadstart": {
              "name": "onloadstart",
              "type": "EventHandler",
              "event-handler": "loadstart",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "onprogress": {
              "name": "onprogress",
              "type": "EventHandler",
              "event-handler": "progress",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "onerror": {
              "name": "onerror",
              "type": "EventHandler",
              "event-handler": "error",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "onload": {
              "name": "onload",
              "type": "EventHandler",
              "event-handler": "load",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "ontimeout": {
              "name": "ontimeout",
              "type": "EventHandler",
              "event-handler": "timeout",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            },
            "onloadend": {
              "name": "onloadend",
              "type": "EventHandler",
              "event-handler": "loadend",
              "exposed": "Window DedicatedWorker SharedWorker",
              "override-type": "((this: XMLHttpRequest, ev: ProgressEvent) => any) | null"
            }
          },
          "namesakes": {}
        },
        "exposed": "Window DedicatedWorker SharedWorker",
        "legacy-window-alias": [],
        "events": {
          "event": [
            {
              "name": "loadstart",
              "type": "ProgressEvent"
            },
            {
              "name": "progress",
              "type": "ProgressEvent"
            },
            {
              "name": "abort",
              "type": "ProgressEvent"
            },
            {
              "name": "error",
              "type": "ProgressEvent"
            },
            {
              "name": "load",
              "type": "ProgressEvent"
            },
            {
              "name": "timeout",
              "type": "ProgressEvent"
            },
            {
              "name": "loadend",
              "type": "ProgressEvent"
            }
          ]
        }
      },
      "BroadcastChannel": {
        "name": "BroadcastChannel",
        "extends": "EventTarget",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "postMessage": {
              "name": "postMessage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "message",
                      "type": "any"
                    }
                  ]
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.\n */"
            },
            "close": {
              "name": "close",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "exposed": "Window Worker",
              "comment": "/**\n * Closes the BroadcastChannel object, opening it up to garbage collection.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window Worker",
              "comment": "/**\n * Returns the channel name (as passed to the constructor).\n */"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message",
              "exposed": "Window Worker"
            },
            "onmessageerror": {
              "name": "onmessageerror",
              "type": "EventHandler",
              "event-handler": "messageerror",
              "exposed": "Window Worker"
            }
          },
          "namesakes": {}
        },
        "constructor": {
          "signature": [
            {
              "type": "BroadcastChannel",
              "param": [
                {
                  "name": "name",
                  "type": "DOMString"
                }
              ]
            }
          ]
        },
        "exposed": "Window Worker",
        "legacy-window-alias": []
      },
      "RTCError": {
        "specs": "webrtc",
        "constructor": {
          "specs": "webrtc",
          "signature": [
            {
              "param-min-required": 0,
              "type-original": "RTCError",
              "type": "RTCError",
              "param": [
                {
                  "type-original": "DOMString",
                  "optional": 1,
                  "name": "errorDetail",
                  "type": "DOMString"
                },
                {
                  "type-original": "DOMString",
                  "optional": 1,
                  "name": "message",
                  "type": "DOMString"
                }
              ]
            }
          ],
          "name": "RTCError"
        },
        "properties": {
          "property": {
            "errorDetail": {
              "type-original": "DOMString",
              "nullable": 0,
              "default": "\"\"",
              "specs": "webrtc",
              "name": "errorDetail",
              "type": "DOMString"
            },
            "sdpLineNumber": {
              "type-original": "unsigned short",
              "nullable": 0,
              "default": "0",
              "specs": "webrtc",
              "name": "sdpLineNumber",
              "type": "unsigned short"
            },
            "httpRequestStatusCode": {
              "type-original": "unsigned short",
              "nullable": 0,
              "default": "0",
              "specs": "webrtc",
              "name": "httpRequestStatusCode",
              "type": "unsigned short"
            },
            "sctpCauseCode": {
              "type-original": "unsigned short",
              "nullable": 0,
              "default": "0",
              "specs": "webrtc",
              "name": "sctpCauseCode",
              "type": "unsigned short"
            },
            "receivedAlert": {
              "type-original": "unsigned long",
              "nullable": 1,
              "default": "null",
              "specs": "webrtc",
              "name": "receivedAlert",
              "type": "unsigned long"
            },
            "sentAlert": {
              "type-original": "unsigned long",
              "nullable": 1,
              "default": "null",
              "specs": "webrtc",
              "name": "sentAlert",
              "type": "unsigned long"
            },
            "message": {
              "type-original": "DOMString",
              "nullable": 0,
              "default": "\"\"",
              "specs": "webrtc",
              "name": "message",
              "type": "DOMString"
            },
            "name": {
              "type-original": "DOMString",
              "nullable": 0,
              "default": "RTCError",
              "specs": "webrtc",
              "name": "name",
              "type": "DOMString"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "name": "RTCError",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Error"
      },
      "ImageBitmapOptions": {
        "flavor": "All",
        "name": "ImageBitmapOptions",
        "properties": {
          "property": {
            "imageOrientation": {
              "name": "imageOrientation",
              "override-type": "\"none\" | \"flipY\"",
              "required": 0
            },
            "premultiplyAlpha": {
              "name": "premultiplyAlpha",
              "override-type": "\"none\" | \"premultiply\" | \"default\"",
              "required": 0
            },
            "colorSpaceConversion": {
              "name": "colorSpaceConversion",
              "override-type": "\"none\" | \"default\"",
              "required": 0
            },
            "resizeWidth": {
              "name": "resizeWidth",
              "override-type": "number",
              "required": 0
            },
            "resizeHeight": {
              "name": "resizeHeight",
              "override-type": "number",
              "required": 0
            },
            "resizeQuality": {
              "name": "resizeQuality",
              "override-type": "\"pixelated\" | \"low\" | \"medium\" | \"high\"",
              "required": 0
            }
          }
        },
        "no-interface-object": "1"
      },
      "NodeListOf": {
        "name": "NodeListOf",
        "type-parameters": [
          {
            "name": "TNode",
            "extends": "Node"
          }
        ],
        "exposed": "Window",
        "extends": "NodeList",
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "override-type": "number"
            }
          }
        },
        "methods": {
          "method": {
            "item": {
              "name": "item",
              "override-signatures": [
                "item(index: number): TNode"
              ]
            },
            "forEach": {
              "comment": "/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */"
            }
          }
        },
        "no-interface-object": "1",
        "override-index-signatures": [
          "[index: number]: TNode"
        ],
        "iterator": {
          "kind": "iterable",
          "type": [
            {
              "override-type": "TNode"
            }
          ],
          "comments": {
            "comment": {
              "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
              "keys": "/**\n * Returns an list of keys in the list.\n */",
              "values": "/**\n * Returns an list of values in the list.\n */"
            }
          }
        }
      },
      "HTMLCollectionOf": {
        "name": "HTMLCollectionOf",
        "type-parameters": [
          {
            "name": "T",
            "extends": "Element"
          }
        ],
        "exposed": "Window",
        "extends": "HTMLCollection",
        "methods": {
          "method": {
            "item": {
              "getter": 1,
              "signature": [
                {
                  "nullable": 1,
                  "override-type": "T",
                  "param": [
                    {
                      "name": "index",
                      "type": "unsigned long"
                    }
                  ]
                }
              ],
              "specs": "html5",
              "name": "item"
            },
            "namedItem": {
              "name": "namedItem",
              "override-signatures": [
                "namedItem(name: string): T | null"
              ]
            }
          }
        },
        "no-interface-object": "1"
      },
      "EventListenerObject": {
        "name": "EventListenerObject",
        "methods": {
          "method": {
            "handleEvent": {
              "name": "handleEvent",
              "override-signatures": [
                "handleEvent(evt: Event): void"
              ]
            }
          }
        },
        "no-interface-object": "1"
      },
      "IDBArrayKey": {
        "name": "IDBArrayKey",
        "extends": "Array<IDBValidKey>",
        "no-interface-object": "1"
      },
      "AesCmacParams": {
        "name": "AesCmacParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "length": {
              "name": "length",
              "override-type": "number"
            }
          }
        },
        "no-interface-object": "1"
      },
      "AesCfbParams": {
        "name": "AesCfbParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "iv": {
              "name": "iv",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            }
          }
        },
        "no-interface-object": "1"
      },
      "DhKeyGenParams": {
        "name": "DhKeyGenParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "prime": {
              "name": "prime",
              "override-type": "Uint8Array"
            },
            "generator": {
              "name": "generator",
              "override-type": "Uint8Array"
            }
          }
        },
        "no-interface-object": "1"
      },
      "DhKeyAlgorithm": {
        "name": "DhKeyAlgorithm",
        "extends": "KeyAlgorithm",
        "properties": {
          "property": {
            "prime": {
              "name": "prime",
              "override-type": "Uint8Array"
            },
            "generator": {
              "name": "generator",
              "override-type": "Uint8Array"
            }
          }
        },
        "no-interface-object": "1"
      },
      "DhKeyDeriveParams": {
        "name": "DhKeyDeriveParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "prime": {
              "name": "public",
              "override-type": "CryptoKey"
            }
          }
        },
        "no-interface-object": "1"
      },
      "DhImportKeyParams": {
        "name": "DhImportKeyParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "prime": {
              "name": "prime",
              "override-type": "Uint8Array"
            },
            "generator": {
              "name": "generator",
              "override-type": "Uint8Array"
            }
          }
        },
        "no-interface-object": "1"
      },
      "ConcatParams": {
        "name": "ConcatParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "hash": {
              "name": "hash",
              "override-type": "string | Algorithm",
              "required": 0
            },
            "algorithmId": {
              "name": "algorithmId",
              "override-type": "Uint8Array"
            },
            "partyUInfo": {
              "name": "partyUInfo",
              "override-type": "Uint8Array"
            },
            "partyVInfo": {
              "name": "partyVInfo",
              "override-type": "Uint8Array"
            },
            "publicInfo": {
              "name": "publicInfo",
              "override-type": "Uint8Array",
              "required": 0
            },
            "privateInfo": {
              "name": "privateInfo",
              "override-type": "Uint8Array",
              "required": 0
            }
          }
        },
        "no-interface-object": "1"
      },
      "HkdfCtrParams": {
        "name": "HkdfCtrParams",
        "extends": "Algorithm",
        "properties": {
          "property": {
            "hash": {
              "name": "hash",
              "override-type": "string | Algorithm"
            },
            "label": {
              "name": "label",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            },
            "context": {
              "name": "context",
              "override-type": "Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | ArrayBuffer"
            }
          }
        },
        "no-interface-object": "1"
      },
      "HTMLTableDataCellElement": {
        "name": "HTMLTableDataCellElement",
        "extends": "HTMLTableCellElement",
        "exposed": "Window",
        "element": [
          {
            "specs": "HTML5",
            "namespace": "HTML",
            "name": "td"
          }
        ]
      },
      "HTMLTableHeaderCellElement": {
        "name": "HTMLTableHeaderCellElement",
        "extends": "HTMLTableCellElement",
        "exposed": "Window",
        "properties": {
          "property": {
            "scope": {
              "name": "scope",
              "override-type": "string"
            }
          }
        },
        "element": [
          {
            "name": "th"
          }
        ]
      },
      "SVGCursorElement": {
        "name": "SVGCursorElement",
        "extends": "SVGElement",
        "exposed": "Window",
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "read-only": 1,
              "override-type": "SVGAnimatedLength"
            },
            "y": {
              "name": "y",
              "read-only": 1,
              "override-type": "SVGAnimatedLength"
            }
          }
        }
      },
      "SVGAnimationElement": {
        "name": "SVGAnimationElement",
        "extends": "SVGElement",
        "exposed": "Window",
        "properties": {
          "property": {
            "targetElement": {
              "name": "targetElement",
              "read-only": 1,
              "override-type": "SVGElement"
            }
          }
        },
        "methods": {
          "method": {
            "getStartTime": {
              "name": "getStartTime",
              "override-signatures": [
                "getStartTime(): number"
              ]
            },
            "getCurrentTime": {
              "name": "getCurrentTime",
              "override-signatures": [
                "getCurrentTime(): number"
              ]
            },
            "getSimpleDuration": {
              "name": "getSimpleDuration",
              "override-signatures": [
                "getSimpleDuration(): number"
              ]
            }
          }
        }
      },
      "SVGAnimateElement": {
        "name": "SVGAnimateElement",
        "extends": "SVGAnimationElement",
        "exposed": "Window"
      },
      "SVGAnimateTransformElement": {
        "name": "SVGAnimateTransformElement",
        "extends": "SVGAnimationElement",
        "exposed": "Window"
      },
      "SVGAnimateMotionElement": {
        "name": "SVGAnimateMotionElement",
        "extends": "SVGAnimationElement",
        "exposed": "Window"
      },
      "OverconstrainedError": {
        "name": "OverconstrainedError",
        "extends": "Error",
        "exposed": "Window",
        "properties": {
          "property": {
            "constraint": {
              "name": "constraint",
              "type": "DOMString"
            }
          }
        }
      }
    }
  },
  "mixins": {
    "mixin": {
      "NavigatorID": {
        "name": "NavigatorID",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "taintEnabled": {
              "name": "taintEnabled",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ],
              "exposed": "Window"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "appCodeName": {
              "name": "appCodeName",
              "type": "DOMString",
              "read-only": 1
            },
            "appName": {
              "name": "appName",
              "type": "DOMString",
              "read-only": 1
            },
            "appVersion": {
              "name": "appVersion",
              "type": "DOMString",
              "read-only": 1
            },
            "platform": {
              "name": "platform",
              "type": "DOMString",
              "read-only": 1
            },
            "product": {
              "name": "product",
              "type": "DOMString",
              "read-only": 1
            },
            "productSub": {
              "name": "productSub",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "userAgent": {
              "name": "userAgent",
              "type": "DOMString",
              "read-only": 1
            },
            "vendor": {
              "name": "vendor",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "vendorSub": {
              "name": "vendorSub",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            },
            "oscpu": {
              "name": "oscpu",
              "type": "DOMString",
              "read-only": 1,
              "exposed": "Window"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "SVGFitToViewBox": {
        "name": "SVGFitToViewBox",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "viewBox": {
              "name": "viewBox",
              "type": "SVGAnimatedRect",
              "read-only": 1
            },
            "preserveAspectRatio": {
              "name": "preserveAspectRatio",
              "type": "SVGAnimatedPreserveAspectRatio",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "ParentNode": {
        "name": "ParentNode",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "prepend": {
              "name": "prepend",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "nodes",
                      "type": [
                        {
                          "type": "Node"
                        },
                        {
                          "type": "DOMString"
                        }
                      ],
                      "variadic": 1
                    }
                  ]
                }
              ],
              "comment": "/**\n * Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n * \n * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n */"
            },
            "append": {
              "name": "append",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "nodes",
                      "type": [
                        {
                          "type": "Node"
                        },
                        {
                          "type": "DOMString"
                        }
                      ],
                      "variadic": 1
                    }
                  ]
                }
              ],
              "comment": "/**\n * Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n * \n * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n */"
            },
            "querySelector": {
              "name": "querySelector",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "selectors",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "comment": "/**\n * Returns the first element that is a descendant of node that matches selectors.\n */"
            },
            "querySelectorAll": {
              "name": "querySelectorAll",
              "signature": [
                {
                  "type": "NodeList",
                  "param": [
                    {
                      "name": "selectors",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "comment": "/**\n * Returns all element descendants of node that match selectors.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "children": {
              "name": "children",
              "type": "HTMLCollection",
              "read-only": 1,
              "comment": "/**\n * Returns the child elements.\n */"
            },
            "firstElementChild": {
              "name": "firstElementChild",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "comment": "/**\n * Returns the first child that is an element, and null otherwise.\n */"
            },
            "lastElementChild": {
              "name": "lastElementChild",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "comment": "/**\n * Returns the last child that is an element, and null otherwise.\n */"
            },
            "childElementCount": {
              "name": "childElementCount",
              "type": "unsigned long",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "MSFileSaver": {
        "specs": "file-writer-api",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSFileSaver",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "msSaveBlob": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "blob",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "name": "defaultName",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "file-writer-api",
              "exposed": "Window",
              "name": "msSaveBlob"
            },
            "msSaveOrOpenBlob": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "blob",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "name": "defaultName",
                      "type": "DOMString",
                      "optional": 1,
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "file-writer-api",
              "exposed": "Window",
              "name": "msSaveOrOpenBlob"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "GlobalEventHandlers": {
        "name": "GlobalEventHandlers",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onabort": {
              "name": "onabort",
              "type": "EventHandler",
              "event-handler": "abort",
              "comment": "/**\n * Fires when the user aborts the download.\n * @param ev The event.\n */"
            },
            "onauxclick": {
              "name": "onauxclick",
              "type": "EventHandler",
              "event-handler": "auxclick"
            },
            "onblur": {
              "name": "onblur",
              "type": "EventHandler",
              "event-handler": "blur",
              "comment": "/**\n * Fires when the object loses the input focus.\n * @param ev The focus event.\n */"
            },
            "oncancel": {
              "name": "oncancel",
              "type": "EventHandler",
              "event-handler": "cancel"
            },
            "oncanplay": {
              "name": "oncanplay",
              "type": "EventHandler",
              "event-handler": "canplay",
              "comment": "/**\n * Occurs when playback is possible, but would require further buffering.\n * @param ev The event.\n */"
            },
            "oncanplaythrough": {
              "name": "oncanplaythrough",
              "type": "EventHandler",
              "event-handler": "canplaythrough"
            },
            "onchange": {
              "name": "onchange",
              "type": "EventHandler",
              "event-handler": "change",
              "comment": "/**\n * Fires when the contents of the object or selection have changed.\n * @param ev The event.\n */"
            },
            "onclick": {
              "name": "onclick",
              "type": "EventHandler",
              "event-handler": "click",
              "comment": "/**\n * Fires when the user clicks the left mouse button on the object\n * @param ev The mouse event.\n */"
            },
            "onclose": {
              "name": "onclose",
              "type": "EventHandler",
              "event-handler": "close"
            },
            "oncontextmenu": {
              "name": "oncontextmenu",
              "type": "EventHandler",
              "event-handler": "contextmenu",
              "comment": "/**\n * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n * @param ev The mouse event.\n */"
            },
            "oncuechange": {
              "name": "oncuechange",
              "type": "EventHandler",
              "event-handler": "cuechange"
            },
            "ondblclick": {
              "name": "ondblclick",
              "type": "EventHandler",
              "event-handler": "dblclick",
              "comment": "/**\n * Fires when the user double-clicks the object.\n * @param ev The mouse event.\n */"
            },
            "ondrag": {
              "name": "ondrag",
              "type": "EventHandler",
              "event-handler": "drag",
              "comment": "/**\n * Fires on the source object continuously during a drag operation.\n * @param ev The event.\n */"
            },
            "ondragend": {
              "name": "ondragend",
              "type": "EventHandler",
              "event-handler": "dragend",
              "comment": "/**\n * Fires on the source object when the user releases the mouse at the close of a drag operation.\n * @param ev The event.\n */"
            },
            "ondragenter": {
              "name": "ondragenter",
              "type": "EventHandler",
              "event-handler": "dragenter",
              "comment": "/**\n * Fires on the target element when the user drags the object to a valid drop target.\n * @param ev The drag event.\n */"
            },
            "ondragexit": {
              "name": "ondragexit",
              "type": "EventHandler",
              "event-handler": "dragexit"
            },
            "ondragleave": {
              "name": "ondragleave",
              "type": "EventHandler",
              "event-handler": "dragleave",
              "comment": "/**\n * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n * @param ev The drag event.\n */"
            },
            "ondragover": {
              "name": "ondragover",
              "type": "EventHandler",
              "event-handler": "dragover",
              "comment": "/**\n * Fires on the target element continuously while the user drags the object over a valid drop target.\n * @param ev The event.\n */"
            },
            "ondragstart": {
              "name": "ondragstart",
              "type": "EventHandler",
              "event-handler": "dragstart",
              "comment": "/**\n * Fires on the source object when the user starts to drag a text selection or selected object.\n * @param ev The event.\n */"
            },
            "ondrop": {
              "name": "ondrop",
              "type": "EventHandler",
              "event-handler": "drop"
            },
            "ondurationchange": {
              "name": "ondurationchange",
              "type": "EventHandler",
              "event-handler": "durationchange",
              "comment": "/**\n * Occurs when the duration attribute is updated.\n * @param ev The event.\n */"
            },
            "onemptied": {
              "name": "onemptied",
              "type": "EventHandler",
              "event-handler": "emptied",
              "comment": "/**\n * Occurs when the media element is reset to its initial state.\n * @param ev The event.\n */"
            },
            "onended": {
              "name": "onended",
              "type": "EventHandler",
              "event-handler": "ended",
              "comment": "/**\n * Occurs when the end of playback is reached.\n * @param ev The event\n */"
            },
            "onerror": {
              "name": "onerror",
              "type": "OnErrorEventHandler",
              "event-handler": "error",
              "override-type": "OnErrorEventHandler",
              "comment": "/**\n * Fires when an error occurs during object loading.\n * @param ev The event.\n */"
            },
            "onfocus": {
              "name": "onfocus",
              "type": "EventHandler",
              "event-handler": "focus",
              "comment": "/**\n * Fires when the object receives focus.\n * @param ev The event.\n */"
            },
            "oninput": {
              "name": "oninput",
              "type": "EventHandler",
              "event-handler": "input"
            },
            "oninvalid": {
              "name": "oninvalid",
              "type": "EventHandler",
              "event-handler": "invalid"
            },
            "onkeydown": {
              "name": "onkeydown",
              "type": "EventHandler",
              "event-handler": "keydown",
              "comment": "/**\n * Fires when the user presses a key.\n * @param ev The keyboard event\n */"
            },
            "onkeypress": {
              "name": "onkeypress",
              "type": "EventHandler",
              "event-handler": "keypress",
              "comment": "/**\n * Fires when the user presses an alphanumeric key.\n * @param ev The event.\n */"
            },
            "onkeyup": {
              "name": "onkeyup",
              "type": "EventHandler",
              "event-handler": "keyup",
              "comment": "/**\n * Fires when the user releases a key.\n * @param ev The keyboard event\n */"
            },
            "onload": {
              "name": "onload",
              "type": "EventHandler",
              "event-handler": "load",
              "comment": "/**\n * Fires immediately after the browser loads the object.\n * @param ev The event.\n */"
            },
            "onloadeddata": {
              "name": "onloadeddata",
              "type": "EventHandler",
              "event-handler": "loadeddata",
              "comment": "/**\n * Occurs when media data is loaded at the current playback position.\n * @param ev The event.\n */"
            },
            "onloadedmetadata": {
              "name": "onloadedmetadata",
              "type": "EventHandler",
              "event-handler": "loadedmetadata",
              "comment": "/**\n * Occurs when the duration and dimensions of the media have been determined.\n * @param ev The event.\n */"
            },
            "onloadend": {
              "name": "onloadend",
              "type": "EventHandler",
              "event-handler": "loadend"
            },
            "onloadstart": {
              "name": "onloadstart",
              "type": "EventHandler",
              "event-handler": "loadstart",
              "comment": "/**\n * Occurs when Internet Explorer begins looking for media data.\n * @param ev The event.\n */"
            },
            "onmousedown": {
              "name": "onmousedown",
              "type": "EventHandler",
              "event-handler": "mousedown",
              "comment": "/**\n * Fires when the user clicks the object with either mouse button.\n * @param ev The mouse event.\n */"
            },
            "onmouseenter": {
              "name": "onmouseenter",
              "type": "EventHandler",
              "event-handler": "mouseenter"
            },
            "onmouseleave": {
              "name": "onmouseleave",
              "type": "EventHandler",
              "event-handler": "mouseleave"
            },
            "onmousemove": {
              "name": "onmousemove",
              "type": "EventHandler",
              "event-handler": "mousemove",
              "comment": "/**\n * Fires when the user moves the mouse over the object.\n * @param ev The mouse event.\n */"
            },
            "onmouseout": {
              "name": "onmouseout",
              "type": "EventHandler",
              "event-handler": "mouseout",
              "comment": "/**\n * Fires when the user moves the mouse pointer outside the boundaries of the object.\n * @param ev The mouse event.\n */"
            },
            "onmouseover": {
              "name": "onmouseover",
              "type": "EventHandler",
              "event-handler": "mouseover",
              "comment": "/**\n * Fires when the user moves the mouse pointer into the object.\n * @param ev The mouse event.\n */"
            },
            "onmouseup": {
              "name": "onmouseup",
              "type": "EventHandler",
              "event-handler": "mouseup",
              "comment": "/**\n * Fires when the user releases a mouse button while the mouse is over the object.\n * @param ev The mouse event.\n */"
            },
            "onwheel": {
              "name": "onwheel",
              "type": "EventHandler",
              "event-handler": "wheel"
            },
            "onpause": {
              "name": "onpause",
              "type": "EventHandler",
              "event-handler": "pause",
              "comment": "/**\n * Occurs when playback is paused.\n * @param ev The event.\n */"
            },
            "onplay": {
              "name": "onplay",
              "type": "EventHandler",
              "event-handler": "play",
              "comment": "/**\n * Occurs when the play method is requested.\n * @param ev The event.\n */"
            },
            "onplaying": {
              "name": "onplaying",
              "type": "EventHandler",
              "event-handler": "playing",
              "comment": "/**\n * Occurs when the audio or video has started playing.\n * @param ev The event.\n */"
            },
            "onprogress": {
              "name": "onprogress",
              "type": "EventHandler",
              "event-handler": "progress",
              "comment": "/**\n * Occurs to indicate progress while downloading media data.\n * @param ev The event.\n */"
            },
            "onratechange": {
              "name": "onratechange",
              "type": "EventHandler",
              "event-handler": "ratechange",
              "comment": "/**\n * Occurs when the playback rate is increased or decreased.\n * @param ev The event.\n */"
            },
            "onreset": {
              "name": "onreset",
              "type": "EventHandler",
              "event-handler": "reset",
              "comment": "/**\n * Fires when the user resets a form.\n * @param ev The event.\n */"
            },
            "onresize": {
              "name": "onresize",
              "type": "EventHandler",
              "event-handler": "resize"
            },
            "onscroll": {
              "name": "onscroll",
              "type": "EventHandler",
              "event-handler": "scroll",
              "comment": "/**\n * Fires when the user repositions the scroll box in the scroll bar on the object.\n * @param ev The event.\n */"
            },
            "onsecuritypolicyviolation": {
              "name": "onsecuritypolicyviolation",
              "type": "EventHandler",
              "event-handler": "securitypolicyviolation"
            },
            "onseeked": {
              "name": "onseeked",
              "type": "EventHandler",
              "event-handler": "seeked",
              "comment": "/**\n * Occurs when the seek operation ends.\n * @param ev The event.\n */"
            },
            "onseeking": {
              "name": "onseeking",
              "type": "EventHandler",
              "event-handler": "seeking",
              "comment": "/**\n * Occurs when the current playback position is moved.\n * @param ev The event.\n */"
            },
            "onselect": {
              "name": "onselect",
              "type": "EventHandler",
              "event-handler": "select",
              "comment": "/**\n * Fires when the current selection changes.\n * @param ev The event.\n */"
            },
            "onstalled": {
              "name": "onstalled",
              "type": "EventHandler",
              "event-handler": "stalled",
              "comment": "/**\n * Occurs when the download has stopped.\n * @param ev The event.\n */"
            },
            "onsubmit": {
              "name": "onsubmit",
              "type": "EventHandler",
              "event-handler": "submit"
            },
            "onsuspend": {
              "name": "onsuspend",
              "type": "EventHandler",
              "event-handler": "suspend",
              "comment": "/**\n * Occurs if the load operation has been intentionally halted.\n * @param ev The event.\n */"
            },
            "ontimeupdate": {
              "name": "ontimeupdate",
              "type": "EventHandler",
              "event-handler": "timeupdate",
              "comment": "/**\n * Occurs to indicate the current playback position.\n * @param ev The event.\n */"
            },
            "ontoggle": {
              "name": "ontoggle",
              "type": "EventHandler",
              "event-handler": "toggle"
            },
            "onvolumechange": {
              "name": "onvolumechange",
              "type": "EventHandler",
              "event-handler": "volumechange",
              "comment": "/**\n * Occurs when the volume is changed, or playback is muted or unmuted.\n * @param ev The event.\n */"
            },
            "onwaiting": {
              "name": "onwaiting",
              "type": "EventHandler",
              "event-handler": "waiting",
              "comment": "/**\n * Occurs when playback stops because the next frame of a video resource is not available.\n * @param ev The event.\n */"
            },
            "onanimationstart": {
              "name": "onanimationstart",
              "type": "EventHandler",
              "event-handler": "animationstart"
            },
            "onanimationiteration": {
              "name": "onanimationiteration",
              "type": "EventHandler",
              "event-handler": "animationiteration"
            },
            "onanimationend": {
              "name": "onanimationend",
              "type": "EventHandler",
              "event-handler": "animationend"
            },
            "onanimationcancel": {
              "name": "onanimationcancel",
              "type": "EventHandler",
              "event-handler": "animationcancel"
            },
            "ontransitionrun": {
              "name": "ontransitionrun",
              "type": "EventHandler",
              "event-handler": "transitionrun"
            },
            "ontransitionstart": {
              "name": "ontransitionstart",
              "type": "EventHandler",
              "event-handler": "transitionstart"
            },
            "ontransitionend": {
              "name": "ontransitionend",
              "type": "EventHandler",
              "event-handler": "transitionend"
            },
            "ontransitioncancel": {
              "name": "ontransitioncancel",
              "type": "EventHandler",
              "event-handler": "transitioncancel"
            },
            "ongotpointercapture": {
              "name": "ongotpointercapture",
              "type": "EventHandler",
              "event-handler": "gotpointercapture"
            },
            "onlostpointercapture": {
              "name": "onlostpointercapture",
              "type": "EventHandler",
              "event-handler": "lostpointercapture"
            },
            "onpointerdown": {
              "name": "onpointerdown",
              "type": "EventHandler",
              "event-handler": "pointerdown"
            },
            "onpointermove": {
              "name": "onpointermove",
              "type": "EventHandler",
              "event-handler": "pointermove"
            },
            "onpointerup": {
              "name": "onpointerup",
              "type": "EventHandler",
              "event-handler": "pointerup"
            },
            "onpointercancel": {
              "name": "onpointercancel",
              "type": "EventHandler",
              "event-handler": "pointercancel"
            },
            "onpointerover": {
              "name": "onpointerover",
              "type": "EventHandler",
              "event-handler": "pointerover"
            },
            "onpointerout": {
              "name": "onpointerout",
              "type": "EventHandler",
              "event-handler": "pointerout"
            },
            "onpointerenter": {
              "name": "onpointerenter",
              "type": "EventHandler",
              "event-handler": "pointerenter"
            },
            "onpointerleave": {
              "name": "onpointerleave",
              "type": "EventHandler",
              "event-handler": "pointerleave"
            },
            "onselectstart": {
              "name": "onselectstart",
              "type": "EventHandler",
              "event-handler": "selectstart"
            },
            "onselectionchange": {
              "name": "onselectionchange",
              "type": "EventHandler",
              "event-handler": "selectionchange"
            },
            "ontouchstart": {
              "name": "ontouchstart",
              "type": "EventHandler",
              "event-handler": "touchstart"
            },
            "ontouchend": {
              "name": "ontouchend",
              "type": "EventHandler",
              "event-handler": "touchend"
            },
            "ontouchmove": {
              "name": "ontouchmove",
              "type": "EventHandler",
              "event-handler": "touchmove"
            },
            "ontouchcancel": {
              "name": "ontouchcancel",
              "type": "EventHandler",
              "event-handler": "touchcancel"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true,
        "attributeless-events": {
          "event": [
            {
              "name": "focusin",
              "type": "FocusEvent"
            },
            {
              "name": "focusout",
              "type": "FocusEvent"
            }
          ]
        },
        "events": {
          "event": [
            {
              "name": "auxclick",
              "type": "MouseEvent"
            },
            {
              "name": "cancel",
              "type": "Event"
            },
            {
              "name": "drag",
              "type": "DragEvent"
            },
            {
              "name": "dragend",
              "type": "DragEvent"
            },
            {
              "name": "dragenter",
              "type": "DragEvent"
            },
            {
              "name": "dragleave",
              "type": "DragEvent"
            },
            {
              "name": "dragover",
              "type": "DragEvent"
            },
            {
              "name": "dragstart",
              "type": "DragEvent"
            },
            {
              "name": "drop",
              "type": "DragEvent"
            },
            {
              "name": "keydown",
              "type": "KeyboardEvent"
            },
            {
              "name": "keypress",
              "type": "KeyboardEvent"
            },
            {
              "name": "keyup",
              "type": "KeyboardEvent"
            },
            {
              "name": "mousedown",
              "type": "MouseEvent"
            },
            {
              "name": "mouseenter",
              "type": "MouseEvent"
            },
            {
              "name": "mouseleave",
              "type": "MouseEvent"
            },
            {
              "name": "mousemove",
              "type": "MouseEvent"
            },
            {
              "name": "mouseout",
              "type": "MouseEvent"
            },
            {
              "name": "mouseover",
              "type": "MouseEvent"
            },
            {
              "name": "mouseup",
              "type": "MouseEvent"
            },
            {
              "name": "scroll",
              "type": "Event"
            },
            {
              "name": "select",
              "type": "Event"
            },
            {
              "name": "wheel",
              "type": "WheelEvent"
            },
            {
              "name": "securitypolicyviolation",
              "type": "SecurityPolicyViolationEvent"
            },
            {
              "name": "dblclick",
              "type": "MouseEvent"
            },
            {
              "name": "contextmenu",
              "type": "MouseEvent"
            },
            {
              "name": "animationcancel",
              "type": "AnimationEvent"
            },
            {
              "name": "animationend",
              "type": "AnimationEvent"
            },
            {
              "name": "animationiteration",
              "type": "AnimationEvent"
            },
            {
              "name": "animationstart",
              "type": "AnimationEvent"
            },
            {
              "name": "gotpointercapture",
              "type": "PointerEvent"
            },
            {
              "name": "lostpointercapture",
              "type": "PointerEvent"
            },
            {
              "name": "pointercancel",
              "type": "PointerEvent"
            },
            {
              "name": "pointerdown",
              "type": "PointerEvent"
            },
            {
              "name": "pointerenter",
              "type": "PointerEvent"
            },
            {
              "name": "pointerleave",
              "type": "PointerEvent"
            },
            {
              "name": "pointermove",
              "type": "PointerEvent"
            },
            {
              "name": "pointerout",
              "type": "PointerEvent"
            },
            {
              "name": "pointerover",
              "type": "PointerEvent"
            },
            {
              "name": "pointerup",
              "type": "PointerEvent"
            },
            {
              "name": "touchcancel",
              "type": "TouchEvent"
            },
            {
              "name": "touchend",
              "type": "TouchEvent"
            },
            {
              "name": "touchmove",
              "type": "TouchEvent"
            },
            {
              "name": "touchstart",
              "type": "TouchEvent"
            },
            {
              "name": "transitionrun",
              "type": "TransitionEvent"
            },
            {
              "name": "transitionstart",
              "type": "TransitionEvent"
            },
            {
              "name": "transitionend",
              "type": "TransitionEvent"
            },
            {
              "name": "transitioncancel",
              "type": "TransitionEvent"
            }
          ]
        }
      },
      "Body": {
        "name": "Body",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "arrayBuffer": {
              "name": "arrayBuffer",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ArrayBuffer"
                  },
                  "param": []
                }
              ]
            },
            "blob": {
              "name": "blob",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Blob"
                  },
                  "param": []
                }
              ]
            },
            "formData": {
              "name": "formData",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "FormData"
                  },
                  "param": []
                }
              ]
            },
            "json": {
              "name": "json",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "any"
                  },
                  "param": []
                }
              ]
            },
            "text": {
              "name": "text",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "USVString"
                  },
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "body": {
              "name": "body",
              "type": "ReadableStream",
              "nullable": 1,
              "read-only": 1,
              "override-type": "ReadableStream<Uint8Array> | null"
            },
            "bodyUsed": {
              "name": "bodyUsed",
              "type": "boolean",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "GetSVGDocument": {
        "specs": "svg11",
        "anonymous-methods": {
          "method": []
        },
        "name": "GetSVGDocument",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "getSVGDocument": {
              "signature": [
                {
                  "type": "Document",
                  "type-original": "Document"
                }
              ],
              "specs": "svg11",
              "exposed": "Window",
              "name": "getSVGDocument"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "GlobalFetch": {
        "specs": "whatwg-fetch",
        "anonymous-methods": {
          "method": []
        },
        "name": "GlobalFetch",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "fetch": {
              "signature": [
                {
                  "new-object": 1,
                  "subtype": {
                    "type": "Response"
                  },
                  "param-min-required": 0,
                  "type": "Promise",
                  "param": [
                    {
                      "name": "input",
                      "type": [
                        {
                          "type": "Request"
                        },
                        {
                          "type": "USVString"
                        }
                      ],
                      "optional": 1,
                      "type-original": "RequestInfo"
                    },
                    {
                      "name": "init",
                      "type": "RequestInit",
                      "optional": 1,
                      "type-original": "RequestInit"
                    }
                  ],
                  "type-original": "Promise<Response>"
                }
              ],
              "specs": "whatwg-fetch",
              "exposed": "Window Worker",
              "name": "fetch",
              "override-signatures": [
                "fetch(input: RequestInfo, init?: RequestInit): Promise<Response>"
              ]
            }
          }
        },
        "extends": "Object"
      },
      "NavigatorContentUtils": {
        "name": "NavigatorContentUtils",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "registerProtocolHandler": {
              "name": "registerProtocolHandler",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "scheme",
                      "type": "DOMString"
                    },
                    {
                      "name": "url",
                      "type": "USVString"
                    },
                    {
                      "name": "title",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "unregisterProtocolHandler": {
              "name": "unregisterProtocolHandler",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "scheme",
                      "type": "DOMString"
                    },
                    {
                      "name": "url",
                      "type": "USVString"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasPathMethods": {
        "specs": "2dcontext",
        "anonymous-methods": {
          "method": []
        },
        "name": "CanvasPathMethods",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "quadraticCurveTo": {
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "void",
                  "param": [
                    {
                      "name": "cpx",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cpy",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "quadraticCurveTo"
            },
            "lineTo": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "lineTo"
            },
            "closePath": {
              "signature": [
                {
                  "type": "void",
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "closePath"
            },
            "rect": {
              "signature": [
                {
                  "param-min-required": 4,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "w",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "h",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "rect"
            },
            "ellipse": {
              "signature": [
                {
                  "param-min-required": 7,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radiusX",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radiusY",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "rotation",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "startAngle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "endAngle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "anticlockwise",
                      "default": "false",
                      "type": "boolean",
                      "optional": 1,
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "ellipse"
            },
            "moveTo": {
              "signature": [
                {
                  "param-min-required": 2,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "moveTo"
            },
            "arcTo": {
              "signature": [
                {
                  "param-min-required": 5,
                  "type": "void",
                  "param": [
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radius",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                },
                {
                  "param-min-required": 7,
                  "type": "void",
                  "param": [
                    {
                      "name": "x1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y1",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y2",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radiusX",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radiusY",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "rotation",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "arcTo"
            },
            "arc": {
              "signature": [
                {
                  "param-min-required": 5,
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "radius",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "startAngle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "endAngle",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "anticlockwise",
                      "default": "false",
                      "type": "boolean",
                      "optional": 1,
                      "type-original": "boolean"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "arc"
            },
            "bezierCurveTo": {
              "signature": [
                {
                  "param-min-required": 6,
                  "type": "void",
                  "param": [
                    {
                      "name": "cp1x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cp1y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cp2x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "cp2y",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "x",
                      "type": "float",
                      "type-original": "float"
                    },
                    {
                      "name": "y",
                      "type": "float",
                      "type-original": "float"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "2dcontext",
              "exposed": "Window",
              "name": "bezierCurveTo"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "MSNavigatorDoNotTrack": {
        "specs": "tracking-dnt",
        "anonymous-methods": {
          "method": []
        },
        "name": "MSNavigatorDoNotTrack",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "removeWebWideTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "args",
                      "type": "ExceptionInformation",
                      "type-original": "ExceptionInformation"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "removeWebWideTrackingException"
            },
            "removeSiteSpecificTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "args",
                      "type": "ExceptionInformation",
                      "type-original": "ExceptionInformation"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "removeSiteSpecificTrackingException"
            },
            "storeWebWideTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "args",
                      "type": "StoreExceptionsInformation",
                      "type-original": "StoreExceptionsInformation"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "storeWebWideTrackingException"
            },
            "confirmWebWideTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "args",
                      "type": "ExceptionInformation",
                      "type-original": "ExceptionInformation"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "confirmWebWideTrackingException"
            },
            "confirmSiteSpecificTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "args",
                      "type": "ConfirmSiteSpecificExceptionsInformation",
                      "type-original": "ConfirmSiteSpecificExceptionsInformation"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "confirmSiteSpecificTrackingException"
            },
            "storeSiteSpecificTrackingException": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "args",
                      "type": "StoreSiteSpecificExceptionsInformation",
                      "type-original": "StoreSiteSpecificExceptionsInformation"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "tracking-dnt",
              "exposed": "Window",
              "name": "storeSiteSpecificTrackingException"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "NavigatorOnLine": {
        "name": "NavigatorOnLine",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onLine": {
              "name": "onLine",
              "type": "boolean",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WindowBase64": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "WindowBase64",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "btoa": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "rawString",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "btoa"
            },
            "atob": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "encodedString",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "DOMString"
                }
              ],
              "specs": "html5",
              "exposed": "Window Worker",
              "name": "atob"
            }
          }
        },
        "extends": "Object"
      },
      "ChildNode": {
        "name": "ChildNode",
        "extends": "Node",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "before": {
              "name": "before",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "nodes",
                      "type": [
                        {
                          "type": "Node"
                        },
                        {
                          "type": "DOMString"
                        }
                      ],
                      "variadic": 1
                    }
                  ]
                }
              ],
              "comment": "/**\n * Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n * \n * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n */"
            },
            "after": {
              "name": "after",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "nodes",
                      "type": [
                        {
                          "type": "Node"
                        },
                        {
                          "type": "DOMString"
                        }
                      ],
                      "variadic": 1
                    }
                  ]
                }
              ],
              "comment": "/**\n * Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n * \n * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n */"
            },
            "replaceWith": {
              "name": "replaceWith",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "nodes",
                      "type": [
                        {
                          "type": "Node"
                        },
                        {
                          "type": "DOMString"
                        }
                      ],
                      "variadic": 1
                    }
                  ]
                }
              ],
              "comment": "/**\n * Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n * \n * Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n */"
            },
            "remove": {
              "name": "remove",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ],
              "comment": "/**\n * Removes node.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WindowLocalStorage": {
        "name": "WindowLocalStorage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "localStorage": {
              "name": "localStorage",
              "type": "Storage",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorBeacon": {
        "specs": "beacon",
        "anonymous-methods": {
          "method": []
        },
        "name": "NavigatorBeacon",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window Worker",
        "methods": {
          "method": {
            "sendBeacon": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "boolean",
                  "param": [
                    {
                      "name": "url",
                      "type": "USVString",
                      "type-original": "USVString"
                    },
                    {
                      "name": "data",
                      "default": "null",
                      "type": [
                        {
                          "nullable": 1,
                          "type": "Blob"
                        },
                        {
                          "type": [
                            {
                              "nullable": 1,
                              "type": "Int8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Int32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint16Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Uint8ClampedArray"
                            },
                            {
                              "nullable": 1,
                              "type": "Float32Array"
                            },
                            {
                              "nullable": 1,
                              "type": "Float64Array"
                            },
                            {
                              "nullable": 1,
                              "type": "DataView"
                            },
                            {
                              "nullable": 1,
                              "type": "ArrayBuffer"
                            }
                          ]
                        },
                        {
                          "nullable": 1,
                          "type": "FormData"
                        },
                        {
                          "nullable": 1,
                          "type": "USVString"
                        }
                      ],
                      "optional": 1,
                      "type-original": "BodyInit?"
                    }
                  ],
                  "type-original": "boolean"
                }
              ],
              "specs": "beacon",
              "exposed": "Window Worker",
              "name": "sendBeacon"
            }
          }
        },
        "extends": "Object"
      },
      "DocumentEvent": {
        "specs": "dom4",
        "anonymous-methods": {
          "method": []
        },
        "name": "DocumentEvent",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "createEvent": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "Event",
                  "param": [
                    {
                      "name": "eventInterface",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "Event"
                }
              ],
              "specs": "dom4",
              "exposed": "Window",
              "name": "createEvent"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "IDBEnvironment": {
        "specs": "indexeddb",
        "anonymous-methods": {
          "method": []
        },
        "name": "IDBEnvironment",
        "properties": {
          "property": {
            "indexedDB": {
              "specs": "indexeddb",
              "name": "indexedDB",
              "type-original": "IDBFactory",
              "exposed": "Window",
              "type": "IDBFactory",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "HTMLHyperlinkElementUtils": {
        "name": "HTMLHyperlinkElementUtils",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "USVString"
            },
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1,
              "override-type": "string"
            },
            "protocol": {
              "name": "protocol",
              "type": "USVString"
            },
            "username": {
              "name": "username",
              "type": "USVString"
            },
            "password": {
              "name": "password",
              "type": "USVString"
            },
            "host": {
              "name": "host",
              "type": "USVString"
            },
            "hostname": {
              "name": "hostname",
              "type": "USVString"
            },
            "port": {
              "name": "port",
              "type": "USVString"
            },
            "pathname": {
              "name": "pathname",
              "type": "USVString"
            },
            "search": {
              "name": "search",
              "type": "USVString"
            },
            "hash": {
              "name": "hash",
              "type": "USVString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WindowTimers": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "WindowTimers",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "extends": "Object"
      },
      "ElementTraversal": {
        "specs": "dom4",
        "anonymous-methods": {
          "method": []
        },
        "name": "ElementTraversal",
        "properties": {
          "property": {
            "previousElementSibling": {
              "specs": "dom4",
              "name": "previousElementSibling",
              "tags": "TreeNavigation",
              "type-original": "Element?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            },
            "childElementCount": {
              "specs": "dom4",
              "name": "childElementCount",
              "tags": "TreeNavigation",
              "type-original": "unsigned long",
              "exposed": "Window",
              "type": "unsigned long",
              "read-only": 1
            },
            "nextElementSibling": {
              "specs": "dom4",
              "name": "nextElementSibling",
              "tags": "TreeNavigation",
              "type-original": "Element?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            },
            "lastElementChild": {
              "specs": "dom4",
              "name": "lastElementChild",
              "tags": "TreeNavigation",
              "type-original": "Element?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            },
            "firstElementChild": {
              "specs": "dom4",
              "name": "firstElementChild",
              "tags": "TreeNavigation",
              "type-original": "Element?",
              "nullable": 1,
              "exposed": "Window",
              "type": "Element",
              "read-only": 1
            }
          }
        },
        "tags": "TreeNavigation",
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "WindowEventHandlers": {
        "name": "WindowEventHandlers",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "onafterprint": {
              "name": "onafterprint",
              "type": "EventHandler",
              "event-handler": "afterprint"
            },
            "onbeforeprint": {
              "name": "onbeforeprint",
              "type": "EventHandler",
              "event-handler": "beforeprint"
            },
            "onbeforeunload": {
              "name": "onbeforeunload",
              "type": "OnBeforeUnloadEventHandler",
              "event-handler": "beforeunload"
            },
            "onhashchange": {
              "name": "onhashchange",
              "type": "EventHandler",
              "event-handler": "hashchange"
            },
            "onlanguagechange": {
              "name": "onlanguagechange",
              "type": "EventHandler",
              "event-handler": "languagechange"
            },
            "onmessage": {
              "name": "onmessage",
              "type": "EventHandler",
              "event-handler": "message"
            },
            "onmessageerror": {
              "name": "onmessageerror",
              "type": "EventHandler",
              "event-handler": "messageerror"
            },
            "onoffline": {
              "name": "onoffline",
              "type": "EventHandler",
              "event-handler": "offline"
            },
            "ononline": {
              "name": "ononline",
              "type": "EventHandler",
              "event-handler": "online"
            },
            "onpagehide": {
              "name": "onpagehide",
              "type": "EventHandler",
              "event-handler": "pagehide"
            },
            "onpageshow": {
              "name": "onpageshow",
              "type": "EventHandler",
              "event-handler": "pageshow"
            },
            "onpopstate": {
              "name": "onpopstate",
              "type": "EventHandler",
              "event-handler": "popstate"
            },
            "onrejectionhandled": {
              "name": "onrejectionhandled",
              "type": "EventHandler",
              "event-handler": "rejectionhandled"
            },
            "onstorage": {
              "name": "onstorage",
              "type": "EventHandler",
              "event-handler": "storage"
            },
            "onunhandledrejection": {
              "name": "onunhandledrejection",
              "type": "EventHandler",
              "event-handler": "unhandledrejection"
            },
            "onunload": {
              "name": "onunload",
              "type": "EventHandler",
              "event-handler": "unload"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true,
        "events": {
          "event": [
            {
              "name": "unhandledrejection",
              "type": "PromiseRejectionEvent"
            }
          ]
        }
      },
      "SVGTests": {
        "name": "SVGTests",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "requiredExtensions": {
              "name": "requiredExtensions",
              "type": "SVGStringList",
              "read-only": 1
            },
            "systemLanguage": {
              "name": "systemLanguage",
              "type": "SVGStringList",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorStorageUtils": {
        "specs": "html5",
        "anonymous-methods": {
          "method": []
        },
        "name": "NavigatorStorageUtils",
        "properties": {
          "property": {}
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "WindowTimersExtension": {
        "specs": "setimmediate",
        "anonymous-methods": {
          "method": []
        },
        "name": "WindowTimersExtension",
        "properties": {
          "property": {}
        },
        "tags": "Timers",
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "clearImmediate": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "long",
                      "type-original": "long"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "setimmediate",
              "exposed": "Window",
              "name": "clearImmediate",
              "tags": "Timers"
            },
            "setImmediate": {
              "signature": [
                {
                  "param-min-required": 1,
                  "type": "long",
                  "param": [
                    {
                      "name": "expression",
                      "type": "any",
                      "type-original": "any"
                    },
                    {
                      "variadic": 1,
                      "name": "args",
                      "type": "any",
                      "type-original": "any"
                    }
                  ],
                  "type-original": "long"
                }
              ],
              "specs": "setimmediate",
              "exposed": "Window",
              "name": "setImmediate",
              "tags": "Timers"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "ElementCSSInlineStyle": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "name": "ElementCSSInlineStyle",
        "properties": {
          "property": {
            "style": {
              "put-forwards": "cssText",
              "specs": "cssom",
              "same-object": 1,
              "name": "style",
              "constant": 1,
              "content-attribute": "style",
              "type-original": "CSSStyleDeclaration",
              "exposed": "Window",
              "content-attribute-value-syntax": "css",
              "type": "CSSStyleDeclaration",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "DOML2DeprecatedColorProperty": {
        "specs": "dom-level-2-html",
        "anonymous-methods": {
          "method": []
        },
        "name": "DOML2DeprecatedColorProperty",
        "properties": {
          "property": {
            "color": {
              "specs": "dom-level-2-html",
              "ce-reactions": 1,
              "name": "color",
              "tags": "CSSOM",
              "content-attribute": "color",
              "type-original": "DOMString",
              "exposed": "Window",
              "content-attribute-value-syntax": "simple_color",
              "type": "DOMString",
              "content-attribute-reflects": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "NavigatorUserMedia": {
        "specs": "media-capture-api",
        "anonymous-methods": {
          "method": []
        },
        "name": "NavigatorUserMedia",
        "properties": {
          "property": {
            "mediaDevices": {
              "specs": "media-capture-api",
              "exposed": "Window",
              "name": "mediaDevices",
              "type": "MediaDevices",
              "type-original": "MediaDevices",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {
            "getUserMedia": {
              "signature": [
                {
                  "param-min-required": 3,
                  "type": "void",
                  "param": [
                    {
                      "name": "constraints",
                      "type": "MediaStreamConstraints",
                      "type-original": "MediaStreamConstraints"
                    },
                    {
                      "name": "successCallback",
                      "type": "NavigatorUserMediaSuccessCallback",
                      "type-original": "NavigatorUserMediaSuccessCallback"
                    },
                    {
                      "name": "errorCallback",
                      "type": "NavigatorUserMediaErrorCallback",
                      "type-original": "NavigatorUserMediaErrorCallback"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "media-capture-api",
              "exposed": "Window",
              "name": "getUserMedia"
            },
            "getDisplayMedia": {
              "specs": "screen-capture",
              "signature": [
                {
                  "subtype": {
                    "type": "MediaStream"
                  },
                  "param-min-required": 1,
                  "type": "Promise",
                  "param": [
                    {
                      "name": "constraints",
                      "type": "MediaStreamConstraints",
                      "type-original": "MediaStreamConstraints"
                    }
                  ],
                  "type-original": "Promise<MediaStream>"
                }
              ],
              "name": "getDisplayMedia",
              "exposed": "Window"
            }
          }
        },
        "exposed": "Window",
        "extends": "Object"
      },
      "NavigatorConcurrentHardware": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "NavigatorConcurrentHardware",
        "properties": {
          "property": {
            "hardwareConcurrency": {
              "specs": "none",
              "name": "hardwareConcurrency",
              "constant": 1,
              "type-original": "unsigned long long",
              "exposed": "Window Worker",
              "type": "unsigned long long",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window Worker",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "AbstractWorker": {
        "specs": "workers",
        "anonymous-methods": {
          "method": []
        },
        "name": "AbstractWorker",
        "properties": {
          "property": {
            "onerror": {
              "specs": "workers",
              "name": "onerror",
              "type-original": "EventHandler",
              "nullable": 1,
              "exposed": "Window Worker",
              "type": "EventHandlerNonNull",
              "event-handler": "error"
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window Worker",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "LinkStyle": {
        "specs": "cssom",
        "anonymous-methods": {
          "method": []
        },
        "name": "LinkStyle",
        "properties": {
          "property": {
            "sheet": {
              "specs": "cssom",
              "name": "sheet",
              "type-original": "StyleSheet?",
              "nullable": 1,
              "exposed": "Window",
              "type": "StyleSheet",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "DOML2DeprecatedSizeProperty": {
        "specs": "dom-level-2-html",
        "anonymous-methods": {
          "method": []
        },
        "name": "DOML2DeprecatedSizeProperty",
        "properties": {
          "property": {
            "size": {
              "specs": "dom-level-2-html",
              "ce-reactions": 1,
              "name": "size",
              "tags": "CSSOM",
              "content-attribute": "size",
              "type-original": "long",
              "exposed": "Window",
              "content-attribute-value-syntax": "1_or_greater_integer",
              "type": "long",
              "content-attribute-reflects": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Window",
        "methods": {
          "method": {}
        },
        "extends": "Object"
      },
      "NavigatorLanguage": {
        "name": "NavigatorLanguage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "language": {
              "name": "language",
              "type": "DOMString",
              "read-only": 1
            },
            "languages": {
              "name": "languages",
              "type": "FrozenArray",
              "subtype": {
                "type": "DOMString"
              },
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WindowConsole": {
        "specs": "none",
        "anonymous-methods": {
          "method": []
        },
        "name": "WindowConsole",
        "properties": {
          "property": {
            "console": {
              "specs": "none",
              "name": "console",
              "tags": "Console",
              "type-original": "Console",
              "replaceable": 1,
              "exposed": "Window Worker",
              "type": "Console",
              "read-only": 1
            }
          }
        },
        "tags": "Console",
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "methods": {
          "method": {}
        },
        "exposed": "Window Worker",
        "extends": "Object"
      },
      "SVGAnimatedPoints": {
        "name": "SVGAnimatedPoints",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "points": {
              "name": "points",
              "type": "SVGPointList",
              "read-only": 1
            },
            "animatedPoints": {
              "name": "animatedPoints",
              "type": "SVGPointList",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WindowSessionStorage": {
        "name": "WindowSessionStorage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "sessionStorage": {
              "name": "sessionStorage",
              "type": "Storage",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "SVGFilterPrimitiveStandardAttributes": {
        "name": "SVGFilterPrimitiveStandardAttributes",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "x": {
              "name": "x",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "y": {
              "name": "y",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "width": {
              "name": "width",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "height": {
              "name": "height",
              "type": "SVGAnimatedLength",
              "read-only": 1
            },
            "result": {
              "name": "result",
              "type": "SVGAnimatedString",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WorkerUtils": {
        "specs": "workers",
        "anonymous-methods": {
          "method": []
        },
        "name": "WorkerUtils",
        "properties": {
          "property": {
            "navigator": {
              "property-descriptor-not-configurable": 1,
              "specs": "workers",
              "name": "navigator",
              "type-original": "WorkerNavigator",
              "exposed": "Worker",
              "type": "WorkerNavigator",
              "read-only": 1
            },
            "msIndexedDB": {
              "specs": "indexeddb",
              "name": "msIndexedDB",
              "type-original": "IDBFactory",
              "exposed": "Worker",
              "type": "IDBFactory",
              "read-only": 1
            },
            "indexedDB": {
              "specs": "indexeddb",
              "name": "indexedDB",
              "type-original": "IDBFactory",
              "exposed": "Worker",
              "type": "IDBFactory",
              "read-only": 1
            }
          }
        },
        "constants": {
          "constant": {}
        },
        "no-interface-object": 1,
        "exposed": "Worker",
        "methods": {
          "method": {
            "importScripts": {
              "signature": [
                {
                  "param-min-required": 0,
                  "type": "void",
                  "param": [
                    {
                      "variadic": 1,
                      "name": "urls",
                      "type": "DOMString",
                      "type-original": "DOMString"
                    }
                  ],
                  "type-original": "void"
                }
              ],
              "specs": "workers",
              "exposed": "Worker",
              "name": "importScripts"
            }
          }
        },
        "extends": "Object",
        "implements": [
          "WindowBase64"
        ]
      },
      "SVGURIReference": {
        "name": "SVGURIReference",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "href": {
              "name": "href",
              "type": "SVGAnimatedString",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CredentialUserData": {
        "name": "CredentialUserData",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "name": {
              "name": "name",
              "type": "USVString",
              "read-only": 1
            },
            "iconURL": {
              "name": "iconURL",
              "type": "USVString",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NonElementParentNode": {
        "name": "NonElementParentNode",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getElementById": {
              "name": "getElementById",
              "signature": [
                {
                  "type": "Element",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "elementId",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "comment": "/**\n * Returns the first element within node's descendants whose ID is elementId.\n */"
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "DocumentOrShadowRoot": {
        "name": "DocumentOrShadowRoot",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "getSelection": {
              "name": "getSelection",
              "override-signatures": [
                "getSelection(): Selection | null"
              ]
            },
            "elementFromPoint": {
              "name": "elementFromPoint",
              "override-signatures": [
                "elementFromPoint(x: number, y: number): Element | null"
              ]
            },
            "elementsFromPoint": {
              "name": "elementsFromPoint",
              "override-signatures": [
                "elementsFromPoint(x: number, y: number): Element[]"
              ]
            },
            "caretRangeFromPoint": {
              "name": "caretRangeFromPoint",
              "deprecated": 1,
              "override-signatures": [
                "caretRangeFromPoint(x: number, y: number): Range"
              ]
            },
            "caretPositionFromPoint": {
              "name": "caretPositionFromPoint",
              "override-signatures": [
                "caretPositionFromPoint(x: number, y: number): CaretPosition | null"
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "fullscreenElement": {
              "name": "fullscreenElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "comment": "/**\n * Returns document's fullscreen element.\n */"
            },
            "pointerLockElement": {
              "name": "pointerLockElement",
              "type": "Element",
              "nullable": 1,
              "read-only": 1
            },
            "activeElement": {
              "name": "activeElement",
              "read-only": 1,
              "override-type": "Element | null"
            },
            "styleSheets": {
              "name": "styleSheets",
              "read-only": 1,
              "override-type": "StyleSheetList",
              "comment": "/**\n * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\n */"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NonDocumentTypeChildNode": {
        "name": "NonDocumentTypeChildNode",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "previousElementSibling": {
              "name": "previousElementSibling",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "comment": "/**\n * Returns the first preceding sibling that is an element, and null otherwise.\n */"
            },
            "nextElementSibling": {
              "name": "nextElementSibling",
              "type": "Element",
              "nullable": 1,
              "read-only": 1,
              "comment": "/**\n * Returns the first following sibling that is an element, and null otherwise.\n */"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "Slotable": {
        "name": "Slotable",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "assignedSlot": {
              "name": "assignedSlot",
              "type": "HTMLSlotElement",
              "nullable": 1,
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "InnerHTML": {
        "name": "InnerHTML",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "innerHTML": {
              "name": "innerHTML",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "XPathEvaluatorBase": {
        "name": "XPathEvaluatorBase",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createExpression": {
              "name": "createExpression",
              "signature": [
                {
                  "type": "XPathExpression",
                  "param": [
                    {
                      "name": "expression",
                      "type": "DOMString"
                    },
                    {
                      "name": "resolver",
                      "type": "XPathNSResolver",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "createNSResolver": {
              "name": "createNSResolver",
              "signature": [
                {
                  "type": "XPathNSResolver",
                  "param": [
                    {
                      "name": "nodeResolver",
                      "type": "Node"
                    }
                  ]
                }
              ]
            },
            "evaluate": {
              "name": "evaluate",
              "signature": [
                {
                  "type": "XPathResult",
                  "param": [
                    {
                      "name": "expression",
                      "type": "DOMString"
                    },
                    {
                      "name": "contextNode",
                      "type": "Node"
                    },
                    {
                      "name": "resolver",
                      "type": "XPathNSResolver",
                      "nullable": 1,
                      "optional": 1
                    },
                    {
                      "name": "type",
                      "type": "unsigned short",
                      "optional": 1
                    },
                    {
                      "name": "result",
                      "type": "XPathResult",
                      "nullable": 1,
                      "optional": 1
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "TextDecoderCommon": {
        "name": "TextDecoderCommon",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "encoding": {
              "name": "encoding",
              "type": "DOMString",
              "read-only": 1,
              "comment": "/**\n * Returns encoding's name, lowercased.\n */"
            },
            "fatal": {
              "name": "fatal",
              "type": "boolean",
              "read-only": 1,
              "comment": "/**\n * Returns true if error mode is \"fatal\", and false otherwise.\n */"
            },
            "ignoreBOM": {
              "name": "ignoreBOM",
              "type": "boolean",
              "read-only": 1,
              "comment": "/**\n * Returns true if ignore BOM flag is set, and false otherwise.\n */"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "TextEncoderCommon": {
        "name": "TextEncoderCommon",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "encoding": {
              "name": "encoding",
              "type": "DOMString",
              "read-only": 1,
              "comment": "/**\n * Returns \"utf-8\".\n */"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "GenericTransformStream": {
        "name": "GenericTransformStream",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "readable": {
              "name": "readable",
              "type": "ReadableStream",
              "read-only": 1,
              "comment": "/**\n * Returns a readable stream whose chunks are strings resulting from running encoding's decoder on the chunks written to writable.\n */"
            },
            "writable": {
              "name": "writable",
              "type": "WritableStream",
              "read-only": 1,
              "comment": "/**\n * Returns a writable stream which accepts BufferSource chunks and runs them through encoding's decoder before making them available to readable.\n * \n * Typically this will be used via the pipeThrough() method on a ReadableStream source.\n * \n * ```\n * var decoder = new TextDecoderStream(encoding);\n * byteReadable\n *   .pipeThrough(decoder)\n *   .pipeTo(textWritable);\n * ```\n * \n * If the error mode is \"fatal\" and encoding's decoder returns error, both readable and writable will be errored with a TypeError.\n */"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasState": {
        "name": "CanvasState",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "save": {
              "name": "save",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "restore": {
              "name": "restore",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasTransform": {
        "name": "CanvasTransform",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "scale": {
              "name": "scale",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "rotate": {
              "name": "rotate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "angle",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "translate": {
              "name": "translate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "transform": {
              "name": "transform",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "a",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "b",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "c",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "d",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "e",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "f",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "getTransform": {
              "name": "getTransform",
              "signature": [
                {
                  "type": "DOMMatrix",
                  "param": []
                }
              ]
            },
            "setTransform": {
              "name": "setTransform",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "a",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "b",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "c",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "d",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "e",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "f",
                      "type": "unrestricted double"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "transform",
                      "type": "DOMMatrix2DInit",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "resetTransform": {
              "name": "resetTransform",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasCompositing": {
        "name": "CanvasCompositing",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "globalAlpha": {
              "name": "globalAlpha",
              "type": "unrestricted double"
            },
            "globalCompositeOperation": {
              "name": "globalCompositeOperation",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasImageSmoothing": {
        "name": "CanvasImageSmoothing",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "imageSmoothingEnabled": {
              "name": "imageSmoothingEnabled",
              "type": "boolean"
            },
            "imageSmoothingQuality": {
              "name": "imageSmoothingQuality",
              "type": "ImageSmoothingQuality"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasFillStrokeStyles": {
        "name": "CanvasFillStrokeStyles",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createLinearGradient": {
              "name": "createLinearGradient",
              "signature": [
                {
                  "type": "CanvasGradient",
                  "param": [
                    {
                      "name": "x0",
                      "type": "double"
                    },
                    {
                      "name": "y0",
                      "type": "double"
                    },
                    {
                      "name": "x1",
                      "type": "double"
                    },
                    {
                      "name": "y1",
                      "type": "double"
                    }
                  ]
                }
              ]
            },
            "createRadialGradient": {
              "name": "createRadialGradient",
              "signature": [
                {
                  "type": "CanvasGradient",
                  "param": [
                    {
                      "name": "x0",
                      "type": "double"
                    },
                    {
                      "name": "y0",
                      "type": "double"
                    },
                    {
                      "name": "r0",
                      "type": "double"
                    },
                    {
                      "name": "x1",
                      "type": "double"
                    },
                    {
                      "name": "y1",
                      "type": "double"
                    },
                    {
                      "name": "r1",
                      "type": "double"
                    }
                  ]
                }
              ]
            },
            "createPattern": {
              "name": "createPattern",
              "signature": [
                {
                  "type": "CanvasPattern",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "image",
                      "type": "CanvasImageSource"
                    },
                    {
                      "name": "repetition",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "strokeStyle": {
              "name": "strokeStyle",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "CanvasGradient"
                },
                {
                  "type": "CanvasPattern"
                }
              ]
            },
            "fillStyle": {
              "name": "fillStyle",
              "type": [
                {
                  "type": "DOMString"
                },
                {
                  "type": "CanvasGradient"
                },
                {
                  "type": "CanvasPattern"
                }
              ]
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasShadowStyles": {
        "name": "CanvasShadowStyles",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "shadowOffsetX": {
              "name": "shadowOffsetX",
              "type": "unrestricted double"
            },
            "shadowOffsetY": {
              "name": "shadowOffsetY",
              "type": "unrestricted double"
            },
            "shadowBlur": {
              "name": "shadowBlur",
              "type": "unrestricted double"
            },
            "shadowColor": {
              "name": "shadowColor",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasFilters": {
        "name": "CanvasFilters",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "filter": {
              "name": "filter",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasRect": {
        "name": "CanvasRect",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "clearRect": {
              "name": "clearRect",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "w",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "h",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "fillRect": {
              "name": "fillRect",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "w",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "h",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "strokeRect": {
              "name": "strokeRect",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "w",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "h",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasDrawPath": {
        "name": "CanvasDrawPath",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "beginPath": {
              "name": "beginPath",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "fill": {
              "name": "fill",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "stroke": {
              "name": "stroke",
              "signature": [
                {
                  "type": "void",
                  "param": []
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    }
                  ]
                }
              ]
            },
            "clip": {
              "name": "clip",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "isPointInPath": {
              "name": "isPointInPath",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "fillRule",
                      "type": "CanvasFillRule",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "isPointInStroke": {
              "name": "isPointInStroke",
              "signature": [
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                },
                {
                  "type": "boolean",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasUserInterface": {
        "name": "CanvasUserInterface",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "drawFocusIfNeeded": {
              "name": "drawFocusIfNeeded",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "element",
                      "type": "Element"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    },
                    {
                      "name": "element",
                      "type": "Element"
                    }
                  ]
                }
              ]
            },
            "scrollPathIntoView": {
              "name": "scrollPathIntoView",
              "signature": [
                {
                  "type": "void",
                  "param": []
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "path",
                      "type": "Path2D"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasText": {
        "name": "CanvasText",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "fillText": {
              "name": "fillText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "text",
                      "type": "DOMString"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "maxWidth",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "strokeText": {
              "name": "strokeText",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "text",
                      "type": "DOMString"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "maxWidth",
                      "type": "unrestricted double",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "measureText": {
              "name": "measureText",
              "signature": [
                {
                  "type": "TextMetrics",
                  "param": [
                    {
                      "name": "text",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasDrawImage": {
        "name": "CanvasDrawImage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "drawImage": {
              "name": "drawImage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "image",
                      "type": "CanvasImageSource"
                    },
                    {
                      "name": "dx",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dy",
                      "type": "unrestricted double"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "image",
                      "type": "CanvasImageSource"
                    },
                    {
                      "name": "dx",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dy",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dw",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dh",
                      "type": "unrestricted double"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "image",
                      "type": "CanvasImageSource"
                    },
                    {
                      "name": "sx",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "sy",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "sw",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "sh",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dx",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dy",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dw",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "dh",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasImageData": {
        "name": "CanvasImageData",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "createImageData": {
              "name": "createImageData",
              "signature": [
                {
                  "type": "ImageData",
                  "param": [
                    {
                      "name": "sw",
                      "type": "long"
                    },
                    {
                      "name": "sh",
                      "type": "long"
                    }
                  ]
                },
                {
                  "type": "ImageData",
                  "param": [
                    {
                      "name": "imagedata",
                      "type": "ImageData"
                    }
                  ]
                }
              ]
            },
            "getImageData": {
              "name": "getImageData",
              "signature": [
                {
                  "type": "ImageData",
                  "param": [
                    {
                      "name": "sx",
                      "type": "long"
                    },
                    {
                      "name": "sy",
                      "type": "long"
                    },
                    {
                      "name": "sw",
                      "type": "long"
                    },
                    {
                      "name": "sh",
                      "type": "long"
                    }
                  ]
                }
              ]
            },
            "putImageData": {
              "name": "putImageData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "imagedata",
                      "type": "ImageData"
                    },
                    {
                      "name": "dx",
                      "type": "long"
                    },
                    {
                      "name": "dy",
                      "type": "long"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "imagedata",
                      "type": "ImageData"
                    },
                    {
                      "name": "dx",
                      "type": "long"
                    },
                    {
                      "name": "dy",
                      "type": "long"
                    },
                    {
                      "name": "dirtyX",
                      "type": "long"
                    },
                    {
                      "name": "dirtyY",
                      "type": "long"
                    },
                    {
                      "name": "dirtyWidth",
                      "type": "long"
                    },
                    {
                      "name": "dirtyHeight",
                      "type": "long"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasPathDrawingStyles": {
        "name": "CanvasPathDrawingStyles",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "setLineDash": {
              "name": "setLineDash",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "segments",
                      "type": "sequence",
                      "subtype": {
                        "type": "unrestricted double"
                      }
                    }
                  ]
                }
              ]
            },
            "getLineDash": {
              "name": "getLineDash",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "unrestricted double"
                  },
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "lineWidth": {
              "name": "lineWidth",
              "type": "unrestricted double"
            },
            "lineCap": {
              "name": "lineCap",
              "type": "CanvasLineCap"
            },
            "lineJoin": {
              "name": "lineJoin",
              "type": "CanvasLineJoin"
            },
            "miterLimit": {
              "name": "miterLimit",
              "type": "unrestricted double"
            },
            "lineDashOffset": {
              "name": "lineDashOffset",
              "type": "unrestricted double"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasTextDrawingStyles": {
        "name": "CanvasTextDrawingStyles",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "font": {
              "name": "font",
              "type": "DOMString"
            },
            "textAlign": {
              "name": "textAlign",
              "type": "CanvasTextAlign"
            },
            "textBaseline": {
              "name": "textBaseline",
              "type": "CanvasTextBaseline"
            },
            "direction": {
              "name": "direction",
              "type": "CanvasDirection"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "CanvasPath": {
        "name": "CanvasPath",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "closePath": {
              "name": "closePath",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "moveTo": {
              "name": "moveTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "lineTo": {
              "name": "lineTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "quadraticCurveTo": {
              "name": "quadraticCurveTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "cpx",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "cpy",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "bezierCurveTo": {
              "name": "bezierCurveTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "cp1x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "cp1y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "cp2x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "cp2y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "arcTo": {
              "name": "arcTo",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x1",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y1",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "x2",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y2",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "radius",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "rect": {
              "name": "rect",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "w",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "h",
                      "type": "unrestricted double"
                    }
                  ]
                }
              ]
            },
            "arc": {
              "name": "arc",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "radius",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "startAngle",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "endAngle",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "anticlockwise",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "ellipse": {
              "name": "ellipse",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "y",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "radiusX",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "radiusY",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "rotation",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "startAngle",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "endAngle",
                      "type": "unrestricted double"
                    },
                    {
                      "name": "anticlockwise",
                      "type": "boolean",
                      "optional": 1
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "HTMLOrSVGElement": {
        "name": "HTMLOrSVGElement",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "focus": {
              "name": "focus",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "options",
                      "type": "FocusOptions",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "blur": {
              "name": "blur",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "dataset": {
              "name": "dataset",
              "type": "DOMStringMap",
              "read-only": 1
            },
            "nonce": {
              "name": "nonce?",
              "type": "DOMString"
            },
            "tabIndex": {
              "name": "tabIndex",
              "type": "long"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "AnimationFrameProvider": {
        "name": "AnimationFrameProvider",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "requestAnimationFrame": {
              "name": "requestAnimationFrame",
              "signature": [
                {
                  "type": "unsigned long",
                  "param": [
                    {
                      "name": "callback",
                      "type": "FrameRequestCallback"
                    }
                  ]
                }
              ]
            },
            "cancelAnimationFrame": {
              "name": "cancelAnimationFrame",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "unsigned long"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorCookies": {
        "name": "NavigatorCookies",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "cookieEnabled": {
              "name": "cookieEnabled",
              "type": "boolean",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorPlugins": {
        "name": "NavigatorPlugins",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "javaEnabled": {
              "name": "javaEnabled",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "plugins": {
              "name": "plugins",
              "type": "PluginArray",
              "read-only": 1
            },
            "mimeTypes": {
              "name": "mimeTypes",
              "type": "MimeTypeArray",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "DocumentAndElementEventHandlers": {
        "name": "DocumentAndElementEventHandlers",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "oncopy": {
              "name": "oncopy",
              "type": "EventHandler",
              "event-handler": "copy"
            },
            "oncut": {
              "name": "oncut",
              "type": "EventHandler",
              "event-handler": "cut"
            },
            "onpaste": {
              "name": "onpaste",
              "type": "EventHandler",
              "event-handler": "paste"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true,
        "events": {
          "event": [
            {
              "name": "copy",
              "type": "ClipboardEvent"
            },
            {
              "name": "cut",
              "type": "ClipboardEvent"
            },
            {
              "name": "paste",
              "type": "ClipboardEvent"
            }
          ]
        }
      },
      "WindowOrWorkerGlobalScope": {
        "name": "WindowOrWorkerGlobalScope",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "btoa": {
              "name": "btoa",
              "signature": [
                {
                  "type": "DOMString",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "atob": {
              "name": "atob",
              "signature": [
                {
                  "type": "ByteString",
                  "param": [
                    {
                      "name": "data",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "setTimeout": {
              "name": "setTimeout",
              "signature": [
                {
                  "type": "long",
                  "param": [
                    {
                      "name": "handler",
                      "type": "TimerHandler"
                    },
                    {
                      "name": "timeout",
                      "type": "long",
                      "optional": 1
                    },
                    {
                      "name": "arguments",
                      "type": "any",
                      "variadic": 1
                    }
                  ]
                }
              ]
            },
            "clearTimeout": {
              "name": "clearTimeout",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "setInterval": {
              "name": "setInterval",
              "signature": [
                {
                  "type": "long",
                  "param": [
                    {
                      "name": "handler",
                      "type": "TimerHandler"
                    },
                    {
                      "name": "timeout",
                      "type": "long",
                      "optional": 1
                    },
                    {
                      "name": "arguments",
                      "type": "any",
                      "variadic": 1
                    }
                  ]
                }
              ]
            },
            "clearInterval": {
              "name": "clearInterval",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "handle",
                      "type": "long",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "queueMicrotask": {
              "name": "queueMicrotask",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                }
              ]
            },
            "createImageBitmap": {
              "name": "createImageBitmap",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ImageBitmap"
                  },
                  "param": [
                    {
                      "name": "image",
                      "type": "ImageBitmapSource"
                    },
                    {
                      "name": "options",
                      "type": "ImageBitmapOptions",
                      "optional": 1
                    }
                  ]
                },
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "ImageBitmap"
                  },
                  "param": [
                    {
                      "name": "image",
                      "type": "ImageBitmapSource"
                    },
                    {
                      "name": "sx",
                      "type": "long"
                    },
                    {
                      "name": "sy",
                      "type": "long"
                    },
                    {
                      "name": "sw",
                      "type": "long"
                    },
                    {
                      "name": "sh",
                      "type": "long"
                    },
                    {
                      "name": "options",
                      "type": "ImageBitmapOptions",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "fetch": {
              "name": "fetch",
              "signature": [
                {
                  "type": "Promise",
                  "subtype": {
                    "type": "Response"
                  },
                  "param": [
                    {
                      "name": "input",
                      "type": "RequestInfo"
                    },
                    {
                      "name": "init",
                      "type": "RequestInit",
                      "optional": 1
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "origin": {
              "name": "origin",
              "type": "USVString",
              "read-only": 1
            },
            "performance": {
              "name": "performance",
              "type": "Performance",
              "read-only": 1
            },
            "indexedDB": {
              "name": "indexedDB",
              "type": "IDBFactory",
              "read-only": 1
            },
            "caches": {
              "name": "caches",
              "type": "CacheStorage",
              "read-only": 1
            },
            "crypto": {
              "name": "crypto",
              "type": "Crypto",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "ElementContentEditable": {
        "name": "ElementContentEditable",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "contentEditable": {
              "name": "contentEditable",
              "type": "DOMString"
            },
            "isContentEditable": {
              "name": "isContentEditable",
              "type": "boolean",
              "read-only": 1
            },
            "inputMode": {
              "name": "inputMode",
              "type": "DOMString"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorStorage": {
        "name": "NavigatorStorage",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "storage": {
              "name": "storage",
              "type": "StorageManager",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "SVGZoomAndPan": {
        "name": "SVGZoomAndPan",
        "extends": "Object",
        "constants": {
          "constant": {
            "SVG_ZOOMANDPAN_UNKNOWN": {
              "name": "SVG_ZOOMANDPAN_UNKNOWN",
              "type": "unsigned short",
              "value": "0"
            },
            "SVG_ZOOMANDPAN_DISABLE": {
              "name": "SVG_ZOOMANDPAN_DISABLE",
              "type": "unsigned short",
              "value": "1"
            },
            "SVG_ZOOMANDPAN_MAGNIFY": {
              "name": "SVG_ZOOMANDPAN_MAGNIFY",
              "type": "unsigned short",
              "value": "2"
            }
          }
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "zoomAndPan": {
              "name": "zoomAndPan",
              "type": "unsigned short"
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "Animatable": {
        "name": "Animatable",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "animate": {
              "name": "animate",
              "signature": [
                {
                  "type": "Animation",
                  "param": [
                    {
                      "name": "keyframes",
                      "type": "object",
                      "nullable": 1
                    },
                    {
                      "name": "options",
                      "type": [
                        {
                          "type": "unrestricted double"
                        },
                        {
                          "type": "KeyframeAnimationOptions"
                        }
                      ],
                      "optional": 1
                    }
                  ]
                }
              ],
              "override-signatures": [
                "animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation"
              ]
            },
            "getAnimations": {
              "name": "getAnimations",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "Animation"
                  },
                  "param": []
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "NavigatorAutomationInformation": {
        "name": "NavigatorAutomationInformation",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {}
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "webdriver": {
              "name": "webdriver",
              "type": "boolean",
              "read-only": 1
            }
          },
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WebGLRenderingContextBase": {
        "name": "WebGLRenderingContextBase",
        "extends": "Object",
        "constants": {
          "constant": {
            "DEPTH_BUFFER_BIT": {
              "name": "DEPTH_BUFFER_BIT",
              "type": "GLenum",
              "value": "0x00000100"
            },
            "STENCIL_BUFFER_BIT": {
              "name": "STENCIL_BUFFER_BIT",
              "type": "GLenum",
              "value": "0x00000400"
            },
            "COLOR_BUFFER_BIT": {
              "name": "COLOR_BUFFER_BIT",
              "type": "GLenum",
              "value": "0x00004000"
            },
            "POINTS": {
              "name": "POINTS",
              "type": "GLenum",
              "value": "0x0000"
            },
            "LINES": {
              "name": "LINES",
              "type": "GLenum",
              "value": "0x0001"
            },
            "LINE_LOOP": {
              "name": "LINE_LOOP",
              "type": "GLenum",
              "value": "0x0002"
            },
            "LINE_STRIP": {
              "name": "LINE_STRIP",
              "type": "GLenum",
              "value": "0x0003"
            },
            "TRIANGLES": {
              "name": "TRIANGLES",
              "type": "GLenum",
              "value": "0x0004"
            },
            "TRIANGLE_STRIP": {
              "name": "TRIANGLE_STRIP",
              "type": "GLenum",
              "value": "0x0005"
            },
            "TRIANGLE_FAN": {
              "name": "TRIANGLE_FAN",
              "type": "GLenum",
              "value": "0x0006"
            },
            "ZERO": {
              "name": "ZERO",
              "type": "GLenum",
              "value": "0"
            },
            "ONE": {
              "name": "ONE",
              "type": "GLenum",
              "value": "1"
            },
            "SRC_COLOR": {
              "name": "SRC_COLOR",
              "type": "GLenum",
              "value": "0x0300"
            },
            "ONE_MINUS_SRC_COLOR": {
              "name": "ONE_MINUS_SRC_COLOR",
              "type": "GLenum",
              "value": "0x0301"
            },
            "SRC_ALPHA": {
              "name": "SRC_ALPHA",
              "type": "GLenum",
              "value": "0x0302"
            },
            "ONE_MINUS_SRC_ALPHA": {
              "name": "ONE_MINUS_SRC_ALPHA",
              "type": "GLenum",
              "value": "0x0303"
            },
            "DST_ALPHA": {
              "name": "DST_ALPHA",
              "type": "GLenum",
              "value": "0x0304"
            },
            "ONE_MINUS_DST_ALPHA": {
              "name": "ONE_MINUS_DST_ALPHA",
              "type": "GLenum",
              "value": "0x0305"
            },
            "DST_COLOR": {
              "name": "DST_COLOR",
              "type": "GLenum",
              "value": "0x0306"
            },
            "ONE_MINUS_DST_COLOR": {
              "name": "ONE_MINUS_DST_COLOR",
              "type": "GLenum",
              "value": "0x0307"
            },
            "SRC_ALPHA_SATURATE": {
              "name": "SRC_ALPHA_SATURATE",
              "type": "GLenum",
              "value": "0x0308"
            },
            "FUNC_ADD": {
              "name": "FUNC_ADD",
              "type": "GLenum",
              "value": "0x8006"
            },
            "BLEND_EQUATION": {
              "name": "BLEND_EQUATION",
              "type": "GLenum",
              "value": "0x8009"
            },
            "BLEND_EQUATION_RGB": {
              "name": "BLEND_EQUATION_RGB",
              "type": "GLenum",
              "value": "0x8009"
            },
            "BLEND_EQUATION_ALPHA": {
              "name": "BLEND_EQUATION_ALPHA",
              "type": "GLenum",
              "value": "0x883D"
            },
            "FUNC_SUBTRACT": {
              "name": "FUNC_SUBTRACT",
              "type": "GLenum",
              "value": "0x800A"
            },
            "FUNC_REVERSE_SUBTRACT": {
              "name": "FUNC_REVERSE_SUBTRACT",
              "type": "GLenum",
              "value": "0x800B"
            },
            "BLEND_DST_RGB": {
              "name": "BLEND_DST_RGB",
              "type": "GLenum",
              "value": "0x80C8"
            },
            "BLEND_SRC_RGB": {
              "name": "BLEND_SRC_RGB",
              "type": "GLenum",
              "value": "0x80C9"
            },
            "BLEND_DST_ALPHA": {
              "name": "BLEND_DST_ALPHA",
              "type": "GLenum",
              "value": "0x80CA"
            },
            "BLEND_SRC_ALPHA": {
              "name": "BLEND_SRC_ALPHA",
              "type": "GLenum",
              "value": "0x80CB"
            },
            "CONSTANT_COLOR": {
              "name": "CONSTANT_COLOR",
              "type": "GLenum",
              "value": "0x8001"
            },
            "ONE_MINUS_CONSTANT_COLOR": {
              "name": "ONE_MINUS_CONSTANT_COLOR",
              "type": "GLenum",
              "value": "0x8002"
            },
            "CONSTANT_ALPHA": {
              "name": "CONSTANT_ALPHA",
              "type": "GLenum",
              "value": "0x8003"
            },
            "ONE_MINUS_CONSTANT_ALPHA": {
              "name": "ONE_MINUS_CONSTANT_ALPHA",
              "type": "GLenum",
              "value": "0x8004"
            },
            "BLEND_COLOR": {
              "name": "BLEND_COLOR",
              "type": "GLenum",
              "value": "0x8005"
            },
            "ARRAY_BUFFER": {
              "name": "ARRAY_BUFFER",
              "type": "GLenum",
              "value": "0x8892"
            },
            "ELEMENT_ARRAY_BUFFER": {
              "name": "ELEMENT_ARRAY_BUFFER",
              "type": "GLenum",
              "value": "0x8893"
            },
            "ARRAY_BUFFER_BINDING": {
              "name": "ARRAY_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8894"
            },
            "ELEMENT_ARRAY_BUFFER_BINDING": {
              "name": "ELEMENT_ARRAY_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8895"
            },
            "STREAM_DRAW": {
              "name": "STREAM_DRAW",
              "type": "GLenum",
              "value": "0x88E0"
            },
            "STATIC_DRAW": {
              "name": "STATIC_DRAW",
              "type": "GLenum",
              "value": "0x88E4"
            },
            "DYNAMIC_DRAW": {
              "name": "DYNAMIC_DRAW",
              "type": "GLenum",
              "value": "0x88E8"
            },
            "BUFFER_SIZE": {
              "name": "BUFFER_SIZE",
              "type": "GLenum",
              "value": "0x8764"
            },
            "BUFFER_USAGE": {
              "name": "BUFFER_USAGE",
              "type": "GLenum",
              "value": "0x8765"
            },
            "CURRENT_VERTEX_ATTRIB": {
              "name": "CURRENT_VERTEX_ATTRIB",
              "type": "GLenum",
              "value": "0x8626"
            },
            "FRONT": {
              "name": "FRONT",
              "type": "GLenum",
              "value": "0x0404"
            },
            "BACK": {
              "name": "BACK",
              "type": "GLenum",
              "value": "0x0405"
            },
            "FRONT_AND_BACK": {
              "name": "FRONT_AND_BACK",
              "type": "GLenum",
              "value": "0x0408"
            },
            "CULL_FACE": {
              "name": "CULL_FACE",
              "type": "GLenum",
              "value": "0x0B44"
            },
            "BLEND": {
              "name": "BLEND",
              "type": "GLenum",
              "value": "0x0BE2"
            },
            "DITHER": {
              "name": "DITHER",
              "type": "GLenum",
              "value": "0x0BD0"
            },
            "STENCIL_TEST": {
              "name": "STENCIL_TEST",
              "type": "GLenum",
              "value": "0x0B90"
            },
            "DEPTH_TEST": {
              "name": "DEPTH_TEST",
              "type": "GLenum",
              "value": "0x0B71"
            },
            "SCISSOR_TEST": {
              "name": "SCISSOR_TEST",
              "type": "GLenum",
              "value": "0x0C11"
            },
            "POLYGON_OFFSET_FILL": {
              "name": "POLYGON_OFFSET_FILL",
              "type": "GLenum",
              "value": "0x8037"
            },
            "SAMPLE_ALPHA_TO_COVERAGE": {
              "name": "SAMPLE_ALPHA_TO_COVERAGE",
              "type": "GLenum",
              "value": "0x809E"
            },
            "SAMPLE_COVERAGE": {
              "name": "SAMPLE_COVERAGE",
              "type": "GLenum",
              "value": "0x80A0"
            },
            "NO_ERROR": {
              "name": "NO_ERROR",
              "type": "GLenum",
              "value": "0"
            },
            "INVALID_ENUM": {
              "name": "INVALID_ENUM",
              "type": "GLenum",
              "value": "0x0500"
            },
            "INVALID_VALUE": {
              "name": "INVALID_VALUE",
              "type": "GLenum",
              "value": "0x0501"
            },
            "INVALID_OPERATION": {
              "name": "INVALID_OPERATION",
              "type": "GLenum",
              "value": "0x0502"
            },
            "OUT_OF_MEMORY": {
              "name": "OUT_OF_MEMORY",
              "type": "GLenum",
              "value": "0x0505"
            },
            "CW": {
              "name": "CW",
              "type": "GLenum",
              "value": "0x0900"
            },
            "CCW": {
              "name": "CCW",
              "type": "GLenum",
              "value": "0x0901"
            },
            "LINE_WIDTH": {
              "name": "LINE_WIDTH",
              "type": "GLenum",
              "value": "0x0B21"
            },
            "ALIASED_POINT_SIZE_RANGE": {
              "name": "ALIASED_POINT_SIZE_RANGE",
              "type": "GLenum",
              "value": "0x846D"
            },
            "ALIASED_LINE_WIDTH_RANGE": {
              "name": "ALIASED_LINE_WIDTH_RANGE",
              "type": "GLenum",
              "value": "0x846E"
            },
            "CULL_FACE_MODE": {
              "name": "CULL_FACE_MODE",
              "type": "GLenum",
              "value": "0x0B45"
            },
            "FRONT_FACE": {
              "name": "FRONT_FACE",
              "type": "GLenum",
              "value": "0x0B46"
            },
            "DEPTH_RANGE": {
              "name": "DEPTH_RANGE",
              "type": "GLenum",
              "value": "0x0B70"
            },
            "DEPTH_WRITEMASK": {
              "name": "DEPTH_WRITEMASK",
              "type": "GLenum",
              "value": "0x0B72"
            },
            "DEPTH_CLEAR_VALUE": {
              "name": "DEPTH_CLEAR_VALUE",
              "type": "GLenum",
              "value": "0x0B73"
            },
            "DEPTH_FUNC": {
              "name": "DEPTH_FUNC",
              "type": "GLenum",
              "value": "0x0B74"
            },
            "STENCIL_CLEAR_VALUE": {
              "name": "STENCIL_CLEAR_VALUE",
              "type": "GLenum",
              "value": "0x0B91"
            },
            "STENCIL_FUNC": {
              "name": "STENCIL_FUNC",
              "type": "GLenum",
              "value": "0x0B92"
            },
            "STENCIL_FAIL": {
              "name": "STENCIL_FAIL",
              "type": "GLenum",
              "value": "0x0B94"
            },
            "STENCIL_PASS_DEPTH_FAIL": {
              "name": "STENCIL_PASS_DEPTH_FAIL",
              "type": "GLenum",
              "value": "0x0B95"
            },
            "STENCIL_PASS_DEPTH_PASS": {
              "name": "STENCIL_PASS_DEPTH_PASS",
              "type": "GLenum",
              "value": "0x0B96"
            },
            "STENCIL_REF": {
              "name": "STENCIL_REF",
              "type": "GLenum",
              "value": "0x0B97"
            },
            "STENCIL_VALUE_MASK": {
              "name": "STENCIL_VALUE_MASK",
              "type": "GLenum",
              "value": "0x0B93"
            },
            "STENCIL_WRITEMASK": {
              "name": "STENCIL_WRITEMASK",
              "type": "GLenum",
              "value": "0x0B98"
            },
            "STENCIL_BACK_FUNC": {
              "name": "STENCIL_BACK_FUNC",
              "type": "GLenum",
              "value": "0x8800"
            },
            "STENCIL_BACK_FAIL": {
              "name": "STENCIL_BACK_FAIL",
              "type": "GLenum",
              "value": "0x8801"
            },
            "STENCIL_BACK_PASS_DEPTH_FAIL": {
              "name": "STENCIL_BACK_PASS_DEPTH_FAIL",
              "type": "GLenum",
              "value": "0x8802"
            },
            "STENCIL_BACK_PASS_DEPTH_PASS": {
              "name": "STENCIL_BACK_PASS_DEPTH_PASS",
              "type": "GLenum",
              "value": "0x8803"
            },
            "STENCIL_BACK_REF": {
              "name": "STENCIL_BACK_REF",
              "type": "GLenum",
              "value": "0x8CA3"
            },
            "STENCIL_BACK_VALUE_MASK": {
              "name": "STENCIL_BACK_VALUE_MASK",
              "type": "GLenum",
              "value": "0x8CA4"
            },
            "STENCIL_BACK_WRITEMASK": {
              "name": "STENCIL_BACK_WRITEMASK",
              "type": "GLenum",
              "value": "0x8CA5"
            },
            "VIEWPORT": {
              "name": "VIEWPORT",
              "type": "GLenum",
              "value": "0x0BA2"
            },
            "SCISSOR_BOX": {
              "name": "SCISSOR_BOX",
              "type": "GLenum",
              "value": "0x0C10"
            },
            "COLOR_CLEAR_VALUE": {
              "name": "COLOR_CLEAR_VALUE",
              "type": "GLenum",
              "value": "0x0C22"
            },
            "COLOR_WRITEMASK": {
              "name": "COLOR_WRITEMASK",
              "type": "GLenum",
              "value": "0x0C23"
            },
            "UNPACK_ALIGNMENT": {
              "name": "UNPACK_ALIGNMENT",
              "type": "GLenum",
              "value": "0x0CF5"
            },
            "PACK_ALIGNMENT": {
              "name": "PACK_ALIGNMENT",
              "type": "GLenum",
              "value": "0x0D05"
            },
            "MAX_TEXTURE_SIZE": {
              "name": "MAX_TEXTURE_SIZE",
              "type": "GLenum",
              "value": "0x0D33"
            },
            "MAX_VIEWPORT_DIMS": {
              "name": "MAX_VIEWPORT_DIMS",
              "type": "GLenum",
              "value": "0x0D3A"
            },
            "SUBPIXEL_BITS": {
              "name": "SUBPIXEL_BITS",
              "type": "GLenum",
              "value": "0x0D50"
            },
            "RED_BITS": {
              "name": "RED_BITS",
              "type": "GLenum",
              "value": "0x0D52"
            },
            "GREEN_BITS": {
              "name": "GREEN_BITS",
              "type": "GLenum",
              "value": "0x0D53"
            },
            "BLUE_BITS": {
              "name": "BLUE_BITS",
              "type": "GLenum",
              "value": "0x0D54"
            },
            "ALPHA_BITS": {
              "name": "ALPHA_BITS",
              "type": "GLenum",
              "value": "0x0D55"
            },
            "DEPTH_BITS": {
              "name": "DEPTH_BITS",
              "type": "GLenum",
              "value": "0x0D56"
            },
            "STENCIL_BITS": {
              "name": "STENCIL_BITS",
              "type": "GLenum",
              "value": "0x0D57"
            },
            "POLYGON_OFFSET_UNITS": {
              "name": "POLYGON_OFFSET_UNITS",
              "type": "GLenum",
              "value": "0x2A00"
            },
            "POLYGON_OFFSET_FACTOR": {
              "name": "POLYGON_OFFSET_FACTOR",
              "type": "GLenum",
              "value": "0x8038"
            },
            "TEXTURE_BINDING_2D": {
              "name": "TEXTURE_BINDING_2D",
              "type": "GLenum",
              "value": "0x8069"
            },
            "SAMPLE_BUFFERS": {
              "name": "SAMPLE_BUFFERS",
              "type": "GLenum",
              "value": "0x80A8"
            },
            "SAMPLES": {
              "name": "SAMPLES",
              "type": "GLenum",
              "value": "0x80A9"
            },
            "SAMPLE_COVERAGE_VALUE": {
              "name": "SAMPLE_COVERAGE_VALUE",
              "type": "GLenum",
              "value": "0x80AA"
            },
            "SAMPLE_COVERAGE_INVERT": {
              "name": "SAMPLE_COVERAGE_INVERT",
              "type": "GLenum",
              "value": "0x80AB"
            },
            "COMPRESSED_TEXTURE_FORMATS": {
              "name": "COMPRESSED_TEXTURE_FORMATS",
              "type": "GLenum",
              "value": "0x86A3"
            },
            "DONT_CARE": {
              "name": "DONT_CARE",
              "type": "GLenum",
              "value": "0x1100"
            },
            "FASTEST": {
              "name": "FASTEST",
              "type": "GLenum",
              "value": "0x1101"
            },
            "NICEST": {
              "name": "NICEST",
              "type": "GLenum",
              "value": "0x1102"
            },
            "GENERATE_MIPMAP_HINT": {
              "name": "GENERATE_MIPMAP_HINT",
              "type": "GLenum",
              "value": "0x8192"
            },
            "BYTE": {
              "name": "BYTE",
              "type": "GLenum",
              "value": "0x1400"
            },
            "UNSIGNED_BYTE": {
              "name": "UNSIGNED_BYTE",
              "type": "GLenum",
              "value": "0x1401"
            },
            "SHORT": {
              "name": "SHORT",
              "type": "GLenum",
              "value": "0x1402"
            },
            "UNSIGNED_SHORT": {
              "name": "UNSIGNED_SHORT",
              "type": "GLenum",
              "value": "0x1403"
            },
            "INT": {
              "name": "INT",
              "type": "GLenum",
              "value": "0x1404"
            },
            "UNSIGNED_INT": {
              "name": "UNSIGNED_INT",
              "type": "GLenum",
              "value": "0x1405"
            },
            "FLOAT": {
              "name": "FLOAT",
              "type": "GLenum",
              "value": "0x1406"
            },
            "DEPTH_COMPONENT": {
              "name": "DEPTH_COMPONENT",
              "type": "GLenum",
              "value": "0x1902"
            },
            "ALPHA": {
              "name": "ALPHA",
              "type": "GLenum",
              "value": "0x1906"
            },
            "RGB": {
              "name": "RGB",
              "type": "GLenum",
              "value": "0x1907"
            },
            "RGBA": {
              "name": "RGBA",
              "type": "GLenum",
              "value": "0x1908"
            },
            "LUMINANCE": {
              "name": "LUMINANCE",
              "type": "GLenum",
              "value": "0x1909"
            },
            "LUMINANCE_ALPHA": {
              "name": "LUMINANCE_ALPHA",
              "type": "GLenum",
              "value": "0x190A"
            },
            "UNSIGNED_SHORT_4_4_4_4": {
              "name": "UNSIGNED_SHORT_4_4_4_4",
              "type": "GLenum",
              "value": "0x8033"
            },
            "UNSIGNED_SHORT_5_5_5_1": {
              "name": "UNSIGNED_SHORT_5_5_5_1",
              "type": "GLenum",
              "value": "0x8034"
            },
            "UNSIGNED_SHORT_5_6_5": {
              "name": "UNSIGNED_SHORT_5_6_5",
              "type": "GLenum",
              "value": "0x8363"
            },
            "FRAGMENT_SHADER": {
              "name": "FRAGMENT_SHADER",
              "type": "GLenum",
              "value": "0x8B30"
            },
            "VERTEX_SHADER": {
              "name": "VERTEX_SHADER",
              "type": "GLenum",
              "value": "0x8B31"
            },
            "MAX_VERTEX_ATTRIBS": {
              "name": "MAX_VERTEX_ATTRIBS",
              "type": "GLenum",
              "value": "0x8869"
            },
            "MAX_VERTEX_UNIFORM_VECTORS": {
              "name": "MAX_VERTEX_UNIFORM_VECTORS",
              "type": "GLenum",
              "value": "0x8DFB"
            },
            "MAX_VARYING_VECTORS": {
              "name": "MAX_VARYING_VECTORS",
              "type": "GLenum",
              "value": "0x8DFC"
            },
            "MAX_COMBINED_TEXTURE_IMAGE_UNITS": {
              "name": "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
              "type": "GLenum",
              "value": "0x8B4D"
            },
            "MAX_VERTEX_TEXTURE_IMAGE_UNITS": {
              "name": "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
              "type": "GLenum",
              "value": "0x8B4C"
            },
            "MAX_TEXTURE_IMAGE_UNITS": {
              "name": "MAX_TEXTURE_IMAGE_UNITS",
              "type": "GLenum",
              "value": "0x8872"
            },
            "MAX_FRAGMENT_UNIFORM_VECTORS": {
              "name": "MAX_FRAGMENT_UNIFORM_VECTORS",
              "type": "GLenum",
              "value": "0x8DFD"
            },
            "SHADER_TYPE": {
              "name": "SHADER_TYPE",
              "type": "GLenum",
              "value": "0x8B4F"
            },
            "DELETE_STATUS": {
              "name": "DELETE_STATUS",
              "type": "GLenum",
              "value": "0x8B80"
            },
            "LINK_STATUS": {
              "name": "LINK_STATUS",
              "type": "GLenum",
              "value": "0x8B82"
            },
            "VALIDATE_STATUS": {
              "name": "VALIDATE_STATUS",
              "type": "GLenum",
              "value": "0x8B83"
            },
            "ATTACHED_SHADERS": {
              "name": "ATTACHED_SHADERS",
              "type": "GLenum",
              "value": "0x8B85"
            },
            "ACTIVE_UNIFORMS": {
              "name": "ACTIVE_UNIFORMS",
              "type": "GLenum",
              "value": "0x8B86"
            },
            "ACTIVE_ATTRIBUTES": {
              "name": "ACTIVE_ATTRIBUTES",
              "type": "GLenum",
              "value": "0x8B89"
            },
            "SHADING_LANGUAGE_VERSION": {
              "name": "SHADING_LANGUAGE_VERSION",
              "type": "GLenum",
              "value": "0x8B8C"
            },
            "CURRENT_PROGRAM": {
              "name": "CURRENT_PROGRAM",
              "type": "GLenum",
              "value": "0x8B8D"
            },
            "NEVER": {
              "name": "NEVER",
              "type": "GLenum",
              "value": "0x0200"
            },
            "LESS": {
              "name": "LESS",
              "type": "GLenum",
              "value": "0x0201"
            },
            "EQUAL": {
              "name": "EQUAL",
              "type": "GLenum",
              "value": "0x0202"
            },
            "LEQUAL": {
              "name": "LEQUAL",
              "type": "GLenum",
              "value": "0x0203"
            },
            "GREATER": {
              "name": "GREATER",
              "type": "GLenum",
              "value": "0x0204"
            },
            "NOTEQUAL": {
              "name": "NOTEQUAL",
              "type": "GLenum",
              "value": "0x0205"
            },
            "GEQUAL": {
              "name": "GEQUAL",
              "type": "GLenum",
              "value": "0x0206"
            },
            "ALWAYS": {
              "name": "ALWAYS",
              "type": "GLenum",
              "value": "0x0207"
            },
            "KEEP": {
              "name": "KEEP",
              "type": "GLenum",
              "value": "0x1E00"
            },
            "REPLACE": {
              "name": "REPLACE",
              "type": "GLenum",
              "value": "0x1E01"
            },
            "INCR": {
              "name": "INCR",
              "type": "GLenum",
              "value": "0x1E02"
            },
            "DECR": {
              "name": "DECR",
              "type": "GLenum",
              "value": "0x1E03"
            },
            "INVERT": {
              "name": "INVERT",
              "type": "GLenum",
              "value": "0x150A"
            },
            "INCR_WRAP": {
              "name": "INCR_WRAP",
              "type": "GLenum",
              "value": "0x8507"
            },
            "DECR_WRAP": {
              "name": "DECR_WRAP",
              "type": "GLenum",
              "value": "0x8508"
            },
            "VENDOR": {
              "name": "VENDOR",
              "type": "GLenum",
              "value": "0x1F00"
            },
            "RENDERER": {
              "name": "RENDERER",
              "type": "GLenum",
              "value": "0x1F01"
            },
            "VERSION": {
              "name": "VERSION",
              "type": "GLenum",
              "value": "0x1F02"
            },
            "NEAREST": {
              "name": "NEAREST",
              "type": "GLenum",
              "value": "0x2600"
            },
            "LINEAR": {
              "name": "LINEAR",
              "type": "GLenum",
              "value": "0x2601"
            },
            "NEAREST_MIPMAP_NEAREST": {
              "name": "NEAREST_MIPMAP_NEAREST",
              "type": "GLenum",
              "value": "0x2700"
            },
            "LINEAR_MIPMAP_NEAREST": {
              "name": "LINEAR_MIPMAP_NEAREST",
              "type": "GLenum",
              "value": "0x2701"
            },
            "NEAREST_MIPMAP_LINEAR": {
              "name": "NEAREST_MIPMAP_LINEAR",
              "type": "GLenum",
              "value": "0x2702"
            },
            "LINEAR_MIPMAP_LINEAR": {
              "name": "LINEAR_MIPMAP_LINEAR",
              "type": "GLenum",
              "value": "0x2703"
            },
            "TEXTURE_MAG_FILTER": {
              "name": "TEXTURE_MAG_FILTER",
              "type": "GLenum",
              "value": "0x2800"
            },
            "TEXTURE_MIN_FILTER": {
              "name": "TEXTURE_MIN_FILTER",
              "type": "GLenum",
              "value": "0x2801"
            },
            "TEXTURE_WRAP_S": {
              "name": "TEXTURE_WRAP_S",
              "type": "GLenum",
              "value": "0x2802"
            },
            "TEXTURE_WRAP_T": {
              "name": "TEXTURE_WRAP_T",
              "type": "GLenum",
              "value": "0x2803"
            },
            "TEXTURE_2D": {
              "name": "TEXTURE_2D",
              "type": "GLenum",
              "value": "0x0DE1"
            },
            "TEXTURE": {
              "name": "TEXTURE",
              "type": "GLenum",
              "value": "0x1702"
            },
            "TEXTURE_CUBE_MAP": {
              "name": "TEXTURE_CUBE_MAP",
              "type": "GLenum",
              "value": "0x8513"
            },
            "TEXTURE_BINDING_CUBE_MAP": {
              "name": "TEXTURE_BINDING_CUBE_MAP",
              "type": "GLenum",
              "value": "0x8514"
            },
            "TEXTURE_CUBE_MAP_POSITIVE_X": {
              "name": "TEXTURE_CUBE_MAP_POSITIVE_X",
              "type": "GLenum",
              "value": "0x8515"
            },
            "TEXTURE_CUBE_MAP_NEGATIVE_X": {
              "name": "TEXTURE_CUBE_MAP_NEGATIVE_X",
              "type": "GLenum",
              "value": "0x8516"
            },
            "TEXTURE_CUBE_MAP_POSITIVE_Y": {
              "name": "TEXTURE_CUBE_MAP_POSITIVE_Y",
              "type": "GLenum",
              "value": "0x8517"
            },
            "TEXTURE_CUBE_MAP_NEGATIVE_Y": {
              "name": "TEXTURE_CUBE_MAP_NEGATIVE_Y",
              "type": "GLenum",
              "value": "0x8518"
            },
            "TEXTURE_CUBE_MAP_POSITIVE_Z": {
              "name": "TEXTURE_CUBE_MAP_POSITIVE_Z",
              "type": "GLenum",
              "value": "0x8519"
            },
            "TEXTURE_CUBE_MAP_NEGATIVE_Z": {
              "name": "TEXTURE_CUBE_MAP_NEGATIVE_Z",
              "type": "GLenum",
              "value": "0x851A"
            },
            "MAX_CUBE_MAP_TEXTURE_SIZE": {
              "name": "MAX_CUBE_MAP_TEXTURE_SIZE",
              "type": "GLenum",
              "value": "0x851C"
            },
            "TEXTURE0": {
              "name": "TEXTURE0",
              "type": "GLenum",
              "value": "0x84C0"
            },
            "TEXTURE1": {
              "name": "TEXTURE1",
              "type": "GLenum",
              "value": "0x84C1"
            },
            "TEXTURE2": {
              "name": "TEXTURE2",
              "type": "GLenum",
              "value": "0x84C2"
            },
            "TEXTURE3": {
              "name": "TEXTURE3",
              "type": "GLenum",
              "value": "0x84C3"
            },
            "TEXTURE4": {
              "name": "TEXTURE4",
              "type": "GLenum",
              "value": "0x84C4"
            },
            "TEXTURE5": {
              "name": "TEXTURE5",
              "type": "GLenum",
              "value": "0x84C5"
            },
            "TEXTURE6": {
              "name": "TEXTURE6",
              "type": "GLenum",
              "value": "0x84C6"
            },
            "TEXTURE7": {
              "name": "TEXTURE7",
              "type": "GLenum",
              "value": "0x84C7"
            },
            "TEXTURE8": {
              "name": "TEXTURE8",
              "type": "GLenum",
              "value": "0x84C8"
            },
            "TEXTURE9": {
              "name": "TEXTURE9",
              "type": "GLenum",
              "value": "0x84C9"
            },
            "TEXTURE10": {
              "name": "TEXTURE10",
              "type": "GLenum",
              "value": "0x84CA"
            },
            "TEXTURE11": {
              "name": "TEXTURE11",
              "type": "GLenum",
              "value": "0x84CB"
            },
            "TEXTURE12": {
              "name": "TEXTURE12",
              "type": "GLenum",
              "value": "0x84CC"
            },
            "TEXTURE13": {
              "name": "TEXTURE13",
              "type": "GLenum",
              "value": "0x84CD"
            },
            "TEXTURE14": {
              "name": "TEXTURE14",
              "type": "GLenum",
              "value": "0x84CE"
            },
            "TEXTURE15": {
              "name": "TEXTURE15",
              "type": "GLenum",
              "value": "0x84CF"
            },
            "TEXTURE16": {
              "name": "TEXTURE16",
              "type": "GLenum",
              "value": "0x84D0"
            },
            "TEXTURE17": {
              "name": "TEXTURE17",
              "type": "GLenum",
              "value": "0x84D1"
            },
            "TEXTURE18": {
              "name": "TEXTURE18",
              "type": "GLenum",
              "value": "0x84D2"
            },
            "TEXTURE19": {
              "name": "TEXTURE19",
              "type": "GLenum",
              "value": "0x84D3"
            },
            "TEXTURE20": {
              "name": "TEXTURE20",
              "type": "GLenum",
              "value": "0x84D4"
            },
            "TEXTURE21": {
              "name": "TEXTURE21",
              "type": "GLenum",
              "value": "0x84D5"
            },
            "TEXTURE22": {
              "name": "TEXTURE22",
              "type": "GLenum",
              "value": "0x84D6"
            },
            "TEXTURE23": {
              "name": "TEXTURE23",
              "type": "GLenum",
              "value": "0x84D7"
            },
            "TEXTURE24": {
              "name": "TEXTURE24",
              "type": "GLenum",
              "value": "0x84D8"
            },
            "TEXTURE25": {
              "name": "TEXTURE25",
              "type": "GLenum",
              "value": "0x84D9"
            },
            "TEXTURE26": {
              "name": "TEXTURE26",
              "type": "GLenum",
              "value": "0x84DA"
            },
            "TEXTURE27": {
              "name": "TEXTURE27",
              "type": "GLenum",
              "value": "0x84DB"
            },
            "TEXTURE28": {
              "name": "TEXTURE28",
              "type": "GLenum",
              "value": "0x84DC"
            },
            "TEXTURE29": {
              "name": "TEXTURE29",
              "type": "GLenum",
              "value": "0x84DD"
            },
            "TEXTURE30": {
              "name": "TEXTURE30",
              "type": "GLenum",
              "value": "0x84DE"
            },
            "TEXTURE31": {
              "name": "TEXTURE31",
              "type": "GLenum",
              "value": "0x84DF"
            },
            "ACTIVE_TEXTURE": {
              "name": "ACTIVE_TEXTURE",
              "type": "GLenum",
              "value": "0x84E0"
            },
            "REPEAT": {
              "name": "REPEAT",
              "type": "GLenum",
              "value": "0x2901"
            },
            "CLAMP_TO_EDGE": {
              "name": "CLAMP_TO_EDGE",
              "type": "GLenum",
              "value": "0x812F"
            },
            "MIRRORED_REPEAT": {
              "name": "MIRRORED_REPEAT",
              "type": "GLenum",
              "value": "0x8370"
            },
            "FLOAT_VEC2": {
              "name": "FLOAT_VEC2",
              "type": "GLenum",
              "value": "0x8B50"
            },
            "FLOAT_VEC3": {
              "name": "FLOAT_VEC3",
              "type": "GLenum",
              "value": "0x8B51"
            },
            "FLOAT_VEC4": {
              "name": "FLOAT_VEC4",
              "type": "GLenum",
              "value": "0x8B52"
            },
            "INT_VEC2": {
              "name": "INT_VEC2",
              "type": "GLenum",
              "value": "0x8B53"
            },
            "INT_VEC3": {
              "name": "INT_VEC3",
              "type": "GLenum",
              "value": "0x8B54"
            },
            "INT_VEC4": {
              "name": "INT_VEC4",
              "type": "GLenum",
              "value": "0x8B55"
            },
            "BOOL": {
              "name": "BOOL",
              "type": "GLenum",
              "value": "0x8B56"
            },
            "BOOL_VEC2": {
              "name": "BOOL_VEC2",
              "type": "GLenum",
              "value": "0x8B57"
            },
            "BOOL_VEC3": {
              "name": "BOOL_VEC3",
              "type": "GLenum",
              "value": "0x8B58"
            },
            "BOOL_VEC4": {
              "name": "BOOL_VEC4",
              "type": "GLenum",
              "value": "0x8B59"
            },
            "FLOAT_MAT2": {
              "name": "FLOAT_MAT2",
              "type": "GLenum",
              "value": "0x8B5A"
            },
            "FLOAT_MAT3": {
              "name": "FLOAT_MAT3",
              "type": "GLenum",
              "value": "0x8B5B"
            },
            "FLOAT_MAT4": {
              "name": "FLOAT_MAT4",
              "type": "GLenum",
              "value": "0x8B5C"
            },
            "SAMPLER_2D": {
              "name": "SAMPLER_2D",
              "type": "GLenum",
              "value": "0x8B5E"
            },
            "SAMPLER_CUBE": {
              "name": "SAMPLER_CUBE",
              "type": "GLenum",
              "value": "0x8B60"
            },
            "VERTEX_ATTRIB_ARRAY_ENABLED": {
              "name": "VERTEX_ATTRIB_ARRAY_ENABLED",
              "type": "GLenum",
              "value": "0x8622"
            },
            "VERTEX_ATTRIB_ARRAY_SIZE": {
              "name": "VERTEX_ATTRIB_ARRAY_SIZE",
              "type": "GLenum",
              "value": "0x8623"
            },
            "VERTEX_ATTRIB_ARRAY_STRIDE": {
              "name": "VERTEX_ATTRIB_ARRAY_STRIDE",
              "type": "GLenum",
              "value": "0x8624"
            },
            "VERTEX_ATTRIB_ARRAY_TYPE": {
              "name": "VERTEX_ATTRIB_ARRAY_TYPE",
              "type": "GLenum",
              "value": "0x8625"
            },
            "VERTEX_ATTRIB_ARRAY_NORMALIZED": {
              "name": "VERTEX_ATTRIB_ARRAY_NORMALIZED",
              "type": "GLenum",
              "value": "0x886A"
            },
            "VERTEX_ATTRIB_ARRAY_POINTER": {
              "name": "VERTEX_ATTRIB_ARRAY_POINTER",
              "type": "GLenum",
              "value": "0x8645"
            },
            "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": {
              "name": "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x889F"
            },
            "IMPLEMENTATION_COLOR_READ_TYPE": {
              "name": "IMPLEMENTATION_COLOR_READ_TYPE",
              "type": "GLenum",
              "value": "0x8B9A"
            },
            "IMPLEMENTATION_COLOR_READ_FORMAT": {
              "name": "IMPLEMENTATION_COLOR_READ_FORMAT",
              "type": "GLenum",
              "value": "0x8B9B"
            },
            "COMPILE_STATUS": {
              "name": "COMPILE_STATUS",
              "type": "GLenum",
              "value": "0x8B81"
            },
            "LOW_FLOAT": {
              "name": "LOW_FLOAT",
              "type": "GLenum",
              "value": "0x8DF0"
            },
            "MEDIUM_FLOAT": {
              "name": "MEDIUM_FLOAT",
              "type": "GLenum",
              "value": "0x8DF1"
            },
            "HIGH_FLOAT": {
              "name": "HIGH_FLOAT",
              "type": "GLenum",
              "value": "0x8DF2"
            },
            "LOW_INT": {
              "name": "LOW_INT",
              "type": "GLenum",
              "value": "0x8DF3"
            },
            "MEDIUM_INT": {
              "name": "MEDIUM_INT",
              "type": "GLenum",
              "value": "0x8DF4"
            },
            "HIGH_INT": {
              "name": "HIGH_INT",
              "type": "GLenum",
              "value": "0x8DF5"
            },
            "FRAMEBUFFER": {
              "name": "FRAMEBUFFER",
              "type": "GLenum",
              "value": "0x8D40"
            },
            "RENDERBUFFER": {
              "name": "RENDERBUFFER",
              "type": "GLenum",
              "value": "0x8D41"
            },
            "RGBA4": {
              "name": "RGBA4",
              "type": "GLenum",
              "value": "0x8056"
            },
            "RGB5_A1": {
              "name": "RGB5_A1",
              "type": "GLenum",
              "value": "0x8057"
            },
            "RGB565": {
              "name": "RGB565",
              "type": "GLenum",
              "value": "0x8D62"
            },
            "DEPTH_COMPONENT16": {
              "name": "DEPTH_COMPONENT16",
              "type": "GLenum",
              "value": "0x81A5"
            },
            "STENCIL_INDEX8": {
              "name": "STENCIL_INDEX8",
              "type": "GLenum",
              "value": "0x8D48"
            },
            "DEPTH_STENCIL": {
              "name": "DEPTH_STENCIL",
              "type": "GLenum",
              "value": "0x84F9"
            },
            "RENDERBUFFER_WIDTH": {
              "name": "RENDERBUFFER_WIDTH",
              "type": "GLenum",
              "value": "0x8D42"
            },
            "RENDERBUFFER_HEIGHT": {
              "name": "RENDERBUFFER_HEIGHT",
              "type": "GLenum",
              "value": "0x8D43"
            },
            "RENDERBUFFER_INTERNAL_FORMAT": {
              "name": "RENDERBUFFER_INTERNAL_FORMAT",
              "type": "GLenum",
              "value": "0x8D44"
            },
            "RENDERBUFFER_RED_SIZE": {
              "name": "RENDERBUFFER_RED_SIZE",
              "type": "GLenum",
              "value": "0x8D50"
            },
            "RENDERBUFFER_GREEN_SIZE": {
              "name": "RENDERBUFFER_GREEN_SIZE",
              "type": "GLenum",
              "value": "0x8D51"
            },
            "RENDERBUFFER_BLUE_SIZE": {
              "name": "RENDERBUFFER_BLUE_SIZE",
              "type": "GLenum",
              "value": "0x8D52"
            },
            "RENDERBUFFER_ALPHA_SIZE": {
              "name": "RENDERBUFFER_ALPHA_SIZE",
              "type": "GLenum",
              "value": "0x8D53"
            },
            "RENDERBUFFER_DEPTH_SIZE": {
              "name": "RENDERBUFFER_DEPTH_SIZE",
              "type": "GLenum",
              "value": "0x8D54"
            },
            "RENDERBUFFER_STENCIL_SIZE": {
              "name": "RENDERBUFFER_STENCIL_SIZE",
              "type": "GLenum",
              "value": "0x8D55"
            },
            "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": {
              "name": "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
              "type": "GLenum",
              "value": "0x8CD0"
            },
            "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": {
              "name": "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
              "type": "GLenum",
              "value": "0x8CD1"
            },
            "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": {
              "name": "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
              "type": "GLenum",
              "value": "0x8CD2"
            },
            "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": {
              "name": "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
              "type": "GLenum",
              "value": "0x8CD3"
            },
            "COLOR_ATTACHMENT0": {
              "name": "COLOR_ATTACHMENT0",
              "type": "GLenum",
              "value": "0x8CE0"
            },
            "DEPTH_ATTACHMENT": {
              "name": "DEPTH_ATTACHMENT",
              "type": "GLenum",
              "value": "0x8D00"
            },
            "STENCIL_ATTACHMENT": {
              "name": "STENCIL_ATTACHMENT",
              "type": "GLenum",
              "value": "0x8D20"
            },
            "DEPTH_STENCIL_ATTACHMENT": {
              "name": "DEPTH_STENCIL_ATTACHMENT",
              "type": "GLenum",
              "value": "0x821A"
            },
            "NONE": {
              "name": "NONE",
              "type": "GLenum",
              "value": "0"
            },
            "FRAMEBUFFER_COMPLETE": {
              "name": "FRAMEBUFFER_COMPLETE",
              "type": "GLenum",
              "value": "0x8CD5"
            },
            "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": {
              "name": "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
              "type": "GLenum",
              "value": "0x8CD6"
            },
            "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": {
              "name": "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
              "type": "GLenum",
              "value": "0x8CD7"
            },
            "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": {
              "name": "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
              "type": "GLenum",
              "value": "0x8CD9"
            },
            "FRAMEBUFFER_UNSUPPORTED": {
              "name": "FRAMEBUFFER_UNSUPPORTED",
              "type": "GLenum",
              "value": "0x8CDD"
            },
            "FRAMEBUFFER_BINDING": {
              "name": "FRAMEBUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8CA6"
            },
            "RENDERBUFFER_BINDING": {
              "name": "RENDERBUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8CA7"
            },
            "MAX_RENDERBUFFER_SIZE": {
              "name": "MAX_RENDERBUFFER_SIZE",
              "type": "GLenum",
              "value": "0x84E8"
            },
            "INVALID_FRAMEBUFFER_OPERATION": {
              "name": "INVALID_FRAMEBUFFER_OPERATION",
              "type": "GLenum",
              "value": "0x0506"
            },
            "UNPACK_FLIP_Y_WEBGL": {
              "name": "UNPACK_FLIP_Y_WEBGL",
              "type": "GLenum",
              "value": "0x9240"
            },
            "UNPACK_PREMULTIPLY_ALPHA_WEBGL": {
              "name": "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
              "type": "GLenum",
              "value": "0x9241"
            },
            "CONTEXT_LOST_WEBGL": {
              "name": "CONTEXT_LOST_WEBGL",
              "type": "GLenum",
              "value": "0x9242"
            },
            "UNPACK_COLORSPACE_CONVERSION_WEBGL": {
              "name": "UNPACK_COLORSPACE_CONVERSION_WEBGL",
              "type": "GLenum",
              "value": "0x9243"
            },
            "BROWSER_DEFAULT_WEBGL": {
              "name": "BROWSER_DEFAULT_WEBGL",
              "type": "GLenum",
              "value": "0x9244"
            }
          }
        },
        "methods": {
          "method": {
            "getContextAttributes": {
              "name": "getContextAttributes",
              "signature": [
                {
                  "type": "WebGLContextAttributes",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "isContextLost": {
              "name": "isContextLost",
              "signature": [
                {
                  "type": "boolean",
                  "param": []
                }
              ]
            },
            "getSupportedExtensions": {
              "name": "getSupportedExtensions",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "DOMString"
                  },
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "getExtension": {
              "name": "getExtension",
              "signature": [
                {
                  "type": "object",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ],
              "override-signatures": [
                "getExtension(extensionName: \"EXT_blend_minmax\"): EXT_blend_minmax | null",
                "getExtension(extensionName: \"EXT_texture_filter_anisotropic\"): EXT_texture_filter_anisotropic | null",
                "getExtension(extensionName: \"EXT_frag_depth\"): EXT_frag_depth | null",
                "getExtension(extensionName: \"EXT_shader_texture_lod\"): EXT_shader_texture_lod | null",
                "getExtension(extensionName: \"EXT_sRGB\"): EXT_sRGB | null",
                "getExtension(extensionName: \"OES_vertex_array_object\"): OES_vertex_array_object | null",
                "getExtension(extensionName: \"WEBGL_color_buffer_float\"): WEBGL_color_buffer_float | null",
                "getExtension(extensionName: \"WEBGL_compressed_texture_astc\"): WEBGL_compressed_texture_astc | null",
                "getExtension(extensionName: \"WEBGL_compressed_texture_s3tc_srgb\"): WEBGL_compressed_texture_s3tc_srgb | null",
                "getExtension(extensionName: \"WEBGL_debug_shaders\"): WEBGL_debug_shaders | null",
                "getExtension(extensionName: \"WEBGL_draw_buffers\"): WEBGL_draw_buffers | null",
                "getExtension(extensionName: \"WEBGL_lose_context\"): WEBGL_lose_context | null",
                "getExtension(extensionName: \"WEBGL_depth_texture\"): WEBGL_depth_texture | null",
                "getExtension(extensionName: \"WEBGL_debug_renderer_info\"): WEBGL_debug_renderer_info | null",
                "getExtension(extensionName: \"WEBGL_compressed_texture_s3tc\"): WEBGL_compressed_texture_s3tc | null",
                "getExtension(extensionName: \"OES_texture_half_float_linear\"): OES_texture_half_float_linear | null",
                "getExtension(extensionName: \"OES_texture_half_float\"): OES_texture_half_float | null",
                "getExtension(extensionName: \"OES_texture_float_linear\"): OES_texture_float_linear | null",
                "getExtension(extensionName: \"OES_texture_float\"): OES_texture_float | null",
                "getExtension(extensionName: \"OES_standard_derivatives\"): OES_standard_derivatives | null",
                "getExtension(extensionName: \"OES_element_index_uint\"): OES_element_index_uint | null",
                "getExtension(extensionName: \"ANGLE_instanced_arrays\"): ANGLE_instanced_arrays | null",
                "getExtension(extensionName: string): any"
              ]
            },
            "activeTexture": {
              "name": "activeTexture",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "texture",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "attachShader": {
              "name": "attachShader",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ]
            },
            "bindAttribLocation": {
              "name": "bindAttribLocation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "bindBuffer": {
              "name": "bindBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "buffer",
                      "type": "WebGLBuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindFramebuffer": {
              "name": "bindFramebuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "framebuffer",
                      "type": "WebGLFramebuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindRenderbuffer": {
              "name": "bindRenderbuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "renderbuffer",
                      "type": "WebGLRenderbuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindTexture": {
              "name": "bindTexture",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "texture",
                      "type": "WebGLTexture",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "blendColor": {
              "name": "blendColor",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "red",
                      "type": "GLclampf"
                    },
                    {
                      "name": "green",
                      "type": "GLclampf"
                    },
                    {
                      "name": "blue",
                      "type": "GLclampf"
                    },
                    {
                      "name": "alpha",
                      "type": "GLclampf"
                    }
                  ]
                }
              ]
            },
            "blendEquation": {
              "name": "blendEquation",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "blendEquationSeparate": {
              "name": "blendEquationSeparate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "modeRGB",
                      "type": "GLenum"
                    },
                    {
                      "name": "modeAlpha",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "blendFunc": {
              "name": "blendFunc",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sfactor",
                      "type": "GLenum"
                    },
                    {
                      "name": "dfactor",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "blendFuncSeparate": {
              "name": "blendFuncSeparate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "srcRGB",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstRGB",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcAlpha",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstAlpha",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "checkFramebufferStatus": {
              "name": "checkFramebufferStatus",
              "signature": [
                {
                  "type": "GLenum",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "clear": {
              "name": "clear",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mask",
                      "type": "GLbitfield"
                    }
                  ]
                }
              ]
            },
            "clearColor": {
              "name": "clearColor",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "red",
                      "type": "GLclampf"
                    },
                    {
                      "name": "green",
                      "type": "GLclampf"
                    },
                    {
                      "name": "blue",
                      "type": "GLclampf"
                    },
                    {
                      "name": "alpha",
                      "type": "GLclampf"
                    }
                  ]
                }
              ]
            },
            "clearDepth": {
              "name": "clearDepth",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "depth",
                      "type": "GLclampf"
                    }
                  ]
                }
              ]
            },
            "clearStencil": {
              "name": "clearStencil",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "s",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "colorMask": {
              "name": "colorMask",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "red",
                      "type": "GLboolean"
                    },
                    {
                      "name": "green",
                      "type": "GLboolean"
                    },
                    {
                      "name": "blue",
                      "type": "GLboolean"
                    },
                    {
                      "name": "alpha",
                      "type": "GLboolean"
                    }
                  ]
                }
              ]
            },
            "compileShader": {
              "name": "compileShader",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ]
            },
            "copyTexImage2D": {
              "name": "copyTexImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "copyTexSubImage2D": {
              "name": "copyTexSubImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "createBuffer": {
              "name": "createBuffer",
              "signature": [
                {
                  "type": "WebGLBuffer",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "createFramebuffer": {
              "name": "createFramebuffer",
              "signature": [
                {
                  "type": "WebGLFramebuffer",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "createProgram": {
              "name": "createProgram",
              "signature": [
                {
                  "type": "WebGLProgram",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "createRenderbuffer": {
              "name": "createRenderbuffer",
              "signature": [
                {
                  "type": "WebGLRenderbuffer",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "createShader": {
              "name": "createShader",
              "signature": [
                {
                  "type": "WebGLShader",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "type",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "createTexture": {
              "name": "createTexture",
              "signature": [
                {
                  "type": "WebGLTexture",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "cullFace": {
              "name": "cullFace",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "deleteBuffer": {
              "name": "deleteBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "WebGLBuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteFramebuffer": {
              "name": "deleteFramebuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "framebuffer",
                      "type": "WebGLFramebuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteProgram": {
              "name": "deleteProgram",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteRenderbuffer": {
              "name": "deleteRenderbuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "renderbuffer",
                      "type": "WebGLRenderbuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteShader": {
              "name": "deleteShader",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteTexture": {
              "name": "deleteTexture",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "texture",
                      "type": "WebGLTexture",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "depthFunc": {
              "name": "depthFunc",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "func",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "depthMask": {
              "name": "depthMask",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "flag",
                      "type": "GLboolean"
                    }
                  ]
                }
              ]
            },
            "depthRange": {
              "name": "depthRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "zNear",
                      "type": "GLclampf"
                    },
                    {
                      "name": "zFar",
                      "type": "GLclampf"
                    }
                  ]
                }
              ]
            },
            "detachShader": {
              "name": "detachShader",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ]
            },
            "disable": {
              "name": "disable",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "cap",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "disableVertexAttribArray": {
              "name": "disableVertexAttribArray",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "drawArrays": {
              "name": "drawArrays",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "first",
                      "type": "GLint"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "drawElements": {
              "name": "drawElements",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                }
              ]
            },
            "enable": {
              "name": "enable",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "cap",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "enableVertexAttribArray": {
              "name": "enableVertexAttribArray",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "finish": {
              "name": "finish",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "flush": {
              "name": "flush",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "framebufferRenderbuffer": {
              "name": "framebufferRenderbuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachment",
                      "type": "GLenum"
                    },
                    {
                      "name": "renderbuffertarget",
                      "type": "GLenum"
                    },
                    {
                      "name": "renderbuffer",
                      "type": "WebGLRenderbuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "framebufferTexture2D": {
              "name": "framebufferTexture2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachment",
                      "type": "GLenum"
                    },
                    {
                      "name": "textarget",
                      "type": "GLenum"
                    },
                    {
                      "name": "texture",
                      "type": "WebGLTexture",
                      "nullable": 1
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "frontFace": {
              "name": "frontFace",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "generateMipmap": {
              "name": "generateMipmap",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getActiveAttrib": {
              "name": "getActiveAttrib",
              "signature": [
                {
                  "type": "WebGLActiveInfo",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "getActiveUniform": {
              "name": "getActiveUniform",
              "signature": [
                {
                  "type": "WebGLActiveInfo",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "getAttachedShaders": {
              "name": "getAttachedShaders",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "WebGLShader"
                  },
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    }
                  ]
                }
              ]
            },
            "getAttribLocation": {
              "name": "getAttribLocation",
              "signature": [
                {
                  "type": "GLint",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "getBufferParameter": {
              "name": "getBufferParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getParameter": {
              "name": "getParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getError": {
              "name": "getError",
              "signature": [
                {
                  "type": "GLenum",
                  "param": []
                }
              ]
            },
            "getFramebufferAttachmentParameter": {
              "name": "getFramebufferAttachmentParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachment",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getProgramParameter": {
              "name": "getProgramParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getProgramInfoLog": {
              "name": "getProgramInfoLog",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    }
                  ]
                }
              ]
            },
            "getRenderbufferParameter": {
              "name": "getRenderbufferParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getShaderParameter": {
              "name": "getShaderParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getShaderPrecisionFormat": {
              "name": "getShaderPrecisionFormat",
              "signature": [
                {
                  "type": "WebGLShaderPrecisionFormat",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "shadertype",
                      "type": "GLenum"
                    },
                    {
                      "name": "precisiontype",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getShaderInfoLog": {
              "name": "getShaderInfoLog",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ]
            },
            "getShaderSource": {
              "name": "getShaderSource",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    }
                  ]
                }
              ]
            },
            "getTexParameter": {
              "name": "getTexParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getUniform": {
              "name": "getUniform",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation"
                    }
                  ]
                }
              ]
            },
            "getUniformLocation": {
              "name": "getUniformLocation",
              "signature": [
                {
                  "type": "WebGLUniformLocation",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "getVertexAttrib": {
              "name": "getVertexAttrib",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getVertexAttribOffset": {
              "name": "getVertexAttribOffset",
              "signature": [
                {
                  "type": "GLintptr",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "hint": {
              "name": "hint",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "mode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "isBuffer": {
              "name": "isBuffer",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "WebGLBuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isEnabled": {
              "name": "isEnabled",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "cap",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "isFramebuffer": {
              "name": "isFramebuffer",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "framebuffer",
                      "type": "WebGLFramebuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isProgram": {
              "name": "isProgram",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isRenderbuffer": {
              "name": "isRenderbuffer",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "renderbuffer",
                      "type": "WebGLRenderbuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isShader": {
              "name": "isShader",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isTexture": {
              "name": "isTexture",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "texture",
                      "type": "WebGLTexture",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "lineWidth": {
              "name": "lineWidth",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "width",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "linkProgram": {
              "name": "linkProgram",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    }
                  ]
                }
              ]
            },
            "pixelStorei": {
              "name": "pixelStorei",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "pname",
                      "type": "GLenum"
                    },
                    {
                      "name": "param",
                      "type": "GLint"
                    }
                  ]
                }
              ],
              "override-signatures": [
                "pixelStorei(pname: GLenum, param: GLint | GLboolean): void"
              ]
            },
            "polygonOffset": {
              "name": "polygonOffset",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "factor",
                      "type": "GLfloat"
                    },
                    {
                      "name": "units",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "renderbufferStorage": {
              "name": "renderbufferStorage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "sampleCoverage": {
              "name": "sampleCoverage",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "value",
                      "type": "GLclampf"
                    },
                    {
                      "name": "invert",
                      "type": "GLboolean"
                    }
                  ]
                }
              ]
            },
            "scissor": {
              "name": "scissor",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "shaderSource": {
              "name": "shaderSource",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "shader",
                      "type": "WebGLShader"
                    },
                    {
                      "name": "source",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "stencilFunc": {
              "name": "stencilFunc",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "func",
                      "type": "GLenum"
                    },
                    {
                      "name": "ref",
                      "type": "GLint"
                    },
                    {
                      "name": "mask",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "stencilFuncSeparate": {
              "name": "stencilFuncSeparate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "face",
                      "type": "GLenum"
                    },
                    {
                      "name": "func",
                      "type": "GLenum"
                    },
                    {
                      "name": "ref",
                      "type": "GLint"
                    },
                    {
                      "name": "mask",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "stencilMask": {
              "name": "stencilMask",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mask",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "stencilMaskSeparate": {
              "name": "stencilMaskSeparate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "face",
                      "type": "GLenum"
                    },
                    {
                      "name": "mask",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "stencilOp": {
              "name": "stencilOp",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "fail",
                      "type": "GLenum"
                    },
                    {
                      "name": "zfail",
                      "type": "GLenum"
                    },
                    {
                      "name": "zpass",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "stencilOpSeparate": {
              "name": "stencilOpSeparate",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "face",
                      "type": "GLenum"
                    },
                    {
                      "name": "fail",
                      "type": "GLenum"
                    },
                    {
                      "name": "zfail",
                      "type": "GLenum"
                    },
                    {
                      "name": "zpass",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "texParameterf": {
              "name": "texParameterf",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    },
                    {
                      "name": "param",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "texParameteri": {
              "name": "texParameteri",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    },
                    {
                      "name": "param",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "uniform1f": {
              "name": "uniform1f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "uniform2f": {
              "name": "uniform2f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "uniform3f": {
              "name": "uniform3f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    },
                    {
                      "name": "z",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "uniform4f": {
              "name": "uniform4f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    },
                    {
                      "name": "z",
                      "type": "GLfloat"
                    },
                    {
                      "name": "w",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "uniform1i": {
              "name": "uniform1i",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "uniform2i": {
              "name": "uniform2i",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "uniform3i": {
              "name": "uniform3i",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "z",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "uniform4i": {
              "name": "uniform4i",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "z",
                      "type": "GLint"
                    },
                    {
                      "name": "w",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "useProgram": {
              "name": "useProgram",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "validateProgram": {
              "name": "validateProgram",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib1f": {
              "name": "vertexAttrib1f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib2f": {
              "name": "vertexAttrib2f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib3f": {
              "name": "vertexAttrib3f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    },
                    {
                      "name": "z",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib4f": {
              "name": "vertexAttrib4f",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLfloat"
                    },
                    {
                      "name": "y",
                      "type": "GLfloat"
                    },
                    {
                      "name": "z",
                      "type": "GLfloat"
                    },
                    {
                      "name": "w",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib1fv": {
              "name": "vertexAttrib1fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib2fv": {
              "name": "vertexAttrib2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib3fv": {
              "name": "vertexAttrib3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttrib4fv": {
              "name": "vertexAttrib4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttribPointer": {
              "name": "vertexAttribPointer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "size",
                      "type": "GLint"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "normalized",
                      "type": "GLboolean"
                    },
                    {
                      "name": "stride",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                }
              ]
            },
            "viewport": {
              "name": "viewport",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {
            "drawingBufferWidth": {
              "name": "drawingBufferWidth",
              "type": "GLsizei",
              "read-only": 1
            },
            "drawingBufferHeight": {
              "name": "drawingBufferHeight",
              "type": "GLsizei",
              "read-only": 1
            }
          },
          "namesakes": {
            "canvas": [
              {
                "name": "canvas",
                "type": [
                  {
                    "type": "HTMLCanvasElement"
                  },
                  {
                    "type": "OffscreenCanvas"
                  }
                ],
                "read-only": 1,
                "exposed": "Window"
              },
              {
                "name": "canvas",
                "type": "OffscreenCanvas",
                "read-only": 1,
                "exposed": "Worker"
              }
            ]
          }
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WebGLRenderingContextOverloads": {
        "name": "WebGLRenderingContextOverloads",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "bufferData": {
              "name": "bufferData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "size",
                      "type": "GLsizeiptr"
                    },
                    {
                      "name": "usage",
                      "type": "GLenum"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource",
                      "nullable": 1
                    },
                    {
                      "name": "usage",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "bufferSubData": {
              "name": "bufferSubData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "data",
                      "type": "BufferSource"
                    }
                  ]
                }
              ]
            },
            "compressedTexImage2D": {
              "name": "compressedTexImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "data",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ]
            },
            "compressedTexSubImage2D": {
              "name": "compressedTexSubImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "data",
                      "type": "ArrayBufferView"
                    }
                  ]
                }
              ]
            },
            "readPixels": {
              "name": "readPixels",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pixels",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "texImage2D": {
              "name": "texImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pixels",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                }
              ]
            },
            "texSubImage2D": {
              "name": "texSubImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pixels",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                }
              ]
            },
            "uniform1fv": {
              "name": "uniform1fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniform2fv": {
              "name": "uniform2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniform3fv": {
              "name": "uniform3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniform4fv": {
              "name": "uniform4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniform1iv": {
              "name": "uniform1iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Int32List"
                    }
                  ]
                }
              ]
            },
            "uniform2iv": {
              "name": "uniform2iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Int32List"
                    }
                  ]
                }
              ]
            },
            "uniform3iv": {
              "name": "uniform3iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Int32List"
                    }
                  ]
                }
              ]
            },
            "uniform4iv": {
              "name": "uniform4iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v",
                      "type": "Int32List"
                    }
                  ]
                }
              ]
            },
            "uniformMatrix2fv": {
              "name": "uniformMatrix2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "value",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniformMatrix3fv": {
              "name": "uniformMatrix3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "value",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            },
            "uniformMatrix4fv": {
              "name": "uniformMatrix4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "value",
                      "type": "Float32List"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WebGL2RenderingContextBase": {
        "name": "WebGL2RenderingContextBase",
        "extends": "Object",
        "constants": {
          "constant": {
            "READ_BUFFER": {
              "name": "READ_BUFFER",
              "type": "GLenum",
              "value": "0x0C02"
            },
            "UNPACK_ROW_LENGTH": {
              "name": "UNPACK_ROW_LENGTH",
              "type": "GLenum",
              "value": "0x0CF2"
            },
            "UNPACK_SKIP_ROWS": {
              "name": "UNPACK_SKIP_ROWS",
              "type": "GLenum",
              "value": "0x0CF3"
            },
            "UNPACK_SKIP_PIXELS": {
              "name": "UNPACK_SKIP_PIXELS",
              "type": "GLenum",
              "value": "0x0CF4"
            },
            "PACK_ROW_LENGTH": {
              "name": "PACK_ROW_LENGTH",
              "type": "GLenum",
              "value": "0x0D02"
            },
            "PACK_SKIP_ROWS": {
              "name": "PACK_SKIP_ROWS",
              "type": "GLenum",
              "value": "0x0D03"
            },
            "PACK_SKIP_PIXELS": {
              "name": "PACK_SKIP_PIXELS",
              "type": "GLenum",
              "value": "0x0D04"
            },
            "COLOR": {
              "name": "COLOR",
              "type": "GLenum",
              "value": "0x1800"
            },
            "DEPTH": {
              "name": "DEPTH",
              "type": "GLenum",
              "value": "0x1801"
            },
            "STENCIL": {
              "name": "STENCIL",
              "type": "GLenum",
              "value": "0x1802"
            },
            "RED": {
              "name": "RED",
              "type": "GLenum",
              "value": "0x1903"
            },
            "RGB8": {
              "name": "RGB8",
              "type": "GLenum",
              "value": "0x8051"
            },
            "RGBA8": {
              "name": "RGBA8",
              "type": "GLenum",
              "value": "0x8058"
            },
            "RGB10_A2": {
              "name": "RGB10_A2",
              "type": "GLenum",
              "value": "0x8059"
            },
            "TEXTURE_BINDING_3D": {
              "name": "TEXTURE_BINDING_3D",
              "type": "GLenum",
              "value": "0x806A"
            },
            "UNPACK_SKIP_IMAGES": {
              "name": "UNPACK_SKIP_IMAGES",
              "type": "GLenum",
              "value": "0x806D"
            },
            "UNPACK_IMAGE_HEIGHT": {
              "name": "UNPACK_IMAGE_HEIGHT",
              "type": "GLenum",
              "value": "0x806E"
            },
            "TEXTURE_3D": {
              "name": "TEXTURE_3D",
              "type": "GLenum",
              "value": "0x806F"
            },
            "TEXTURE_WRAP_R": {
              "name": "TEXTURE_WRAP_R",
              "type": "GLenum",
              "value": "0x8072"
            },
            "MAX_3D_TEXTURE_SIZE": {
              "name": "MAX_3D_TEXTURE_SIZE",
              "type": "GLenum",
              "value": "0x8073"
            },
            "UNSIGNED_INT_2_10_10_10_REV": {
              "name": "UNSIGNED_INT_2_10_10_10_REV",
              "type": "GLenum",
              "value": "0x8368"
            },
            "MAX_ELEMENTS_VERTICES": {
              "name": "MAX_ELEMENTS_VERTICES",
              "type": "GLenum",
              "value": "0x80E8"
            },
            "MAX_ELEMENTS_INDICES": {
              "name": "MAX_ELEMENTS_INDICES",
              "type": "GLenum",
              "value": "0x80E9"
            },
            "TEXTURE_MIN_LOD": {
              "name": "TEXTURE_MIN_LOD",
              "type": "GLenum",
              "value": "0x813A"
            },
            "TEXTURE_MAX_LOD": {
              "name": "TEXTURE_MAX_LOD",
              "type": "GLenum",
              "value": "0x813B"
            },
            "TEXTURE_BASE_LEVEL": {
              "name": "TEXTURE_BASE_LEVEL",
              "type": "GLenum",
              "value": "0x813C"
            },
            "TEXTURE_MAX_LEVEL": {
              "name": "TEXTURE_MAX_LEVEL",
              "type": "GLenum",
              "value": "0x813D"
            },
            "MIN": {
              "name": "MIN",
              "type": "GLenum",
              "value": "0x8007"
            },
            "MAX": {
              "name": "MAX",
              "type": "GLenum",
              "value": "0x8008"
            },
            "DEPTH_COMPONENT24": {
              "name": "DEPTH_COMPONENT24",
              "type": "GLenum",
              "value": "0x81A6"
            },
            "MAX_TEXTURE_LOD_BIAS": {
              "name": "MAX_TEXTURE_LOD_BIAS",
              "type": "GLenum",
              "value": "0x84FD"
            },
            "TEXTURE_COMPARE_MODE": {
              "name": "TEXTURE_COMPARE_MODE",
              "type": "GLenum",
              "value": "0x884C"
            },
            "TEXTURE_COMPARE_FUNC": {
              "name": "TEXTURE_COMPARE_FUNC",
              "type": "GLenum",
              "value": "0x884D"
            },
            "CURRENT_QUERY": {
              "name": "CURRENT_QUERY",
              "type": "GLenum",
              "value": "0x8865"
            },
            "QUERY_RESULT": {
              "name": "QUERY_RESULT",
              "type": "GLenum",
              "value": "0x8866"
            },
            "QUERY_RESULT_AVAILABLE": {
              "name": "QUERY_RESULT_AVAILABLE",
              "type": "GLenum",
              "value": "0x8867"
            },
            "STREAM_READ": {
              "name": "STREAM_READ",
              "type": "GLenum",
              "value": "0x88E1"
            },
            "STREAM_COPY": {
              "name": "STREAM_COPY",
              "type": "GLenum",
              "value": "0x88E2"
            },
            "STATIC_READ": {
              "name": "STATIC_READ",
              "type": "GLenum",
              "value": "0x88E5"
            },
            "STATIC_COPY": {
              "name": "STATIC_COPY",
              "type": "GLenum",
              "value": "0x88E6"
            },
            "DYNAMIC_READ": {
              "name": "DYNAMIC_READ",
              "type": "GLenum",
              "value": "0x88E9"
            },
            "DYNAMIC_COPY": {
              "name": "DYNAMIC_COPY",
              "type": "GLenum",
              "value": "0x88EA"
            },
            "MAX_DRAW_BUFFERS": {
              "name": "MAX_DRAW_BUFFERS",
              "type": "GLenum",
              "value": "0x8824"
            },
            "DRAW_BUFFER0": {
              "name": "DRAW_BUFFER0",
              "type": "GLenum",
              "value": "0x8825"
            },
            "DRAW_BUFFER1": {
              "name": "DRAW_BUFFER1",
              "type": "GLenum",
              "value": "0x8826"
            },
            "DRAW_BUFFER2": {
              "name": "DRAW_BUFFER2",
              "type": "GLenum",
              "value": "0x8827"
            },
            "DRAW_BUFFER3": {
              "name": "DRAW_BUFFER3",
              "type": "GLenum",
              "value": "0x8828"
            },
            "DRAW_BUFFER4": {
              "name": "DRAW_BUFFER4",
              "type": "GLenum",
              "value": "0x8829"
            },
            "DRAW_BUFFER5": {
              "name": "DRAW_BUFFER5",
              "type": "GLenum",
              "value": "0x882A"
            },
            "DRAW_BUFFER6": {
              "name": "DRAW_BUFFER6",
              "type": "GLenum",
              "value": "0x882B"
            },
            "DRAW_BUFFER7": {
              "name": "DRAW_BUFFER7",
              "type": "GLenum",
              "value": "0x882C"
            },
            "DRAW_BUFFER8": {
              "name": "DRAW_BUFFER8",
              "type": "GLenum",
              "value": "0x882D"
            },
            "DRAW_BUFFER9": {
              "name": "DRAW_BUFFER9",
              "type": "GLenum",
              "value": "0x882E"
            },
            "DRAW_BUFFER10": {
              "name": "DRAW_BUFFER10",
              "type": "GLenum",
              "value": "0x882F"
            },
            "DRAW_BUFFER11": {
              "name": "DRAW_BUFFER11",
              "type": "GLenum",
              "value": "0x8830"
            },
            "DRAW_BUFFER12": {
              "name": "DRAW_BUFFER12",
              "type": "GLenum",
              "value": "0x8831"
            },
            "DRAW_BUFFER13": {
              "name": "DRAW_BUFFER13",
              "type": "GLenum",
              "value": "0x8832"
            },
            "DRAW_BUFFER14": {
              "name": "DRAW_BUFFER14",
              "type": "GLenum",
              "value": "0x8833"
            },
            "DRAW_BUFFER15": {
              "name": "DRAW_BUFFER15",
              "type": "GLenum",
              "value": "0x8834"
            },
            "MAX_FRAGMENT_UNIFORM_COMPONENTS": {
              "name": "MAX_FRAGMENT_UNIFORM_COMPONENTS",
              "type": "GLenum",
              "value": "0x8B49"
            },
            "MAX_VERTEX_UNIFORM_COMPONENTS": {
              "name": "MAX_VERTEX_UNIFORM_COMPONENTS",
              "type": "GLenum",
              "value": "0x8B4A"
            },
            "SAMPLER_3D": {
              "name": "SAMPLER_3D",
              "type": "GLenum",
              "value": "0x8B5F"
            },
            "SAMPLER_2D_SHADOW": {
              "name": "SAMPLER_2D_SHADOW",
              "type": "GLenum",
              "value": "0x8B62"
            },
            "FRAGMENT_SHADER_DERIVATIVE_HINT": {
              "name": "FRAGMENT_SHADER_DERIVATIVE_HINT",
              "type": "GLenum",
              "value": "0x8B8B"
            },
            "PIXEL_PACK_BUFFER": {
              "name": "PIXEL_PACK_BUFFER",
              "type": "GLenum",
              "value": "0x88EB"
            },
            "PIXEL_UNPACK_BUFFER": {
              "name": "PIXEL_UNPACK_BUFFER",
              "type": "GLenum",
              "value": "0x88EC"
            },
            "PIXEL_PACK_BUFFER_BINDING": {
              "name": "PIXEL_PACK_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x88ED"
            },
            "PIXEL_UNPACK_BUFFER_BINDING": {
              "name": "PIXEL_UNPACK_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x88EF"
            },
            "FLOAT_MAT2x3": {
              "name": "FLOAT_MAT2x3",
              "type": "GLenum",
              "value": "0x8B65"
            },
            "FLOAT_MAT2x4": {
              "name": "FLOAT_MAT2x4",
              "type": "GLenum",
              "value": "0x8B66"
            },
            "FLOAT_MAT3x2": {
              "name": "FLOAT_MAT3x2",
              "type": "GLenum",
              "value": "0x8B67"
            },
            "FLOAT_MAT3x4": {
              "name": "FLOAT_MAT3x4",
              "type": "GLenum",
              "value": "0x8B68"
            },
            "FLOAT_MAT4x2": {
              "name": "FLOAT_MAT4x2",
              "type": "GLenum",
              "value": "0x8B69"
            },
            "FLOAT_MAT4x3": {
              "name": "FLOAT_MAT4x3",
              "type": "GLenum",
              "value": "0x8B6A"
            },
            "SRGB": {
              "name": "SRGB",
              "type": "GLenum",
              "value": "0x8C40"
            },
            "SRGB8": {
              "name": "SRGB8",
              "type": "GLenum",
              "value": "0x8C41"
            },
            "SRGB8_ALPHA8": {
              "name": "SRGB8_ALPHA8",
              "type": "GLenum",
              "value": "0x8C43"
            },
            "COMPARE_REF_TO_TEXTURE": {
              "name": "COMPARE_REF_TO_TEXTURE",
              "type": "GLenum",
              "value": "0x884E"
            },
            "RGBA32F": {
              "name": "RGBA32F",
              "type": "GLenum",
              "value": "0x8814"
            },
            "RGB32F": {
              "name": "RGB32F",
              "type": "GLenum",
              "value": "0x8815"
            },
            "RGBA16F": {
              "name": "RGBA16F",
              "type": "GLenum",
              "value": "0x881A"
            },
            "RGB16F": {
              "name": "RGB16F",
              "type": "GLenum",
              "value": "0x881B"
            },
            "VERTEX_ATTRIB_ARRAY_INTEGER": {
              "name": "VERTEX_ATTRIB_ARRAY_INTEGER",
              "type": "GLenum",
              "value": "0x88FD"
            },
            "MAX_ARRAY_TEXTURE_LAYERS": {
              "name": "MAX_ARRAY_TEXTURE_LAYERS",
              "type": "GLenum",
              "value": "0x88FF"
            },
            "MIN_PROGRAM_TEXEL_OFFSET": {
              "name": "MIN_PROGRAM_TEXEL_OFFSET",
              "type": "GLenum",
              "value": "0x8904"
            },
            "MAX_PROGRAM_TEXEL_OFFSET": {
              "name": "MAX_PROGRAM_TEXEL_OFFSET",
              "type": "GLenum",
              "value": "0x8905"
            },
            "MAX_VARYING_COMPONENTS": {
              "name": "MAX_VARYING_COMPONENTS",
              "type": "GLenum",
              "value": "0x8B4B"
            },
            "TEXTURE_2D_ARRAY": {
              "name": "TEXTURE_2D_ARRAY",
              "type": "GLenum",
              "value": "0x8C1A"
            },
            "TEXTURE_BINDING_2D_ARRAY": {
              "name": "TEXTURE_BINDING_2D_ARRAY",
              "type": "GLenum",
              "value": "0x8C1D"
            },
            "R11F_G11F_B10F": {
              "name": "R11F_G11F_B10F",
              "type": "GLenum",
              "value": "0x8C3A"
            },
            "UNSIGNED_INT_10F_11F_11F_REV": {
              "name": "UNSIGNED_INT_10F_11F_11F_REV",
              "type": "GLenum",
              "value": "0x8C3B"
            },
            "RGB9_E5": {
              "name": "RGB9_E5",
              "type": "GLenum",
              "value": "0x8C3D"
            },
            "UNSIGNED_INT_5_9_9_9_REV": {
              "name": "UNSIGNED_INT_5_9_9_9_REV",
              "type": "GLenum",
              "value": "0x8C3E"
            },
            "TRANSFORM_FEEDBACK_BUFFER_MODE": {
              "name": "TRANSFORM_FEEDBACK_BUFFER_MODE",
              "type": "GLenum",
              "value": "0x8C7F"
            },
            "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS": {
              "name": "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
              "type": "GLenum",
              "value": "0x8C80"
            },
            "TRANSFORM_FEEDBACK_VARYINGS": {
              "name": "TRANSFORM_FEEDBACK_VARYINGS",
              "type": "GLenum",
              "value": "0x8C83"
            },
            "TRANSFORM_FEEDBACK_BUFFER_START": {
              "name": "TRANSFORM_FEEDBACK_BUFFER_START",
              "type": "GLenum",
              "value": "0x8C84"
            },
            "TRANSFORM_FEEDBACK_BUFFER_SIZE": {
              "name": "TRANSFORM_FEEDBACK_BUFFER_SIZE",
              "type": "GLenum",
              "value": "0x8C85"
            },
            "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN": {
              "name": "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
              "type": "GLenum",
              "value": "0x8C88"
            },
            "RASTERIZER_DISCARD": {
              "name": "RASTERIZER_DISCARD",
              "type": "GLenum",
              "value": "0x8C89"
            },
            "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS": {
              "name": "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
              "type": "GLenum",
              "value": "0x8C8A"
            },
            "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS": {
              "name": "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
              "type": "GLenum",
              "value": "0x8C8B"
            },
            "INTERLEAVED_ATTRIBS": {
              "name": "INTERLEAVED_ATTRIBS",
              "type": "GLenum",
              "value": "0x8C8C"
            },
            "SEPARATE_ATTRIBS": {
              "name": "SEPARATE_ATTRIBS",
              "type": "GLenum",
              "value": "0x8C8D"
            },
            "TRANSFORM_FEEDBACK_BUFFER": {
              "name": "TRANSFORM_FEEDBACK_BUFFER",
              "type": "GLenum",
              "value": "0x8C8E"
            },
            "TRANSFORM_FEEDBACK_BUFFER_BINDING": {
              "name": "TRANSFORM_FEEDBACK_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8C8F"
            },
            "RGBA32UI": {
              "name": "RGBA32UI",
              "type": "GLenum",
              "value": "0x8D70"
            },
            "RGB32UI": {
              "name": "RGB32UI",
              "type": "GLenum",
              "value": "0x8D71"
            },
            "RGBA16UI": {
              "name": "RGBA16UI",
              "type": "GLenum",
              "value": "0x8D76"
            },
            "RGB16UI": {
              "name": "RGB16UI",
              "type": "GLenum",
              "value": "0x8D77"
            },
            "RGBA8UI": {
              "name": "RGBA8UI",
              "type": "GLenum",
              "value": "0x8D7C"
            },
            "RGB8UI": {
              "name": "RGB8UI",
              "type": "GLenum",
              "value": "0x8D7D"
            },
            "RGBA32I": {
              "name": "RGBA32I",
              "type": "GLenum",
              "value": "0x8D82"
            },
            "RGB32I": {
              "name": "RGB32I",
              "type": "GLenum",
              "value": "0x8D83"
            },
            "RGBA16I": {
              "name": "RGBA16I",
              "type": "GLenum",
              "value": "0x8D88"
            },
            "RGB16I": {
              "name": "RGB16I",
              "type": "GLenum",
              "value": "0x8D89"
            },
            "RGBA8I": {
              "name": "RGBA8I",
              "type": "GLenum",
              "value": "0x8D8E"
            },
            "RGB8I": {
              "name": "RGB8I",
              "type": "GLenum",
              "value": "0x8D8F"
            },
            "RED_INTEGER": {
              "name": "RED_INTEGER",
              "type": "GLenum",
              "value": "0x8D94"
            },
            "RGB_INTEGER": {
              "name": "RGB_INTEGER",
              "type": "GLenum",
              "value": "0x8D98"
            },
            "RGBA_INTEGER": {
              "name": "RGBA_INTEGER",
              "type": "GLenum",
              "value": "0x8D99"
            },
            "SAMPLER_2D_ARRAY": {
              "name": "SAMPLER_2D_ARRAY",
              "type": "GLenum",
              "value": "0x8DC1"
            },
            "SAMPLER_2D_ARRAY_SHADOW": {
              "name": "SAMPLER_2D_ARRAY_SHADOW",
              "type": "GLenum",
              "value": "0x8DC4"
            },
            "SAMPLER_CUBE_SHADOW": {
              "name": "SAMPLER_CUBE_SHADOW",
              "type": "GLenum",
              "value": "0x8DC5"
            },
            "UNSIGNED_INT_VEC2": {
              "name": "UNSIGNED_INT_VEC2",
              "type": "GLenum",
              "value": "0x8DC6"
            },
            "UNSIGNED_INT_VEC3": {
              "name": "UNSIGNED_INT_VEC3",
              "type": "GLenum",
              "value": "0x8DC7"
            },
            "UNSIGNED_INT_VEC4": {
              "name": "UNSIGNED_INT_VEC4",
              "type": "GLenum",
              "value": "0x8DC8"
            },
            "INT_SAMPLER_2D": {
              "name": "INT_SAMPLER_2D",
              "type": "GLenum",
              "value": "0x8DCA"
            },
            "INT_SAMPLER_3D": {
              "name": "INT_SAMPLER_3D",
              "type": "GLenum",
              "value": "0x8DCB"
            },
            "INT_SAMPLER_CUBE": {
              "name": "INT_SAMPLER_CUBE",
              "type": "GLenum",
              "value": "0x8DCC"
            },
            "INT_SAMPLER_2D_ARRAY": {
              "name": "INT_SAMPLER_2D_ARRAY",
              "type": "GLenum",
              "value": "0x8DCF"
            },
            "UNSIGNED_INT_SAMPLER_2D": {
              "name": "UNSIGNED_INT_SAMPLER_2D",
              "type": "GLenum",
              "value": "0x8DD2"
            },
            "UNSIGNED_INT_SAMPLER_3D": {
              "name": "UNSIGNED_INT_SAMPLER_3D",
              "type": "GLenum",
              "value": "0x8DD3"
            },
            "UNSIGNED_INT_SAMPLER_CUBE": {
              "name": "UNSIGNED_INT_SAMPLER_CUBE",
              "type": "GLenum",
              "value": "0x8DD4"
            },
            "UNSIGNED_INT_SAMPLER_2D_ARRAY": {
              "name": "UNSIGNED_INT_SAMPLER_2D_ARRAY",
              "type": "GLenum",
              "value": "0x8DD7"
            },
            "DEPTH_COMPONENT32F": {
              "name": "DEPTH_COMPONENT32F",
              "type": "GLenum",
              "value": "0x8CAC"
            },
            "DEPTH32F_STENCIL8": {
              "name": "DEPTH32F_STENCIL8",
              "type": "GLenum",
              "value": "0x8CAD"
            },
            "FLOAT_32_UNSIGNED_INT_24_8_REV": {
              "name": "FLOAT_32_UNSIGNED_INT_24_8_REV",
              "type": "GLenum",
              "value": "0x8DAD"
            },
            "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING": {
              "name": "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
              "type": "GLenum",
              "value": "0x8210"
            },
            "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE": {
              "name": "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
              "type": "GLenum",
              "value": "0x8211"
            },
            "FRAMEBUFFER_ATTACHMENT_RED_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_RED_SIZE",
              "type": "GLenum",
              "value": "0x8212"
            },
            "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
              "type": "GLenum",
              "value": "0x8213"
            },
            "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
              "type": "GLenum",
              "value": "0x8214"
            },
            "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
              "type": "GLenum",
              "value": "0x8215"
            },
            "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
              "type": "GLenum",
              "value": "0x8216"
            },
            "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE": {
              "name": "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
              "type": "GLenum",
              "value": "0x8217"
            },
            "FRAMEBUFFER_DEFAULT": {
              "name": "FRAMEBUFFER_DEFAULT",
              "type": "GLenum",
              "value": "0x8218"
            },
            "UNSIGNED_INT_24_8": {
              "name": "UNSIGNED_INT_24_8",
              "type": "GLenum",
              "value": "0x84FA"
            },
            "DEPTH24_STENCIL8": {
              "name": "DEPTH24_STENCIL8",
              "type": "GLenum",
              "value": "0x88F0"
            },
            "UNSIGNED_NORMALIZED": {
              "name": "UNSIGNED_NORMALIZED",
              "type": "GLenum",
              "value": "0x8C17"
            },
            "DRAW_FRAMEBUFFER_BINDING": {
              "name": "DRAW_FRAMEBUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8CA6"
            },
            "READ_FRAMEBUFFER": {
              "name": "READ_FRAMEBUFFER",
              "type": "GLenum",
              "value": "0x8CA8"
            },
            "DRAW_FRAMEBUFFER": {
              "name": "DRAW_FRAMEBUFFER",
              "type": "GLenum",
              "value": "0x8CA9"
            },
            "READ_FRAMEBUFFER_BINDING": {
              "name": "READ_FRAMEBUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8CAA"
            },
            "RENDERBUFFER_SAMPLES": {
              "name": "RENDERBUFFER_SAMPLES",
              "type": "GLenum",
              "value": "0x8CAB"
            },
            "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER": {
              "name": "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
              "type": "GLenum",
              "value": "0x8CD4"
            },
            "MAX_COLOR_ATTACHMENTS": {
              "name": "MAX_COLOR_ATTACHMENTS",
              "type": "GLenum",
              "value": "0x8CDF"
            },
            "COLOR_ATTACHMENT1": {
              "name": "COLOR_ATTACHMENT1",
              "type": "GLenum",
              "value": "0x8CE1"
            },
            "COLOR_ATTACHMENT2": {
              "name": "COLOR_ATTACHMENT2",
              "type": "GLenum",
              "value": "0x8CE2"
            },
            "COLOR_ATTACHMENT3": {
              "name": "COLOR_ATTACHMENT3",
              "type": "GLenum",
              "value": "0x8CE3"
            },
            "COLOR_ATTACHMENT4": {
              "name": "COLOR_ATTACHMENT4",
              "type": "GLenum",
              "value": "0x8CE4"
            },
            "COLOR_ATTACHMENT5": {
              "name": "COLOR_ATTACHMENT5",
              "type": "GLenum",
              "value": "0x8CE5"
            },
            "COLOR_ATTACHMENT6": {
              "name": "COLOR_ATTACHMENT6",
              "type": "GLenum",
              "value": "0x8CE6"
            },
            "COLOR_ATTACHMENT7": {
              "name": "COLOR_ATTACHMENT7",
              "type": "GLenum",
              "value": "0x8CE7"
            },
            "COLOR_ATTACHMENT8": {
              "name": "COLOR_ATTACHMENT8",
              "type": "GLenum",
              "value": "0x8CE8"
            },
            "COLOR_ATTACHMENT9": {
              "name": "COLOR_ATTACHMENT9",
              "type": "GLenum",
              "value": "0x8CE9"
            },
            "COLOR_ATTACHMENT10": {
              "name": "COLOR_ATTACHMENT10",
              "type": "GLenum",
              "value": "0x8CEA"
            },
            "COLOR_ATTACHMENT11": {
              "name": "COLOR_ATTACHMENT11",
              "type": "GLenum",
              "value": "0x8CEB"
            },
            "COLOR_ATTACHMENT12": {
              "name": "COLOR_ATTACHMENT12",
              "type": "GLenum",
              "value": "0x8CEC"
            },
            "COLOR_ATTACHMENT13": {
              "name": "COLOR_ATTACHMENT13",
              "type": "GLenum",
              "value": "0x8CED"
            },
            "COLOR_ATTACHMENT14": {
              "name": "COLOR_ATTACHMENT14",
              "type": "GLenum",
              "value": "0x8CEE"
            },
            "COLOR_ATTACHMENT15": {
              "name": "COLOR_ATTACHMENT15",
              "type": "GLenum",
              "value": "0x8CEF"
            },
            "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE": {
              "name": "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
              "type": "GLenum",
              "value": "0x8D56"
            },
            "MAX_SAMPLES": {
              "name": "MAX_SAMPLES",
              "type": "GLenum",
              "value": "0x8D57"
            },
            "HALF_FLOAT": {
              "name": "HALF_FLOAT",
              "type": "GLenum",
              "value": "0x140B"
            },
            "RG": {
              "name": "RG",
              "type": "GLenum",
              "value": "0x8227"
            },
            "RG_INTEGER": {
              "name": "RG_INTEGER",
              "type": "GLenum",
              "value": "0x8228"
            },
            "R8": {
              "name": "R8",
              "type": "GLenum",
              "value": "0x8229"
            },
            "RG8": {
              "name": "RG8",
              "type": "GLenum",
              "value": "0x822B"
            },
            "R16F": {
              "name": "R16F",
              "type": "GLenum",
              "value": "0x822D"
            },
            "R32F": {
              "name": "R32F",
              "type": "GLenum",
              "value": "0x822E"
            },
            "RG16F": {
              "name": "RG16F",
              "type": "GLenum",
              "value": "0x822F"
            },
            "RG32F": {
              "name": "RG32F",
              "type": "GLenum",
              "value": "0x8230"
            },
            "R8I": {
              "name": "R8I",
              "type": "GLenum",
              "value": "0x8231"
            },
            "R8UI": {
              "name": "R8UI",
              "type": "GLenum",
              "value": "0x8232"
            },
            "R16I": {
              "name": "R16I",
              "type": "GLenum",
              "value": "0x8233"
            },
            "R16UI": {
              "name": "R16UI",
              "type": "GLenum",
              "value": "0x8234"
            },
            "R32I": {
              "name": "R32I",
              "type": "GLenum",
              "value": "0x8235"
            },
            "R32UI": {
              "name": "R32UI",
              "type": "GLenum",
              "value": "0x8236"
            },
            "RG8I": {
              "name": "RG8I",
              "type": "GLenum",
              "value": "0x8237"
            },
            "RG8UI": {
              "name": "RG8UI",
              "type": "GLenum",
              "value": "0x8238"
            },
            "RG16I": {
              "name": "RG16I",
              "type": "GLenum",
              "value": "0x8239"
            },
            "RG16UI": {
              "name": "RG16UI",
              "type": "GLenum",
              "value": "0x823A"
            },
            "RG32I": {
              "name": "RG32I",
              "type": "GLenum",
              "value": "0x823B"
            },
            "RG32UI": {
              "name": "RG32UI",
              "type": "GLenum",
              "value": "0x823C"
            },
            "VERTEX_ARRAY_BINDING": {
              "name": "VERTEX_ARRAY_BINDING",
              "type": "GLenum",
              "value": "0x85B5"
            },
            "R8_SNORM": {
              "name": "R8_SNORM",
              "type": "GLenum",
              "value": "0x8F94"
            },
            "RG8_SNORM": {
              "name": "RG8_SNORM",
              "type": "GLenum",
              "value": "0x8F95"
            },
            "RGB8_SNORM": {
              "name": "RGB8_SNORM",
              "type": "GLenum",
              "value": "0x8F96"
            },
            "RGBA8_SNORM": {
              "name": "RGBA8_SNORM",
              "type": "GLenum",
              "value": "0x8F97"
            },
            "SIGNED_NORMALIZED": {
              "name": "SIGNED_NORMALIZED",
              "type": "GLenum",
              "value": "0x8F9C"
            },
            "COPY_READ_BUFFER": {
              "name": "COPY_READ_BUFFER",
              "type": "GLenum",
              "value": "0x8F36"
            },
            "COPY_WRITE_BUFFER": {
              "name": "COPY_WRITE_BUFFER",
              "type": "GLenum",
              "value": "0x8F37"
            },
            "COPY_READ_BUFFER_BINDING": {
              "name": "COPY_READ_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8F36"
            },
            "COPY_WRITE_BUFFER_BINDING": {
              "name": "COPY_WRITE_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8F37"
            },
            "UNIFORM_BUFFER": {
              "name": "UNIFORM_BUFFER",
              "type": "GLenum",
              "value": "0x8A11"
            },
            "UNIFORM_BUFFER_BINDING": {
              "name": "UNIFORM_BUFFER_BINDING",
              "type": "GLenum",
              "value": "0x8A28"
            },
            "UNIFORM_BUFFER_START": {
              "name": "UNIFORM_BUFFER_START",
              "type": "GLenum",
              "value": "0x8A29"
            },
            "UNIFORM_BUFFER_SIZE": {
              "name": "UNIFORM_BUFFER_SIZE",
              "type": "GLenum",
              "value": "0x8A2A"
            },
            "MAX_VERTEX_UNIFORM_BLOCKS": {
              "name": "MAX_VERTEX_UNIFORM_BLOCKS",
              "type": "GLenum",
              "value": "0x8A2B"
            },
            "MAX_FRAGMENT_UNIFORM_BLOCKS": {
              "name": "MAX_FRAGMENT_UNIFORM_BLOCKS",
              "type": "GLenum",
              "value": "0x8A2D"
            },
            "MAX_COMBINED_UNIFORM_BLOCKS": {
              "name": "MAX_COMBINED_UNIFORM_BLOCKS",
              "type": "GLenum",
              "value": "0x8A2E"
            },
            "MAX_UNIFORM_BUFFER_BINDINGS": {
              "name": "MAX_UNIFORM_BUFFER_BINDINGS",
              "type": "GLenum",
              "value": "0x8A2F"
            },
            "MAX_UNIFORM_BLOCK_SIZE": {
              "name": "MAX_UNIFORM_BLOCK_SIZE",
              "type": "GLenum",
              "value": "0x8A30"
            },
            "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS": {
              "name": "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
              "type": "GLenum",
              "value": "0x8A31"
            },
            "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS": {
              "name": "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
              "type": "GLenum",
              "value": "0x8A33"
            },
            "UNIFORM_BUFFER_OFFSET_ALIGNMENT": {
              "name": "UNIFORM_BUFFER_OFFSET_ALIGNMENT",
              "type": "GLenum",
              "value": "0x8A34"
            },
            "ACTIVE_UNIFORM_BLOCKS": {
              "name": "ACTIVE_UNIFORM_BLOCKS",
              "type": "GLenum",
              "value": "0x8A36"
            },
            "UNIFORM_TYPE": {
              "name": "UNIFORM_TYPE",
              "type": "GLenum",
              "value": "0x8A37"
            },
            "UNIFORM_SIZE": {
              "name": "UNIFORM_SIZE",
              "type": "GLenum",
              "value": "0x8A38"
            },
            "UNIFORM_BLOCK_INDEX": {
              "name": "UNIFORM_BLOCK_INDEX",
              "type": "GLenum",
              "value": "0x8A3A"
            },
            "UNIFORM_OFFSET": {
              "name": "UNIFORM_OFFSET",
              "type": "GLenum",
              "value": "0x8A3B"
            },
            "UNIFORM_ARRAY_STRIDE": {
              "name": "UNIFORM_ARRAY_STRIDE",
              "type": "GLenum",
              "value": "0x8A3C"
            },
            "UNIFORM_MATRIX_STRIDE": {
              "name": "UNIFORM_MATRIX_STRIDE",
              "type": "GLenum",
              "value": "0x8A3D"
            },
            "UNIFORM_IS_ROW_MAJOR": {
              "name": "UNIFORM_IS_ROW_MAJOR",
              "type": "GLenum",
              "value": "0x8A3E"
            },
            "UNIFORM_BLOCK_BINDING": {
              "name": "UNIFORM_BLOCK_BINDING",
              "type": "GLenum",
              "value": "0x8A3F"
            },
            "UNIFORM_BLOCK_DATA_SIZE": {
              "name": "UNIFORM_BLOCK_DATA_SIZE",
              "type": "GLenum",
              "value": "0x8A40"
            },
            "UNIFORM_BLOCK_ACTIVE_UNIFORMS": {
              "name": "UNIFORM_BLOCK_ACTIVE_UNIFORMS",
              "type": "GLenum",
              "value": "0x8A42"
            },
            "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES": {
              "name": "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
              "type": "GLenum",
              "value": "0x8A43"
            },
            "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER": {
              "name": "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
              "type": "GLenum",
              "value": "0x8A44"
            },
            "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER": {
              "name": "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
              "type": "GLenum",
              "value": "0x8A46"
            },
            "INVALID_INDEX": {
              "name": "INVALID_INDEX",
              "type": "GLenum",
              "value": "0xFFFFFFFF"
            },
            "MAX_VERTEX_OUTPUT_COMPONENTS": {
              "name": "MAX_VERTEX_OUTPUT_COMPONENTS",
              "type": "GLenum",
              "value": "0x9122"
            },
            "MAX_FRAGMENT_INPUT_COMPONENTS": {
              "name": "MAX_FRAGMENT_INPUT_COMPONENTS",
              "type": "GLenum",
              "value": "0x9125"
            },
            "MAX_SERVER_WAIT_TIMEOUT": {
              "name": "MAX_SERVER_WAIT_TIMEOUT",
              "type": "GLenum",
              "value": "0x9111"
            },
            "OBJECT_TYPE": {
              "name": "OBJECT_TYPE",
              "type": "GLenum",
              "value": "0x9112"
            },
            "SYNC_CONDITION": {
              "name": "SYNC_CONDITION",
              "type": "GLenum",
              "value": "0x9113"
            },
            "SYNC_STATUS": {
              "name": "SYNC_STATUS",
              "type": "GLenum",
              "value": "0x9114"
            },
            "SYNC_FLAGS": {
              "name": "SYNC_FLAGS",
              "type": "GLenum",
              "value": "0x9115"
            },
            "SYNC_FENCE": {
              "name": "SYNC_FENCE",
              "type": "GLenum",
              "value": "0x9116"
            },
            "SYNC_GPU_COMMANDS_COMPLETE": {
              "name": "SYNC_GPU_COMMANDS_COMPLETE",
              "type": "GLenum",
              "value": "0x9117"
            },
            "UNSIGNALED": {
              "name": "UNSIGNALED",
              "type": "GLenum",
              "value": "0x9118"
            },
            "SIGNALED": {
              "name": "SIGNALED",
              "type": "GLenum",
              "value": "0x9119"
            },
            "ALREADY_SIGNALED": {
              "name": "ALREADY_SIGNALED",
              "type": "GLenum",
              "value": "0x911A"
            },
            "TIMEOUT_EXPIRED": {
              "name": "TIMEOUT_EXPIRED",
              "type": "GLenum",
              "value": "0x911B"
            },
            "CONDITION_SATISFIED": {
              "name": "CONDITION_SATISFIED",
              "type": "GLenum",
              "value": "0x911C"
            },
            "WAIT_FAILED": {
              "name": "WAIT_FAILED",
              "type": "GLenum",
              "value": "0x911D"
            },
            "SYNC_FLUSH_COMMANDS_BIT": {
              "name": "SYNC_FLUSH_COMMANDS_BIT",
              "type": "GLenum",
              "value": "0x00000001"
            },
            "VERTEX_ATTRIB_ARRAY_DIVISOR": {
              "name": "VERTEX_ATTRIB_ARRAY_DIVISOR",
              "type": "GLenum",
              "value": "0x88FE"
            },
            "ANY_SAMPLES_PASSED": {
              "name": "ANY_SAMPLES_PASSED",
              "type": "GLenum",
              "value": "0x8C2F"
            },
            "ANY_SAMPLES_PASSED_CONSERVATIVE": {
              "name": "ANY_SAMPLES_PASSED_CONSERVATIVE",
              "type": "GLenum",
              "value": "0x8D6A"
            },
            "SAMPLER_BINDING": {
              "name": "SAMPLER_BINDING",
              "type": "GLenum",
              "value": "0x8919"
            },
            "RGB10_A2UI": {
              "name": "RGB10_A2UI",
              "type": "GLenum",
              "value": "0x906F"
            },
            "INT_2_10_10_10_REV": {
              "name": "INT_2_10_10_10_REV",
              "type": "GLenum",
              "value": "0x8D9F"
            },
            "TRANSFORM_FEEDBACK": {
              "name": "TRANSFORM_FEEDBACK",
              "type": "GLenum",
              "value": "0x8E22"
            },
            "TRANSFORM_FEEDBACK_PAUSED": {
              "name": "TRANSFORM_FEEDBACK_PAUSED",
              "type": "GLenum",
              "value": "0x8E23"
            },
            "TRANSFORM_FEEDBACK_ACTIVE": {
              "name": "TRANSFORM_FEEDBACK_ACTIVE",
              "type": "GLenum",
              "value": "0x8E24"
            },
            "TRANSFORM_FEEDBACK_BINDING": {
              "name": "TRANSFORM_FEEDBACK_BINDING",
              "type": "GLenum",
              "value": "0x8E25"
            },
            "TEXTURE_IMMUTABLE_FORMAT": {
              "name": "TEXTURE_IMMUTABLE_FORMAT",
              "type": "GLenum",
              "value": "0x912F"
            },
            "MAX_ELEMENT_INDEX": {
              "name": "MAX_ELEMENT_INDEX",
              "type": "GLenum",
              "value": "0x8D6B"
            },
            "TEXTURE_IMMUTABLE_LEVELS": {
              "name": "TEXTURE_IMMUTABLE_LEVELS",
              "type": "GLenum",
              "value": "0x82DF"
            },
            "TIMEOUT_IGNORED": {
              "name": "TIMEOUT_IGNORED",
              "type": "GLint64",
              "value": "-1"
            },
            "MAX_CLIENT_WAIT_TIMEOUT_WEBGL": {
              "name": "MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
              "type": "GLenum",
              "value": "0x9247"
            }
          }
        },
        "methods": {
          "method": {
            "copyBufferSubData": {
              "name": "copyBufferSubData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "readTarget",
                      "type": "GLenum"
                    },
                    {
                      "name": "writeTarget",
                      "type": "GLenum"
                    },
                    {
                      "name": "readOffset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "writeOffset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "size",
                      "type": "GLsizeiptr"
                    }
                  ]
                }
              ]
            },
            "getBufferSubData": {
              "name": "getBufferSubData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcByteOffset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "dstBuffer",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "dstOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "length",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "blitFramebuffer": {
              "name": "blitFramebuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "srcX0",
                      "type": "GLint"
                    },
                    {
                      "name": "srcY0",
                      "type": "GLint"
                    },
                    {
                      "name": "srcX1",
                      "type": "GLint"
                    },
                    {
                      "name": "srcY1",
                      "type": "GLint"
                    },
                    {
                      "name": "dstX0",
                      "type": "GLint"
                    },
                    {
                      "name": "dstY0",
                      "type": "GLint"
                    },
                    {
                      "name": "dstX1",
                      "type": "GLint"
                    },
                    {
                      "name": "dstY1",
                      "type": "GLint"
                    },
                    {
                      "name": "mask",
                      "type": "GLbitfield"
                    },
                    {
                      "name": "filter",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "framebufferTextureLayer": {
              "name": "framebufferTextureLayer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachment",
                      "type": "GLenum"
                    },
                    {
                      "name": "texture",
                      "type": "WebGLTexture",
                      "nullable": 1
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "layer",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "invalidateFramebuffer": {
              "name": "invalidateFramebuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachments",
                      "type": "sequence",
                      "subtype": {
                        "type": "GLenum"
                      }
                    }
                  ]
                }
              ]
            },
            "invalidateSubFramebuffer": {
              "name": "invalidateSubFramebuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "attachments",
                      "type": "sequence",
                      "subtype": {
                        "type": "GLenum"
                      }
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "readBuffer": {
              "name": "readBuffer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "src",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getInternalformatParameter": {
              "name": "getInternalformatParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "renderbufferStorageMultisample": {
              "name": "renderbufferStorageMultisample",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "samples",
                      "type": "GLsizei"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "texStorage2D": {
              "name": "texStorage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "levels",
                      "type": "GLsizei"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "texStorage3D": {
              "name": "texStorage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "levels",
                      "type": "GLsizei"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "texImage3D": {
              "name": "texImage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pboOffset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "texSubImage3D": {
              "name": "texSubImage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pboOffset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "copyTexSubImage3D": {
              "name": "copyTexSubImage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "compressedTexImage3D": {
              "name": "compressedTexImage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "imageSize",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLengthOverride",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "compressedTexSubImage3D": {
              "name": "compressedTexSubImage3D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "imageSize",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "zoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "depth",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLengthOverride",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "getFragDataLocation": {
              "name": "getFragDataLocation",
              "signature": [
                {
                  "type": "GLint",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "name",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "uniform1ui": {
              "name": "uniform1ui",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v0",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "uniform2ui": {
              "name": "uniform2ui",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v0",
                      "type": "GLuint"
                    },
                    {
                      "name": "v1",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "uniform3ui": {
              "name": "uniform3ui",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v0",
                      "type": "GLuint"
                    },
                    {
                      "name": "v1",
                      "type": "GLuint"
                    },
                    {
                      "name": "v2",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "uniform4ui": {
              "name": "uniform4ui",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "v0",
                      "type": "GLuint"
                    },
                    {
                      "name": "v1",
                      "type": "GLuint"
                    },
                    {
                      "name": "v2",
                      "type": "GLuint"
                    },
                    {
                      "name": "v3",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "uniform1uiv": {
              "name": "uniform1uiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Uint32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform2uiv": {
              "name": "uniform2uiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Uint32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform3uiv": {
              "name": "uniform3uiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Uint32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform4uiv": {
              "name": "uniform4uiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Uint32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix3x2fv": {
              "name": "uniformMatrix3x2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix4x2fv": {
              "name": "uniformMatrix4x2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix2x3fv": {
              "name": "uniformMatrix2x3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix4x3fv": {
              "name": "uniformMatrix4x3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix2x4fv": {
              "name": "uniformMatrix2x4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix3x4fv": {
              "name": "uniformMatrix3x4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "vertexAttribI4i": {
              "name": "vertexAttribI4i",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "z",
                      "type": "GLint"
                    },
                    {
                      "name": "w",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "vertexAttribI4iv": {
              "name": "vertexAttribI4iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Int32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttribI4ui": {
              "name": "vertexAttribI4ui",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "x",
                      "type": "GLuint"
                    },
                    {
                      "name": "y",
                      "type": "GLuint"
                    },
                    {
                      "name": "z",
                      "type": "GLuint"
                    },
                    {
                      "name": "w",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "vertexAttribI4uiv": {
              "name": "vertexAttribI4uiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "values",
                      "type": "Uint32List"
                    }
                  ]
                }
              ]
            },
            "vertexAttribIPointer": {
              "name": "vertexAttribIPointer",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "size",
                      "type": "GLint"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "stride",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                }
              ]
            },
            "vertexAttribDivisor": {
              "name": "vertexAttribDivisor",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "divisor",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "drawArraysInstanced": {
              "name": "drawArraysInstanced",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "first",
                      "type": "GLint"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "instanceCount",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "drawElementsInstanced": {
              "name": "drawElementsInstanced",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "instanceCount",
                      "type": "GLsizei"
                    }
                  ]
                }
              ]
            },
            "drawRangeElements": {
              "name": "drawRangeElements",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "mode",
                      "type": "GLenum"
                    },
                    {
                      "name": "start",
                      "type": "GLuint"
                    },
                    {
                      "name": "end",
                      "type": "GLuint"
                    },
                    {
                      "name": "count",
                      "type": "GLsizei"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                }
              ]
            },
            "drawBuffers": {
              "name": "drawBuffers",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffers",
                      "type": "sequence",
                      "subtype": {
                        "type": "GLenum"
                      }
                    }
                  ]
                }
              ]
            },
            "clearBufferfv": {
              "name": "clearBufferfv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "GLenum"
                    },
                    {
                      "name": "drawbuffer",
                      "type": "GLint"
                    },
                    {
                      "name": "values",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "clearBufferiv": {
              "name": "clearBufferiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "GLenum"
                    },
                    {
                      "name": "drawbuffer",
                      "type": "GLint"
                    },
                    {
                      "name": "values",
                      "type": "Int32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "clearBufferuiv": {
              "name": "clearBufferuiv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "GLenum"
                    },
                    {
                      "name": "drawbuffer",
                      "type": "GLint"
                    },
                    {
                      "name": "values",
                      "type": "Uint32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "clearBufferfi": {
              "name": "clearBufferfi",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "buffer",
                      "type": "GLenum"
                    },
                    {
                      "name": "drawbuffer",
                      "type": "GLint"
                    },
                    {
                      "name": "depth",
                      "type": "GLfloat"
                    },
                    {
                      "name": "stencil",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "createQuery": {
              "name": "createQuery",
              "signature": [
                {
                  "type": "WebGLQuery",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "deleteQuery": {
              "name": "deleteQuery",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "query",
                      "type": "WebGLQuery",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isQuery": {
              "name": "isQuery",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "query",
                      "type": "WebGLQuery",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "beginQuery": {
              "name": "beginQuery",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "query",
                      "type": "WebGLQuery"
                    }
                  ]
                }
              ]
            },
            "endQuery": {
              "name": "endQuery",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getQuery": {
              "name": "getQuery",
              "signature": [
                {
                  "type": "WebGLQuery",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getQueryParameter": {
              "name": "getQueryParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "query",
                      "type": "WebGLQuery"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "createSampler": {
              "name": "createSampler",
              "signature": [
                {
                  "type": "WebGLSampler",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "deleteSampler": {
              "name": "deleteSampler",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sampler",
                      "type": "WebGLSampler",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isSampler": {
              "name": "isSampler",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "sampler",
                      "type": "WebGLSampler",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindSampler": {
              "name": "bindSampler",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "unit",
                      "type": "GLuint"
                    },
                    {
                      "name": "sampler",
                      "type": "WebGLSampler",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "samplerParameteri": {
              "name": "samplerParameteri",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sampler",
                      "type": "WebGLSampler"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    },
                    {
                      "name": "param",
                      "type": "GLint"
                    }
                  ]
                }
              ]
            },
            "samplerParameterf": {
              "name": "samplerParameterf",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sampler",
                      "type": "WebGLSampler"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    },
                    {
                      "name": "param",
                      "type": "GLfloat"
                    }
                  ]
                }
              ]
            },
            "getSamplerParameter": {
              "name": "getSamplerParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "sampler",
                      "type": "WebGLSampler"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "fenceSync": {
              "name": "fenceSync",
              "signature": [
                {
                  "type": "WebGLSync",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "condition",
                      "type": "GLenum"
                    },
                    {
                      "name": "flags",
                      "type": "GLbitfield"
                    }
                  ]
                }
              ]
            },
            "isSync": {
              "name": "isSync",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "sync",
                      "type": "WebGLSync",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "deleteSync": {
              "name": "deleteSync",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sync",
                      "type": "WebGLSync",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "clientWaitSync": {
              "name": "clientWaitSync",
              "signature": [
                {
                  "type": "GLenum",
                  "param": [
                    {
                      "name": "sync",
                      "type": "WebGLSync"
                    },
                    {
                      "name": "flags",
                      "type": "GLbitfield"
                    },
                    {
                      "name": "timeout",
                      "type": "GLuint64"
                    }
                  ]
                }
              ]
            },
            "waitSync": {
              "name": "waitSync",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "sync",
                      "type": "WebGLSync"
                    },
                    {
                      "name": "flags",
                      "type": "GLbitfield"
                    },
                    {
                      "name": "timeout",
                      "type": "GLint64"
                    }
                  ]
                }
              ]
            },
            "getSyncParameter": {
              "name": "getSyncParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "sync",
                      "type": "WebGLSync"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "createTransformFeedback": {
              "name": "createTransformFeedback",
              "signature": [
                {
                  "type": "WebGLTransformFeedback",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "deleteTransformFeedback": {
              "name": "deleteTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "tf",
                      "type": "WebGLTransformFeedback",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isTransformFeedback": {
              "name": "isTransformFeedback",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "tf",
                      "type": "WebGLTransformFeedback",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindTransformFeedback": {
              "name": "bindTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "tf",
                      "type": "WebGLTransformFeedback",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "beginTransformFeedback": {
              "name": "beginTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "primitiveMode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "endTransformFeedback": {
              "name": "endTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "transformFeedbackVaryings": {
              "name": "transformFeedbackVaryings",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "varyings",
                      "type": "sequence",
                      "subtype": {
                        "type": "DOMString"
                      }
                    },
                    {
                      "name": "bufferMode",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getTransformFeedbackVarying": {
              "name": "getTransformFeedbackVarying",
              "signature": [
                {
                  "type": "WebGLActiveInfo",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "pauseTransformFeedback": {
              "name": "pauseTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "resumeTransformFeedback": {
              "name": "resumeTransformFeedback",
              "signature": [
                {
                  "type": "void",
                  "param": []
                }
              ]
            },
            "bindBufferBase": {
              "name": "bindBufferBase",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "buffer",
                      "type": "WebGLBuffer",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindBufferRange": {
              "name": "bindBufferRange",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    },
                    {
                      "name": "buffer",
                      "type": "WebGLBuffer",
                      "nullable": 1
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "size",
                      "type": "GLsizeiptr"
                    }
                  ]
                }
              ]
            },
            "getIndexedParameter": {
              "name": "getIndexedParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "index",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "getUniformIndices": {
              "name": "getUniformIndices",
              "signature": [
                {
                  "type": "sequence",
                  "subtype": {
                    "type": "GLuint"
                  },
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformNames",
                      "type": "sequence",
                      "subtype": {
                        "type": "DOMString"
                      }
                    }
                  ]
                }
              ]
            },
            "getActiveUniforms": {
              "name": "getActiveUniforms",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformIndices",
                      "type": "sequence",
                      "subtype": {
                        "type": "GLuint"
                      }
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getUniformBlockIndex": {
              "name": "getUniformBlockIndex",
              "signature": [
                {
                  "type": "GLuint",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformBlockName",
                      "type": "DOMString"
                    }
                  ]
                }
              ]
            },
            "getActiveUniformBlockParameter": {
              "name": "getActiveUniformBlockParameter",
              "signature": [
                {
                  "type": "any",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformBlockIndex",
                      "type": "GLuint"
                    },
                    {
                      "name": "pname",
                      "type": "GLenum"
                    }
                  ]
                }
              ]
            },
            "getActiveUniformBlockName": {
              "name": "getActiveUniformBlockName",
              "signature": [
                {
                  "type": "DOMString",
                  "nullable": 1,
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformBlockIndex",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "uniformBlockBinding": {
              "name": "uniformBlockBinding",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "program",
                      "type": "WebGLProgram"
                    },
                    {
                      "name": "uniformBlockIndex",
                      "type": "GLuint"
                    },
                    {
                      "name": "uniformBlockBinding",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "createVertexArray": {
              "name": "createVertexArray",
              "signature": [
                {
                  "type": "WebGLVertexArrayObject",
                  "nullable": 1,
                  "param": []
                }
              ]
            },
            "deleteVertexArray": {
              "name": "deleteVertexArray",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "vertexArray",
                      "type": "WebGLVertexArrayObject",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "isVertexArray": {
              "name": "isVertexArray",
              "signature": [
                {
                  "type": "GLboolean",
                  "param": [
                    {
                      "name": "vertexArray",
                      "type": "WebGLVertexArrayObject",
                      "nullable": 1
                    }
                  ]
                }
              ]
            },
            "bindVertexArray": {
              "name": "bindVertexArray",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "array",
                      "type": "WebGLVertexArrayObject",
                      "nullable": 1
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "WebGL2RenderingContextOverloads": {
        "name": "WebGL2RenderingContextOverloads",
        "extends": "Object",
        "constants": {
          "constant": {}
        },
        "methods": {
          "method": {
            "bufferData": {
              "name": "bufferData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "size",
                      "type": "GLsizeiptr"
                    },
                    {
                      "name": "usage",
                      "type": "GLenum"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "BufferSource",
                      "nullable": 1
                    },
                    {
                      "name": "usage",
                      "type": "GLenum"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "usage",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint"
                    },
                    {
                      "name": "length",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "bufferSubData": {
              "name": "bufferSubData",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstByteOffset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "srcData",
                      "type": "BufferSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstByteOffset",
                      "type": "GLintptr"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint"
                    },
                    {
                      "name": "length",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "texImage2D": {
              "name": "texImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pixels",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pboOffset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "texSubImage2D": {
              "name": "texSubImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pixels",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "pboOffset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "source",
                      "type": "TexImageSource"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            },
            "compressedTexImage2D": {
              "name": "compressedTexImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "imageSize",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "internalformat",
                      "type": "GLenum"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "border",
                      "type": "GLint"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLengthOverride",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "compressedTexSubImage2D": {
              "name": "compressedTexSubImage2D",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "imageSize",
                      "type": "GLsizei"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "target",
                      "type": "GLenum"
                    },
                    {
                      "name": "level",
                      "type": "GLint"
                    },
                    {
                      "name": "xoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "yoffset",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "srcData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLengthOverride",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform1fv": {
              "name": "uniform1fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform2fv": {
              "name": "uniform2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform3fv": {
              "name": "uniform3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform4fv": {
              "name": "uniform4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform1iv": {
              "name": "uniform1iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Int32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform2iv": {
              "name": "uniform2iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Int32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform3iv": {
              "name": "uniform3iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Int32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniform4iv": {
              "name": "uniform4iv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "data",
                      "type": "Int32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix2fv": {
              "name": "uniformMatrix2fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix3fv": {
              "name": "uniformMatrix3fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "uniformMatrix4fv": {
              "name": "uniformMatrix4fv",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "location",
                      "type": "WebGLUniformLocation",
                      "nullable": 1
                    },
                    {
                      "name": "transpose",
                      "type": "GLboolean"
                    },
                    {
                      "name": "data",
                      "type": "Float32List"
                    },
                    {
                      "name": "srcOffset",
                      "type": "GLuint",
                      "optional": 1
                    },
                    {
                      "name": "srcLength",
                      "type": "GLuint",
                      "optional": 1
                    }
                  ]
                }
              ]
            },
            "readPixels": {
              "name": "readPixels",
              "signature": [
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstData",
                      "type": "ArrayBufferView",
                      "nullable": 1
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "offset",
                      "type": "GLintptr"
                    }
                  ]
                },
                {
                  "type": "void",
                  "param": [
                    {
                      "name": "x",
                      "type": "GLint"
                    },
                    {
                      "name": "y",
                      "type": "GLint"
                    },
                    {
                      "name": "width",
                      "type": "GLsizei"
                    },
                    {
                      "name": "height",
                      "type": "GLsizei"
                    },
                    {
                      "name": "format",
                      "type": "GLenum"
                    },
                    {
                      "name": "type",
                      "type": "GLenum"
                    },
                    {
                      "name": "dstData",
                      "type": "ArrayBufferView"
                    },
                    {
                      "name": "dstOffset",
                      "type": "GLuint"
                    }
                  ]
                }
              ]
            }
          }
        },
        "anonymous-methods": {
          "method": []
        },
        "properties": {
          "property": {},
          "namesakes": {}
        },
        "no-interface-object": 1,
        "legacy-window-alias": [],
        "mixin": true
      },
      "RandomSource": {
        "name": "RandomSource",
        "methods": {
          "method": {
            "getRandomValues": {
              "name": "getRandomValues",
              "override-signatures": [
                "getRandomValues<T extends Int8Array | Uint8ClampedArray | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array>(array: T): T"
              ]
            }
          }
        }
      }
    }
  },
  "typedefs": {
    "typedef": [
      {
        "new-type": "PasswordCredentialInit",
        "type": [
          {
            "type": "PasswordCredentialData"
          },
          {
            "type": "HTMLFormElement"
          }
        ]
      },
      {
        "new-type": "HeadersInit",
        "type": [
          {
            "type": "sequence",
            "subtype": {
              "type": "sequence",
              "subtype": {
                "type": "ByteString"
              }
            }
          },
          {
            "type": "record",
            "subtype": [
              {
                "type": "ByteString"
              },
              {
                "type": "ByteString"
              }
            ]
          }
        ],
        "override-type": "Headers | string[][] | Record<string, string>"
      },
      {
        "new-type": "BodyInit",
        "type": [
          {
            "type": "Blob"
          },
          {
            "type": "BufferSource"
          },
          {
            "type": "FormData"
          },
          {
            "type": "URLSearchParams"
          },
          {
            "type": "ReadableStream"
          },
          {
            "type": "USVString"
          }
        ],
        "override-type": "Blob | BufferSource | FormData | URLSearchParams | ReadableStream<Uint8Array> | string"
      },
      {
        "new-type": "RequestInfo",
        "type": [
          {
            "type": "Request"
          },
          {
            "type": "USVString"
          }
        ]
      },
      {
        "new-type": "BlobPart",
        "type": [
          {
            "type": "BufferSource"
          },
          {
            "type": "Blob"
          },
          {
            "type": "USVString"
          }
        ]
      },
      {
        "new-type": "DOMHighResTimeStamp",
        "type": "double"
      },
      {
        "new-type": "RenderingContext",
        "type": [
          {
            "type": "CanvasRenderingContext2D"
          },
          {
            "type": "ImageBitmapRenderingContext"
          },
          {
            "type": "WebGLRenderingContext"
          },
          {
            "type": "WebGL2RenderingContext"
          }
        ]
      },
      {
        "new-type": "HTMLOrSVGImageElement",
        "type": [
          {
            "type": "HTMLImageElement"
          },
          {
            "type": "SVGImageElement"
          }
        ]
      },
      {
        "new-type": "CanvasImageSource",
        "type": [
          {
            "type": "HTMLOrSVGImageElement"
          },
          {
            "type": "HTMLVideoElement"
          },
          {
            "type": "HTMLCanvasElement"
          },
          {
            "type": "ImageBitmap"
          },
          {
            "type": "OffscreenCanvas"
          }
        ]
      },
      {
        "new-type": "OffscreenRenderingContext",
        "type": [
          {
            "type": "OffscreenCanvasRenderingContext2D"
          },
          {
            "type": "ImageBitmapRenderingContext"
          },
          {
            "type": "WebGLRenderingContext"
          },
          {
            "type": "WebGL2RenderingContext"
          }
        ]
      },
      {
        "new-type": "MessageEventSource",
        "type": [
          {
            "type": "WindowProxy"
          },
          {
            "type": "MessagePort"
          },
          {
            "type": "ServiceWorker"
          }
        ]
      },
      {
        "new-type": "HTMLOrSVGScriptElement",
        "type": [
          {
            "type": "HTMLScriptElement"
          },
          {
            "type": "SVGScriptElement"
          }
        ]
      },
      {
        "new-type": "ImageBitmapSource",
        "type": [
          {
            "type": "CanvasImageSource"
          },
          {
            "type": "Blob"
          },
          {
            "type": "ImageData"
          }
        ]
      },
      {
        "new-type": "EventHandler",
        "type": "EventHandlerNonNull",
        "nullable": 1
      },
      {
        "new-type": "OnErrorEventHandler",
        "type": "OnErrorEventHandlerNonNull",
        "nullable": 1
      },
      {
        "new-type": "OnBeforeUnloadEventHandler",
        "type": "OnBeforeUnloadEventHandlerNonNull",
        "nullable": 1
      },
      {
        "new-type": "TimerHandler",
        "type": [
          {
            "type": "DOMString"
          },
          {
            "type": "Function"
          }
        ]
      },
      {
        "new-type": "MediaStreamError",
        "type": "object"
      },
      {
        "new-type": "ConstrainULong",
        "type": [
          {
            "type": "unsigned long"
          },
          {
            "type": "ConstrainULongRange"
          }
        ]
      },
      {
        "new-type": "ConstrainDouble",
        "type": [
          {
            "type": "double"
          },
          {
            "type": "ConstrainDoubleRange"
          }
        ]
      },
      {
        "new-type": "ConstrainBoolean",
        "type": [
          {
            "type": "boolean"
          },
          {
            "type": "ConstrainBooleanParameters"
          }
        ]
      },
      {
        "new-type": "ConstrainDOMString",
        "type": [
          {
            "type": "DOMString"
          },
          {
            "type": "sequence",
            "subtype": {
              "type": "DOMString"
            }
          },
          {
            "type": "ConstrainDOMStringParameters"
          }
        ]
      },
      {
        "new-type": "PerformanceEntryList",
        "type": "sequence",
        "subtype": {
          "type": "PerformanceEntry"
        }
      },
      {
        "new-type": "PushMessageDataInit",
        "type": [
          {
            "type": "BufferSource"
          },
          {
            "type": "USVString"
          }
        ]
      },
      {
        "new-type": "VibratePattern",
        "type": [
          {
            "type": "unsigned long"
          },
          {
            "type": "sequence",
            "subtype": {
              "type": "unsigned long"
            }
          }
        ]
      },
      {
        "new-type": "AuthenticationExtensionsAuthenticatorInputs",
        "type": "record",
        "subtype": [
          {
            "type": "DOMString"
          },
          {
            "type": "DOMString"
          }
        ]
      },
      {
        "new-type": "COSEAlgorithmIdentifier",
        "type": "long"
      },
      {
        "new-type": "AuthenticatorSelectionList",
        "type": "sequence",
        "subtype": {
          "type": "AAGUID"
        }
      },
      {
        "new-type": "AAGUID",
        "type": "BufferSource"
      },
      {
        "new-type": "AuthenticationExtensionsSupported",
        "type": "sequence",
        "subtype": {
          "type": "USVString"
        }
      },
      {
        "new-type": "UvmEntry",
        "type": "sequence",
        "subtype": {
          "type": "unsigned long"
        }
      },
      {
        "new-type": "UvmEntries",
        "type": "sequence",
        "subtype": {
          "type": "UvmEntry"
        }
      },
      {
        "new-type": "AlgorithmIdentifier",
        "type": [
          {
            "type": "object"
          },
          {
            "type": "DOMString"
          }
        ],
        "override-type": "string | Algorithm"
      },
      {
        "new-type": "HashAlgorithmIdentifier",
        "type": "AlgorithmIdentifier"
      },
      {
        "new-type": "BigInteger",
        "type": "Uint8Array"
      },
      {
        "new-type": "NamedCurve",
        "type": "DOMString"
      },
      {
        "new-type": "GLenum",
        "type": "unsigned long"
      },
      {
        "new-type": "GLboolean",
        "type": "boolean"
      },
      {
        "new-type": "GLbitfield",
        "type": "unsigned long"
      },
      {
        "new-type": "GLbyte",
        "type": "byte"
      },
      {
        "new-type": "GLshort",
        "type": "short"
      },
      {
        "new-type": "GLint",
        "type": "long"
      },
      {
        "new-type": "GLsizei",
        "type": "long"
      },
      {
        "new-type": "GLintptr",
        "type": "long long"
      },
      {
        "new-type": "GLsizeiptr",
        "type": "long long"
      },
      {
        "new-type": "GLubyte",
        "type": "octet"
      },
      {
        "new-type": "GLushort",
        "type": "unsigned short"
      },
      {
        "new-type": "GLuint",
        "type": "unsigned long"
      },
      {
        "new-type": "GLfloat",
        "type": "unrestricted float"
      },
      {
        "new-type": "GLclampf",
        "type": "unrestricted float"
      },
      {
        "new-type": "TexImageSource",
        "type": [
          {
            "type": "ImageBitmap"
          },
          {
            "type": "ImageData"
          },
          {
            "type": "HTMLImageElement"
          },
          {
            "type": "HTMLCanvasElement"
          },
          {
            "type": "HTMLVideoElement"
          },
          {
            "type": "OffscreenCanvas"
          }
        ]
      },
      {
        "new-type": "Float32List",
        "type": [
          {
            "type": "Float32Array"
          },
          {
            "type": "sequence",
            "subtype": {
              "type": "GLfloat"
            }
          }
        ]
      },
      {
        "new-type": "Int32List",
        "type": [
          {
            "type": "Int32Array"
          },
          {
            "type": "sequence",
            "subtype": {
              "type": "GLint"
            }
          }
        ]
      },
      {
        "new-type": "GLint64",
        "type": "long long"
      },
      {
        "new-type": "GLuint64",
        "type": "unsigned long long"
      },
      {
        "new-type": "Uint32List",
        "type": [
          {
            "type": "Uint32Array"
          },
          {
            "type": "sequence",
            "subtype": {
              "type": "GLuint"
            }
          }
        ]
      },
      {
        "new-type": "BufferSource",
        "type": [
          {
            "type": "ArrayBufferView"
          },
          {
            "type": "ArrayBuffer"
          }
        ]
      },
      {
        "new-type": "DOMTimeStamp",
        "type": "unsigned long long"
      },
      {
        "new-type": "LineAndPositionSetting",
        "type": [
          {
            "type": "double"
          },
          {
            "type": "AutoKeyword"
          }
        ]
      },
      {
        "new-type": "FormDataEntryValue",
        "type": [
          {
            "type": "File"
          },
          {
            "type": "USVString"
          }
        ]
      },
      {
        "override-type": "\"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\"",
        "new-type": "InsertPosition"
      },
      {
        "override-type": "number | string | Date | BufferSource | IDBArrayKey",
        "new-type": "IDBValidKey"
      },
      {
        "new-type": "MutationRecordType",
        "override-type": "\"attributes\" | \"characterData\" | \"childList\""
      },
      {
        "new-type": "IDBKeyPath",
        "override-type": "string"
      },
      {
        "new-type": "Transferable",
        "override-type": "ArrayBuffer | MessagePort | ImageBitmap"
      },
      {
        "new-type": "RTCIceGatherCandidate",
        "override-type": "RTCIceCandidateDictionary | RTCIceCandidateComplete"
      },
      {
        "new-type": "RTCTransport",
        "override-type": "RTCDtlsTransport | RTCSrtpSdesTransport"
      },
      {
        "new-type": "MouseWheelEvent",
        "type": "WheelEvent",
        "deprecated": 1
      },
      {
        "new-type": "WindowProxy",
        "type": "Window"
      },
      {
        "new-type": "ExportValue",
        "legacy-namespace": "WebAssembly",
        "override-type": "Function | Global | Memory | Table"
      },
      {
        "new-type": "Exports",
        "legacy-namespace": "WebAssembly",
        "type": "record",
        "subtype": [
          {
            "type": "DOMString"
          },
          {
            "type": "ExportValue"
          }
        ]
      },
      {
        "new-type": "ImportValue",
        "legacy-namespace": "WebAssembly",
        "override-type": "ExportValue | number"
      },
      {
        "new-type": "ModuleImports",
        "legacy-namespace": "WebAssembly",
        "type": "record",
        "subtype": [
          {
            "type": "DOMString"
          },
          {
            "type": "ImportValue"
          }
        ]
      },
      {
        "new-type": "Imports",
        "legacy-namespace": "WebAssembly",
        "type": "record",
        "subtype": [
          {
            "type": "DOMString"
          },
          {
            "type": "ModuleImports"
          }
        ]
      }
    ]
  },
  "namespaces": [
    {
      "name": "WebAssembly",
      "extends": "Object",
      "constructor": {
        "signature": []
      },
      "methods": {
        "method": {
          "validate": {
            "name": "validate",
            "signature": [
              {
                "type": "boolean",
                "param": [
                  {
                    "name": "bytes",
                    "type": "BufferSource"
                  }
                ]
              }
            ],
            "exposed": "Window Worker Worklet"
          },
          "compile": {
            "name": "compile",
            "signature": [
              {
                "type": "Promise",
                "subtype": {
                  "type": "Module"
                },
                "param": [
                  {
                    "name": "bytes",
                    "type": "BufferSource"
                  }
                ]
              }
            ],
            "exposed": "Window Worker Worklet"
          },
          "instantiate": {
            "name": "instantiate",
            "signature": [
              {
                "type": "Promise",
                "subtype": {
                  "type": "WebAssemblyInstantiatedSource"
                },
                "param": [
                  {
                    "name": "bytes",
                    "type": "BufferSource"
                  },
                  {
                    "name": "importObject",
                    "type": "object",
                    "optional": 1
                  }
                ]
              },
              {
                "type": "Promise",
                "subtype": {
                  "type": "Instance"
                },
                "param": [
                  {
                    "name": "moduleObject",
                    "type": "Module"
                  },
                  {
                    "name": "importObject",
                    "type": "object",
                    "optional": 1
                  }
                ]
              }
            ],
            "exposed": "Window Worker Worklet",
            "override-signatures": [
              "instantiate(bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>",
              "instantiate(moduleObject: Module, importObject?: Imports): Promise<Instance>"
            ],
            "force-references": [
              {
                "type": "Imports"
              }
            ]
          },
          "compileStreaming": {
            "name": "compileStreaming",
            "signature": [
              {
                "type": "Promise",
                "subtype": {
                  "type": "Module"
                },
                "param": [
                  {
                    "name": "source",
                    "type": "Promise",
                    "subtype": {
                      "type": "Response"
                    }
                  }
                ]
              }
            ]
          },
          "instantiateStreaming": {
            "name": "instantiateStreaming",
            "signature": [
              {
                "type": "Promise",
                "subtype": {
                  "type": "WebAssemblyInstantiatedSource"
                },
                "param": [
                  {
                    "name": "source",
                    "type": "Promise",
                    "subtype": {
                      "type": "Response"
                    }
                  },
                  {
                    "name": "importObject",
                    "type": "object",
                    "optional": 1
                  }
                ]
              }
            ],
            "override-signatures": [
              "instantiateStreaming(response: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>"
            ],
            "force-references": [
              {
                "type": "Imports"
              }
            ]
          }
        }
      },
      "properties": {
        "property": {}
      }
    }
  ]
}