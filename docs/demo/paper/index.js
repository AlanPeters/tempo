!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=48)}([function(t,e,n){var i,r,s;(function(a,o){var h=(a=a||n(35)).window,u=a.document,c=new function(){var t=/^(statics|enumerable|beans|preserve)$/,e=[],n=e.slice,i=Object.create,r=Object.getOwnPropertyDescriptor,s=Object.defineProperty,a=e.forEach||function(t,e){for(var n=0,i=this.length;n<i;n++)t.call(e,this[n],n,this)},h=function(t,e){for(var n in this)this.hasOwnProperty(n)&&t.call(e,this[n],n,this)},u=Object.assign||function(t){for(var e=1,n=arguments.length;e<n;e++){var i=arguments[e];for(var r in i)i.hasOwnProperty(r)&&(t[r]=i[r])}return t},c=function(t,e,n){if(t){var i=r(t,"length");(i&&"number"==typeof i.value?a:h).call(t,e,n=n||t)}return n};function l(e,n,i,a,o){var h={};function u(t,u){"string"==typeof(u=u||(u=r(n,t))&&(u.get?u:u.value))&&"#"===u[0]&&(u=e[u.substring(1)]||u);var c,l="function"==typeof u,d=u,p=o||l&&!u.base?u&&u.get?t in e:e[t]:null;o&&p||(l&&p&&(u.base=p),l&&!1!==a&&(c=t.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(h[c[3].toLowerCase()+c[4]]=c[2]),d&&!l&&d.get&&"function"==typeof d.get&&f.isPlainObject(d)||(d={value:d,writable:!0}),(r(e,t)||{configurable:!0}).configurable&&(d.configurable=!0,d.enumerable=null!=i?i:!c),s(e,t,d))}if(n){for(var c in n)n.hasOwnProperty(c)&&!t.test(c)&&u(c);for(var c in h){var l=h[c],d=e["set"+l],p=e["get"+l]||d&&e["is"+l];!p||!0!==a&&0!==p.length||u(c,{get:p,set:d})}}return e}function f(){for(var t=0,e=arguments.length;t<e;t++){var n=arguments[t];n&&u(this,n)}return this}return l(f,{inject:function(t){if(t){var e=!0===t.statics?t:t.statics,n=t.beans,i=t.preserve;e!==t&&l(this.prototype,t,t.enumerable,n,i),l(this,e,null,n,i)}for(var r=1,s=arguments.length;r<s;r++)this.inject(arguments[r]);return this},extend:function(){for(var t,e,n,r=this,a=0,o=arguments.length;a<o&&(!t||!e);a++)n=arguments[a],t=t||n.initialize,e=e||n.prototype;return e=(t=t||function(){r.apply(this,arguments)}).prototype=e||i(this.prototype),s(e,"constructor",{value:t,writable:!0,configurable:!0}),l(t,this),arguments.length&&this.inject.apply(t,arguments),t.base=r,t}}).inject({enumerable:!1,initialize:f,set:f,inject:function(){for(var t=0,e=arguments.length;t<e;t++){var n=arguments[t];n&&l(this,n,n.enumerable,n.beans,n.preserve)}return this},extend:function(){var t=i(this);return t.inject.apply(t,arguments)},each:function(t,e){return c(this,t,e)},clone:function(){return new this.constructor(this)},statics:{set:u,each:c,create:i,define:s,describe:r,clone:function(t){return u(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===f||"Object"===e.name)},pick:function(t,e){return t!==o?t:e},slice:function(t,e,i){return n.call(t,e,i)}}})};t.exports=c,c.inject({enumerable:!1,toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+c.each(this,(function(t,e){if(!/^_/.test(e)){var n=typeof t;this.push(e+": "+("number"===n?p.instance.number(t):"string"===n?"'"+t+"'":t))}}),[]).join(", ")+" }"},getClassName:function(){return this._class||""},importJSON:function(t){return c.importJSON(t,this)},exportJSON:function(t){return c.exportJSON(this,t)},toJSON:function(){return c.serialize(this)},set:function(t,e){return t&&c.filter(this,t,e,this._prioritize),this}},{beans:!1,statics:{exports:{},extend:function t(){var e=t.base.apply(this,arguments),n=e.prototype._class;return n&&!c.exports[n]&&(c.exports[n]=e),e},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){if((n=t.length)!==e.length)return!1;for(;n--;)if(!c.equals(t[n],e[n]))return!1}else{var n,i=Object.keys(t);if((n=i.length)!==Object.keys(e).length)return!1;for(;n--;){var r=i[n];if(!e.hasOwnProperty(r)||!c.equals(t[r],e[r]))return!1}}return!0}return!1},read:function(t,e,n,i){if(this===c){var r=this.peek(t,e);return t.__index++,r}var s=this.prototype,a=s._readIndex,h=e||a&&t.__index||0,u=t.length,l=t[h];if(i=i||u-h,l instanceof this||n&&n.readNull&&null==l&&i<=1)return a&&(t.__index=h+1),l&&n&&n.clone?l.clone():l;if(l=c.create(s),a&&(l.__read=!0),l=l.initialize.apply(l,h>0||h+i<u?c.slice(t,h,h+i):t)||l,a){t.__index=h+l.__read;var f=l.__filtered;f&&(t.__filtered=f,l.__filtered=o),l.__read=o}return l},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readList:function(t,e,n,i){for(var r,s=[],a=e||0,o=i?a+i:t.length,h=a;h<o;h++)s.push(Array.isArray(r=t[h])?this.read(r,0,n):this.read(t,h,n,1));return s},readNamed:function(t,e,n,i,r){var s=this.getNamed(t,e),a=s!==o;if(a){var h=t.__filtered;h||((h=t.__filtered=c.create(t[0])).__unfiltered=t[0]),h[e]=o}var u=a?[s]:t;return this.read(u,n,i,r)},getNamed:function(t,e){var n=t[0];if(t._hasObject===o&&(t._hasObject=1===t.length&&c.isPlainObject(n)),t._hasObject)return e?n[e]:t.__filtered||n},hasNamed:function(t,e){return!!this.getNamed(t,e)},filter:function(t,e,n,i){var r;function s(i){if(!(n&&i in n||r&&i in r)){var s=e[i];s!==o&&(t[i]=s)}}if(i){for(var a,h={},u=0,c=i.length;u<c;u++)(a=i[u])in e&&(s(a),h[a]=!0);r=h}return Object.keys(e.__unfiltered||e).forEach(s),t},isPlainValue:function(t,e){return c.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,n,i){e=e||{};var r,s=!i;if(s&&(e.formatter=new p(e.precision),i={length:0,definitions:{},references:{},add:function(t,e){var n="#"+t._id,i=this.references[n];if(!i){this.length++;var r=e.call(t),s=t._class;s&&r[0]!==s&&r.unshift(s),this.definitions[n]=r,i=this.references[n]=[n]}return i}}),t&&t._serialize){r=t._serialize(e,i);var a=t._class;!a||t._compactSerialize||!s&&n||r[0]===a||r.unshift(a)}else if(Array.isArray(t)){r=[];for(var o=0,h=t.length;o<h;o++)r[o]=c.serialize(t[o],e,n,i)}else if(c.isPlainObject(t)){r={};var u=Object.keys(t);for(o=0,h=u.length;o<h;o++){var l=u[o];r[l]=c.serialize(t[l],e,n,i)}}else r="number"==typeof t?e.formatter.number(t,e.precision):t;return s&&i.length>0?[["dictionary",i.definitions],r]:r},deserialize:function(t,e,n,i,r){var s=t,a=!n,o=a&&t&&t.length&&"dictionary"===t[0][0];if(n=n||{},Array.isArray(t)){var h=t[0],u="dictionary"===h;if(1==t.length&&/^#/.test(h))return n.dictionary[h];s=[];for(var l=(h=c.exports[h])?1:0,f=t.length;l<f;l++)s.push(c.deserialize(t[l],e,n,u,o));if(h){var d=s;s=e?e(h,d,a||r):new h(d)}}else if(c.isPlainObject(t))for(var p in s={},i&&(n.dictionary=s),t)s[p]=c.deserialize(t[p],e,n);return o?s[1]:s},exportJSON:function(t,e){var n=c.serialize(t,e);return e&&0==e.asString?n:JSON.stringify(n)},importJSON:function(t,e){return c.deserialize("string"==typeof t?JSON.parse(t):t,(function(t,n,i){var r=i&&e&&e.constructor===t,s=r?e:c.create(t.prototype);if(1===n.length&&s instanceof P&&(r||!(s instanceof I))){var a=n[0];c.isPlainObject(a)&&(a.insert=!1,r&&(n=n.concat([{insert:!0}])))}return(r?s.set:t).apply(s,n),r&&(e=null),s}))},push:function(t,e){var n=e.length;if(n<4096)t.push.apply(t,e);else{var i=t.length;t.length+=n;for(var r=0;r<n;r++)t[i+r]=e[r]}return t},splice:function(t,e,n,i){var r=e&&e.length,s=n===o;(n=s?t.length:n)>t.length&&(n=t.length);for(var a=0;a<r;a++)e[a]._index=n+a;if(s)return c.push(t,e),[];var h=[n,i];e&&c.push(h,e);for(var u=t.splice.apply(t,h),l=(a=0,u.length);a<l;a++)u[a]._index=o;for(a=n+r,l=t.length;a<l;a++)t[a]._index=a;return u},capitalize:function(t){return t.replace(/\b[a-z]/g,(function(t){return t.toUpperCase()}))},camelize:function(t){return t.replace(/-(.)/g,(function(t,e){return e.toUpperCase()}))},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var l={on:function(t,e){if("string"!=typeof t)c.each(t,(function(t,e){this.on(e,t)}),this);else{var n=this._eventTypes,i=n&&n[t],r=this._callbacks=this._callbacks||{};-1===(r=r[t]=r[t]||[]).indexOf(e)&&(r.push(e),i&&i.install&&1===r.length&&i.install.call(this,t))}return this},off:function(t,e){if("string"==typeof t){var n,i=this._eventTypes,r=i&&i[t],s=this._callbacks&&this._callbacks[t];return s&&(!e||-1!==(n=s.indexOf(e))&&1===s.length?(r&&r.uninstall&&r.uninstall.call(this,t),delete this._callbacks[t]):-1!==n&&s.splice(n,1)),this}c.each(t,(function(t,e){this.off(e,t)}),this)},once:function(t,e){return this.on(t,(function n(){e.apply(this,arguments),this.off(t,n)}))},emit:function(t,e){var n=this._callbacks&&this._callbacks[t];if(!n)return!1;var i=c.slice(arguments,1),r=e&&e.target&&!e.currentTarget;n=n.slice(),r&&(e.currentTarget=this);for(var s=0,a=n.length;s<a;s++)if(0==n[s].apply(this,i)){e&&e.stop&&e.stop();break}return r&&delete e.currentTarget,!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._eventTypes,n=this._callbacks,i=t?"install":"uninstall";if(e)for(var r in n)if(n[r].length>0){var s=e[r],a=s&&s[i];a&&a.call(this,r)}},statics:{inject:function t(e){var n=e._events;if(n){var i={};c.each(n,(function(t,n){var r="string"==typeof t,s=r?t:n,a=c.capitalize(s),o=s.substring(2).toLowerCase();i[o]=r?{}:t,s="_"+s,e["get"+a]=function(){return this[s]},e["set"+a]=function(t){var e=this[s];e&&this.off(o,e),t&&this.on(o,t),this[s]=t}})),e._eventTypes=i}return t.base.apply(this,arguments)}}},f=c.extend({_class:"PaperScope",initialize:function t(){lt=this,this.settings=new c({applyMatrix:!0,insertItems:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this._id=t._id++,t._scopes[this._id]=this;var e=t.prototype;if(!this.support){var n=ot.getContext(1,1)||{};e.support={nativeDash:"setLineDash"in n||"mozDash"in n,nativeBlendModes:ht.nativeModes},ot.release(n)}if(!this.agent){var i=a.navigator.userAgent.toLowerCase(),r=(/(darwin|win|mac|linux|freebsd|sunos)/.exec(i)||[])[0],s="darwin"===r?"mac":r,o=e.agent=e.browser={platform:s};s&&(o[s]=!0),i.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g,(function(t,e,n,i,r){if(!o.chrome){var s="opera"===e?i:/^(node|trident)$/.test(e)?r:n;o.version=s,o.versionNumber=parseFloat(s),e={trident:"msie",jsdom:"node"}[e]||e,o.name=e,o[e]=!0}})),o.chrome&&delete o.webkit,o.atom&&delete o.chrome}},version:"0.12.3",getView:function(){var t=this.project;return t&&t._view},getPaper:function(){return this},execute:function(t,e){var n=lt.PaperScript.execute(t,this,e);return J.updateFocus(),n},install:function(t){var e=this;for(var n in c.each(["project","view","tool"],(function(n){c.define(t,n,{configurable:!0,get:function(){return e[n]}})})),this)!/^_/.test(n)&&this[n]&&(t[n]=this[n])},setup:function(t){return lt=this,this.project=new k(t),this},createCanvas:function(t,e){return ot.getCanvas(t,e)},activate:function(){lt=this},clear:function(){for(var t=this.projects,e=this.tools,n=t.length-1;n>=0;n--)t[n].remove();for(n=e.length-1;n>=0;n--)e[n].remove()},remove:function(){this.clear(),delete f._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,n){return e[t](n)||e[t]("data-paper-"+n)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),d=c.extend(l,{initialize:function(t){this._scope=lt,this._index=this._scope[this._list].push(this)-1,!t&&this._scope[this._reference]||this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null!=this._index&&(c.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)},getView:function(){return this._scope.getView()}}),p=c.extend({initialize:function(t){this.precision=c.pick(t,5),this.multiplier=Math.pow(10,this.precision)},number:function(t){return this.precision<16?Math.round(t*this.multiplier)/this.multiplier:t},pair:function(t,e,n){return this.number(t)+(n||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});p.instance=new p;var g=new function(){var t=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],e=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],n=Math.abs,i=Math.sqrt,r=Math.pow,s=Math.log2||function(t){return Math.log(t)*Math.LOG2E};function a(t,e,n){return t<e?e:t>n?n:t}function o(t,e,i){function r(t){var e=134217729*t,n=t-e+e;return[n,t-n]}var s=e*e-t*i,a=e*e+t*i;if(3*n(s)<a){var o=r(t),h=r(e),u=r(i),c=e*e,l=t*i;s=c-l+(h[0]*h[0]-c+2*h[0]*h[1]+h[1]*h[1]-(o[0]*u[0]-l+o[0]*u[1]+o[1]*u[0]+o[1]*u[1]))}return s}function h(){var t=Math.max.apply(Math,arguments);return t&&(t<1e-8||t>1e8)?r(2,-Math.round(s(t))):0}return{EPSILON:1e-12,MACHINE_EPSILON:112e-18,CURVETIME_EPSILON:1e-8,GEOMETRIC_EPSILON:1e-7,TRIGONOMETRIC_EPSILON:1e-8,KAPPA:4*(i(2)-1)/3,isZero:function(t){return t>=-1e-12&&t<=1e-12},clamp:a,integrate:function(n,i,r,s){for(var a=t[s-2],o=e[s-2],h=.5*(r-i),u=h+i,c=0,l=s+1>>1,f=1&s?o[c++]*n(u):0;c<l;){var d=h*a[c];f+=o[c++]*(n(u+d)+n(u-d))}return h*f},findRoot:function(t,e,i,r,s,o,h){for(var u=0;u<o;u++){var c=t(i),l=c/e(i),f=i-l;if(n(l)<h){i=f;break}c>0?(s=i,i=f<=r?.5*(r+s):f):(r=i,i=f>=s?.5*(r+s):f)}return a(i,r,s)},solveQuadratic:function(t,e,r,s,u,c){var l,f=1/0;if(n(t)<1e-12){if(n(e)<1e-12)return n(r)<1e-12?-1:0;l=-r/e}else{var d=o(t,e*=-.5,r);if(d&&n(d)<112e-18){var p=h(n(t),n(e),n(r));p&&(d=o(t*=p,e*=p,r*=p))}if(d>=-112e-18){var g=d<0?0:i(d),_=e+(e<0?-g:g);0===_?f=-(l=r/t):(l=_/t,f=r/_)}}var v=0,m=null==u,y=u-1e-12,x=c+1e-12;return isFinite(l)&&(m||l>y&&l<x)&&(s[v++]=m?l:a(l,u,c)),f!==l&&isFinite(f)&&(m||f>y&&f<x)&&(s[v++]=m?f:a(f,u,c)),v},solveCubic:function(t,e,s,o,u,c,l){var f,d,p,_,v,m=h(n(t),n(e),n(s),n(o));function y(n){var i=t*(f=n);_=(i+(d=i+e))*f+(p=d*f+s),v=p*f+o}if(m&&(t*=m,e*=m,s*=m,o*=m),n(t)<1e-12)t=e,d=s,p=o,f=1/0;else if(n(o)<1e-12)d=e,p=s,f=0;else{y(-e/t/3);var x=v/t,b=r(n(x),1/3),w=x<0?-1:1,S=-_/t,C=S>0?1.324717957244746*Math.max(b,i(S)):b,k=f-w*C;if(k!==f){do{y(k),k=0===_?f:f-v/_/(1+112e-18)}while(w*k>w*f);n(t)*f*f>n(o/f)&&(d=((p=-o/f)-s)/f)}}var P=g.solveQuadratic(t,d,p,u,c,l),A=null==c;return isFinite(f)&&(0===P||P>0&&f!==u[0]&&f!==u[1])&&(A||f>c-1e-12&&f<l+1e-12)&&(u[P++]=A?f:a(f,c,l)),P}}},_={_id:1,_pools:{},get:function(t){if(t){var e=this._pools[t];return e||(e=this._pools[t]={_id:1}),e._id++}return this._id++}},v=c.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var n=typeof t,i=this.__read,r=0;if("number"===n){var s="number"==typeof e;this._set(t,s?e:t),i&&(r=s?2:1)}else if("undefined"===n||null===t)this._set(0,0),i&&(r=null===t?1:0);else{var a="string"===n?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"x"in a?this._set(a.x||0,a.y||0):"width"in a?this._set(a.width||0,a.height||0):"angle"in a?(this._set(a.length||0,0),this.setAngle(a.angle||0)):(this._set(0,0),r=0)}return i&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new v(this.x,this.y)},toString:function(){var t=p.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this._set(Math.cos(e)*t,Math.sin(e)*t)}else{var n=t/this.getLength();g.isZero(n)&&this.getAngle(),this._set(this.x*n,this.y*n)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=v.read(arguments),e=this.getLength()*t.getLength();if(g.isZero(e))return NaN;var n=this.dot(t)/e;return Math.acos(n<-1?-1:n>1?1:n)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this._set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=v.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=v.read(arguments),e=t.x-this.x,n=t.y-this.y,i=e*e+n*n,r=c.read(arguments);return r?i:Math.sqrt(i)},normalize:function(t){t===o&&(t=1);var e=this.getLength(),n=0!==e?t/e:0,i=new v(this.x*n,this.y*n);return n>=0&&(i._angle=this._angle),i},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var n=e?this.subtract(e):this,i=Math.sin(t),r=Math.cos(t);return n=new v(n.x*r-n.y*i,n.x*i+n.y*r),e?n.add(e):n},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=v.read(arguments);return new v(this.x+t.x,this.y+t.y)},subtract:function(){var t=v.read(arguments);return new v(this.x-t.x,this.y-t.y)},multiply:function(){var t=v.read(arguments);return new v(this.x*t.x,this.y*t.y)},divide:function(){var t=v.read(arguments);return new v(this.x/t.x,this.y/t.y)},modulo:function(){var t=v.read(arguments);return new v(this.x%t.x,this.y%t.y)},negate:function(){return new v(-this.x,-this.y)},isInside:function(){return b.read(arguments).contains(this)},isClose:function(){var t=v.read(arguments),e=c.read(arguments);return this.getDistance(t)<=e},isCollinear:function(){var t=v.read(arguments);return v.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=v.read(arguments);return v.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){var t=g.isZero;return t(this.x)&&t(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},isInQuadrant:function(t){return this.x*(t>1&&t<4?-1:1)>=0&&this.y*(t>2?-1:1)>=0},dot:function(){var t=v.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=v.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=v.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new v(t.x*e,t.y*e)},statics:{min:function(){var t=v.read(arguments),e=v.read(arguments);return new v(Math.min(t.x,e.x),Math.min(t.y,e.y))},max:function(){var t=v.read(arguments),e=v.read(arguments);return new v(Math.max(t.x,e.x),Math.max(t.y,e.y))},random:function(){return new v(Math.random(),Math.random())},isCollinear:function(t,e,n,i){return Math.abs(t*i-e*n)<=1e-8*Math.sqrt((t*t+e*e)*(n*n+i*i))},isOrthogonal:function(t,e,n,i){return Math.abs(t*n+e*i)<=1e-8*Math.sqrt((t*t+e*e)*(n*n+i*i))}}},c.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new v(e(this.x),e(this.y))}}),{})),m=v.extend({initialize:function(t,e,n,i){this._x=t,this._y=e,this._owner=n,this._setter=i},_set:function(t,e,n){return this._x=t,this._y=e,n||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){return"setPosition"===this._setter?4:0}}),y=c.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var n=typeof t,i=this.__read,r=0;if("number"===n){var s="number"==typeof e;this._set(t,s?e:t),i&&(r=s?2:1)}else if("undefined"===n||null===t)this._set(0,0),i&&(r=null===t?1:0);else{var a="string"===n?t.split(/[\s,]+/)||[]:t;r=1,Array.isArray(a)?this._set(+a[0],+(a.length>1?a[1]:a[0])):"width"in a?this._set(a.width||0,a.height||0):"x"in a?this._set(a.x||0,a.y||0):(this._set(0,0),r=0)}return i&&(this.__read=r),this},set:"#initialize",_set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new y(this.width,this.height)},toString:function(){var t=p.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=y.read(arguments);return new y(this.width+t.width,this.height+t.height)},subtract:function(){var t=y.read(arguments);return new y(this.width-t.width,this.height-t.height)},multiply:function(){var t=y.read(arguments);return new y(this.width*t.width,this.height*t.height)},divide:function(){var t=y.read(arguments);return new y(this.width/t.width,this.height/t.height)},modulo:function(){var t=y.read(arguments);return new y(this.width%t.width,this.height%t.height)},negate:function(){return new y(-this.width,-this.height)},isZero:function(){var t=g.isZero;return t(this.width)&&t(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new y(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new y(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new y(Math.random(),Math.random())}}},c.each(["round","ceil","floor","abs"],(function(t){var e=Math[t];this[t]=function(){return new y(e(this.width),e(this.height))}}),{})),x=y.extend({initialize:function(t,e,n,i){this._width=t,this._height=e,this._owner=n,this._setter=i},_set:function(t,e,n){return this._width=t,this._height=e,n||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),b=c.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(t,e,n,i){var r,s=typeof t;if("number"===s?(this._set(t,e,n,i),r=4):"undefined"===s||null===t?(this._set(0,0,0,0),r=null===t?1:0):1===arguments.length&&(Array.isArray(t)?(this._set.apply(this,t),r=1):t.x!==o||t.width!==o?(this._set(t.x||0,t.y||0,t.width||0,t.height||0),r=1):t.from===o&&t.to===o&&(this._set(0,0,0,0),c.filter(this,t),r=1)),r===o){var a,h,u=v.readNamed(arguments,"from"),l=c.peek(arguments),f=u.x,d=u.y;if(l&&l.x!==o||c.hasNamed(arguments,"to")){var p=v.readNamed(arguments,"to");a=p.x-f,h=p.y-d,a<0&&(f=p.x,a=-a),h<0&&(d=p.y,h=-h)}else{var g=y.read(arguments);a=g.width,h=g.height}this._set(f,d,a,h),r=arguments.__index;var _=arguments.__filtered;_&&(this.__filtered=_)}return this.__read&&(this.__read=r),this},set:"#initialize",_set:function(t,e,n,i){return this.x=t,this.y=e,this.width=n,this.height=i,this},clone:function(){return new b(this.x,this.y,this.width,this.height)},equals:function(t){var e=c.isPlainValue(t)?b.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=p.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){return new(t?v:m)(this.x,this.y,this,"setPoint")},setPoint:function(){var t=v.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){return new(t?y:x)(this.width,this.height,this,"setSize")},_fw:1,_fh:1,setSize:function(){var t=y.read(arguments),e=this._sx,n=this._sy,i=t.width,r=t.height;e&&(this.x+=(this.width-i)*e),n&&(this.y+=(this.height-r)*n),this.width=i,this.height=r,this._fw=this._fh=1},getLeft:function(){return this.x},setLeft:function(t){if(!this._fw){var e=t-this.x;this.width-=.5===this._sx?2*e:e}this.x=t,this._sx=this._fw=0},getTop:function(){return this.y},setTop:function(t){if(!this._fh){var e=t-this.y;this.height-=.5===this._sy?2*e:e}this.y=t,this._sy=this._fh=0},getRight:function(){return this.x+this.width},setRight:function(t){if(!this._fw){var e=t-this.x;this.width=.5===this._sx?2*e:e}this.x=t-this.width,this._sx=1,this._fw=0},getBottom:function(){return this.y+this.height},setBottom:function(t){if(!this._fh){var e=t-this.y;this.height=.5===this._sy?2*e:e}this.y=t-this.height,this._sy=1,this._fh=0},getCenterX:function(){return this.x+this.width/2},setCenterX:function(t){this._fw||.5===this._sx?this.x=t-this.width/2:(this._sx&&(this.x+=2*(t-this.x)*this._sx),this.width=2*(t-this.x)),this._sx=.5,this._fw=0},getCenterY:function(){return this.y+this.height/2},setCenterY:function(t){this._fh||.5===this._sy?this.y=t-this.height/2:(this._sy&&(this.y+=2*(t-this.y)*this._sy),this.height=2*(t-this.y)),this._sy=.5,this._fh=0},getCenter:function(t){return new(t?v:m)(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=v.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(t){return t&&t.width!==o||4===(Array.isArray(t)?t:arguments).length?this._containsRectangle(b.read(arguments)):this._containsPoint(v.read(arguments))},_containsPoint:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e<=this.x+this.width&&n<=this.y+this.height},_containsRectangle:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e+t.width<=this.x+this.width&&n+t.height<=this.y+this.height},intersects:function(){var t=b.read(arguments),e=c.read(arguments)||0;return t.x+t.width>this.x-e&&t.y+t.height>this.y-e&&t.x<this.x+this.width+e&&t.y<this.y+this.height+e},intersect:function(){var t=b.read(arguments),e=Math.max(this.x,t.x),n=Math.max(this.y,t.y),i=Math.min(this.x+this.width,t.x+t.width),r=Math.min(this.y+this.height,t.y+t.height);return new b(e,n,i-e,r-n)},unite:function(){var t=b.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x+t.width),r=Math.max(this.y+this.height,t.y+t.height);return new b(e,n,i-e,r-n)},include:function(){var t=v.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x),r=Math.max(this.y+this.height,t.y);return new b(e,n,i-e,r-n)},expand:function(){var t=y.read(arguments),e=t.width,n=t.height;return new b(this.x-e/2,this.y-n/2,this.width+e,this.height+n)},scale:function(t,e){return this.expand(this.width*t-this.width,this.height*(e===o?t:e)-this.height)}},c.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],(function(t,e){var n=t.join(""),i=/^[RL]/.test(n);e>=4&&(t[1]+=i?"Y":"X");var r=t[i?0:1],s=t[i?1:0],a="get"+r,o="get"+s,h="set"+r,u="set"+s,c="set"+n;this["get"+n]=function(t){return new(t?v:m)(this[a](),this[o](),this,c)},this[c]=function(){var t=v.read(arguments);this[h](t.x),this[u](t.y)}}),{beans:!0})),w=b.extend({initialize:function(t,e,n,i,r,s){this._set(t,e,n,i,!0),this._owner=r,this._setter=s},_set:function(t,e,n,i,r){return this._x=t,this._y=e,this._width=n,this._height=i,r||this._owner[this._setter](this),this}},new function(){var t=b.prototype;return c.each(["x","y","width","height"],(function(t){var e=c.capitalize(t),n="_"+t;this["get"+e]=function(){return this[n]},this["set"+e]=function(t){this[n]=t,this._dontNotify||this._owner[this._setter](this)}}),c.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],(function(e){var n="set"+e;this[n]=function(){this._dontNotify=!0,t[n].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}}),{isSelected:function(){return!!(2&this._owner._selection)},setSelected:function(t){var e=this._owner;e._changeSelection&&e._changeSelection(2,t)}}))}),S=c.extend({_class:"Matrix",initialize:function t(e,n){var i=arguments.length,r=!0;if(i>=6?this._set.apply(this,arguments):1===i||2===i?e instanceof t?this._set(e._a,e._b,e._c,e._d,e._tx,e._ty,n):Array.isArray(e)?this._set.apply(this,n?e.concat([n]):e):r=!1:i?r=!1:this.reset(),!r)throw new Error("Unsupported matrix parameters");return this},set:"#initialize",_set:function(t,e,n,i,r,s,a){return this._a=t,this._b=e,this._c=n,this._d=i,this._tx=r,this._ty=s,a||this._changed(),this},_serialize:function(t,e){return c.serialize(this.getValues(),t,!0,e)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(25))},clone:function(){return new S(this._a,this._b,this._c,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty},toString:function(){var t=p.instance;return"[["+[t.number(this._a),t.number(this._c),t.number(this._tx)].join(", ")+"], ["+[t.number(this._b),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._b=this._c=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var n=this._owner;return!!n&&(n.transform(null,!0,c.pick(t,!0),e),this.isIdentity())},translate:function(){var t=v.read(arguments),e=t.x,n=t.y;return this._tx+=e*this._a+n*this._c,this._ty+=e*this._b+n*this._d,this._changed(),this},scale:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0});return e&&this.translate(e),this._a*=t.x,this._b*=t.x,this._c*=t.y,this._d*=t.y,e&&this.translate(e.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=v.read(arguments,1),n=e.x,i=e.y,r=Math.cos(t),s=Math.sin(t),a=n-n*r+i*s,o=i-n*s-i*r,h=this._a,u=this._b,c=this._c,l=this._d;return this._a=r*h+s*c,this._b=r*u+s*l,this._c=-s*h+r*c,this._d=-s*u+r*l,this._tx+=a*h+o*c,this._ty+=a*u+o*l,this._changed(),this},shear:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0});e&&this.translate(e);var n=this._a,i=this._b;return this._a+=t.y*this._c,this._b+=t.y*this._d,this._c+=t.x*n,this._d+=t.x*i,e&&this.translate(e.negate()),this._changed(),this},skew:function(){var t=v.read(arguments),e=v.read(arguments,0,{readNull:!0}),n=Math.PI/180,i=new v(Math.tan(t.x*n),Math.tan(t.y*n));return this.shear(i,e)},append:function(t,e){if(t){var n=this._a,i=this._b,r=this._c,s=this._d,a=t._a,o=t._c,h=t._b,u=t._d,c=t._tx,l=t._ty;this._a=a*n+h*r,this._c=o*n+u*r,this._b=a*i+h*s,this._d=o*i+u*s,this._tx+=c*n+l*r,this._ty+=c*i+l*s,e||this._changed()}return this},prepend:function(t,e){if(t){var n=this._a,i=this._b,r=this._c,s=this._d,a=this._tx,o=this._ty,h=t._a,u=t._c,c=t._b,l=t._d,f=t._tx,d=t._ty;this._a=h*n+u*i,this._c=h*r+u*s,this._b=c*n+l*i,this._d=c*r+l*s,this._tx=h*a+u*o+f,this._ty=c*a+l*o+d,e||this._changed()}return this},appended:function(t){return this.clone().append(t)},prepended:function(t){return this.clone().prepend(t)},invert:function(){var t=this._a,e=this._b,n=this._c,i=this._d,r=this._tx,s=this._ty,a=t*i-e*n,o=null;return a&&!isNaN(a)&&isFinite(r)&&isFinite(s)&&(this._a=i/a,this._b=-e/a,this._c=-n/a,this._d=t/a,this._tx=(n*s-i*r)/a,this._ty=(e*r-t*s)/a,o=this),o},inverted:function(){return this.clone().invert()},concatenate:"#append",preConcatenate:"#prepend",chain:"#appended",_shiftless:function(){return new S(this._a,this._b,this._c,this._d,0,0)},_orNullIfIdentity:function(){return this.isIdentity()?null:this},isIdentity:function(){return 1===this._a&&0===this._b&&0===this._c&&1===this._d&&0===this._tx&&0===this._ty},isInvertible:function(){var t=this._a*this._d-this._c*this._b;return t&&!isNaN(t)&&isFinite(this._tx)&&isFinite(this._ty)},isSingular:function(){return!this.isInvertible()},transform:function(t,e,n){return arguments.length<3?this._transformPoint(v.read(arguments)):this._transformCoordinates(t,e,n)},_transformPoint:function(t,e,n){var i=t.x,r=t.y;return e||(e=new v),e._set(i*this._a+r*this._c+this._tx,i*this._b+r*this._d+this._ty,n)},_transformCoordinates:function(t,e,n){for(var i=0,r=2*n;i<r;i+=2){var s=t[i],a=t[i+1];e[i]=s*this._a+a*this._c+this._tx,e[i+1]=s*this._b+a*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,n=t.y,i=e+t.width,r=n+t.height,s=[e,n,i,n,i,r,e,r];return this._transformCoordinates(s,s,4)},_transformBounds:function(t,e,n){for(var i=this._transformCorners(t),r=i.slice(0,2),s=r.slice(),a=2;a<8;a++){var o=i[a],h=1&a;o<r[h]?r[h]=o:o>s[h]&&(s[h]=o)}return e||(e=new b),e._set(r[0],r[1],s[0]-r[0],s[1]-r[1],n)},inverseTransform:function(){return this._inverseTransform(v.read(arguments))},_inverseTransform:function(t,e,n){var i=this._a,r=this._b,s=this._c,a=this._d,o=this._tx,h=this._ty,u=i*a-r*s,c=null;if(u&&!isNaN(u)&&isFinite(o)&&isFinite(h)){var l=t.x-this._tx,f=t.y-this._ty;e||(e=new v),c=e._set((l*a-f*s)/u,(f*i-l*r)/u,n)}return c},decompose:function(){var t,e,n,i=this._a,r=this._b,s=this._c,a=this._d,o=i*a-r*s,h=Math.sqrt,u=Math.atan2,c=180/Math.PI;if(0!==i||0!==r){var l=h(i*i+r*r);t=Math.acos(i/l)*(r>0?1:-1),e=[l,o/l],n=[u(i*s+r*a,l*l),0]}else if(0!==s||0!==a){var f=h(s*s+a*a);t=Math.asin(s/f)*(a>0?1:-1),e=[o/f,f],n=[0,u(i*s+r*a,f*f)]}else t=0,n=e=[0,0];return{translation:this.getTranslation(),rotation:t*c,scaling:new v(e),skewing:new v(n[0]*c,n[1]*c)}},getValues:function(){return[this._a,this._b,this._c,this._d,this._tx,this._ty]},getTranslation:function(){return new v(this._tx,this._ty)},getScaling:function(){return this.decompose().scaling},getRotation:function(){return this.decompose().rotation},applyToContext:function(t){this.isIdentity()||t.transform(this._a,this._b,this._c,this._d,this._tx,this._ty)}},c.each(["a","b","c","d","tx","ty"],(function(t){var e=c.capitalize(t),n="_"+t;this["get"+e]=function(){return this[n]},this["set"+e]=function(t){this[n]=t,this._changed()}}),{})),C=c.extend({_class:"Line",initialize:function(t,e,n,i,r){var s=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=n,this._vy=i,s=r):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,s=n),s||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new v(this._px,this._py)},getVector:function(){return new v(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return C.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return C.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(this.getSignedDistance(t))},getSignedDistance:function(t){return C.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0)},isCollinear:function(t){return v.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return v.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,n,i,r,s,a,o,h,u){h||(n-=t,i-=e,a-=r,o-=s);var c=n*o-i*a;if(!g.isZero(c)){var l=t-r,f=e-s,d=(a*f-o*l)/c,p=(n*f-i*l)/c;if(u||-1e-12<d&&d<1+1e-12&&-1e-12<p&&p<1+1e-12)return u||(d=d<=0?0:d>=1?1:d),new v(t+d*n,e+d*i)}},getSide:function(t,e,n,i,r,s,a,o){a||(n-=t,i-=e);var h=r-t,u=h*i-(s-e)*n;return!o&&g.isZero(u)&&(u=(h*n+h*n)/(n*n+i*i))>=0&&u<=1&&(u=0),u<0?-1:u>0?1:0},getSignedDistance:function(t,e,n,i,r,s,a){return a||(n-=t,i-=e),0===n?i>0?r-t:t-r:0===i?n<0?s-e:e-s:((r-t)*i-(s-e)*n)/Math.sqrt(n*n+i*i)},getDistance:function(t,e,n,i,r,s,a){return Math.abs(C.getSignedDistance(t,e,n,i,r,s,a))}}}),k=d.extend({_class:"Project",_list:"projects",_reference:"project",_compactSerialize:!0,initialize:function(t){d.call(this,!0),this._children=[],this._namedChildren={},this._activeLayer=null,this._currentStyle=new K(null,null,this),this._view=J.create(this,t||ot.getCanvas(1,1)),this._selectionItems={},this._selectionCount=0,this._updateVersion=0},_serialize:function(t,e){return c.serialize(this._children,t,!0,e)},_changed:function(t,e){if(1&t){var n=this._view;n&&(n._needsUpdate=!0,!n._requested&&n._autoUpdate&&n.requestUpdate())}var i=this._changes;if(i&&e){var r=this._changesById,s=e._id,a=r[s];a?a.flags|=t:i.push(r[s]={item:e,flags:t})}},clear:function(){for(var t=this._children,e=t.length-1;e>=0;e--)t[e].remove()},isEmpty:function(){return!this._children.length},remove:function t(){return!!t.base.call(this)&&(this._view&&this._view.remove(),!0)},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.set(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getLayers:function(){return this._children},getActiveLayer:function(){return this._activeLayer||new I({project:this,insert:!0})},getSymbolDefinitions:function(){var t=[],e={};return this.getItems({class:O,match:function(n){var i=n._definition,r=i._id;return e[r]||(e[r]=!0,t.push(i)),!1}}),t},getSymbols:"getSymbolDefinitions",getSelectedItems:function(){var t=this._selectionItems,e=[];for(var n in t){var i=t[n],r=i._selection;1&r&&i.isInserted()?e.push(i):r||this._updateSelection(i)}return e},_updateSelection:function(t){var e=t._id,n=this._selectionItems;t._selection?n[e]!==t&&(this._selectionCount++,n[e]=t):n[e]===t&&(this._selectionCount--,delete n[e])},selectAll:function(){for(var t=this._children,e=0,n=t.length;e<n;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectionItems;for(var e in t)t[e].setFullySelected(!1)},addLayer:function(t){return this.insertLayer(o,t)},insertLayer:function(t,e){if(e instanceof I){e._remove(!1,!0),c.splice(this._children,[e],t,0),e._setProject(this,!0);var n=e._name;n&&e.setName(n),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)}else e=null;return e},_insertItem:function(t,e,n){return e=this.insertLayer(t,e)||(this._activeLayer||this._insertItem(o,new I(P.NO_INSERT),!0)).insertChild(t,e),n&&e.activate&&e.activate(),e},getItems:function(t){return P._getItems(this,t)},getItem:function(t){return P._getItems(this,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return c.importJSON(t,e&&e.isEmpty()&&e)},removeOn:function(t){var e=this._removeSets;if(e){"mouseup"===t&&(e.mousedrag=null);var n=e[t];if(n){for(var i in n){var r=n[i];for(var s in e){var a=e[s];a&&a!=n&&delete a[r._id]}r.remove()}e[t]=null}}},draw:function(t,e,n){this._updateVersion++,t.save(),e.applyToContext(t);for(var i=this._children,r=new c({offset:new v(0,0),pixelRatio:n,viewMatrix:e.isIdentity()?null:e,matrices:[new S],updateMatrix:!0}),s=0,a=i.length;s<a;s++)i[s].draw(t,r);if(t.restore(),this._selectionCount>0){t.save(),t.strokeWidth=1;var o=this._selectionItems,h=this._scope.settings.handleSize,u=this._updateVersion;for(var l in o)o[l]._drawSelection(t,e,h,o,u);t.restore()}}}),P=c.extend(l,{statics:{extend:function t(e){return e._serializeFields&&(e._serializeFields=c.set({},this.prototype._serializeFields,e._serializeFields)),t.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_name:null,_applyMatrix:!0,_canApplyMatrix:!0,_canScaleStroke:!1,_pivot:null,_visible:!0,_blendMode:"normal",_opacity:1,_locked:!1,_guide:!1,_clipMask:!1,_selection:0,_selectBounds:!0,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new S,pivot:null,visible:!0,blendMode:"normal",opacity:1,locked:!1,guide:!1,clipMask:!1,selected:!1,data:{}},_prioritize:["applyMatrix"]},new function(){var t=["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"];return c.each(t,(function(t){this._events[t]={install:function(t){this.getView()._countItemEvent(t,1)},uninstall:function(t){this.getView()._countItemEvent(t,-1)}}}),{_events:{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{},onError:{}},statics:{_itemHandlers:t}})},{initialize:function(){},_initialize:function(t,e){var n=t&&c.isPlainObject(t),i=n&&!0===t.internal,r=this._matrix=new S,s=n&&t.project||lt.project,a=lt.settings;return this._id=i?null:_.get(),this._parent=this._index=null,this._applyMatrix=this._canApplyMatrix&&a.applyMatrix,e&&r.translate(e),r._owner=this,this._style=new K(s._currentStyle,this,s),i||n&&0==t.insert||!a.insertItems&&(!n||!0!==t.insert)?this._setProject(s):(n&&t.parent||s)._insertItem(o,this,!0),n&&t!==P.NO_INSERT&&this.set(t,{internal:!0,insert:!0,project:!0,parent:!0}),n},_serialize:function(t,e){var n={},i=this;function r(r){for(var s in r){var a=i[s];c.equals(a,"leading"===s?1.2*r.fontSize:r[s])||(n[s]=c.serialize(a,t,"data"!==s,e))}}return r(this._serializeFields),this instanceof A||r(this._style._defaults),[this._class,n]},_changed:function(t){var e=this._symbol,n=this._parent||e,i=this._project;8&t&&(this._bounds=this._position=this._decomposed=o),16&t&&(this._globalMatrix=o),n&&72&t&&P._clearBoundsCache(n),2&t&&P._clearBoundsCache(this),i&&i._changed(t,this),e&&e._changed(t)},getId:function(){return this._id},getName:function(){return this._name},setName:function(t){if(this._name&&this._removeNamed(),t===+t+"")throw new Error("Names consisting only of numbers are not supported.");var e=this._getOwner();if(t&&e){var n=e._children,i=e._namedChildren;(i[t]=i[t]||[]).push(this),t in n||(n[t]=this)}this._name=t||o,this._changed(256)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},c.each(["locked","visible","blendMode","opacity","guide"],(function(t){var e=c.capitalize(t),n="_"+t,i={locked:256,visible:265};this["get"+e]=function(){return this[n]},this["set"+e]=function(e){e!=this[n]&&(this[n]=e,this._changed(i[t]||257))}}),{}),{beans:!0,getSelection:function(){return this._selection},setSelection:function(t){if(t!==this._selection){this._selection=t;var e=this._project;e&&(e._updateSelection(this),this._changed(257))}},_changeSelection:function(t,e){var n=this._selection;this.setSelection(e?n|t:n&~t)},isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,n=t.length;e<n;e++)if(t[e].isSelected())return!0;return!!(1&this._selection)},setSelected:function(t){if(this._selectChildren)for(var e=this._children,n=0,i=e.length;n<i;n++)e[n].setSelected(t);this._changeSelection(1,t)},isFullySelected:function(){var t=this._children,e=!!(1&this._selection);if(t&&e){for(var n=0,i=t.length;n<i;n++)if(!t[n].isFullySelected())return!1;return!0}return e},setFullySelected:function(t){var e=this._children;if(e)for(var n=0,i=e.length;n<i;n++)e[n].setFullySelected(t);this._changeSelection(1,t)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(257),this._parent&&this._parent._changed(2048))},getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=t?v:m,n=this._position||(this._position=this._getPositionFromBounds());return new e(n.x,n.y,this,"setPosition")},setPosition:function(){this.translate(v.read(arguments).subtract(this.getPosition(!0)))},_getPositionFromBounds:function(t){return this._pivot?this._matrix._transformPoint(this._pivot):(t||this.getBounds()).getCenter(!0)},getPivot:function(){var t=this._pivot;return t?new m(t.x,t.y,this,"setPivot"):null},setPivot:function(){this._pivot=v.read(arguments,0,{clone:!0,readNull:!0}),this._position=o}},c.each({getStrokeBounds:{stroke:!0},getHandleBounds:{handle:!0},getInternalBounds:{internal:!0}},(function(t,e){this[e]=function(e){return this.getBounds(e,t)}}),{beans:!0,getBounds:function(t,e){var n=e||t instanceof S,i=c.set({},n?e:t,this._boundsOptions);i.stroke&&!this.getStrokeScaling()||(i.cacheItem=this);var r=this._getCachedBounds(n&&t,i).rect;return arguments.length?r:new w(r.x,r.y,r.width,r.height,this,"setBounds")},setBounds:function(){var t=b.read(arguments),e=this.getBounds(),n=this._matrix,i=new S,r=t.getCenter();i.translate(r),t.width==e.width&&t.height==e.height||(n.isInvertible()||(n.set(n._backup||(new S).translate(n.getTranslation())),e=this.getBounds()),i.scale(0!==e.width?t.width/e.width:0,0!==e.height?t.height/e.height:0)),r=e.getCenter(),i.translate(-r.x,-r.y),this.transform(i)},_getBounds:function(t,e){var n=this._children;return n&&n.length?(P._updateBoundsCache(this,e.cacheItem),P._getBounds(n,t,e)):new b},_getBoundsCacheKey:function(t,e){return[t.stroke?1:0,t.handle?1:0,e?1:0].join("")},_getCachedBounds:function(t,e,n){t=t&&t._orNullIfIdentity();var i=e.internal&&!n,r=e.cacheItem,s=i?null:this._matrix._orNullIfIdentity(),a=r&&(!t||t.equals(s))&&this._getBoundsCacheKey(e,i),o=this._bounds;if(P._updateBoundsCache(this._parent||this._symbol,r),a&&o&&a in o)return{rect:(f=o[a]).rect.clone(),nonscaling:f.nonscaling};var h=this._getBounds(t||s,e),u=h.rect||h,c=this._style,l=h.nonscaling||c.hasStroke()&&!c.getStrokeScaling();if(a){o||(this._bounds=o={});var f=o[a]={rect:u.clone(),nonscaling:l,internal:i}}return{rect:u,nonscaling:l}},_getStrokeMatrix:function(t,e){var n=this.getStrokeScaling()?null:e&&e.internal?this:this._parent||this._symbol&&this._symbol._item,i=n?n.getViewMatrix().invert():t;return i&&i._shiftless()},statics:{_updateBoundsCache:function(t,e){if(t&&e){var n=e._id,i=t._boundsCache=t._boundsCache||{ids:{},list:[]};i.ids[n]||(i.list.push(e),i.ids[n]=e)}},_clearBoundsCache:function(t){var e=t._boundsCache;if(e){t._bounds=t._position=t._boundsCache=o;for(var n=0,i=e.list,r=i.length;n<r;n++){var s=i[n];s!==t&&(s._bounds=s._position=o,s._boundsCache&&P._clearBoundsCache(s))}}},_getBounds:function(t,e,n){var i=1/0,r=-i,s=i,a=r,o=!1;n=n||{};for(var h=0,u=t.length;h<u;h++){var c=t[h];if(c._visible&&!c.isEmpty(!0)){var l=c._getCachedBounds(e&&e.appended(c._matrix),n,!0),f=l.rect;i=Math.min(f.x,i),s=Math.min(f.y,s),r=Math.max(f.x+f.width,r),a=Math.max(f.y+f.height,a),l.nonscaling&&(o=!0)}}return{rect:isFinite(i)?new b(i,s,r-i,a-s):new b,nonscaling:o}}}}),{beans:!0,_decompose:function(){return this._applyMatrix?null:this._decomposed||(this._decomposed=this._matrix.decompose())},getRotation:function(){var t=this._decompose();return t?t.rotation:0},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var n=this._decomposed;this.rotate(t-e),n&&(n.rotation=t,this._decomposed=n)}},getScaling:function(){var t=this._decompose(),e=t&&t.scaling;return new m(e?e.x:1,e?e.y:1,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=v.read(arguments,0,{clone:!0,readNull:!0});if(t&&e&&!t.equals(e)){var n=this.getRotation(),i=this._decomposed,r=new S,s=this.getPosition(!0);r.translate(s),n&&r.rotate(n),r.scale(e.x/t.x,e.y/t.y),n&&r.rotate(-n),r.translate(s.negate()),this.transform(r),i&&(i.scaling=e,this._decomposed=i)}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},getGlobalMatrix:function(t){var e=this._globalMatrix;if(e)for(var n=this._parent,i=[];n;){if(!n._globalMatrix){e=null;for(var r=0,s=i.length;r<s;r++)i[r]._globalMatrix=null;break}i.push(n),n=n._parent}e||(e=this._globalMatrix=this._matrix.clone(),(n=this._parent)&&e.prepend(n.getGlobalMatrix(!0)));return t?e:e.clone()},getViewMatrix:function(){return this.getGlobalMatrix().prepend(this.getView()._matrix)},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var n=this._children,i=0,r=n&&n.length;i<r;i++)n[i]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project._view},_installEvents:function t(e){t.base.call(this,e);for(var n=this._children,i=0,r=n&&n.length;i<r;i++)n[i]._installEvents(e)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof I)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},_getOwner:"#getParent",getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){var t=this._getOwner();return t&&t._children[this._index+1]||null},getPreviousSibling:function(){var t=this._getOwner();return t&&t._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return c.equals(this._children,t._children)},clone:function(t){var e=new this.constructor(P.NO_INSERT),n=this._children,i=c.pick(t?t.insert:o,t===o||!0===t),r=c.pick(t?t.deep:o,!0);n&&e.copyAttributes(this),n&&!r||e.copyContent(this),n||e.copyAttributes(this),i&&e.insertAbove(this);var s=this._name,a=this._parent;if(s&&a){n=a._children;for(var h=s,u=1;n[s];)s=h+" "+u++;s!==h&&e.setName(s)}return e},copyContent:function(t){for(var e=t._children,n=0,i=e&&e.length;n<i;n++)this.addChild(e[n].clone(!1),!0)},copyAttributes:function(t,e){this.setStyle(t._style);for(var n=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],i=0,r=n.length;i<r;i++){var s=n[i];t.hasOwnProperty(s)&&(this[s]=t[s])}e||this._matrix.set(t._matrix,!0),this.setApplyMatrix(t._applyMatrix),this.setPivot(t._pivot),this.setSelection(t._selection);var a=t._data,o=t._name;this._data=a?c.clone(a):null,o&&this.setName(o)},rasterize:function(t,e){var n=this.getStrokeBounds(),i=(t||this.getView().getResolution())/72,r=n.getTopLeft().floor(),s=n.getBottomRight().ceil(),a=new y(s.subtract(r)),h=new E(P.NO_INSERT);if(!a.isZero()){var u=ot.getCanvas(a.multiply(i)),l=u.getContext("2d"),f=(new S).scale(i).translate(r.negate());l.save(),f.applyToContext(l),this.draw(l,new c({matrices:[f]})),l.restore(),h.setCanvas(u)}return h.transform((new S).translate(r.add(a.divide(2))).scale(1/i)),(e===o||e)&&h.insertAbove(this),h},contains:function(){var t=this._matrix;return t.isInvertible()&&!!this._contains(t._inverseTransform(v.read(arguments)))},_contains:function(t){var e=this._children;if(e){for(var n=e.length-1;n>=0;n--)if(e[n].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return b.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new R.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof P&&this._asPathItem().getIntersections(t._asPathItem(),null,e,!0).length>0}},new function(){function t(){return this._hitTest(v.read(arguments),L.getOptions(arguments))}function e(){var t=v.read(arguments),e=L.getOptions(arguments),n=[];return this._hitTest(t,c.set({all:n},e)),n}function n(t,e,n,i){var r=this._children;if(r)for(var s=r.length-1;s>=0;s--){var a=r[s],o=a!==i&&a._hitTest(t,e,n);if(o&&!e.all)return o}return null}return k.inject({hitTest:t,hitTestAll:e,_hitTest:n}),{hitTest:t,hitTestAll:e,_hitTestChildren:n}},{_hitTest:function(t,e,n){if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var i=this._matrix,r=n?n.appended(i):this.getGlobalMatrix().prepend(this.getView()._matrix),s=Math.max(e.tolerance,1e-12),a=e._tolerancePadding=new y(R._getStrokePadding(s,i._shiftless().invert()));if(!(t=i._inverseTransform(t))||!this._children&&!this.getBounds({internal:!0,stroke:!0,handle:!0}).expand(a.multiply(2))._containsPoint(t))return null;var o,h,u=!(e.guides&&!this._guide||e.selected&&!this.isSelected()||e.type&&e.type!==c.hyphenate(this._class)||e.class&&!(this instanceof e.class)),l=e.match,f=this;function d(t){return t&&l&&!l(t)&&(t=null),t&&e.all&&e.all.push(t),t}function p(e,n){var i=n?o["get"+n]():f.getPosition();if(t.subtract(i).divide(a).length<=1)return new L(e,f,{name:n?c.hyphenate(n):e,point:i})}var g=e.position,_=e.center,v=e.bounds;if(u&&this._parent&&(g||_||v)){if((_||v)&&(o=this.getInternalBounds()),!(h=g&&p("position")||_&&p("center","Center"))&&v)for(var m=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],x=0;x<8&&!h;x++)h=p("bounds",m[x]);h=d(h)}return h||(h=this._hitTestChildren(t,e,r)||u&&d(this._hitTestSelf(t,e,r,this.getStrokeScaling()?null:r._shiftless().invert()))||null),h&&h.point&&(h.point=i.transform(h.point)),h},_hitTestSelf:function(t,e){if(e.fill&&this.hasFill()&&this._contains(t))return new L("fill",this)},matches:function(t,e){var n=typeof t;if("object"===n){for(var i in t)if(t.hasOwnProperty(i)&&!this.matches(i,t[i]))return!1;return!0}if("function"===n)return t(this);if("match"===t)return e(this);var r=/^(empty|editable)$/.test(t)?this["is"+c.capitalize(t)]():"type"===t?c.hyphenate(this._class):this[t];if("class"===t){if("function"==typeof e)return this instanceof e;r=this._class}if("function"==typeof e)return!!e(r);if(e){if(e.test)return e.test(r);if(c.isPlainObject(e))return function t(e,n){for(var i in e)if(e.hasOwnProperty(i)){var r=e[i],s=n[i];if(c.isPlainObject(r)&&c.isPlainObject(s)){if(!t(r,s))return!1}else if(!c.equals(r,s))return!1}return!0}(e,r)}return c.equals(r,e)},getItems:function(t){return P._getItems(this,t,this._matrix)},getItem:function(t){return P._getItems(this,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function t(e,n,i,r,s){if(!r){var a="object"==typeof n&&n,o=a&&a.overlapping,h=a&&a.inside,u=(m=o||h)&&b.read([m]);r={items:[],recursive:a&&!1!==a.recursive,inside:!!h,overlapping:!!o,rect:u,path:o&&new R.Rectangle({rectangle:u,insert:!1})},a&&(n=c.filter({},n,{recursive:!0,inside:!0,overlapping:!0}))}var l=e._children,f=r.items;i=(u=r.rect)&&(i||new S);for(var d=0,p=l&&l.length;d<p;d++){var g=l[d],_=i&&i.appended(g._matrix),v=!0;if(u){var m=g.getBounds(_);if(!u.intersects(m))continue;u.contains(m)||r.overlapping&&(m.contains(u)||r.path.intersects(g,_))||(v=!1)}if(v&&g.matches(n)&&(f.push(g),s))break;if(!1!==r.recursive&&t(g,n,_,r,s),s&&f.length>0)break}return f}}},{importJSON:function(t){var e=c.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(t){return this.insertChild(o,t)},insertChild:function(t,e){var n=e?this.insertChildren(t,[e]):null;return n&&n[0]},addChildren:function(t){return this.insertChildren(this._children.length,t)},insertChildren:function(t,e){var n=this._children;if(n&&e&&e.length>0){for(var i={},r=(e=c.slice(e)).length-1;r>=0;r--){var s=(u=e[r])&&u._id;!u||i[s]?e.splice(r,1):(u._remove(!1,!0),i[s]=!0)}c.splice(n,e,t,0);for(var a=this._project,o=a._changes,h=(r=0,e.length);r<h;r++){var u,l=(u=e[r])._name;u._parent=this,u._setProject(a,!0),l&&u.setName(l),o&&u._changed(5)}this._changed(11)}else e=null;return e},_insertItem:"#insertChild",_insertAt:function(t,e){var n=t&&t._getOwner(),i=t!==this&&n?this:null;return i&&(i._remove(!1,!0),n._insertItem(t._index+e,i)),i},insertAbove:function(t){return this._insertAt(t,1)},insertBelow:function(t){return this._insertAt(t,0)},sendToBack:function(){var t=this._getOwner();return t?t._insertItem(0,this):null},bringToFront:function(){var t=this._getOwner();return t?t._insertItem(o,this):null},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",addTo:function(t){return t._insertItem(o,this)},copyTo:function(t){return this.clone(!1).addTo(t)},reduce:function(t){var e=this._children;if(e&&1===e.length){var n=e[0].reduce(t);return this._parent?(n.insertAbove(this),this.remove()):n.remove(),n}return this},_removeNamed:function(){var t=this._getOwner();if(t){var e=t._children,n=t._namedChildren,i=this._name,r=n[i],s=r?r.indexOf(this):-1;-1!==s&&(e[i]==this&&delete e[i],r.splice(s,1),r.length?e[i]=r[0]:delete n[i])}},_remove:function(t,e){var n=this._getOwner(),i=this._project,r=this._index;return this._style&&this._style._dispose(),!!n&&(this._name&&this._removeNamed(),null!=r&&(i._activeLayer===this&&(i._activeLayer=this.getNextSibling()||this.getPreviousSibling()),c.splice(n._children,null,r,1)),this._installEvents(!1),t&&i._changes&&this._changed(5),e&&n._changed(11,this),this._parent=null,!0)},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=c.pick(e,this._children.length);for(var n=c.splice(this._children,null,t,e-t),i=n.length-1;i>=0;i--)n[i]._remove(!0,!1);return n.length>0&&this._changed(11),n},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;t<e;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(t){var e=this._children,n=e?e.length:0;if(t){for(var i=0;i<n;i++)if(!e[i].isEmpty(t))return!1;return!0}return!n},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do{e.unshift(t)}while(t=t._parent);return e}for(var n=e(this),i=e(t),r=0,s=Math.min(n.length,i.length);r<s;r++)if(n[r]!=i[r])return n[r]._index<i[r]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return!!this._parent&&this._parent.isInserted()},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e===t)return!0;return!1},isAncestor:function(t){return!!t&&t.isDescendant(this)},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1}},c.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var n=(e?c:v).read(arguments),i=v.read(arguments,0,{readNull:!0});return this.transform((new S)[t](n,i||this.getPosition(!0)))}}),{translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},transform:function(t,e,n,i){var r=this._matrix,s=t&&!t.isIdentity(),a=(e||this._applyMatrix)&&(!r.isIdentity()||s||e&&n&&this._children);if(!s&&!a)return this;if(s){!t.isInvertible()&&r.isInvertible()&&(r._backup=r.getValues()),r.prepend(t,!0);var o=this._style,h=o.getFillColor(!0),u=o.getStrokeColor(!0);h&&h.transform(t),u&&u.transform(t)}if(a&&(a=this._transformContent(r,n,i))){var c=this._pivot;c&&r._transformPoint(c,c,!0),r.reset(!0),i&&this._canApplyMatrix&&(this._applyMatrix=!0)}var l=this._bounds,f=this._position;(s||a)&&this._changed(25);var d=s&&l&&t.decompose();if(d&&d.skewing.isZero()&&d.rotation%90==0){for(var p in l){var g=l[p];if(g.nonscaling)delete l[p];else if(a||!g.internal){var _=g.rect;t._transformBounds(_,_)}}this._bounds=l;var v=l[this._getBoundsCacheKey(this._boundsOptions||{})];v&&(this._position=this._getPositionFromBounds(v.rect))}else s&&f&&this._pivot&&(this._position=t._transformPoint(f,f));return this},_transformContent:function(t,e,n){var i=this._children;if(i){for(var r=0,s=i.length;r<s;r++)i[r].transform(t,!0,e,n);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(v.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(v.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(v.read(arguments))},localToParent:function(){return this._matrix._transformPoint(v.read(arguments))},fitBounds:function(t,e){t=b.read(arguments);var n=this.getBounds(),i=n.height/n.width,r=t.height/t.width,s=(e?i>r:i<r)?t.width/n.width:t.height/n.height,a=new b(new v,new y(n.width*s,n.height*s));a.setCenter(t.getCenter()),this.setBounds(a)}}),{_setStyles:function(t,e,n){var i=this._style,r=this._matrix;if(i.hasFill()&&(t.fillStyle=i.getFillColor().toCanvasStyle(t,r)),i.hasStroke()){t.strokeStyle=i.getStrokeColor().toCanvasStyle(t,r),t.lineWidth=i.getStrokeWidth();var s=i.getStrokeJoin(),a=i.getStrokeCap(),o=i.getMiterLimit();if(s&&(t.lineJoin=s),a&&(t.lineCap=a),o&&(t.miterLimit=o),lt.support.nativeDash){var h=i.getDashArray(),u=i.getDashOffset();h&&h.length&&("setLineDash"in t?(t.setLineDash(h),t.lineDashOffset=u):(t.mozDash=h,t.mozDashOffset=u))}}if(i.hasShadow()){var c=e.pixelRatio||1,l=n._shiftless().prepend((new S).scale(c,c)),f=l.transform(new v(i.getShadowBlur(),0)),d=l.transform(this.getShadowOffset());t.shadowColor=i.getShadowColor().toCanvasStyle(t),t.shadowBlur=f.getLength(),t.shadowOffsetX=d.x,t.shadowOffsetY=d.y}},draw:function(t,e,n){this._updateVersion=this._project._updateVersion;if(this._visible&&0!==this._opacity){var i=e.matrices,r=e.viewMatrix,s=this._matrix,a=i[i.length-1].appended(s);if(a.isInvertible()){r=r?r.appended(a):a,i.push(a),e.updateMatrix&&(this._globalMatrix=a);var o,h,u,c=this._blendMode,l=this._opacity,f="normal"===c,d=ht.nativeModes[c],p=f&&1===l||e.dontStart||e.clip||(d||f&&l<1)&&this._canComposite(),g=e.pixelRatio||1;if(!p){var _=this.getStrokeBounds(r);if(!_.width||!_.height)return void i.pop();u=e.offset,h=e.offset=_.getTopLeft().floor(),o=t,t=ot.getContext(_.getSize().ceil().add(1).multiply(g)),1!==g&&t.scale(g,g)}t.save();var v=n?n.appended(s):this._canScaleStroke&&!this.getStrokeScaling(!0)&&r,m=!p&&e.clipItem,y=!v||m;if(p?(t.globalAlpha=l,d&&(t.globalCompositeOperation=c)):y&&t.translate(-h.x,-h.y),y&&(p?s:r).applyToContext(t),m&&e.clipItem.draw(t,e.extend({clip:!0})),v){t.setTransform(g,0,0,g,0,0);var x=e.offset;x&&t.translate(-x.x,-x.y)}this._draw(t,e,r,v),t.restore(),i.pop(),e.clip&&!e.dontFinish&&t.clip(this.getFillRule()),p||(ht.process(c,t,o,l,h.subtract(u).multiply(g)),ot.release(t),e.offset=u)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof D)return e._isUpdated(t);var n=this._updateVersion===t;return!n&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,n=!0),n},_drawSelection:function(t,e,n,i,r){var s=this._selection,a=1&s,o=2&s||a&&this._selectBounds,h=4&s;if(this._drawSelected||(a=!1),(a||o||h)&&this._isUpdated(r)){var u,c=this.getSelectedColor(!0)||(u=this.getLayer())&&u.getSelectedColor(!0),l=e.appended(this.getGlobalMatrix(!0)),f=n/2;if(t.strokeStyle=t.fillStyle=c?c.toCanvasStyle(t):"#009dec",a&&this._drawSelected(t,l,i),h){var d=this.getPosition(!0),p=this._parent,g=p?p.localToGlobal(d):d,_=g.x,v=g.y;t.beginPath(),t.arc(_,v,f,0,2*Math.PI,!0),t.stroke();for(var m=[[0,-1],[1,0],[0,1],[-1,0]],y=f,x=n+1,b=0;b<4;b++){var w=m[b],S=w[0],C=w[1];t.moveTo(_+S*y,v+C*y),t.lineTo(_+S*x,v+C*x),t.stroke()}}if(o){var k=l._transformCorners(this.getInternalBounds());t.beginPath();for(b=0;b<8;b++)t[b?"lineTo":"moveTo"](k[b],k[++b]);t.closePath(),t.stroke();for(b=0;b<8;b++)t.fillRect(k[b]-f,k[++b]-f,n,n)}}},_canComposite:function(){return!1}},c.each(["down","drag","up","move"],(function(t){this["removeOn"+c.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}}),{removeOn:function(t){for(var e in t)if(t[e]){var n="mouse"+e,i=this._project,r=i._removeSets=i._removeSets||{};r[n]=r[n]||{},r[n][this._id]=this}return this}}),{tween:function(t,e,n){n||(n=e,e=t,t=null,n||(n=e,e=null));var i=n&&n.easing,r=n&&n.start,s=null!=n&&("number"==typeof n?n:n.duration),a=new st(this,t,e,s,i,r);return s&&this.on("frame",(function t(e){a._handleFrame(1e3*e.time),a.running||this.off("frame",t)})),a},tweenTo:function(t,e){return this.tween(null,t,e)},tweenFrom:function(t,e){return this.tween(t,null,e)}}),A=P.extend({_class:"Group",_selectBounds:!1,_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function t(e){t.base.call(this,e),2050&e&&(this._clipItem=o)},_getClipItem:function(){var t=this._clipItem;if(t===o){t=null;for(var e=this._children,n=0,i=e.length;n<i;n++)if(e[n]._clipMask){t=e[n];break}this._clipItem=t}return t},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_getBounds:function t(e,n){var i=this._getClipItem();return i?i._getCachedBounds(i._matrix.prepended(e),c.set({},n,{stroke:!1})):t.base.call(this,e,n)},_hitTestChildren:function t(e,n,i){var r=this._getClipItem();return(!r||r.contains(e))&&t.base.call(this,e,n,i,r)},_draw:function(t,e){var n=e.clip,i=!n&&this._getClipItem();e=e.extend({clipItem:i,clip:!1}),n?(t.beginPath(),e.dontStart=e.dontFinish=!0):i&&i.draw(t,e.extend({clip:!0}));for(var r=this._children,s=0,a=r.length;s<a;s++){var o=r[s];o!==i&&o.draw(t,e)}}}),I=A.extend({_class:"Layer",initialize:function(){A.apply(this,arguments)},_getOwner:function(){return this._parent||null!=this._index&&this._project},isInserted:function t(){return this._parent?t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_hitTestSelf:function(){}}),T=P.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_canScaleStroke:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t,e){this._initialize(t,e)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&c.equals(this._radius,t._radius)},copyContent:function(t){this.setType(t._type),this.setSize(t._size),this.setRadius(t._radius)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new x(t.width,t.height,this,"setSize")},setSize:function(){var t=y.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,n=t.width,i=t.height;"rectangle"===e?this._radius.set(y.min(this._radius,t.divide(2))):"circle"===e?(n=i=(n+i)/2,this._radius=n/2):"ellipse"===e&&this._radius._set(n/2,i/2),this._size._set(n,i),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new x(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var n=2*t;this._radius=t,this._size._set(n,n)}else if(t=y.read(arguments),this._radius){if(this._radius.equals(t))return;if(this._radius.set(t),"rectangle"===e){n=y.max(this._size,t.multiply(2));this._size.set(n)}else"ellipse"===e&&this._size._set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=new(R[c.capitalize(this._type)])({center:new v,size:this._size,radius:this._radius,insert:!1});return e.copyAttributes(this),lt.settings.applyMatrix&&e.setApplyMatrix(!0),(t===o||t)&&e.insertAbove(this),e},toShape:"#clone",_asPathItem:function(){return this.toPath(!1)},_draw:function(t,e,n,i){var r=this._style,s=r.hasFill(),a=r.hasStroke(),o=e.dontFinish||e.clip,h=!i;if(s||a||o){var u=this._type,c=this._radius,l="circle"===u;if(e.dontStart||t.beginPath(),h&&l)t.arc(0,0,c,0,2*Math.PI,!0);else{var f=l?c:c.width,d=l?c:c.height,p=this._size,g=p.width,_=p.height;if(h&&"rectangle"===u&&0===f&&0===d)t.rect(-g/2,-_/2,g,_);else{var v=g/2,m=_/2,y=.44771525016920644,x=f*y,b=d*y,w=[-v,-m+d,-v,-m+b,-v+x,-m,-v+f,-m,v-f,-m,v-x,-m,v,-m+b,v,-m+d,v,m-d,v,m-b,v-x,m,v-f,m,-v+f,m,-v+x,m,-v,m-b,-v,m-d];i&&i.transform(w,w,32),t.moveTo(w[0],w[1]),t.bezierCurveTo(w[2],w[3],w[4],w[5],w[6],w[7]),v!==f&&t.lineTo(w[8],w[9]),t.bezierCurveTo(w[10],w[11],w[12],w[13],w[14],w[15]),m!==d&&t.lineTo(w[16],w[17]),t.bezierCurveTo(w[18],w[19],w[20],w[21],w[22],w[23]),v!==f&&t.lineTo(w[24],w[25]),t.bezierCurveTo(w[26],w[27],w[28],w[29],w[30],w[31])}}t.closePath()}o||!s&&!a||(this._setStyles(t,e,n),s&&(t.fill(r.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),a&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var n=new b(this._size).setCenter(0,0),i=this._style,r=e.stroke&&i.hasStroke()&&i.getStrokeWidth();return t&&(n=t._transformBounds(n)),r?n.expand(R._getStrokePadding(r,this._getStrokeMatrix(t,e))):n}},new function(){function t(t,e,n){var i=t._radius;if(!i.isZero())for(var r=t._size.divide(2),s=1;s<=4;s++){var a=new v(s>1&&s<4?-1:1,s>2?-1:1),o=a.multiply(r),h=o.subtract(a.multiply(i));if(new b(n?o.add(a.multiply(n)):o,h).contains(e))return{point:h,quadrant:s}}}function e(t,e,n,i){var r=t.divide(e);return(!i||r.isInQuadrant(i))&&r.subtract(r.normalize()).multiply(e).divide(n).length<=1}return{_contains:function e(n){if("rectangle"===this._type){var i=t(this,n);return i?n.subtract(i.point).divide(this._radius).getLength()<=1:e.base.call(this,n)}return n.divide(this.size).getLength()<=.5},_hitTestSelf:function n(i,r,s,a){var o=!1,h=this._style,u=r.stroke&&h.hasStroke(),c=r.fill&&h.hasFill();if(u||c){var l=this._type,f=this._radius,d=u?h.getStrokeWidth()/2:0,p=r._tolerancePadding.add(R._getStrokePadding(d,!h.getStrokeScaling()&&a));if("rectangle"===l){var g=p.multiply(2),_=t(this,i,g);if(_)o=e(i.subtract(_.point),f,p,_.quadrant);else{var v=new b(this._size).setCenter(0,0),m=v.expand(g),y=v.expand(g.negate());o=m._containsPoint(i)&&!y._containsPoint(i)}}else o=e(i,f,p)}return o?new L(u?"stroke":"fill",this):n.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,n,i,r){var s=new T(c.getNamed(r),e);return s._type=t,s._size=n,s._radius=i,s}return{Circle:function(){var e=v.readNamed(arguments,"center"),n=c.readNamed(arguments,"radius");return t("circle",e,new y(2*n),n,arguments)},Rectangle:function(){var e=b.readNamed(arguments,"rectangle"),n=y.min(y.readNamed(arguments,"radius"),e.getSize(!0).divide(2));return t("rectangle",e.getCenter(!0),e.getSize(!0),n,arguments)},Ellipse:function(){var e=T._readEllipse(arguments),n=e.radius;return t("ellipse",e.center,n.multiply(2),n,arguments)},_readEllipse:function(t){var e,n;if(c.hasNamed(t,"radius"))e=v.readNamed(t,"center"),n=y.readNamed(t,"radius");else{var i=b.readNamed(t,"rectangle");e=i.getCenter(!0),n=i.getSize(!0).divide(2)}return{center:e,radius:n}}}}}),E=P.extend({},{_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!1,handle:!1},_serializeFields:{crossOrigin:null,source:null},_prioritize:["crossOrigin"],_smoothing:!0,beans:!0,initialize:function(t,e){if(!this._initialize(t,e!==o&&v.read(arguments))){var n,i=typeof t,r="string"===i?u.getElementById(t):"object"===i?t:null;if(r&&r!==P.NO_INSERT)if(r.getContent||null!=r.naturalHeight)n=r;else if(r){var s=y.read(arguments);s.isZero()||(n=ot.getCanvas(s))}n?this.setImage(n):this.setSource(t)}this._size||(this._size=new y,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},copyContent:function(t){var e=t._image,n=t._canvas;if(e)this._setImage(e);else if(n){var i=ot.getCanvas(t._size);i.getContext("2d").drawImage(n,0,0),this._setImage(i)}this._crossOrigin=t._crossOrigin},getSize:function(){var t=this._size;return new x(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(){var t=y.read(arguments);if(!t.equals(this._size))if(t.width>0&&t.height>0){var e=this.getElement();this._setImage(ot.getCanvas(t)),e&&this.getContext(!0).drawImage(e,0,0,t.width,t.height)}else this._canvas&&ot.release(this._canvas),this._size=t.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},getLoaded:function(){return this._loaded},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new v(0,0).transform(t),n=new v(1,0).transform(t).subtract(e),i=new v(0,1).transform(t).subtract(e);return new y(72/n.getLength(),72/i.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){var e=this;function n(t){var n=e.getView(),i=t&&t.type||"load";n&&e.responds(i)&&(lt=n._scope,e.emit(i,new Y(t)))}this._setImage(t),this._loaded?setTimeout(n,0):t&&$.add(t,{load:function(i){e._setImage(t),n(i)},error:n})},_setImage:function(t){this._canvas&&ot.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=!!(t&&t.src&&t.complete)),this._size=new y(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(1033)},getCanvas:function(){if(!this._canvas){var t=ot.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){ot.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(1025)),this._context},setContext:function(t){this._context=t},getSource:function(){var t=this._image;return t&&t.src||this.toDataURL()},setSource:function(t){var e=new a.Image,n=this._crossOrigin;n&&(e.crossOrigin=n),t&&(e.src=t),this.setImage(e)},getCrossOrigin:function(){var t=this._image;return t&&t.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t;var e=this._image;e&&(e.crossOrigin=t)},getSmoothing:function(){return this._smoothing},setSmoothing:function(t){this._smoothing=t,this._changed(257)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=b.read(arguments),e=ot.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=b.read(arguments),e=new E(P.NO_INSERT);return e._setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.prepend(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image,e=t&&t.src;if(/^data:/.test(e))return e;var n=this.getCanvas();return n?n.toDataURL.apply(n,arguments):null},drawImage:function(t){var e=v.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,n;if(t?t instanceof V?(n=t,e=t.getBounds()):"object"==typeof t&&("width"in t?e=new b(t):"x"in t&&(e=new b(t.x-.5,t.y-.5,1,1))):e=this.getBounds(),!e)return null;var i=Math.min(e.width,32),r=Math.min(e.height,32),s=E._sampleContext;s?s.clearRect(0,0,33,33):s=E._sampleContext=ot.getContext(new y(32)),s.save();var a=(new S).scale(i/e.width,r/e.height).translate(-e.x,-e.y);a.applyToContext(s),n&&n.draw(s,new c({clip:!0,matrices:[a]})),this._matrix.applyToContext(s);var o=this.getElement(),h=this._size;o&&s.drawImage(o,-h.width/2,-h.height/2),s.restore();for(var u=s.getImageData(.5,.5,Math.ceil(i),Math.ceil(r)).data,l=[0,0,0],f=0,d=0,p=u.length;d<p;d+=4){var g=u[d+3];f+=g,g/=255,l[0]+=u[d]*g,l[1]+=u[d+1]*g,l[2]+=u[d+2]*g}for(d=0;d<3;d++)l[d]/=f;return f?G.read(l):null},getPixel:function(){var t=v.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new G("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=v.read(arguments),e=G.read(arguments),n=e._convert("rgb"),i=e._alpha,r=this.getContext(!0),s=r.createImageData(1,1),a=s.data;a[0]=255*n[0],a[1]=255*n[1],a[2]=255*n[2],a[3]=null!=i?255*i:255,r.putImageData(s,t.x,t.y)},clear:function(){var t=this._size;this.getContext(!0).clearRect(0,0,t.width+1,t.height+1)},createImageData:function(){var t=y.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=b.read(arguments);return t.isEmpty()&&(t=new b(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=v.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var n=new b(this._size).setCenter(0,0);return t?t._transformBounds(n):n},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new L("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t,e,n){var i=this.getElement();i&&i.width>0&&i.height>0&&(t.globalAlpha=this._opacity,this._setStyles(t,e,n),Q.setPrefixed(t,"imageSmoothingEnabled",this._smoothing),t.drawImage(i,-this._size.width/2,-this._size.height/2))},_canComposite:function(){return!0}}),O=P.extend({_class:"SymbolItem",_applyMatrix:!1,_canApplyMatrix:!1,_boundsOptions:{stroke:!0},_serializeFields:{symbol:null},initialize:function(t,e){this._initialize(t,e!==o&&v.read(arguments,1))||this.setDefinition(t instanceof M?t:new M(t))},_equals:function(t){return this._definition===t._definition},copyContent:function(t){this.setDefinition(t._definition)},getDefinition:function(){return this._definition},setDefinition:function(t){this._definition=t,this._changed(9)},getSymbol:"#getDefinition",setSymbol:"#setDefinition",isEmpty:function(){return this._definition._item.isEmpty()},_getBounds:function(t,e){var n=this._definition._item;return n._getCachedBounds(n._matrix.prepended(t),e)},_hitTestSelf:function(t,e,n){var i=this._definition._item._hitTest(t,e,n);return i&&(i.item=this),i},_draw:function(t,e){this._definition._item.draw(t,e)}}),M=c.extend({_class:"SymbolDefinition",initialize:function(t,e){this._id=_.get(),this.project=lt.project,t&&this.setItem(t,e)},_serialize:function(t,e){return e.add(this,(function(){return c.serialize([this._class,this._item],t,!1,e)}))},_changed:function(t){8&t&&P._clearBoundsCache(this),1&t&&this.project._changed(t)},getItem:function(){return this._item},setItem:function(t,e){t._symbol&&(t=t.clone()),this._item&&(this._item._symbol=null),this._item=t,t.remove(),t.setSelected(!1),e||t.setPosition(new v),t._symbol=this,this._changed(9)},getDefinition:"#getItem",setDefinition:"#setItem",place:function(t){return new O(this,t)},clone:function(){return new M(this._item.clone(!1))},equals:function(t){return t===this||t&&this._item.equals(t._item)||!1}}),L=c.extend({_class:"HitResult",initialize:function(t,e,n){this.type=t,this.item=e,n&&this.inject(n)},statics:{getOptions:function(t){var e=t&&c.read(t);return c.set({type:null,tolerance:lt.settings.hitTolerance,fill:!e,stroke:!e,segments:!e,handles:!1,ends:!1,position:!1,center:!1,bounds:!1,guides:!1,selected:!1},e)}}}),N=c.extend({_class:"Segment",beans:!0,_selection:0,initialize:function(t,e,n,i,r,s){var a,h,u,c,l=arguments.length;l>0&&(null==t||"object"==typeof t?1===l&&t&&"point"in t?(a=t.point,h=t.handleIn,u=t.handleOut,c=t.selection):(a=t,h=e,u=n,c=i):(a=[t,e],h=n!==o?[n,i]:null,u=r!==o?[r,s]:null)),new B(a,this,"_point"),new B(h,this,"_handleIn"),new B(u,this,"_handleOut"),c&&this.setSelection(c)},_serialize:function(t,e){var n=this._point,i=this._selection,r=i||this.hasHandles()?[n,this._handleIn,this._handleOut]:n;return i&&r.push(i),c.serialize(r,t,!0,e)},_changed:function(t){var e=this._path;if(e){var n,i=e._curves,r=this._index;i&&(t&&t!==this._point&&t!==this._handleIn||!(n=r>0?i[r-1]:e._closed?i[i.length-1]:null)||n._changed(),t&&t!==this._point&&t!==this._handleOut||!(n=i[r])||n._changed()),e._changed(41)}},getPoint:function(){return this._point},setPoint:function(){this._point.set(v.read(arguments))},getHandleIn:function(){return this._handleIn},setHandleIn:function(){this._handleIn.set(v.read(arguments))},getHandleOut:function(){return this._handleOut},setHandleOut:function(){this._handleOut.set(v.read(arguments))},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},isSmooth:function(){var t=this._handleIn,e=this._handleOut;return!t.isZero()&&!e.isZero()&&t.isCollinear(e)},clearHandles:function(){this._handleIn._set(0,0),this._handleOut._set(0,0)},getSelection:function(){return this._selection},setSelection:function(t){var e=this._selection,n=this._path;this._selection=t=t||0,n&&t!==e&&(n._updateSelection(this,e,t),n._changed(257))},_changeSelection:function(t,e){var n=this._selection;this.setSelection(e?n|t:n&~t)},isSelected:function(){return!!(7&this._selection)},setSelected:function(t){this._changeSelection(7,t)},getIndex:function(){return this._index!==o?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new j(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},smooth:function(t,e,n){var i=t||{},r=i.type,s=i.factor,a=this.getPrevious(),h=this.getNext(),u=(a||this)._point,c=this._point,l=(h||this)._point,f=u.getDistance(c),d=c.getDistance(l);if(r&&"catmull-rom"!==r){if("geometric"!==r)throw new Error("Smoothing method '"+r+"' not supported.");if(a&&h){var p=u.subtract(l),g=s===o?.4:s,_=g*f/(f+d);e||this.setHandleIn(p.multiply(_)),n||this.setHandleOut(p.multiply(_-g))}}else{var m=s===o?.5:s,y=Math.pow(f,m),x=y*y,b=Math.pow(d,m),w=b*b;if(!e&&a){var S=2*w+3*b*y+x,C=3*b*(b+y);this.setHandleIn(0!==C?new v((w*u._x+S*c._x-x*l._x)/C-c._x,(w*u._y+S*c._y-x*l._y)/C-c._y):new v)}if(!n&&h){S=2*x+3*y*b+w,C=3*y*(y+b);this.setHandleOut(0!==C?new v((x*l._x+S*c._x-w*u._x)/C-c._x,(x*l._y+S*c._y-w*u._y)/C-c._y):new v)}}},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,n=t.clone();t.set(e),e.set(n)},reversed:function(){return new N(this._point,this._handleOut,this._handleIn)},remove:function(){return!!this._path&&!!this._path.removeSegment(this._index)},clone:function(){return new N(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},interpolate:function(t,e,n){var i=1-n,r=n,s=t._point,a=e._point,o=t._handleIn,h=e._handleIn,u=e._handleOut,c=t._handleOut;this._point._set(i*s._x+r*a._x,i*s._y+r*a._y,!0),this._handleIn._set(i*o._x+r*h._x,i*o._y+r*h._y,!0),this._handleOut._set(i*c._x+r*u._x,i*c._y+r*u._y,!0),this._changed()},_transformCoordinates:function(t,e,n){var i=this._point,r=n&&this._handleIn.isZero()?null:this._handleIn,s=n&&this._handleOut.isZero()?null:this._handleOut,a=i._x,o=i._y,h=2;return e[0]=a,e[1]=o,r&&(e[h++]=r._x+a,e[h++]=r._y+o),s&&(e[h++]=s._x+a,e[h++]=s._y+o),t&&(t._transformCoordinates(e,e,h/2),a=e[0],o=e[1],n?(i._x=a,i._y=o,h=2,r&&(r._x=e[h++]-a,r._y=e[h++]-o),s&&(s._x=e[h++]-a,s._y=e[h++]-o)):(r||(e[h++]=a,e[h++]=o),s||(e[h++]=a,e[h++]=o))),e}}),B=v.extend({initialize:function(t,e,n){var i,r,s;if(t)if((i=t[0])!==o)r=t[1];else{var a=t;(i=a.x)===o&&(i=(a=v.read(arguments)).x),r=a.y,s=a.selected}else i=r=0;this._x=i,this._y=r,this._owner=e,e[n]=this,s&&this.setSelected(!0)},_set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){var t=g.isZero;return t(this._x)&&t(this._y)},isSelected:function(){return!!(this._owner._selection&this._getSelection())},setSelected:function(t){this._owner._changeSelection(this._getSelection(),t)},_getSelection:function(){var t=this._owner;return this===t._point?1:this===t._handleIn?2:this===t._handleOut?4:0}}),z=c.extend({_class:"Curve",beans:!0,initialize:function(t,e,n,i,r,s,a,o){var h,u,c,l,f,d,p=arguments.length;3===p?(this._path=t,h=e,u=n):p?1===p?"segment1"in t?(h=new N(t.segment1),u=new N(t.segment2)):"point1"in t?(c=t.point1,f=t.handle1,d=t.handle2,l=t.point2):Array.isArray(t)&&(c=[t[0],t[1]],l=[t[6],t[7]],f=[t[2]-t[0],t[3]-t[1]],d=[t[4]-t[6],t[5]-t[7]]):2===p?(h=new N(t),u=new N(e)):4===p?(c=t,f=e,d=n,l=i):8===p&&(c=[t,e],l=[a,o],f=[n-t,i-e],d=[r-a,s-o]):(h=new N,u=new N),this._segment1=h||new N(c,null,f),this._segment2=u||new N(l,d,null)},_serialize:function(t,e){return c.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0,e)},_changed:function(){this._length=this._bounds=o},clone:function(){return new z(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},classify:function(){return z.classify(this.getValues())},remove:function(){var t=!1;if(this._path){var e=this._segment2,n=e._handleOut;(t=e.remove())&&this._segment1._handleOut.set(n)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){this._segment1._point.set(v.read(arguments))},getPoint2:function(){return this._segment2._point},setPoint2:function(){this._segment2._point.set(v.read(arguments))},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){this._segment1._handleOut.set(v.read(arguments))},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){this._segment2._handleIn.set(v.read(arguments))},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return!this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle1().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return z.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],n=0;n<8;n+=2)e.push(new v(t[n],t[n+1]));return e}},{getLength:function(){return null==this._length&&(this._length=z.getLength(this.getValues(),0,1)),this._length},getArea:function(){return z.getArea(this.getValues())},getLine:function(){return new C(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new z(z.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return z.getLength(this.getValues(),t,e)},divideAt:function(t){return this.divideAtTime(t&&t.curve===this?t.time:this.getTimeAt(t))},divideAtTime:function(t,e){var n=null;if(t>=1e-8&&t<=1-1e-8){var i=z.subdivide(this.getValues(),t),r=i[0],s=i[1],a=e||this.hasHandles(),o=this._segment1,h=this._segment2,u=this._path;a&&(o._handleOut._set(r[2]-r[0],r[3]-r[1]),h._handleIn._set(s[4]-s[6],s[5]-s[7]));var c=r[6],l=r[7],f=new N(new v(c,l),a&&new v(r[4]-c,r[5]-l),a&&new v(s[2]-c,s[3]-l));u?(u.insert(o._index+1,f),n=this.getNext()):(this._segment2=f,this._changed(),n=new z(f,h))}return n},splitAt:function(t){var e=this._path;return e?e.splitAt(t):null},splitAtTime:function(t){return this.splitAt(this.getLocationAtTime(t))},divide:function(t,e){return this.divideAtTime(t===o?.5:e?t:this.getTimeAt(t))},split:function(t,e){return this.splitAtTime(t===o?.5:e?t:this.getTimeAt(t))},reversed:function(){return new z(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut._set(0,0),this._segment2._handleIn._set(0,0)},statics:{getValues:function(t,e,n,i){var r=t._point,s=t._handleOut,a=e._handleIn,o=e._point,h=r.x,u=r.y,c=o.x,l=o.y,f=i?[h,u,h,u,c,l,c,l]:[h,u,h+s._x,u+s._y,c+a._x,l+a._y,c,l];return n&&n._transformCoordinates(f,f,4),f},subdivide:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],h=t[5],u=t[6],c=t[7];e===o&&(e=.5);var l=1-e,f=l*n+e*r,d=l*i+e*s,p=l*r+e*a,g=l*s+e*h,_=l*a+e*u,v=l*h+e*c,m=l*f+e*p,y=l*d+e*g,x=l*p+e*_,b=l*g+e*v,w=l*m+e*x,S=l*y+e*b;return[[n,i,f,d,m,y,w,S],[w,S,x,b,_,v,u,c]]},getMonoCurves:function(t,e){var n=[],i=e?0:1,r=t[i+0],s=t[i+2],a=t[i+4],o=t[i+6];if(r>=s==s>=a&&s>=a==a>=o||z.isStraight(t))n.push(t);else{var h=3*(s-a)-r+o,u=2*(r+a)-4*s,c=s-r,l=[],f=g.solveQuadratic(h,u,c,l,1e-8,1-1e-8);if(f){l.sort();var d=l[0],p=z.subdivide(t,d);n.push(p[0]),f>1&&(d=(l[1]-d)/(1-d),p=z.subdivide(p[1],d),n.push(p[0])),n.push(p[1])}else n.push(t)}return n},solveCubic:function(t,e,n,i,r,s){var a=t[e],o=t[e+2],h=t[e+4],u=t[e+6],c=0;if(!(a<n&&u<n&&o<n&&h<n||a>n&&u>n&&o>n&&h>n)){var l=3*(o-a),f=3*(h-o)-l,d=u-a-l-f;c=g.solveCubic(d,f,l,a-n,i,r,s)}return c},getTimeOf:function(t,e){var n=new v(t[0],t[1]),i=new v(t[6],t[7]);if(null===(e.isClose(n,1e-12)?0:e.isClose(i,1e-12)?1:null))for(var r=[e.x,e.y],s=[],a=0;a<2;a++)for(var o=z.solveCubic(t,a,r[a],s,0,1),h=0;h<o;h++){var u=s[h];if(e.isClose(z.getPoint(t,u),1e-7))return u}return e.isClose(n,1e-7)?0:e.isClose(i,1e-7)?1:null},getNearestTime:function(t,e){if(z.isStraight(t)){var n=t[0],i=t[1],r=t[6]-n,s=t[7]-i,a=r*r+s*s;if(0===a)return 0;var o=((e.x-n)*r+(e.y-i)*s)/a;return o<1e-12?0:o>.999999999999?1:z.getTimeOf(t,new v(n+o*r,i+o*s))}var h=1/0,u=0;function c(n){if(n>=0&&n<=1){var i=e.getDistance(z.getPoint(t,n),!0);if(i<h)return h=i,u=n,!0}}for(var l=0;l<=100;l++)c(l/100);for(var f=.005;f>1e-8;)c(u-f)||c(u+f)||(f/=2);return u},getPart:function(t,e,n){var i=e>n;if(i){var r=e;e=n,n=r}return e>0&&(t=z.subdivide(t,e)[1]),n<1&&(t=z.subdivide(t,(n-e)/(1-e))[0]),i?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},isFlatEnough:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],c=3*r-2*n-h,l=3*s-2*i-u,f=3*a-2*h-n,d=3*o-2*u-i;return Math.max(c*c,f*f)+Math.max(l*l,d*d)<=16*e*e},getArea:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7];return 3*((h-n)*(i+s)-(o-e)*(r+a)+r*(e-s)-i*(n-a)+h*(s+e/3)-o*(a+n/3))/20},getBounds:function(t){for(var e=t.slice(0,2),n=e.slice(),i=[0,0],r=0;r<2;r++)z._addBounds(t[r],t[r+2],t[r+4],t[r+6],r,0,e,n,i);return new b(e[0],e[1],n[0]-e[0],n[1]-e[1])},_addBounds:function(t,e,n,i,r,s,a,o,h){function u(t,e){var n=t-e,i=t+e;n<a[r]&&(a[r]=n),i>o[r]&&(o[r]=i)}s/=2;var c=a[r]-s,l=o[r]+s;if(t<c||e<c||n<c||i<c||t>l||e>l||n>l||i>l)if(e<t!=e<i&&n<t!=n<i)u(t,s),u(i,s);else{var f=3*(e-n)-t+i,d=2*(t+n)-4*e,p=e-t,_=g.solveQuadratic(f,d,p,h);u(i,0);for(var v=0;v<_;v++){var m=h[v],y=1-m;1e-8<=m&&m<=1-1e-8&&u(y*y*y*t+3*y*y*m*e+3*y*m*m*n+m*m*m*i,s)}}}}},c.each(["getBounds","getStrokeBounds","getHandleBounds"],(function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];return e||(e=this._bounds[t]=R[t]([this._segment1,this._segment2],!1,this._path)),e.clone()}}),{}),c.each({isStraight:function(t,e,n,i){if(e.isZero()&&n.isZero())return!0;var r=i.subtract(t);if(r.isZero())return!1;if(r.isCollinear(e)&&r.isCollinear(n)){var s=new C(t,i);if(s.getDistance(t.add(e))<1e-7&&s.getDistance(i.add(n))<1e-7){var a=r.dot(r),o=r.dot(e)/a,h=r.dot(n)/a;return o>=0&&o<=1&&h<=0&&h>=-1}}return!1},isLinear:function(t,e,n,i){var r=i.subtract(t).divide(3);return e.equals(r)&&n.negate().equals(r)}},(function(t,e){this[e]=function(e){var n=this._segment1,i=this._segment2;return t(n._point,n._handleOut,i._handleIn,i._point,e)},this.statics[e]=function(e,n){var i=e[0],r=e[1],s=e[6],a=e[7];return t(new v(i,r),new v(e[2]-i,e[3]-r),new v(e[4]-s,e[5]-a),new v(s,a),n)}}),{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},hasLength:function(t){return(!this.getPoint1().equals(this.getPoint2())||this.hasHandles())&&this.getLength()>(t||0)},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).y)<1e-8},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAtTime(.5).x)<1e-8}}),{beans:!1,getLocationAt:function(t,e){return this.getLocationAtTime(e?t:this.getTimeAt(t))},getLocationAtTime:function(t){return null!=t&&t>=0&&t<=1?new j(this,t):null},getTimeAt:function(t,e){return z.getTimeAt(this.getValues(),t,e)},getParameterAt:"#getTimeAt",getTimesWithTangent:function(){var t=v.read(arguments);return t.isZero()?[]:z.getTimesWithTangent(this.getValues(),t)},getOffsetAtTime:function(t){return this.getPartLength(0,t)},getLocationOf:function(){return this.getLocationAtTime(this.getTimeOf(v.read(arguments)))},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getTimeOf:function(){return z.getTimeOf(this.getValues(),v.read(arguments))},getParameterOf:"#getTimeOf",getNearestLocation:function(){var t=v.read(arguments),e=this.getValues(),n=z.getNearestTime(e,t),i=z.getPoint(e,n);return new j(this,n,i,null,t.getDistance(i))},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return c.each(t,(function(t){this[t+"At"]=function(e,n){var i=this.getValues();return z[t](i,n?e:z.getTimeAt(i,e))},this[t+"AtTime"]=function(e){return z[t](this.getValues(),e)}}),{statics:{_evaluateMethods:t}})},new function(){function t(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],u=9*(i-s)+3*(o-e),c=6*(e+s)-12*i,l=3*(i-e),f=9*(r-a)+3*(h-n),d=6*(n+a)-12*r,p=3*(r-n);return function(t){var e=(u*t+c)*t+l,n=(f*t+d)*t+p;return Math.sqrt(e*e+n*n)}}function e(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function n(t,e,n,i){if(null==e||e<0||e>1)return null;var r=t[0],s=t[1],a=t[2],o=t[3],h=t[4],u=t[5],c=t[6],l=t[7],f=g.isZero;f(a-r)&&f(o-s)&&(a=r,o=s),f(h-c)&&f(u-l)&&(h=c,u=l);var d,p,_=3*(a-r),m=3*(h-a)-_,y=c-r-_-m,x=3*(o-s),b=3*(u-o)-x,w=l-s-x-b;if(0===n)d=0===e?r:1===e?c:((y*e+m)*e+_)*e+r,p=0===e?s:1===e?l:((w*e+b)*e+x)*e+s;else{if(e<1e-8?(d=_,p=x):e>1-1e-8?(d=3*(c-h),p=3*(l-u)):(d=(3*y*e+2*m)*e+_,p=(3*w*e+2*b)*e+x),i){0===d&&0===p&&(e<1e-8||e>1-1e-8)&&(d=h-a,p=u-o);var S=Math.sqrt(d*d+p*p);S&&(d/=S,p/=S)}if(3===n){h=6*y*e+2*m,u=6*w*e+2*b;var C=Math.pow(d*d+p*p,1.5);d=0!==C?(d*u-p*h)/C:0,p=0}}return 2===n?new v(p,-d):new v(d,p)}return{statics:{classify:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],h=t[6],u=t[7],c=i*(n-u)+r*(h-e)+e*u-n*h,l=3*(s*(r-n)+a*(e-i)+i*n-r*e),f=l-c,d=f-c+(e*(u-a)+n*(s-h)+h*a-u*s),p=Math.sqrt(d*d+f*f+l*l),_=0!==p?1/p:0,v=g.isZero;function m(t,e,n){var i=e!==o,r=i&&e>0&&e<1,s=i&&n>0&&n<1;return!i||(r||s)&&("loop"!==t||r&&s)||(t="arch",r=s=!1),{type:t,roots:r||s?r&&s?e<n?[e,n]:[n,e]:[r?e:n]:null}}if(f*=_,l*=_,v(d*=_))return v(f)?m(v(l)?"line":"quadratic"):m("serpentine",l/(3*f));var y=3*f*f-4*d*l;if(v(y))return m("cusp",f/(2*d));var x=y>0?Math.sqrt(y/3):Math.sqrt(-y),b=2*d;return m(y>0?"serpentine":"loop",(f+x)/b,(f-x)/b)},getLength:function(n,i,r,s){if(i===o&&(i=0),r===o&&(r=1),z.isStraight(n)){var a=n;r<1&&(a=z.subdivide(a,r)[0],i/=r),i>0&&(a=z.subdivide(a,i)[1]);var h=a[6]-a[0],u=a[7]-a[1];return Math.sqrt(h*h+u*u)}return g.integrate(s||t(n),i,r,e(i,r))},getTimeAt:function(n,i,r){if(r===o&&(r=i<0?1:0),0===i)return r;var s=Math.abs,a=i>0,h=a?r:0,u=a?1:r,c=t(n),l=z.getLength(n,h,u,c),f=s(i)-l;if(s(f)<1e-12)return a?u:h;if(f>1e-12)return null;var d=i/l,p=0;return g.findRoot((function(t){return p+=g.integrate(c,r,t,e(r,t)),r=t,p-i}),c,r+d,h,u,32,1e-12)},getPoint:function(t,e){return n(t,e,0,!1)},getTangent:function(t,e){return n(t,e,1,!0)},getWeightedTangent:function(t,e){return n(t,e,1,!1)},getNormal:function(t,e){return n(t,e,2,!0)},getWeightedNormal:function(t,e){return n(t,e,2,!1)},getCurvature:function(t,e){return n(t,e,3,!1).x},getPeaks:function(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=3*i-e-3*s+t[6],h=3*e-6*i+3*s,u=-3*e+3*i,c=3*r-n-3*a+t[7],l=3*n-6*r+3*a,f=-3*n+3*r,d=[];return g.solveCubic(9*(o*o+c*c),9*(o*h+l*c),2*(h*h+l*l)+3*(u*o+f*c),u*h+l*f,d,1e-8,1-1e-8),d.sort()}}}},new function(){function t(t,e,n,i,r,s,a){var o=!a&&n.getPrevious()===r,h=!a&&n!==r&&n.getNext()===r;if(null!==i&&i>=(o?1e-8:0)&&i<=(h?1-1e-8:1)&&null!==s&&s>=(h?1e-8:0)&&s<=(o?1-1e-8:1)){var u=new j(n,i,null,a),c=new j(r,s,null,a);u._intersection=c,c._intersection=u,e&&!e(u)||j.insert(t,u,!0)}}function e(i,r,s,a,o,h,u,c,l,f,d,p,g){if(++l>=4096||++c>=40)return l;var _,v,m=r[0],y=r[1],x=r[6],b=r[7],w=C.getSignedDistance,S=w(m,y,x,b,r[2],r[3]),k=w(m,y,x,b,r[4],r[5]),P=S*k>0?.75:4/9,A=P*Math.min(0,S,k),I=P*Math.max(0,S,k),T=w(m,y,x,b,i[0],i[1]),E=w(m,y,x,b,i[2],i[3]),O=w(m,y,x,b,i[4],i[5]),M=w(m,y,x,b,i[6],i[7]),L=function(t,e,n,i){var r,s=[0,t],a=[1/3,e],o=[2/3,n],h=[1,i],u=e-(2*t+i)/3,c=n-(t+2*i)/3;if(u*c<0)r=[[s,a,h],[s,o,h]];else{var l=u/c;r=[l>=2?[s,a,h]:l<=.5?[s,o,h]:[s,a,o,h],[s,h]]}return(u||c)<0?r.reverse():r}(T,E,O,M),N=L[0],B=L[1];if(0===S&&0===k&&0===T&&0===E&&0===O&&0===M||null==(_=n(N,B,A,I))||null==(v=n(N.reverse(),B.reverse(),A,I)))return l;var j=f+(d-f)*_,V=f+(d-f)*v;if(Math.max(g-p,V-j)<1e-9){var R=(j+V)/2,D=(p+g)/2;t(o,h,u?a:s,u?D:R,u?s:a,u?R:D)}else if(i=z.getPart(i,_,v),v-_>.8)if(V-j>g-p){R=(j+V)/2;l=e(r,(F=z.subdivide(i,.5))[0],a,s,o,h,!u,c,l,p,g,j,R),l=e(r,F[1],a,s,o,h,!u,c,l,p,g,R,V)}else{var F;D=(p+g)/2;l=e((F=z.subdivide(r,.5))[0],i,a,s,o,h,!u,c,l,p,D,j,V),l=e(F[1],i,a,s,o,h,!u,c,l,D,g,j,V)}else l=g-p>=1e-9?e(r,i,a,s,o,h,!u,c,l,p,g,j,V):e(i,r,s,a,o,h,u,c,l,j,V,p,g);return l}function n(t,e,n,r){return t[0][1]<n?i(t,!0,n):e[0][1]>r?i(e,!1,r):t[0][0]}function i(t,e,n){for(var i=t[0][0],r=t[0][1],s=1,a=t.length;s<a;s++){var o=t[s][0],h=t[s][1];if(e?h>=n:h<=n)return h===n?o:i+(n-r)*(o-i)/(h-r);i=o,r=h}return null}function r(t,e,n,i,r){var s=g.isZero;if(s(i)&&s(r)){var a=z.getTimeOf(t,new v(e,n));return null===a?[]:[a]}for(var o=Math.atan2(-r,i),h=Math.sin(o),u=Math.cos(o),c=[],l=[],f=0;f<8;f+=2){var d=t[f]-e,p=t[f+1]-n;c.push(d*u-p*h,d*h+p*u)}return z.solveCubic(c,1,0,l,0,1),l}function s(e,n,i,s,a,o,h){for(var u=n[0],c=n[1],l=r(e,u,c,n[6]-u,n[7]-c),f=0,d=l.length;f<d;f++){var p=l[f],g=z.getPoint(e,p),_=z.getTimeOf(n,g);null!==_&&t(a,o,h?s:i,h?_:p,h?i:s,h?p:_)}}function a(e,n,i,r,s,a){var o=C.intersect(e[0],e[1],e[6],e[7],n[0],n[1],n[6],n[7]);o&&t(s,a,i,z.getTimeOf(e,o),r,z.getTimeOf(n,o))}function o(n,i,r,o,h,c){var l=Math.min,f=Math.max;if(f(n[0],n[2],n[4],n[6])+1e-12>l(i[0],i[2],i[4],i[6])&&l(n[0],n[2],n[4],n[6])-1e-12<f(i[0],i[2],i[4],i[6])&&f(n[1],n[3],n[5],n[7])+1e-12>l(i[1],i[3],i[5],i[7])&&l(n[1],n[3],n[5],n[7])-1e-12<f(i[1],i[3],i[5],i[7])){var d=u(n,i);if(d)for(var p=0;p<2;p++){var g=d[p];t(h,c,r,g[0],o,g[1],!0)}else{var _=z.isStraight(n),m=z.isStraight(i),y=_&&m,x=_&&!m,b=h.length;if((y?a:_||m?s:e)(x?i:n,x?n:i,x?o:r,x?r:o,h,c,x,0,0,0,1,0,1),!y||h.length===b)for(p=0;p<4;p++){var w=p>>1,S=1&p,C=6*w,k=6*S,P=new v(n[C],n[C+1]),A=new v(i[k],i[k+1]);P.isClose(A,1e-12)&&t(h,c,r,w,o,S)}}}return h}function h(e,n,i,r){var s=z.classify(e);if("loop"===s.type){var a=s.roots;t(i,r,n,a[0],n,a[1])}return i}function u(t,e){function n(t){var e=t[6]-t[0],n=t[7]-t[1];return e*e+n*n}var i=Math.abs,r=C.getDistance,s=z.isStraight(t),a=z.isStraight(e),o=s&&a,h=n(t)<n(e),u=h?e:t,c=h?t:e,l=u[0],f=u[1],d=u[6]-l,p=u[7]-f;if(r(l,f,d,p,c[0],c[1],!0)<1e-7&&r(l,f,d,p,c[6],c[7],!0)<1e-7)!o&&r(l,f,d,p,u[2],u[3],!0)<1e-7&&r(l,f,d,p,u[4],u[5],!0)<1e-7&&r(l,f,d,p,c[2],c[3],!0)<1e-7&&r(l,f,d,p,c[4],c[5],!0)<1e-7&&(s=a=o=!0);else if(o)return null;if(s^a)return null;for(var g=[t,e],_=[],m=0;m<4&&_.length<2;m++){var y=1&m,x=1^y,b=m>>1,w=z.getTimeOf(g[y],new v(g[x][b?6:0],g[x][b?7:1]));if(null!=w){var S=y?[b,w]:[w,b];(!_.length||i(S[0]-_[0][0])>1e-8&&i(S[1]-_[0][1])>1e-8)&&_.push(S)}if(m>2&&!_.length)break}if(2!==_.length)_=null;else if(!o){var k=z.getPart(t,_[0][0],_[1][0]),P=z.getPart(e,_[0][1],_[1][1]);(i(P[2]-k[2])>1e-7||i(P[3]-k[3])>1e-7||i(P[4]-k[4])>1e-7||i(P[5]-k[5])>1e-7)&&(_=null)}return _}return{getIntersections:function(t){var e=this.getValues(),n=t&&t!==this&&t.getValues();return n?o(e,n,this,t,[]):h(e,this,[])},statics:{getOverlaps:u,getIntersections:function(t,e,n,i,r,s){var a=!e;a&&(e=t);for(var u,l,f=t.length,d=e.length,p=[],g=[],_=0;_<d;_++)p[_]=e[_].getValues(r);for(_=0;_<f;_++){var v=t[_],m=a?p[_]:v.getValues(i),y=v.getPath();y!==l&&(l=y,u=[],g.push(u)),a&&h(m,v,u,n);for(var x=a?_+1:0;x<d;x++){if(s&&u.length)return u;o(m,p[x],v,e[x],u,n)}}u=[],_=0;for(var b=g.length;_<b;_++)c.push(u,g[_]);return u},getCurveLineIntersections:r,getTimesWithTangent:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],c=e.normalize(),l=c.x,f=c.y,d=3*h-9*a+9*r-3*n,p=3*u-9*o+9*s-3*i,_=6*a-12*r+6*n,v=6*o-12*s+6*i,m=3*r-3*n,y=3*s-3*i,x=2*d*f-2*p*l,b=[];if(Math.abs(x)<g.CURVETIME_EPSILON){if(0!=(x=d*v-p*_)){var w=-(d*y-p*m)/x;w>=0&&w<=1&&b.push(w)}}else{var S=(_*_-4*d*m)*f*f+(-2*_*v+4*p*m+4*d*y)*l*f+(v*v-4*p*y)*l*l,C=_*f-v*l;if(S>=0&&0!=x){var k=Math.sqrt(S),P=-(C+k)/x,A=(-C+k)/x;P>=0&&P<=1&&b.push(P),A>=0&&A<=1&&b.push(A)}}return b}}}}),j=c.extend({_class:"CurveLocation",initialize:function(t,e,n,i,r){if(e>=.99999999){var s=t.getNext();s&&(e=0,t=s)}this._setCurve(t),this._time=e,this._point=n||t.getPointAtTime(e),this._overlap=i,this._distance=r,this._intersection=this._next=this._previous=null},_setCurve:function(t){var e=t._path;this._path=e,this._version=e?e._version:0,this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){this._setCurve(t.getCurve()),this._segment=t,this._time=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this._segment;if(!t){var e=this.getCurve(),n=this.getTime();0===n?t=e._segment1:1===n?t=e._segment2:null!=n&&(t=e.getPartLength(0,n)<e.getPartLength(n,1)?e._segment1:e._segment2),this._segment=t}return t},getCurve:function(){var t=this._path,e=this;function n(t){var n=t&&t.getCurve();if(n&&null!=(e._time=n.getTimeOf(e._point)))return e._setCurve(n),n}return t&&t._version!==this._version&&(this._time=this._offset=this._curveOffset=this._curve=null),this._curve||n(this._segment)||n(this._segment1)||n(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getTime:function(){var t=this.getCurve(),e=this._time;return t&&null==e?this._time=t.getTimeOf(this._point):e},getParameter:"#getTime",getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),n=this.getIndex();if(e&&null!=n)for(var i=e.getCurves(),r=0;r<n;r++)t+=i[r].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this._curveOffset;if(null==t){var e=this.getCurve(),n=this.getTime();this._curveOffset=t=null!=n&&e&&e.getPartLength(0,n)}return t},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=t&&t.divideAtTime(this.getTime());return e&&this._setSegment(e._segment1),e},split:function(){var t=this.getCurve(),e=t._path,n=t&&t.splitAtTime(this.getTime());return n&&this._setSegment(e.getLastSegment()),n},equals:function(t,e){var n=this===t;if(!n&&t instanceof j){var i=this.getCurve(),r=t.getCurve(),s=i._path;if(s===r._path){var a=Math.abs,o=a(this.getOffset()-t.getOffset()),h=!e&&this._intersection,u=!e&&t._intersection;n=(o<1e-7||s&&a(s.getLength()-o)<1e-7)&&(!h&&!u||h&&u&&h.equals(u,!0))}}return n},toString:function(){var t=[],e=this.getPoint(),n=p.instance;e&&t.push("point: "+e);var i=this.getIndex();null!=i&&t.push("index: "+i);var r=this.getTime();return null!=r&&t.push("time: "+n.number(r)),null!=this._distance&&t.push("distance: "+n.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),n=t.getCurve();return!(e.isStraight()&&n.isStraight()&&e.getLine().intersect(n.getLine()))}return!1},isCrossing:function(){var t=this._intersection;if(!t)return!1;var e=this.getTime(),n=t.getTime(),i=e>=1e-8&&e<=1-1e-8,r=n>=1e-8&&n<=1-1e-8;if(i&&r)return!this.isTouching();var s=this.getCurve(),a=e<1e-8?s.getPrevious():s,o=t.getCurve(),h=n<1e-8?o.getPrevious():o;if(e>1-1e-8&&(s=s.getNext()),n>1-1e-8&&(o=o.getNext()),!(a&&s&&h&&o))return!1;var u=[];function c(t,e){var n=t.getValues(),i=z.classify(n).roots||z.getPeaks(n),r=i.length,s=e&&r>1?i[r-1]:r>0?i[0]:.5;u.push(z.getLength(n,e?s:0,e?1:s)/2)}function l(t,e,n){return e<n?t>e&&t<n:t>e||t<n}i||(c(a,!0),c(s,!1)),r||(c(h,!0),c(o,!1));var f=this.getPoint(),d=Math.min.apply(Math,u),p=i?s.getTangentAtTime(e):s.getPointAt(d).subtract(f),g=i?p.negate():a.getPointAt(-d).subtract(f),_=r?o.getTangentAtTime(n):o.getPointAt(d).subtract(f),v=r?_.negate():h.getPointAt(-d).subtract(f),m=g.getAngle(),y=p.getAngle(),x=v.getAngle(),b=_.getAngle();return!!(i?l(m,x,b)^l(y,x,b)&&l(m,b,x)^l(y,b,x):l(x,m,y)^l(b,m,y)&&l(x,y,m)^l(b,y,m))},hasOverlap:function(){return!!this._overlap}},c.each(z._evaluateMethods,(function(t){var e=t+"At";this[t]=function(){var t=this.getCurve(),n=this.getTime();return null!=n&&t&&t[e](n,!0)}}),{preserve:!0}),new function(){function t(t,e,n){var i=t.length,r=0,s=i-1;function a(n,r){for(var s=n+r;s>=-1&&s<=i;s+=r){var a=t[(s%i+i)%i];if(!e.getPoint().isClose(a.getPoint(),1e-7))break;if(e.equals(a))return a}return null}for(;r<=s;){var o,h=r+s>>>1,u=t[h];if(n&&(o=e.equals(u)?u:a(h,-1)||a(h,1)))return e._overlap&&(o._overlap=o._intersection._overlap=!0),o;var c=e.getPath(),l=u.getPath();(c!==l?c._id-l._id:e.getIndex()+e.getTime()-(u.getIndex()+u.getTime()))<0?s=h-1:r=h+1}return t.splice(r,0,e),e}return{statics:{insert:t,expand:function(e){for(var n=e.slice(),i=e.length-1;i>=0;i--)t(n,e[i]._intersection,!1);return n}}}}),V=P.extend({_class:"PathItem",_selectBounds:!1,_canScaleStroke:!0,beans:!0,initialize:function(){},statics:{create:function(t){var e,n,i;if(c.isPlainObject(t)?(n=t.segments,e=t.pathData):Array.isArray(t)?n=t:"string"==typeof t&&(e=t),n){var r=n[0];i=r&&Array.isArray(r[0])}else e&&(i=(e.match(/m/gi)||[]).length>1||/z\s*\S+/i.test(e));return new(i?D:R)(t)}},_asPathItem:function(){return this},isClockwise:function(){return this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse()},setPathData:function(t){var e,n,i,r=t&&t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),s=!1,a=new v,o=new v;function h(t,n){var i=+e[t];return s&&(i+=a[n]),i}function u(t){return new v(h(t,"x"),h(t+1,"y"))}this.clear();for(var c=0,l=r&&r.length;c<l;c++){var f=r[c],d=f[0],p=d.toLowerCase(),g=(e=f.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g))&&e.length;switch(s=d===p,"z"!==n||/[mz]/.test(p)||this.moveTo(a),p){case"m":case"l":for(var _="m"===p,m=0;m<g;m+=2)this[_?"moveTo":"lineTo"](a=u(m)),_&&(o=a,_=!1);i=a;break;case"h":case"v":var x="h"===p?"x":"y";a=a.clone();for(m=0;m<g;m++)a[x]=h(m,x),this.lineTo(a);i=a;break;case"c":for(m=0;m<g;m+=6)this.cubicCurveTo(u(m),i=u(m+2),a=u(m+4));break;case"s":for(m=0;m<g;m+=4)this.cubicCurveTo(/[cs]/.test(n)?a.multiply(2).subtract(i):a,i=u(m),a=u(m+2)),n=p;break;case"q":for(m=0;m<g;m+=4)this.quadraticCurveTo(i=u(m),a=u(m+2));break;case"t":for(m=0;m<g;m+=2)this.quadraticCurveTo(i=/[qt]/.test(n)?a.multiply(2).subtract(i):a,a=u(m)),n=p;break;case"a":for(m=0;m<g;m+=7)this.arcTo(a=u(m+5),new y(+e[m],+e[m+1]),+e[m+2],+e[m+4],+e[m+3]);break;case"z":this.closePath(1e-12),a=o}n=p}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=t.isInside(this.getBounds({internal:!0,handle:!0}))?this._getWinding(t):{};return e.onPath||!!("evenodd"===this.getFillRule()?1&e.windingL||1&e.windingR:e.winding)},getIntersections:function(t,e,n,i){var r=this===t||!t,s=this._matrix._orNullIfIdentity(),a=r?s:(n||t._matrix)._orNullIfIdentity();return r||this.getBounds(s).intersects(t.getBounds(a),1e-12)?z.getIntersections(this.getCurves(),!r&&t.getCurves(),e,s,a,i):[]},getCrossings:function(t){return this.getIntersections(t,(function(t){return t.hasOverlap()||t.isCrossing()}))},getNearestLocation:function(){for(var t=v.read(arguments),e=this.getCurves(),n=1/0,i=null,r=0,s=e.length;r<s;r++){var a=e[r].getNearestLocation(t);a._distance<n&&(n=a._distance,i=a)}return i},getNearestPoint:function(){var t=this.getNearestLocation.apply(this,arguments);return t?t.getPoint():t},interpolate:function(t,e,n){var i=!this._children,r=i?"_segments":"_children",s=t[r],a=e[r],o=this[r];if(!s||!a||s.length!==a.length)throw new Error("Invalid operands in interpolate() call: "+t+", "+e);var h=o.length,u=a.length;if(h<u)for(var c=i?N:R,l=h;l<u;l++)this.add(new c);else h>u&&this[i?"removeSegments":"removeChildren"](u,h);for(l=0;l<u;l++)o[l].interpolate(s[l],a[l],n);i&&(this.setClosed(t._closed),this._changed(9))},compare:function(t){var e=!1;if(t){var n=this._children||[this],i=t._children?t._children.slice():[t],r=n.length,s=i.length,a=[],o=0;e=!0;for(var h=r-1;h>=0&&e;h--){var u=n[h];e=!1;for(var c=s-1;c>=0&&!e;c--)u.compare(i[c])&&(a[c]||(a[c]=!0,o++),e=!0)}e=e&&o===s}return e}}),R=V.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(t){this._closed=!1,this._segments=[],this._version=0;var e=Array.isArray(t)?"object"==typeof t[0]?t:arguments:!t||t.size!==o||t.x===o&&t.point===o?null:arguments;e&&e.length>0?this.setSegments(e):(this._curves=o,this._segmentSelection=0,e||"string"!=typeof t||(this.setPathData(t),t=null)),this._initialize(!e&&t)},_equals:function(t){return this._closed===t._closed&&c.equals(this._segments,t._segments)},copyContent:function(t){this.setSegments(t._segments),this._closed=t._closed},_changed:function t(e){if(t.base.call(this,e),8&e){if(this._length=this._area=o,32&e)this._version++;else if(this._curves)for(var n=0,i=this._curves.length;n<i;n++)this._curves[n]._changed()}else 64&e&&(this._bounds=o)},getStyle:function(){var t=this._parent;return(t instanceof D?t:this)._style},getSegments:function(){return this._segments},setSegments:function(t){var e=this.isFullySelected(),n=t&&t.length;if(this._segments.length=0,this._segmentSelection=0,this._curves=o,n){var i=t[n-1];"boolean"==typeof i&&(this.setClosed(i),n--),this._add(N.readList(t,0,{},n))}e&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var n=this._countCurves();t=this._curves=new Array(n);for(var i=0;i<n;i++)t[i]=new z(this,e[i],e[i+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new z(this,this._segments[e-1],this._segments[0]))}this._changed(41)}}},{beans:!0,getPathData:function(t,e){var n,i,r,s,a,o,h,u,c=this._segments,l=c.length,f=new p(e),d=new Array(6),g=!0,_=[];function v(e,c){if(e._transformCoordinates(t,d),n=d[0],i=d[1],g)_.push("M"+f.pair(n,i)),g=!1;else if(a=d[2],o=d[3],a===n&&o===i&&h===r&&u===s){if(!c){var l=n-r,p=i-s;_.push(0===l?"v"+f.number(p):0===p?"h"+f.number(l):"l"+f.pair(l,p))}}else _.push("c"+f.pair(h-r,u-s)+" "+f.pair(a-r,o-s)+" "+f.pair(n-r,i-s));r=n,s=i,h=d[4],u=d[5]}if(!l)return"";for(var m=0;m<l;m++)v(c[m]);return this._closed&&l>0&&(v(c[0],!0),_.push("z")),_.join("")},isEmpty:function(){return!this._segments.length},_transformContent:function(t){for(var e=this._segments,n=new Array(6),i=0,r=e.length;i<r;i++)e[i]._transformCoordinates(t,n,!0);return!0},_add:function(t,e){for(var n=this._segments,i=this._curves,r=t.length,s=null==e,a=(e=s?n.length:e,0);a<r;a++){var o=t[a];o._path&&(o=t[a]=o.clone()),o._path=this,o._index=e+a,o._selection&&this._updateSelection(o,0,o._selection)}if(s)c.push(n,t);else{n.splice.apply(n,[e,0].concat(t));a=e+r;for(var h=n.length;a<h;a++)n[a]._index=a}if(i){var u=this._countCurves(),l=e>0&&e+r-1===u?e-1:e,f=l,d=Math.min(l+r,u);t._curves&&(i.splice.apply(i,[l,0].concat(t._curves)),f+=t._curves.length);for(a=f;a<d;a++)i.splice(a,0,new z(this,null,null));this._adjustCurves(l,d)}return this._changed(41),t},_adjustCurves:function(t,e){for(var n,i=this._segments,r=this._curves,s=t;s<e;s++)(n=r[s])._path=this,n._segment1=i[s],n._segment2=i[s+1]||i[0],n._changed();(n=r[this._closed&&!t?i.length-1:t-1])&&(n._segment2=i[t]||i[0],n._changed()),(n=r[e])&&(n._segment1=i[e],n._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){return arguments.length>1&&"number"!=typeof t?this._add(N.readList(arguments)):this._add([N.read(arguments)])[0]},insert:function(t,e){return arguments.length>2&&"number"!=typeof e?this._add(N.readList(arguments,1),t):this._add([N.read(arguments,1)],t)[0]},addSegment:function(){return this._add([N.read(arguments)])[0]},insertSegment:function(t){return this._add([N.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(N.readList(t))},insertSegments:function(t,e){return this._add(N.readList(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,n){t=t||0,e=c.pick(e,this._segments.length);var i=this._segments,r=this._curves,s=i.length,a=i.splice(t,e-t),o=a.length;if(!o)return a;for(var h=0;h<o;h++){var u=a[h];u._selection&&this._updateSelection(u,u._selection,0),u._index=u._path=null}h=t;for(var l=i.length;h<l;h++)i[h]._index=h;if(r){var f=t>0&&e===s+(this._closed?1:0)?t-1:t;for(h=(r=r.splice(f,o)).length-1;h>=0;h--)r[h]._path=null;n&&(a._curves=r.slice(1)),this._adjustCurves(f,f)}return this._changed(41),a},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,n=t.length;e<n;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,n=t.length;e<n;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,n=0,i=t.length;n<i;n++)e+=t[n].getLength();this._length=e}return this._length},getArea:function(){var t=this._area;if(null==t){var e=this._segments,n=this._closed;t=0;for(var i=0,r=e.length;i<r;i++){var s=i+1===r;t+=z.getArea(z.getValues(e[i],e[s?0:i+1],null,s&&!n))}this._area=t}return t},isFullySelected:function(){var t=this._segments.length;return this.isSelected()&&t>0&&this._segmentSelection===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelection:function t(e){1&e||this._selectSegments(!1),t.base.call(this,e)},_selectSegments:function(t){var e=this._segments,n=e.length,i=t?7:0;this._segmentSelection=i*n;for(var r=0;r<n;r++)e[r]._selection=i},_updateSelection:function(t,e,n){t._selection=n,(this._segmentSelection+=n-e)>0&&this.setSelected(!0)},divideAt:function(t){var e,n=this.getLocationAt(t);return n&&(e=n.getCurve().divideAt(n.getCurveOffset()))?e._segment1:null},splitAt:function(t){var e=this.getLocationAt(t),n=e&&e.index,i=e&&e.time;i>1-1e-8&&(n++,i=0);var r=this.getCurves();if(n>=0&&n<r.length){i>=1e-8&&r[n++].divideAtTime(i);var s,a=this.removeSegments(n,this._segments.length,!0);return this._closed?(this.setClosed(!1),s=this):((s=new R(P.NO_INSERT)).insertAbove(this),s.copyAttributes(this)),s._add(a,0),this.addSegment(a[0]),s}return null},split:function(t,e){var n,i=e===o?t:(n=this.getCurves()[t])&&n.getLocationAtTime(e);return null!=i?this.splitAt(i):null},join:function(t,e){var n=e||0;if(t&&t!==this){var i=t._segments,r=this.getLastSegment(),s=t.getLastSegment();if(!s)return this;r&&r._point.isClose(s._point,n)&&t.reverse();var a=t.getFirstSegment();if(r&&r._point.isClose(a._point,n))r.setHandleOut(a._handleOut),this._add(i.slice(1));else{var o=this.getFirstSegment();o&&o._point.isClose(a._point,n)&&t.reverse(),s=t.getLastSegment(),o&&o._point.isClose(s._point,n)?(o.setHandleIn(s._handleIn),this._add(i.slice(0,i.length-1),0)):this._add(i.slice())}t._closed&&this._add([i[0]]),t.remove()}var h=this.getFirstSegment(),u=this.getLastSegment();return h!==u&&h._point.isClose(u._point,n)&&(h.setHandleIn(u._handleIn),u.remove(),this.setClosed(!0)),this},reduce:function(t){for(var e=this.getCurves(),n=t&&t.simplify,i=n?1e-7:0,r=e.length-1;r>=0;r--){var s=e[r];!s.hasHandles()&&(!s.hasLength(i)||n&&s.isCollinear(s.getNext()))&&s.remove()}return this},reverse:function(){this._segments.reverse();for(var t=0,e=this._segments.length;t<e;t++){var n=this._segments[t],i=n._handleIn;n._handleIn=n._handleOut,n._handleOut=i,n._index=t}this._curves=null,this._changed(9)},flatten:function(t){for(var e=new F(this,t||.25,256,!0).parts,n=e.length,i=[],r=0;r<n;r++)i.push(new N(e[r].curve.slice(0,2)));!this._closed&&n>0&&i.push(new N(e[n-1].curve.slice(6))),this.setSegments(i)},simplify:function(t){var e=new q(this).fit(t||2.5);return e&&this.setSegments(e),!!e},smooth:function(t){var e=this,n=t||{},i=n.type||"asymmetric",r=this._segments,s=r.length,a=this._closed;function h(t,n){var i=t&&t.index;if(null!=i){var r=t.path;if(r&&r!==e)throw new Error(t._class+" "+i+" of "+r+" is not part of "+e);n&&t instanceof z&&i++}else i="number"==typeof t?t:n;return Math.min(i<0&&a?i%s:i<0?i+s:i,s-1)}var u=a&&n.from===o&&n.to===o,c=h(n.from,0),l=h(n.to,s-1);if(c>l)if(a)c-=s;else{var f=c;c=l,l=f}if(/^(?:asymmetric|continuous)$/.test(i)){var d="asymmetric"===i,p=Math.min,g=l-c+1,_=g-1,v=u?p(g,4):1,m=v,y=v,x=[];if(a||(m=p(1,c),y=p(1,s-l-1)),(_+=m+y)<=1)return;for(var b=0,w=c-m;b<=_;b++,w++)x[b]=r[(w<0?w+s:w)%s]._point;var S=x[0]._x+2*x[1]._x,C=x[0]._y+2*x[1]._y,k=2,P=_-1,A=[S],I=[C],T=[k],E=[],O=[];for(b=1;b<_;b++){var M=b<P,L=M?4:d?2:7,N=M?4:d?3:8,B=M?2:d?0:1,j=(M?1:d?1:2)/k;k=T[b]=L-j,S=A[b]=N*x[b]._x+B*x[b+1]._x-j*S,C=I[b]=N*x[b]._y+B*x[b+1]._y-j*C}E[P]=A[P]/T[P],O[P]=I[P]/T[P];for(b=_-2;b>=0;b--)E[b]=(A[b]-E[b+1])/T[b],O[b]=(I[b]-O[b+1])/T[b];E[_]=(3*x[_]._x-E[P])/2,O[_]=(3*x[_]._y-O[P])/2;b=m;var V=_-y;for(w=c;b<=V;b++,w++){var R=r[w<0?w+s:w],D=R._point,F=E[b]-D._x,q=O[b]-D._y;(u||b<V)&&R.setHandleOut(F,q),(u||b>m)&&R.setHandleIn(-F,-q)}}else for(b=c;b<=l;b++)r[b<0?b+s:b].smooth(n,!u&&b===c,!u&&b===l)},toShape:function(t){if(!this._closed)return null;var e,n,i,r,s,a,h,u=this._segments;function c(t,e){var n=u[t],i=n.getNext(),r=u[e],s=r.getNext();return n._handleOut.isZero()&&i._handleIn.isZero()&&r._handleOut.isZero()&&s._handleIn.isZero()&&i._point.subtract(n._point).isCollinear(s._point.subtract(r._point))}function l(t){var e=u[t],n=e.getNext(),i=e._handleOut,r=n._handleIn;if(i.isOrthogonal(r)){var s=e._point,a=n._point,o=new C(s,i,!0).intersect(new C(a,r,!0),!0);return o&&g.isZero(i.getLength()/o.subtract(s).getLength()-.5522847498307936)&&g.isZero(r.getLength()/o.subtract(a).getLength()-.5522847498307936)}return!1}function f(t,e){return u[t]._point.getDistance(u[e]._point)}if(!this.hasHandles()&&4===u.length&&c(0,2)&&c(1,3)&&(s=u[1],a=s.getPrevious(),h=s.getNext(),a._handleOut.isZero()&&s._handleIn.isZero()&&s._handleOut.isZero()&&h._handleIn.isZero()&&s._point.subtract(a._point).isOrthogonal(h._point.subtract(s._point)))?(e=T.Rectangle,n=new y(f(0,3),f(0,1)),r=u[1]._point.add(u[2]._point).divide(2)):8===u.length&&l(0)&&l(2)&&l(4)&&l(6)&&c(1,5)&&c(3,7)?(e=T.Rectangle,i=(n=new y(f(1,6),f(0,3))).subtract(new y(f(0,7),f(1,2))).divide(2),r=u[3]._point.add(u[4]._point).divide(2)):4===u.length&&l(0)&&l(1)&&l(2)&&l(3)&&(g.isZero(f(0,2)-f(1,3))?(e=T.Circle,i=f(0,2)/2):(e=T.Ellipse,i=new y(f(2,0)/2,f(3,1)/2)),r=u[1]._point),e){var d=this.getPosition(!0),p=new e({center:d,size:n,radius:i,insert:!1});return p.copyAttributes(this,!0),p._matrix.prepend(this._matrix),p.rotate(r.subtract(d).getAngle()+90),(t===o||t)&&p.insertAbove(this),p}return null},toPath:"#clone",compare:function t(e){if(!e||e instanceof D)return t.base.call(this,e);var n=this.getCurves(),i=e.getCurves(),r=n.length,s=i.length;if(!r||!s)return r==s;for(var a,o,h=n[0].getValues(),u=[],c=0,l=0,f=0;f<s;f++){var d=i[f].getValues();if(u.push(d),_=z.getOverlaps(h,d)){a=!f&&_[0][0]>0?s-1:f,o=_[0][1];break}}var p,g=Math.abs;for(d=u[a];h&&d;){var _;if(_=z.getOverlaps(h,d))if(g(_[0][0]-l)<1e-8){1===(l=_[1][0])&&(h=++c<r?n[c].getValues():null,l=0);var v=_[0][1];if(g(v-o)<1e-8){if(p||(p=[a,v]),1===(o=_[1][1])&&(++a>=s&&(a=0),d=u[a]||i[a].getValues(),o=0),!h)return p[0]===a&&p[1]===o;continue}}break}return!1},_hitTestSelf:function(t,e,n,i){var r,s,a,o,h,u,c=this,l=this.getStyle(),f=this._segments,d=f.length,p=this._closed,g=e._tolerancePadding,_=g,v=e.stroke&&l.hasStroke(),m=e.fill&&l.hasFill(),y=e.curves,x=v?l.getStrokeWidth()/2:m&&e.tolerance>0||y?0:null;function b(e,n){return t.subtract(e).divide(n).length<=1}function w(t,n,i){if(!e.selected||n.isSelected()){var r=t._point;if(n!==r&&(n=n.add(r)),b(n,_))return new L(i,c,{segment:t,point:n})}}function S(t,n){return(n||e.segments)&&w(t,t._point,"segment")||!n&&e.handles&&(w(t,t._handleIn,"handle-in")||w(t,t._handleOut,"handle-out"))}function C(t){o.add(t)}function k(e){var n,h=p||e._index>0&&e._index<d-1;return"round"===(h?r:s)?b(e._point,_):(o=new R({internal:!0,closed:!0}),h?e.isSmooth()||R._addBevelJoin(e,r,x,a,null,i,C,!0):"square"===s&&R._addSquareCap(e,s,x,null,i,C,!0),o.isEmpty()?void 0:o.contains(t)||(n=o.getNearestLocation(t))&&b(n.getPoint(),g))}if(null!==x&&(x>0?(r=l.getStrokeJoin(),s=l.getStrokeCap(),a=l.getMiterLimit(),_=_.add(R._getStrokePadding(x,i))):r=s="round"),!e.ends||e.segments||p){if(e.segments||e.handles)for(var P=0;P<d;P++)if(u=S(f[P]))return u}else if(u=S(f[0],!0)||S(f[d-1],!0))return u;if(null!==x){if(h=this.getNearestLocation(t)){var A=h.getTime();0===A||1===A&&d>1?k(h.getSegment())||(h=null):b(h.getPoint(),_)||(h=null)}if(!h&&"miter"===r&&d>1)for(P=0;P<d;P++){var I=f[P];if(t.getDistance(I._point)<=a*x&&k(I)){h=I.getLocation();break}}}return!h&&m&&this._contains(t)||h&&!v&&!y?new L("fill",this):h?new L(v?"stroke":"curve",this,{location:h,point:h.getPoint()}):null}},c.each(z._evaluateMethods,(function(t){this[t+"At"]=function(e){var n=this.getLocationAt(e);return n&&n[t]()}}),{beans:!1,getLocationOf:function(){for(var t=v.read(arguments),e=this.getCurves(),n=0,i=e.length;n<i;n++){var r=e[n].getLocationOf(t);if(r)return r}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t){if("number"==typeof t){for(var e=this.getCurves(),n=0,i=0,r=e.length;i<r;i++){var s=n,a=e[i];if((n+=a.getLength())>t)return a.getLocationAt(t-s)}if(e.length>0&&t<=this.getLength())return new j(e[e.length-1],1)}else if(t&&t.getPath&&t.getPath()===this)return t;return null},getOffsetsWithTangent:function(){var t=v.read(arguments);if(t.isZero())return[];for(var e=[],n=0,i=this.getCurves(),r=0,s=i.length;r<s;r++){for(var a=i[r],o=a.getTimesWithTangent(t),h=0,u=o.length;h<u;h++){var c=n+a.getOffsetAtTime(o[h]);e.indexOf(c)<0&&e.push(c)}n+=a.length}return e}}),new function(){function t(t,e,n){var i,r,s,a,o,h,u,c,l=e._segments,f=l.length,d=new Array(6),p=!0;function g(e){if(n)e._transformCoordinates(n,d),i=d[0],r=d[1];else{var l=e._point;i=l._x,r=l._y}if(p)t.moveTo(i,r),p=!1;else{if(n)o=d[2],h=d[3];else{var f=e._handleIn;o=i+f._x,h=r+f._y}o===i&&h===r&&u===s&&c===a?t.lineTo(i,r):t.bezierCurveTo(u,c,o,h,i,r)}if(s=i,a=r,n)u=d[4],c=d[5];else{f=e._handleOut;u=s+f._x,c=a+f._y}}for(var _=0;_<f;_++)g(l[_]);e._closed&&f>0&&g(l[0])}return{_draw:function(e,n,i,r){var s=n.dontStart,a=n.dontFinish||n.clip,o=this.getStyle(),h=o.hasFill(),u=o.hasStroke(),c=o.getDashArray(),l=!lt.support.nativeDash&&u&&c&&c.length;function f(t){return c[(t%l+l)%l]}if(s||e.beginPath(),(h||u&&!l||a)&&(t(e,this,r),this._closed&&e.closePath()),!a&&(h||u)&&(this._setStyles(e,n,i),h&&(e.fill(o.getFillRule()),e.shadowColor="rgba(0,0,0,0)"),u)){if(l){s||e.beginPath();var d,p=new F(this,.25,32,!1,r),g=p.length,_=-o.getDashOffset(),v=0;for(_%=g;_>0;)_-=f(v--)+f(v--);for(;_<g;)d=_+f(v++),(_>0||d>0)&&p.drawPart(e,Math.max(_,0),Math.max(d,0)),_=d+f(v++)}e.stroke()}},_drawSelected:function(e,n){e.beginPath(),t(e,this,n),e.stroke(),function(t,e,n,i){if(!(i<=0))for(var r,s,a=i/2,o=i-2,h=a-1,u=new Array(6),c=0,l=e.length;c<l;c++){var f=e[c],d=f._selection;if(f._transformCoordinates(n,u),r=u[0],s=u[1],2&d&&g(2),4&d&&g(4),t.fillRect(r-a,s-a,i,i),o>0&&!(1&d)){var p=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(r-h,s-h,o,o),t.fillStyle=p}}function g(e){var n=u[e],i=u[e+1];r==n&&s==i||(t.beginPath(),t.moveTo(r,s),t.lineTo(n,i),t.stroke(),t.beginPath(),t.arc(n,i,a,0,2*Math.PI,!0),t.fill())}}(e,this._segments,n,lt.settings.handleSize)}}},new function(){function t(t){var e=t._segments;if(!e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new N(v.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new N(v.read(arguments))])},cubicCurveTo:function(){var e=v.read(arguments),n=v.read(arguments),i=v.read(arguments),r=t(this);r.setHandleOut(e.subtract(r._point)),this._add([new N(i,n.subtract(i))])},quadraticCurveTo:function(){var e=v.read(arguments),n=v.read(arguments),i=t(this)._point;this.cubicCurveTo(e.add(i.subtract(e).multiply(1/3)),e.add(n.subtract(e).multiply(1/3)),n)},curveTo:function(){var e=v.read(arguments),n=v.read(arguments),i=c.pick(c.read(arguments),.5),r=1-i,s=t(this)._point,a=e.subtract(s.multiply(r*r)).subtract(n.multiply(i*i)).divide(2*i*r);if(a.isNaN())throw new Error("Cannot put a curve through points with parameter = "+i);this.quadraticCurveTo(a,n)},arcTo:function(){var e,n,i,r,s=Math.abs,a=Math.sqrt,o=t(this),h=o._point,u=v.read(arguments),l=c.peek(arguments);if("boolean"==typeof(m=c.pick(l,!0)))var f=(b=h.add(u).divide(2)).add(b.subtract(h).rotate(m?-90:90));else if(c.remain(arguments)<=2)f=u,u=v.read(arguments);else if(!h.equals(u)){var d=y.read(arguments),p=g.isZero;if(p(d.width)||p(d.height))return this.lineTo(u);var _=c.read(arguments),m=!!c.read(arguments),x=!!c.read(arguments),b=h.add(u).divide(2),w=(Z=h.subtract(b).rotate(-_)).x,k=Z.y,P=s(d.width),A=s(d.height),I=P*P,T=A*A,E=w*w,O=k*k,M=a(E/I+O/T);if(M>1&&(I=(P*=M)*P,T=(A*=M)*A),s(M=(I*T-I*O-T*E)/(I*O+T*E))<1e-12&&(M=0),M<0)throw new Error("Cannot create an arc with the given arguments");e=new v(P*k/A,-A*w/P).multiply((x===m?-1:1)*a(M)).rotate(_).add(b),n=(i=(r=(new S).translate(e).rotate(_).scale(P,A))._inverseTransform(h)).getDirectedAngle(r._inverseTransform(u)),!m&&n>0?n-=360:m&&n<0&&(n+=360)}if(f){var L=new C(h.add(f).divide(2),f.subtract(h).rotate(90),!0),B=new C(f.add(u).divide(2),u.subtract(f).rotate(90),!0),z=new C(h,u),j=z.getSide(f);if(!(e=L.intersect(B,!0))){if(!j)return this.lineTo(u);throw new Error("Cannot create an arc with the given arguments")}n=(i=h.subtract(e)).getDirectedAngle(u.subtract(e));var V=z.getSide(e,!0);0===V?n=j*s(n):j===V&&(n+=n<0?360:-360)}if(n){for(var R=1e-7,D=s(n),F=D>=360?4:Math.ceil((D-R)/90),q=n/F,U=q*Math.PI/360,H=4/3*Math.sin(U)/(1+Math.cos(U)),G=[],W=0;W<=F;W++){var Z=u,K=null;if(W<F&&(K=i.rotate(90).multiply(H),r?(Z=r._transformPoint(i),K=r._transformPoint(i.add(K)).subtract(Z)):Z=e.add(i)),W){var Q=i.rotate(-90).multiply(H);r&&(Q=r._transformPoint(i.add(Q)).subtract(Z)),G.push(new N(Z,Q,K))}else o.setHandleOut(K);i=i.rotate(q)}this._add(G)}},lineBy:function(){var e=v.read(arguments),n=t(this)._point;this.lineTo(n.add(e))},curveBy:function(){var e=v.read(arguments),n=v.read(arguments),i=c.read(arguments),r=t(this)._point;this.curveTo(r.add(e),r.add(n),i)},cubicCurveBy:function(){var e=v.read(arguments),n=v.read(arguments),i=v.read(arguments),r=t(this)._point;this.cubicCurveTo(r.add(e),r.add(n),r.add(i))},quadraticCurveBy:function(){var e=v.read(arguments),n=v.read(arguments),i=t(this)._point;this.quadraticCurveTo(i.add(e),i.add(n))},arcBy:function(){var e=t(this)._point,n=e.add(v.read(arguments)),i=c.pick(c.peek(arguments),!0);"boolean"==typeof i?this.arcTo(n,i):this.arcTo(n,e.add(v.read(arguments)))},closePath:function(t){this.setClosed(!0),this.join(this,t)}}},{_getBounds:function(t,e){var n=e.handle?"getHandleBounds":e.stroke?"getStrokeBounds":"getBounds";return R[n](this._segments,this._closed,this,t,e)},statics:{getBounds:function(t,e,n,i,r,s){var a=t[0];if(!a)return new b;var o=new Array(6),h=a._transformCoordinates(i,new Array(6)),u=h.slice(0,2),c=u.slice(),l=new Array(2);function f(t){t._transformCoordinates(i,o);for(var e=0;e<2;e++)z._addBounds(h[e],h[e+4],o[e+2],o[e],e,s?s[e]:0,u,c,l);var n=h;h=o,o=n}for(var d=1,p=t.length;d<p;d++)f(t[d]);return e&&f(a),new b(u[0],u[1],c[0]-u[0],c[1]-u[1])},getStrokeBounds:function(t,e,n,i,r){var s=n.getStyle(),a=s.hasStroke(),o=s.getStrokeWidth(),h=a&&n._getStrokeMatrix(i,r),u=a&&R._getStrokePadding(o,h),c=R.getBounds(t,e,n,i,r,u);if(!a)return c;var l=o/2,f=s.getStrokeJoin(),d=s.getStrokeCap(),p=s.getMiterLimit(),g=new b(new y(u));function _(t){c=c.include(t)}function v(t){c=c.unite(g.setCenter(t._point.transform(i)))}function m(t,e){"round"===e||t.isSmooth()?v(t):R._addBevelJoin(t,e,l,p,i,h,_)}function x(t,e){"round"===e?v(t):R._addSquareCap(t,e,l,i,h,_)}for(var w=t.length-(e?0:1),S=1;S<w;S++)m(t[S],f);return e?m(t[0],f):w>0&&(x(t[0],d),x(t[t.length-1],d)),c},_getStrokePadding:function(t,e){if(!e)return[t,t];var n=new v(t,0).transform(e),i=new v(0,t).transform(e),r=n.getAngleInRadians(),s=n.getLength(),a=i.getLength(),o=Math.sin(r),h=Math.cos(r),u=Math.tan(r),c=Math.atan2(a*u,s),l=Math.atan2(a,u*s);return[Math.abs(s*Math.cos(c)*h+a*Math.sin(c)*o),Math.abs(a*Math.sin(l)*h+s*Math.cos(l)*o)]},_addBevelJoin:function(t,e,n,i,r,s,a,o){var h=t.getCurve(),u=h.getPrevious(),c=h.getPoint1().transform(r),l=u.getNormalAtTime(1).multiply(n).transform(s),f=h.getNormalAtTime(0).multiply(n).transform(s),d=l.getDirectedAngle(f);if((d<0||d>=180)&&(l=l.negate(),f=f.negate()),o&&a(c),a(c.add(l)),"miter"===e){var p=new C(c.add(l),new v(-l.y,l.x),!0).intersect(new C(c.add(f),new v(-f.y,f.x),!0),!0);p&&c.getDistance(p)<=i*n&&a(p)}a(c.add(f))},_addSquareCap:function(t,e,n,i,r,s,a){var o=t._point.transform(i),h=t.getLocation(),u=h.getNormal().multiply(0===h.getTime()?n:-n).transform(r);"square"===e&&(a&&(s(o.subtract(u)),s(o.add(u))),o=o.add(u.rotate(-90))),s(o.add(u)),s(o.subtract(u))},getHandleBounds:function(t,e,n,i,r){var s,a,o=n.getStyle();if(r.stroke&&o.hasStroke()){var h=n._getStrokeMatrix(i,r),u=o.getStrokeWidth()/2,c=u;"miter"===o.getStrokeJoin()&&(c=u*o.getMiterLimit()),"square"===o.getStrokeCap()&&(c=Math.max(c,u*Math.SQRT2)),s=R._getStrokePadding(u,h),a=R._getStrokePadding(c,h)}for(var l=new Array(6),f=1/0,d=-f,p=f,g=d,_=0,v=t.length;_<v;_++){t[_]._transformCoordinates(i,l);for(var m=0;m<6;m+=2){var y=m?s:a,x=y?y[0]:0,w=y?y[1]:0,S=l[m],C=l[m+1],k=S-x,P=S+x,A=C-w,I=C+w;k<f&&(f=k),P>d&&(d=P),A<p&&(p=A),I>g&&(g=I)}}return new b(f,p,d-f,g-p)}}});R.inject({statics:new function(){var t=.5522847498307936,e=[new N([-1,0],[0,t],[0,-t]),new N([0,-1],[-t,0],[t,0]),new N([1,0],[0,-t],[0,t]),new N([0,1],[t,0],[-t,0])];function n(t,e,n){var i=c.getNamed(n),r=new R(i&&0==i.insert&&P.NO_INSERT);return r._add(t),r._closed=e,r.set(i,{insert:!0})}function i(t,i,r){for(var s=new Array(4),a=0;a<4;a++){var o=e[a];s[a]=new N(o._point.multiply(i).add(t),o._handleIn.multiply(i),o._handleOut.multiply(i))}return n(s,!0,r)}return{Line:function(){return n([new N(v.readNamed(arguments,"from")),new N(v.readNamed(arguments,"to"))],!1,arguments)},Circle:function(){var t=v.readNamed(arguments,"center"),e=c.readNamed(arguments,"radius");return i(t,new y(e),arguments)},Rectangle:function(){var e,i=b.readNamed(arguments,"rectangle"),r=y.readNamed(arguments,"radius",0,{readNull:!0}),s=i.getBottomLeft(!0),a=i.getTopLeft(!0),o=i.getTopRight(!0),h=i.getBottomRight(!0);if(!r||r.isZero())e=[new N(s),new N(a),new N(o),new N(h)];else{var u=(r=y.min(r,i.getSize(!0).divide(2))).width,c=r.height,l=u*t,f=c*t;e=[new N(s.add(u,0),null,[-l,0]),new N(s.subtract(0,c),[0,f]),new N(a.add(0,c),null,[0,-f]),new N(a.add(u,0),[-l,0],null),new N(o.subtract(u,0),null,[l,0]),new N(o.add(0,c),[0,-f],null),new N(h.subtract(0,c),null,[0,f]),new N(h.subtract(u,0),[l,0])]}return n(e,!0,arguments)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=T._readEllipse(arguments);return i(t.center,t.radius,arguments)},Oval:"#Ellipse",Arc:function(){var t=v.readNamed(arguments,"from"),e=v.readNamed(arguments,"through"),n=v.readNamed(arguments,"to"),i=c.getNamed(arguments),r=new R(i&&0==i.insert&&P.NO_INSERT);return r.moveTo(t),r.arcTo(e,n),r.set(i)},RegularPolygon:function(){for(var t=v.readNamed(arguments,"center"),e=c.readNamed(arguments,"sides"),i=c.readNamed(arguments,"radius"),r=360/e,s=e%3==0,a=new v(0,s?-i:i),o=s?-1:.5,h=new Array(e),u=0;u<e;u++)h[u]=new N(t.add(a.rotate((u+o)*r)));return n(h,!0,arguments)},Star:function(){for(var t=v.readNamed(arguments,"center"),e=2*c.readNamed(arguments,"points"),i=c.readNamed(arguments,"radius1"),r=c.readNamed(arguments,"radius2"),s=360/e,a=new v(0,-1),o=new Array(e),h=0;h<e;h++)o[h]=new N(t.add(a.rotate(s*h).multiply(h%2?r:i)));return n(o,!0,arguments)}}}});var D=V.extend({_class:"CompoundPath",_serializeFields:{children:[]},beans:!0,initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function t(e,n){var i=n,r=i[0];r&&"number"==typeof r[0]&&(i=[i]);for(var s=n.length-1;s>=0;s--){var a=i[s];i!==n||a instanceof R||(i=c.slice(i)),Array.isArray(a)?i[s]=new R({segments:a,insert:!1}):a instanceof D&&(i.splice.apply(i,[s,1].concat(a.removeChildren())),a.remove())}return t.base.call(this,e,i)},reduce:function t(e){for(var n=this._children,i=n.length-1;i>=0;i--){var r;(r=n[i].reduce(e)).isEmpty()&&r.remove()}return n.length?t.base.call(this):((r=new R(P.NO_INSERT)).copyAttributes(this),r.insertAbove(this),this.remove(),r)},isClosed:function(){for(var t=this._children,e=0,n=t.length;e<n;e++)if(!t[e]._closed)return!1;return!0},setClosed:function(t){for(var e=this._children,n=0,i=e.length;n<i;n++)e[n].setClosed(t)},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],n=0,i=t.length;n<i;n++)c.push(e,t[n].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getLastCurve()},getArea:function(){for(var t=this._children,e=0,n=0,i=t.length;n<i;n++)e+=t[n].getArea();return e},getLength:function(){for(var t=this._children,e=0,n=0,i=t.length;n<i;n++)e+=t[n].getLength();return e},getPathData:function(t,e){for(var n=this._children,i=[],r=0,s=n.length;r<s;r++){var a=n[r],o=a._matrix;i.push(a.getPathData(t&&!o.isIdentity()?t.appended(o):t,e))}return i.join("")},_hitTestChildren:function t(e,n,i){return t.base.call(this,e,n.class===R||"path"===n.type?n:c.set({},n,{fill:!1}),i)},_draw:function(t,e,n,i){var r=this._children;if(r.length){e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var s=0,a=r.length;s<a;s++)r[s].draw(t,e,i);if(!e.clip){this._setStyles(t,e,n);var o=this._style;o.hasFill()&&(t.fill(o.getFillRule()),t.shadowColor="rgba(0,0,0,0)"),o.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,n){for(var i=this._children,r=0,s=i.length;r<s;r++){var a=i[r],o=a._matrix;n[a._id]||a._drawSelected(t,o.isIdentity()?e:e.appended(o))}}},new function(){function t(t,e){var n=t._children;if(e&&!n.length)throw new Error("Use a moveTo() command first");return n[n.length-1]}return c.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],(function(e){this[e]=function(){var n=t(this,!0);n[e].apply(n,arguments)}}),{moveTo:function(){var e=t(this),n=e&&e.isEmpty()?e:new R(P.NO_INSERT);n!==e&&this.addChild(n),n.moveTo.apply(n,arguments)},moveBy:function(){var e=t(this,!0),n=e&&e.getLastSegment(),i=v.read(arguments);this.moveTo(n?i.add(n._point):i)},closePath:function(e){t(this,!0).closePath(e)}})},c.each(["reverse","flatten","simplify","smooth"],(function(t){this[t]=function(e){for(var n,i=this._children,r=0,s=i.length;r<s;r++)n=i[r][t](e)||n;return n}}),{}));V.inject(new function(){var t=Math.min,e=Math.max,n=Math.abs,i={unite:{1:!0,2:!0},intersect:{2:!0},subtract:{1:!0},exclude:{1:!0,"-1":!0}};function r(t,e){var n=t.clone(!1).reduce({simplify:!0}).transform(null,!0,!0);return e?n.resolveCrossings().reorient("nonzero"===n.getFillRule(),!0):n}function s(t,e,n,i,r){var s=new D(P.NO_INSERT);return s.addChildren(t,!0),s=s.reduce({simplify:e}),r&&0==r.insert||s.insertAbove(i&&n.isSibling(i)&&n.getIndex()<i.getIndex()?i:n),s.copyAttributes(n,!0),s}function a(t,e,n,a){if(a&&(0==a.trace||a.stroke)&&/^(subtract|intersect)$/.test(n))return h(t,e,n);var o=r(t,!0),u=e&&t!==e&&r(e,!0),l=i[n];l[n]=!0,u&&(l.subtract||l.exclude)^u.isClockwise()^o.isClockwise()&&u.reverse();var p,g=d(j.expand(o.getCrossings(u))),m=o._children||[o],y=u&&(u._children||[u]),x=[],b=[];function w(t){for(var e=0,n=t.length;e<n;e++){var i=t[e];c.push(x,i._segments),c.push(b,i.getCurves()),i._overlapsOnly=!0}}if(g.length){w(m),y&&w(y);for(var S=0,C=g.length;S<C;S++)_(g[S]._segment,o,u,b,l);for(S=0,C=x.length;S<C;S++){var k=x[S],P=k._intersection;k._winding||_(k,o,u,b,l),P&&P._overlap||(k._path._overlapsOnly=!1)}p=v(x,l)}else p=f(y?m.concat(y):m.slice(),(function(t){return!!l[t]}));return s(p,!0,t,e,a)}function h(t,e,n){var i=r(t),a=r(e),o=i.getCrossings(a),h="subtract"===n,u="divide"===n,c={},l=[];function f(t){if(!c[t._id]&&(u||a.contains(t.getPointAt(t.getLength()/2))^h))return l.unshift(t),c[t._id]=!0}for(var d=o.length-1;d>=0;d--){var p=o[d].split();p&&(f(p)&&p.getFirstSegment().setHandleIn(0,0),i.getLastSegment().setHandleOut(0,0))}return f(i),s(l,!1,t,e)}function u(t,e){for(var n=t;n;){if(n===e)return;n=n._previous}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._previous;)e=e._previous;t._next=e,e._previous=t}}function l(t){for(var e=t.length-1;e>=0;e--)t[e].clearHandles()}function f(t,e,i){var r=t&&t.length;if(r){var s=c.each(t,(function(t,e){this[t._id]={container:null,winding:t.isClockwise()?1:-1,index:e}}),{}),a=t.slice().sort((function(t,e){return n(e.getArea())-n(t.getArea())})),o=a[0];null==i&&(i=o.isClockwise());for(var h=0;h<r;h++){for(var u=a[h],l=s[u._id],f=u.getInteriorPoint(),d=0,p=h-1;p>=0;p--){var g=a[p];if(g.contains(f)){var _=s[g._id];d=_.winding,l.winding+=d,l.container=_.exclude?_.container:g;break}}if(e(l.winding)===e(d))l.exclude=!0,t[l.index]=null;else{var v=l.container;u.setClockwise(v?!v.isClockwise():i)}}}return t}function d(t,e,n){var i,r,s,a=e&&[],o=!1,h=n||[],c=n&&{};function f(t){return t._path._id+"."+t._segment1._index}for(var d=(n&&n.length)-1;d>=0;d--){(p=n[d])._path&&(c[f(p)]=!0)}for(d=t.length-1;d>=0;d--){var p,g,_=t[d],v=_._time,m=v,y=e&&!e(_);if((p=_._curve)&&(p!==r?(o=!p.hasHandles()||c&&c[f(p)],i=[],s=null,r=p):s>=1e-8&&(v/=s)),y)i&&i.push(_);else{if(e&&a.unshift(_),s=m,v<1e-8)g=p._segment1;else if(v>1-1e-8)g=p._segment2;else{var x=p.divideAtTime(v,!0);o&&h.push(p,x),g=x._segment1;for(var b=i.length-1;b>=0;b--){var w=i[b];w._time=(w._time-v)/(1-v)}}_._setSegment(g);var S=g._intersection,C=_._intersection;if(S){u(S,C);for(var k=S;k;)u(k._intersection,S),k=k._next}else g._intersection=C}}return n||l(h),a||t}function p(i,r,s,a,o){var h,u,c=s?1:0,l=1^c,f=[i.x,i.y],d=f[c],g=f[l],_=1e-6,v=d-1e-9,m=d+1e-9,y=0,x=0,b=0,w=0,S=!1,C=!1,k=1,P=[];function A(n){var u=n[l+0],f=n[l+6];if(!(g<t(u,f)||g>e(u,f))){var y=n[c+0],x=n[c+2],C=n[c+4],A=n[c+6];if(u!==f){var I=g===u?0:g===f?1:v>e(y,x,C,A)||m<t(y,x,C,A)?1:z.solveCubic(n,l,g,P,0,1)>0?P[0]:1,T=0===I?y:1===I?A:z.getPoint(n,I)[s?"y":"x"],E=u>f?1:-1,O=h[l]>h[l+6]?1:-1,M=h[c+6];return g!==u?(T<v?b+=E:T>m?w+=E:S=!0,T>d-_&&T<d+_&&(k/=2)):(E!==O?y<v?b+=E:y>m&&(w+=E):y!=M&&(M<m&&T>m?(w+=E,S=!0):M>v&&T<v&&(b+=E,S=!0)),k=0),h=n,!o&&T>v&&T<m&&0===z.getTangent(n,I)[s?"x":"y"]&&p(i,r,!s,a,!0)}(y<m&&A>v||A<m&&y>v)&&(S=!0)}}function I(n){var i=n[l+0],r=n[l+2],a=n[l+4],o=n[l+6];if(g<=e(i,r,a,o)&&g>=t(i,r,a,o))for(var h,u=n[c+0],f=n[c+2],d=n[c+4],p=n[c+6],_=v>e(u,f,d,p)||m<t(u,f,d,p)?[n]:z.getMonoCurves(n,s),y=0,x=_.length;y<x;y++)if(h=A(_[y]))return h}for(var T=0,E=r.length;T<E;T++){var O,M=r[T],L=M._path,N=M.getValues();if(!(T&&r[T-1]._path===L||(h=null,L._closed||(u=z.getValues(L.getLastCurve().getSegment2(),M.getSegment1(),null,!a))[l]!==u[l+6]&&(h=u),h))){h=N;for(var B=L.getLastCurve();B&&B!==M;){var j=B.getValues();if(j[l]!==j[l+6]){h=j;break}B=B.getPrevious()}}if(O=I(N))return O;if(T+1===E||r[T+1]._path!==L){if(u&&(O=I(u)))return O;!S||b||w||(b=w=L.isClockwise(a)^s?1:-1),y+=b,x+=w,b=w=0,S&&(C=!0,S=!1),u=null}}return y=n(y),x=n(x),{winding:e(y,x),windingL:y,windingR:x,quality:k,onPath:C}}function _(t,e,i,r,s){var a=[],o=t,h=0;do{var u=(y=t.getCurve()).getLength();a.push({segment:t,curve:y,length:u}),h+=u,t=t.getNext()}while(t&&!t._intersection&&t!==o);for(var c=[.5,.25,.75],l={winding:0,quality:-1},f=0;f<c.length&&l.quality<.5;f++){u=h*c[f];for(var d=0,_=a.length;d<_;d++){var v=a[d],m=v.length;if(u<=m){var y,x=(y=v.curve)._path,b=x._parent,w=b instanceof D?b:x,S=g.clamp(y.getTimeAt(u),1e-8,1-1e-8),C=y.getPointAtTime(S),k=n(y.getTangentAtTime(S).y)<Math.SQRT1_2,P=null;if(s.subtract&&i){var A=w===e?i._getWinding(C,k,!0):e._getWinding(C,k,!0);if(w===e&&A.winding||w===i&&!A.winding){if(A.quality<1)continue;P={winding:0,quality:1}}}(P=P||p(C,r,k,!0)).quality>l.quality&&(l=P);break}u-=m}}for(d=a.length-1;d>=0;d--)a[d].segment._winding=l}function v(t,e){var n,i=[];function r(t){var n;return!(!t||t._visited||e&&(!e[(n=t._winding||{}).winding]||e.unite&&2===n.winding&&n.windingL&&n.windingR))}function s(t){if(t)for(var e=0,i=n.length;e<i;e++)if(t===n[e])return!0;return!1}function a(t){for(var e=t._segments,n=0,i=e.length;n<i;n++)e[n]._visited=!0}function o(t,e){var i=t._intersection,a=i,o=[];function h(i,a){for(;i&&i!==a;){var h=i._segment,u=h&&h._path;if(u){var c=h.getNext()||u.getFirstSegment(),l=c._intersection;h!==t&&(s(h)||s(c)||c&&r(h)&&(r(c)||l&&r(l._segment)))&&o.push(h),e&&n.push(h)}i=i._next}}if(e&&(n=[t]),i){for(h(i);i&&i._prev;)i=i._prev;h(i,a)}return o}t.sort((function(t,e){var n=t._intersection,i=e._intersection,r=!(!n||!n._overlap),s=!(!i||!i._overlap),a=t._path,o=e._path;return r^s?r?1:-1:!n^!i?n?1:-1:a!==o?a._id-o._id:t._index-e._index}));for(var h=0,u=t.length;h<u;h++){var c,l,f,d=t[h],p=r(d),g=null,_=!1,v=!0,m=[];if(p&&d._path._overlapsOnly){var y=d._path,x=d._intersection._segment._path;y.compare(x)&&(y.getArea()&&i.push(y.clone(!1)),a(y),a(x),p=!1)}for(;p;){var b=!g,w=o(d,b),S=w.shift(),C=!(_=!b&&(s(d)||s(S)))&&S;if(b&&(g=new R(P.NO_INSERT),c=null),_){(d.isFirst()||d.isLast())&&(v=d._path._closed),d._visited=!0;break}if(C&&c&&(m.push(c),c=null),c||(C&&w.push(d),c={start:g._segments.length,crossings:w,visited:l=[],handleIn:f}),C&&(d=S),!r(d)){g.removeSegments(c.start);for(var k=0,A=l.length;k<A;k++)l[k]._visited=!1;l.length=0;do{(d=c&&c.crossings.shift())&&d._path||(d=null,(c=m.pop())&&(l=c.visited,f=c.handleIn))}while(c&&!r(d));if(!d)break}var I=d.getNext();g.add(new N(d._point,f,I&&d._handleOut)),d._visited=!0,l.push(d),d=I||d._path.getFirstSegment(),f=I&&I._handleIn}_&&(v&&(g.getFirstSegment().setHandleIn(f),g.setClosed(v)),0!==g.getArea()&&i.push(g))}return i}return{_getWinding:function(t,e,n){return p(t,this.getCurves(),e,n)},unite:function(t,e){return a(this,t,"unite",e)},intersect:function(t,e){return a(this,t,"intersect",e)},subtract:function(t,e){return a(this,t,"subtract",e)},exclude:function(t,e){return a(this,t,"exclude",e)},divide:function(t,e){return e&&(0==e.trace||e.stroke)?h(this,t,"divide"):s([this.subtract(t,e),this.intersect(t,e)],!0,this,t,e)},resolveCrossings:function(){var t=this._children,e=t||[this];function n(t,e){var n=t&&t._intersection;return n&&n._overlap&&n._path===e}var i=!1,r=!1,s=this.getIntersections(null,(function(t){return t.hasOverlap()&&(i=!0)||t.isCrossing()&&(r=!0)})),a=i&&r&&[];if(s=j.expand(s),i)for(var o=d(s,(function(t){return t.hasOverlap()}),a),h=o.length-1;h>=0;h--){var u=o[h],f=u._path,p=u._segment,g=p.getPrevious(),_=p.getNext();n(g,f)&&n(_,f)&&(p.remove(),g._handleOut._set(0,0),_._handleIn._set(0,0),g===p||g.getCurve().hasLength()||(_._handleIn.set(g._handleIn),g.remove()))}r&&(d(s,i&&function(t){var e=t.getCurve(),n=t.getSegment(),i=t._intersection,r=i._curve,s=i._segment;if(e&&r&&e._path&&r._path)return!0;n&&(n._intersection=null),s&&(s._intersection=null)},a),a&&l(a),e=v(c.each(e,(function(t){c.push(this,t._segments)}),[])));var m,y=e.length;return y>1&&t?(e!==t&&this.setChildren(e),m=this):1!==y||t||(e[0]!==this&&this.setSegments(e[0].removeSegments()),m=this),m||((m=new D(P.NO_INSERT)).addChildren(e),(m=m.reduce()).copyAttributes(this),this.replaceWith(m)),m},reorient:function(t,e){var n=this._children;return n&&n.length?this.setChildren(f(this.removeChildren(),(function(e){return!!(t?e:1&e)}),e)):e!==o&&this.setClockwise(e),this},getInteriorPoint:function(){var n=this.getBounds().getCenter(!0);if(!this.contains(n)){for(var i=this.getCurves(),r=n.y,s=[],a=[],o=0,h=i.length;o<h;o++){var u=i[o].getValues(),c=u[1],l=u[3],f=u[5],d=u[7];if(r>=t(c,l,f,d)&&r<=e(c,l,f,d))for(var p=z.getMonoCurves(u),g=0,_=p.length;g<_;g++){var v=p[g],m=v[1],y=v[7];if(m!==y&&(r>=m&&r<=y||r>=y&&r<=m)){var x=r===m?v[0]:r===y?v[6]:1===z.solveCubic(v,1,r,a,0,1)?z.getPoint(v,a[0]).x:(v[0]+v[6])/2;s.push(x)}}}s.length>1&&(s.sort((function(t,e){return t-e})),n.x=(s[0]+s[1])/2)}return n}}});var F=c.extend({_class:"PathFlattener",initialize:function(t,e,n,i,r){var s,a=[],o=[],h=0,u=1/(n||32),c=t._segments,l=c[0];function f(t,n){var s=z.getValues(t,n,r);a.push(s),function t(n,r,s,a){if(!(a-s>u)||i&&z.isStraight(n)||z.isFlatEnough(n,e||.25)){var c=n[6]-n[0],l=n[7]-n[1],f=Math.sqrt(c*c+l*l);f>0&&(h+=f,o.push({offset:h,curve:n,index:r,time:a}))}else{var d=z.subdivide(n,.5),p=(s+a)/2;t(d[0],r,s,p),t(d[1],r,p,a)}}(s,t._index,0,1)}for(var d=1,p=c.length;d<p;d++)f(l,s=c[d]),l=s;t._closed&&f(s||l,c[0]),this.curves=a,this.parts=o,this.length=h,this.index=0},_get:function(t){for(var e,n=this.parts,i=n.length,r=this.index;e=r,r&&!(n[--r].offset<t););for(;e<i;e++){var s=n[e];if(s.offset>=t){this.index=e;var a=n[e-1],o=a&&a.index===s.index?a.time:0,h=a?a.offset:0;return{index:s.index,time:o+(s.time-o)*(t-h)/(s.offset-h)}}}return{index:n[i-1].index,time:1}},drawPart:function(t,e,n){for(var i=this._get(e),r=this._get(n),s=i.index,a=r.index;s<=a;s++){var o=z.getPart(this.curves[s],s===i.index?i.time:0,s===r.index?r.time:1);s===i.index&&t.moveTo(o[0],o[1]),t.bezierCurveTo.apply(t,o.slice(2))}}},c.each(z._evaluateMethods,(function(t){this[t+"At"]=function(e){var n=this._get(e);return z[t](this.curves[n.index],n.time)}}),{})),q=c.extend({initialize:function(t){for(var e,n=this.points=[],i=t._segments,r=t._closed,s=0,a=i.length;s<a;s++){var o=i[s].point;e&&e.equals(o)||n.push(e=o.clone())}r&&(n.unshift(n[n.length-1]),n.push(n[1])),this.closed=r},fit:function(t){var e=this.points,n=e.length,i=null;return n>0&&(i=[new N(e[0])],n>1&&(this.fitCubic(i,t,0,n-1,e[1].subtract(e[0]),e[n-2].subtract(e[n-1])),this.closed&&(i.shift(),i.pop()))),i},fitCubic:function(t,e,n,i,r,s){var a=this.points;if(i-n!=1){for(var o,h=this.chordLengthParameterize(n,i),u=Math.max(e,e*e),c=!0,l=0;l<=4;l++){var f=this.generateBezier(n,i,h,r,s),d=this.findMaxError(n,i,f,h);if(d.error<e&&c)return void this.addCurve(t,f);if(o=d.index,d.error>=u)break;c=this.reparameterize(n,i,h,f),u=d.error}var p=a[o-1].subtract(a[o+1]);this.fitCubic(t,e,n,o,r,p),this.fitCubic(t,e,o,i,p.negate(),s)}else{var g=a[n],_=a[i],v=g.getDistance(_)/3;this.addCurve(t,[g,g.add(r.normalize(v)),_.add(s.normalize(v)),_])}},addCurve:function(t,e){t[t.length-1].setHandleOut(e[1].subtract(e[0])),t.push(new N(e[3],e[2].subtract(e[3])))},generateBezier:function(t,e,n,i,r){for(var s=Math.abs,a=this.points,o=a[t],h=a[e],u=[[0,0],[0,0]],c=[0,0],l=0,f=e-t+1;l<f;l++){var d=n[l],p=1-d,g=3*d*p,_=p*p*p,v=g*p,m=g*d,y=d*d*d,x=i.normalize(v),b=r.normalize(m),w=a[t+l].subtract(o.multiply(_+v)).subtract(h.multiply(m+y));u[0][0]+=x.dot(x),u[0][1]+=x.dot(b),u[1][0]=u[0][1],u[1][1]+=b.dot(b),c[0]+=x.dot(w),c[1]+=b.dot(w)}var S,C,k=u[0][0]*u[1][1]-u[1][0]*u[0][1];if(s(k)>1e-12){var P=u[0][0]*c[1]-u[1][0]*c[0];S=(c[0]*u[1][1]-c[1]*u[0][1])/k,C=P/k}else{var A=u[0][0]+u[0][1],I=u[1][0]+u[1][1];S=C=s(A)>1e-12?c[0]/A:s(I)>1e-12?c[1]/I:0}var T,E,O=h.getDistance(o),M=1e-12*O;if(S<M||C<M)S=C=O/3;else{var L=h.subtract(o);T=i.normalize(S),E=r.normalize(C),T.dot(L)-E.dot(L)>O*O&&(S=C=O/3,T=E=null)}return[o,o.add(T||i.normalize(S)),h.add(E||r.normalize(C)),h]},reparameterize:function(t,e,n,i){for(var r=t;r<=e;r++)n[r-t]=this.findRoot(i,this.points[r],n[r-t]);r=1;for(var s=n.length;r<s;r++)if(n[r]<=n[r-1])return!1;return!0},findRoot:function(t,e,n){for(var i=[],r=[],s=0;s<=2;s++)i[s]=t[s+1].subtract(t[s]).multiply(3);for(s=0;s<=1;s++)r[s]=i[s+1].subtract(i[s]).multiply(2);var a=this.evaluate(3,t,n),o=this.evaluate(2,i,n),h=this.evaluate(1,r,n),u=a.subtract(e),c=o.dot(o)+u.dot(h);return g.isZero(c)?n:n-u.dot(o)/c},evaluate:function(t,e,n){for(var i=e.slice(),r=1;r<=t;r++)for(var s=0;s<=t-r;s++)i[s]=i[s].multiply(1-n).add(i[s+1].multiply(n));return i[0]},chordLengthParameterize:function(t,e){for(var n=[0],i=t+1;i<=e;i++)n[i-t]=n[i-t-1]+this.points[i].getDistance(this.points[i-1]);i=1;for(var r=e-t;i<=r;i++)n[i]/=n[r];return n},findMaxError:function(t,e,n,i){for(var r=Math.floor((e-t+1)/2),s=0,a=t+1;a<e;a++){var o=this.evaluate(3,n,i[a-t]).subtract(this.points[a]),h=o.x*o.x+o.y*o.y;h>=s&&(s=h,r=a)}return{error:s,index:r}}}),U=P.extend({_class:"TextItem",_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsOptions:{stroke:!1,handle:!1},initialize:function(t){this._content="",this._lines=[];var e=t&&c.isPlainObject(t)&&t.x===o&&t.y===o;this._initialize(e&&t,!e&&v.read(arguments))},_equals:function(t){return this._content===t._content},copyContent:function(t){this.setContent(t._content)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(521)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),H=U.extend({_class:"PointText",initialize:function(){U.apply(this,arguments)},getPoint:function(){var t=this._matrix.getTranslation();return new m(t.x,t.y,this,"setPoint")},setPoint:function(){var t=v.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t,e,n){if(this._content){this._setStyles(t,e,n);var i=this._lines,r=this._style,s=r.hasFill(),a=r.hasStroke(),o=r.getLeading(),h=t.shadowColor;t.font=r.getFontStyle(),t.textAlign=r.getJustification();for(var u=0,c=i.length;u<c;u++){t.shadowColor=h;var l=i[u];s&&(t.fillText(l,0,0),t.shadowColor="rgba(0,0,0,0)"),a&&t.strokeText(l,0,0),t.translate(0,o)}}},_getBounds:function(t,e){var n=this._style,i=this._lines,r=i.length,s=n.getJustification(),a=n.getLeading(),o=this.getView().getTextWidth(n.getFontStyle(),i),h=0;"left"!==s&&(h-=o/("center"===s?2:1));var u=new b(h,r?-.75*a:0,o,r*a);return t?t._transformBounds(u,u):u}}),G=c.extend(new function(){var t,e={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},n={},i={transparent:[0,0,0,0]};function r(e){var n,r=e.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i)||e.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i),s="rgb";if(r){var a=r[4]?4:3;n=new Array(a);for(var o=0;o<a;o++){var u=r[o+1];n[o]=parseInt(1==u.length?u+u:u,16)/255}}else if(r=e.match(/^(rgb|hsl)a?\((.*)\)$/)){s=r[1],n=r[2].trim().split(/[,\s]+/g);for(var c="hsl"===s,l=(o=0,Math.min(n.length,4));o<l;o++){var f=n[o];u=parseFloat(f);if(c)if(0===o){var d=f.match(/([a-z]*)$/)[1];u*={turn:360,rad:180/Math.PI,grad:.9}[d]||1}else o<3&&(u/=100);else o<3&&(u/=255);n[o]=u}}else{var p=i[e];if(!p)if(h){t||((t=ot.getContext(1,1)).globalCompositeOperation="copy"),t.fillStyle="rgba(0,0,0,0)",t.fillStyle=e,t.fillRect(0,0,1,1);var g=t.getImageData(0,0,1,1).data;p=i[e]=[g[0]/255,g[1]/255,g[2]/255]}else p=[0,0,0];n=p.slice()}return[s,n]}var s=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],a={"rgb-hsb":function(t,e,n){var i=Math.max(t,e,n),r=i-Math.min(t,e,n);return[0===r?0:60*(i==t?(e-n)/r+(e<n?6:0):i==e?(n-t)/r+2:(t-e)/r+4),0===i?0:r/i,i]},"hsb-rgb":function(t,e,n){var i,r=(t=(t/60%6+6)%6)-(i=Math.floor(t)),a=[n,n*(1-e),n*(1-e*r),n*(1-e*(1-r))];return[a[(i=s[i])[0]],a[i[1]],a[i[2]]]},"rgb-hsl":function(t,e,n){var i=Math.max(t,e,n),r=Math.min(t,e,n),s=i-r,a=0===s,o=(i+r)/2;return[a?0:60*(i==t?(e-n)/s+(e<n?6:0):i==e?(n-t)/s+2:(t-e)/s+4),a?0:o<.5?s/(i+r):s/(2-i-r),o]},"hsl-rgb":function(t,e,n){if(0===e)return[n,n,n];for(var i=[(t=(t/360%1+1)%1)+1/3,t,t-1/3],r=n<.5?n*(1+e):n+e-n*e,s=2*n-r,a=[],o=0;o<3;o++){var h=i[o];h<0&&(h+=1),h>1&&(h-=1),a[o]=6*h<1?s+6*(r-s)*h:2*h<1?r:3*h<2?s+(r-s)*(2/3-h)*6:s}return a},"rgb-gray":function(t,e,n){return[.2989*t+.587*e+.114*n]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return c.each(e,(function(t,i){n[i]=[],c.each(t,(function(t,r){var s=c.capitalize(t),a=/^(hue|saturation)$/.test(t),o=n[i][r]="gradient"===i?"gradient"===t?function(t){var e=this._components[0];return e!==(t=W.read(Array.isArray(t)?t:arguments,0,{readNull:!0}))&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:function(){return v.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:+t};this["get"+s]=function(){return this._type===i||a&&/^hs[bl]$/.test(this._type)?this._components[r]:this._convert(i)[r]},this["set"+s]=function(t){this._type===i||a&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(i),this._properties=e[i],this._type=i),this._components[r]=o.call(this,t),this._changed()}}),this)}),{_class:"Color",_readIndex:!0,initialize:function t(i){var s,a,o,h,u=arguments,l=this.__read,f=0;Array.isArray(i)&&(i=(u=i)[0]);var d=null!=i&&typeof i;if("string"===d&&i in e&&(s=i,i=u[1],Array.isArray(i)?(a=i,o=u[2]):(l&&(f=1),u=c.slice(u,1),d=typeof i)),!a){if(h="number"===d?u:"object"===d&&null!=i.length?i:null){s||(s=h.length>=3?"rgb":"gray");var p=e[s].length;o=h[p],l&&(f+=h===arguments?p+(null!=o?1:0):1),h.length>p&&(h=c.slice(h,0,p))}else if("string"===d){var g=r(i);s=g[0],4===(a=g[1]).length&&(o=a[3],a.length--)}else if("object"===d)if(i.constructor===t){if(s=i._type,a=i._components.slice(),o=i._alpha,"gradient"===s)for(var _=1,v=a.length;_<v;_++){var m=a[_];m&&(a[_]=m.clone())}}else if(i.constructor===W)s="gradient",h=u;else{var y=e[s="hue"in i?"lightness"in i?"hsl":"hsb":"gradient"in i||"stops"in i||"radial"in i?"gradient":"gray"in i?"gray":"rgb"],x=n[s];this._components=a=[];for(_=0,v=y.length;_<v;_++){null==(b=i[y[_]])&&!_&&"gradient"===s&&"stops"in i&&(b={stops:i.stops,radial:i.radial}),null!=(b=x[_].call(this,b))&&(a[_]=b)}o=i.alpha}l&&s&&(f=1)}if(this._type=s||"rgb",!a){this._components=a=[];for(_=0,v=(x=n[this._type]).length;_<v;_++){var b;null!=(b=x[_].call(this,h&&h[_]))&&(a[_]=b)}}return this._components=a,this._properties=e[this._type],this._alpha=o,l&&(this.__read=f),this},set:"#initialize",_serialize:function(t,e){var n=this.getComponents();return c.serialize(/^(gray|rgb)$/.test(this._type)?n:[this._type].concat(n),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&(this._setter?this._owner[this._setter](this):this._owner._changed(129))},_convert:function(t){var e;return this._type===t?this._components.slice():(e=a[this._type+"-"+t])?e.apply(this,this._components):a["rgb-"+t].apply(this,a[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new G(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=e[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=c.isPlainValue(t,!0)?G.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this.getAlpha()===e.getAlpha()&&c.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],n="gradient"===this._type,i=p.instance,r=0,s=t.length;r<s;r++){var a=this._components[r];null!=a&&e.push(t[r]+": "+(n?a:i.number(a)))}return null!=this._alpha&&e.push("alpha: "+i.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){var e=this._convert("rgb"),n=t||null==this._alpha?1:this._alpha;function i(t){return Math.round(255*(t<0?0:t>1?1:t))}return e=[i(e[0]),i(e[1]),i(e[2])],n<1&&e.push(n<0?0:n),t?"#"+((1<<24)+(e[0]<<16)+(e[1]<<8)+e[2]).toString(16).slice(1):(4==e.length?"rgba(":"rgb(")+e.join(",")+")"},toCanvasStyle:function(t,e){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var n,i=this._components,r=i[0],s=r._stops,a=i[1],o=i[2],h=i[3],u=e&&e.inverted();if(u&&(a=u._transformPoint(a),o=u._transformPoint(o),h&&(h=u._transformPoint(h))),r._radial){var c=o.getDistance(a);if(h){var l=h.subtract(a);l.getLength()>c&&(h=a.add(l.normalize(c-.1)))}var f=h||a;n=t.createRadialGradient(f.x,f.y,0,a.x,a.y,c)}else n=t.createLinearGradient(a.x,a.y,o.x,o.y);for(var d=0,p=s.length;d<p;d++){var g=s[d],_=g._offset;n.addColorStop(null==_?d/(p-1):_,g._color.toCanvasStyle())}return this._canvasStyle=n},transform:function(t){if("gradient"===this._type){for(var e=this._components,n=1,i=e.length;n<i;n++){var r=e[n];t._transformPoint(r,r,!0)}this._changed()}},statics:{_types:e,random:function(){var t=Math.random;return new G(t(),t(),t())},_setOwner:function(t,e,n){return t&&(t._owner&&e&&t._owner!==e&&(t=t.clone()),!t._owner^!e&&(t._owner=e||null,t._setter=n||null)),t}}})},new function(){return c.each({add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}},(function(t,e){this[e]=function(e){e=G.read(arguments);for(var n=this._type,i=this._components,r=e._convert(n),s=0,a=i.length;s<a;s++)r[s]=t(i[s],r[s]);return new G(n,r,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}}),{})}),W=c.extend({_class:"Gradient",initialize:function(t,e){this._id=_.get(),t&&c.isPlainObject(t)&&(this.set(t),t=e=null),null==this._stops&&this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,(function(){return c.serialize([this._stops,this._radial],t,!0,e)}))},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;t<e;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(t){var e=this._owners?this._owners.indexOf(t):-1;-1!=e&&(this._owners.splice(e,1),this._owners.length||(this._owners=o))},clone:function(){for(var t=[],e=0,n=this._stops.length;e<n;e++)t[e]=this._stops[e].clone();return new W(t,this._radial)},getStops:function(){return this._stops},setStops:function(t){if(t.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");var e=this._stops;if(e)for(var n=0,i=e.length;n<i;n++)e[n]._owner=o;for(n=0,i=(e=this._stops=Z.readList(t,0,{clone:!0})).length;n<i;n++)e[n]._owner=this;this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class){var e=this._stops,n=t._stops,i=e.length;if(i===n.length){for(var r=0;r<i;r++)if(!e[r].equals(n[r]))return!1;return!0}}return!1}}),Z=c.extend({_class:"GradientStop",initialize:function(t,e){var n=t,i=e;"object"==typeof t&&e===o&&(Array.isArray(t)&&"number"!=typeof t[0]?(n=t[0],i=t[1]):("color"in t||"offset"in t||"rampPoint"in t)&&(n=t.color,i=t.offset||t.rampPoint||0)),this.setColor(n),this.setOffset(i)},clone:function(){return new Z(this._color.clone(),this._offset)},_serialize:function(t,e){var n=this._color,i=this._offset;return c.serialize(null==i?[n]:[n,i],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(129)},getOffset:function(){return this._offset},setOffset:function(t){this._offset=t,this._changed()},getRampPoint:"#getOffset",setRampPoint:"#setOffset",getColor:function(){return this._color},setColor:function(){G._setOwner(this._color,null),this._color=G._setOwner(G.read(arguments,0),this,"setColor"),this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._offset==t._offset||!1}}),K=c.extend(new function(){var t={fillColor:null,fillRule:"nonzero",strokeColor:null,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],shadowColor:null,shadowBlur:0,shadowOffset:new v,selectedColor:null},e=c.set({},t,{fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,leading:null,justification:"left"}),n=c.set({},e,{fillColor:new G}),i={strokeWidth:193,strokeCap:193,strokeJoin:193,strokeScaling:201,miterLimit:193,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},r={beans:!0},s={_class:"Style",beans:!0,initialize:function(i,r,s){this._values={},this._owner=r,this._project=r&&r._project||s||lt.project,this._defaults=!r||r instanceof A?e:r instanceof U?n:t,i&&this.set(i)}};return c.each(e,(function(t,e){var n=/Color$/.test(e),a="shadowOffset"===e,h=c.capitalize(e),u=i[e],l="set"+h,f="get"+h;s[l]=function(t){var i=this._owner,r=i&&i._children,s=r&&r.length>0&&!(i instanceof D);if(s)for(var a=0,o=r.length;a<o;a++)r[a]._style[l](t);if(("selectedColor"===e||!s)&&e in this._defaults){var h=this._values[e];h!==t&&(n&&(h&&(G._setOwner(h,null),h._canvasStyle=null),t&&t.constructor===G&&(t=G._setOwner(t,i,s&&l))),this._values[e]=t,i&&i._changed(u||129))}},s[f]=function(t){var i=this._owner,r=i&&i._children,s=r&&r.length>0&&!(i instanceof D);if(s&&!t)for(var h=0,u=r.length;h<u;h++){var d=r[h]._style[f]();if(h){if(!c.equals(p,d))return o}else p=d}else if(e in this._defaults){var p;if((p=this._values[e])===o)(p=this._defaults[e])&&p.clone&&(p=p.clone());else{var g=n?G:a?v:null;!g||p&&p.constructor===g||(this._values[e]=p=g.read([p],0,{readNull:!0,clone:!0}))}}return p&&n&&(p=G._setOwner(p,i,s&&l)),p},r[f]=function(t){return this._style[f](t)},r[l]=function(t){this._style[l](t)}})),c.each({Font:"FontFamily",WindingRule:"FillRule"},(function(t,e){var n="get"+e,i="set"+e;s[n]=r[n]="#get"+t,s[i]=r[i]="#set"+t})),P.inject(r),s},{set:function(t){var e=t instanceof K,n=e?t._values:t;if(n)for(var i in n)if(i in this._defaults){var r=n[i];this[i]=r&&e&&r.clone?r.clone():r}},equals:function(t){function e(t,e,n){var i=t._values,r=e._values,s=e._defaults;for(var a in i){var h=i[a],u=r[a];if(!(n&&a in r||c.equals(h,u===o?s[a]:u)))return!1}return!0}return t===this||t&&this._class===t._class&&e(this,t)&&e(t,this,!0)||!1},_dispose:function(){var t;(t=this.getFillColor())&&(t._canvasStyle=null),(t=this.getStrokeColor())&&(t._canvasStyle=null),(t=this.getShadowColor())&&(t._canvasStyle=null)},hasFill:function(){var t=this.getFillColor();return!!t&&t.alpha>0},hasStroke:function(){var t=this.getStrokeColor();return!!t&&t.alpha>0&&this.getStrokeWidth()>0},hasShadow:function(){var t=this.getShadowColor();return!!t&&t.alpha>0&&(this.getShadowBlur()>0||!this.getShadowOffset().isZero())},getView:function(){return this._project._view},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function t(){var e=t.base.call(this),n=this.getFontSize();return/pt|em|%|px/.test(n)&&(n=this.getView().getPixelSize(n)),null!=e?e:1.2*n}}),Q=new function(){function t(t,e,n,i){for(var r=["","webkit","moz","Moz","ms","o"],s=e[0].toUpperCase()+e.substring(1),a=0;a<6;a++){var o=r[a],h=o?o+s:e;if(h in t){if(!n)return t[h];t[h]=i;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,n=e&&e.defaultView;return n&&n.getComputedStyle(t,"")},getBounds:function(t,e){var n,i=t.ownerDocument,r=i.body,s=i.documentElement;try{n=t.getBoundingClientRect()}catch(t){n={left:0,top:0,width:0,height:0}}var a=n.left-(s.clientLeft||r.clientLeft||0),o=n.top-(s.clientTop||r.clientTop||0);if(!e){var h=i.defaultView;a+=h.pageXOffset||s.scrollLeft||r.scrollLeft,o+=h.pageYOffset||s.scrollTop||r.scrollTop}return new b(a,o,n.width,n.height)},getViewportBounds:function(t){var e=t.ownerDocument,n=e.defaultView,i=e.documentElement;return new b(0,0,n.innerWidth||i.clientWidth,n.innerHeight||i.clientHeight)},getOffset:function(t,e){return Q.getBounds(t,e).getPoint()},getSize:function(t){return Q.getBounds(t,!0).getSize()},isInvisible:function(t){return Q.getSize(t).equals(new y(0,0))},isInView:function(t){return!Q.isInvisible(t)&&Q.getViewportBounds(t).intersects(Q.getBounds(t,!0))},isInserted:function(t){return u.body.contains(t)},getPrefixed:function(e,n){return e&&t(e,n)},setPrefixed:function(e,n,i){if("object"==typeof n)for(var r in n)t(e,r,!0,n[r]);else t(e,n,!0,i)}}},$={add:function(t,e){if(t)for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;s<a;s++){var o=r[s],h=t===u&&("touchstart"===o||"touchmove"===o)&&{passive:!1};t.addEventListener(o,i,h)}},remove:function(t,e){if(t)for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;s<a;s++)t.removeEventListener(r[s],i,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new v(e.pageX||e.clientX+u.documentElement.scrollLeft,e.pageY||e.clientY+u.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return $.getPoint(t).subtract(Q.getOffset(e||$.getTarget(t)))}};$.requestAnimationFrame=new function(){var t,e=Q.getPrefixed(h,"requestAnimationFrame"),n=!1,i=[];function r(){var t=i;i=[];for(var s=0,a=t.length;s<a;s++)t[s]();(n=e&&i.length)&&e(r)}return function(s){i.push(s),e?n||(e(r),n=!0):t||(t=setInterval(r,1e3/60))}};var J=c.extend(l,{_class:"View",initialize:function t(e,n){function i(t){return n[t]||parseInt(n.getAttribute(t),10)}function r(){var t=Q.getSize(n);return t.isNaN()||t.isZero()?new y(i("width"),i("height")):t}var s;if(h&&n){this._id=n.getAttribute("id"),null==this._id&&n.setAttribute("id",this._id="view-"+t._id++),$.add(n,this._viewEvents);if(Q.setPrefixed(n.style,{userDrag:"none",userSelect:"none",touchCallout:"none",contentZooming:"none",tapHighlightColor:"rgba(0,0,0,0)"}),f.hasAttribute(n,"resize")){var a=this;$.add(h,this._windowEvents={resize:function(){a.setViewSize(r())}})}if(s=r(),f.hasAttribute(n,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var o=this._stats.domElement,c=o.style,l=Q.getOffset(n);c.position="absolute",c.left=l.x+"px",c.top=l.y+"px",u.body.appendChild(o)}}else s=new y(n),n=null;this._project=e,this._scope=e._scope,this._element=n,this._pixelRatio||(this._pixelRatio=h&&h.devicePixelRatio||1),this._setElementSize(s.width,s.height),this._viewSize=s,t._views.push(this),t._viewsById[this._id]=this,(this._matrix=new S)._owner=this,t._focused||(t._focused=this),this._frameItems={},this._frameItemCount=0,this._itemEvents={native:{},virtual:{}},this._autoUpdate=!lt.agent.node,this._needsUpdate=!1},remove:function(){if(!this._project)return!1;J._focused===this&&(J._focused=null),J._views.splice(J._views.indexOf(this),1),delete J._viewsById[this._id];var t=this._project;return t._view===this&&(t._view=null),$.remove(this._element,this._viewEvents),$.remove(h,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0},_events:c.each(P._itemHandlers.concat(["onResize","onKeyDown","onKeyUp"]),(function(t){this[t]={}}),{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,getAutoUpdate:function(){return this._autoUpdate},setAutoUpdate:function(t){this._autoUpdate=t,t&&this.requestUpdate()},update:function(){},draw:function(){this.update()},requestUpdate:function(){if(!this._requested){var t=this;$.requestAnimationFrame((function(){if(t._requested=!1,t._animate){t.requestUpdate();var e=t._element;Q.getPrefixed(u,"hidden")&&"true"!==f.getAttribute(e,"keepalive")||!Q.isInView(e)||t._handleFrame()}t._autoUpdate&&t.update()})),this._requested=!0}},play:function(){this._animate=!0,this.requestUpdate()},pause:function(){this._animate=!1},_handleFrame:function(){lt=this._scope;var t=Date.now()/1e3,e=this._last?t-this._last:0;this._last=t,this.emit("frame",new c({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update()},_animateItem:function(t,e){var n=this._frameItems;e?(n[t._id]={item:t,time:0,count:0},1==++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete n[t._id],0==--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var n=this._frameItems[e];n.item.emit("frame",new c(t,{time:n.time+=t.delta,count:n.count++}))}},_changed:function(){this._project._changed(4097),this._bounds=this._decomposed=o},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new x(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=y.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._setElementSize(t.width,t.height),this._viewSize.set(t),this._changed(),this.emit("resize",{size:t,delta:e}),this._autoUpdate&&this.update())},_setElementSize:function(t,e){var n=this._element;n&&(n.width!==t&&(n.width=t),n.height!==e&&(n.height=e))},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new b(new v,this._viewSize))),this._bounds},getSize:function(){return this.getBounds().getSize()},isVisible:function(){return Q.isInView(this._element)},isInserted:function(){return Q.isInserted(this._element)},getPixelSize:function(t){var e,n=this._element;if(n){var i=n.parentNode,r=u.createElement("div");r.style.fontSize=t,i.appendChild(r),e=parseFloat(Q.getStyles(r).fontSize),i.removeChild(r)}else e=parseFloat(e);return e},getTextWidth:function(t,e){return 0}},c.each(["rotate","scale","shear","skew"],(function(t){var e="rotate"===t;this[t]=function(){var n=(e?c:v).read(arguments),i=v.read(arguments,0,{readNull:!0});return this.transform((new S)[t](n,i||this.getCenter(!0)))}}),{_decompose:function(){return this._decomposed||(this._decomposed=this._matrix.decompose())},translate:function(){var t=new S;return this.transform(t.translate.apply(t,arguments))},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=v.read(arguments);this.translate(this.getCenter().subtract(t))},getZoom:function(){var t=this._decompose().scaling;return(t.x+t.y)/2},setZoom:function(t){this.transform((new S).scale(t/this.getZoom(),this.getCenter()))},getRotation:function(){return this._decompose().rotation},setRotation:function(t){var e=this.getRotation();null!=e&&null!=t&&this.rotate(t-e)},getScaling:function(){var t=this._decompose().scaling;return new m(t.x,t.y,this,"setScaling")},setScaling:function(){var t=this.getScaling(),e=v.read(arguments,0,{clone:!0,readNull:!0});t&&e&&this.scale(e.x/t.x,e.y/t.y)},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments)},transform:function(t){this._matrix.append(t)},scrollBy:function(){this.translate(v.read(arguments).negate())}}),{projectToView:function(){return this._matrix._transformPoint(v.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(v.read(arguments))},getEventPoint:function(t){return this.viewToProject($.getOffset(t,this._element))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return u&&"string"==typeof e&&(e=u.getElementById(e)),new(h?X:J)(t,e)}}},new function(){if(h){var t,e,n,i,r,s=!1,a=!1,o=h.navigator;o.pointerEnabled||o.msPointerEnabled?(n="pointerdown MSPointerDown",i="pointermove MSPointerMove",r="pointerup pointercancel MSPointerUp MSPointerCancel"):(n="touchstart",i="touchmove",r="touchend touchcancel","ontouchstart"in h&&o.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(n+=" mousedown",i+=" mousemove",r+=" mouseup"));var c={},l={mouseout:function(t){var e=J._focused,n=$.getRelatedTarget(t);if(e&&(!n||"HTML"===n.nodeName)){var i=$.getOffset(t,e._element),r=i.x,s=Math.abs,a=s(r),o=a-(1<<25);i.x=s(o)<a?o*(r<0?-1:1):r,A(e,t,e.viewToProject(i))}},scroll:P};c[n]=function(t){var e=J._focused=k(t);s||(s=!0,e._handleMouseEvent("mousedown",t))},l[i]=function(n){var i=J._focused;if(!a){var r=k(n);r?i!==r&&(i&&A(i,n),t||(t=i),i=J._focused=e=r):e&&e===i&&(t&&!t.isInserted()&&(t=null),i=J._focused=t,t=null,P())}i&&A(i,n)},l[n]=function(){a=!0},l[r]=function(t){var e=J._focused;e&&s&&e._handleMouseEvent("mouseup",t),a=s=!1},$.add(u,l),$.add(h,{load:P});var f,d,p,g,_,v,m,y,x=!1,b=!1,w={doubleclick:"click",mousedrag:"mousemove"},S=!1,C={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:c,_handleMouseEvent:function(t,e,n){var i=this._itemEvents,r=i.native[t],a="mousemove"===t,o=this._scope.tool,h=this;function u(t){return i.virtual[t]||h.responds(t)||o&&o.responds(t)}a&&s&&u("mousedrag")&&(t="mousedrag"),n||(n=this.getEventPoint(e));var c=this.getBounds().contains(n),l=r&&c&&h._project.hitTest(n,{tolerance:0,fill:!0,stroke:!0}),w=l&&l.item||null,C=!1,k={};if(k[t.substr(5)]=!0,r&&w!==g&&(g&&I(g,null,"mouseleave",e,n),w&&I(w,null,"mouseenter",e,n),g=w),S^c&&(I(this,null,c?"mouseenter":"mouseleave",e,n),c?this:null,C=!0),!c&&!k.drag||n.equals(d)||(T(this,w,a?t:"mousemove",e,n,d),C=!0),S=c,k.down&&c||k.up&&f){if(T(this,w,t,e,n,f),k.down){if(y=w===v&&Date.now()-m<300,p=v=w,!b&&w){for(var P=w;P&&!P.responds("mousedrag");)P=P._parent;P&&(_=w)}f=n}else k.up&&(b||w!==p||(m=Date.now(),T(this,w,y?"doubleclick":"click",e,n,f),y=!1),p=_=null);S=!1,C=!0}d=n,C&&o&&(x=o._handleMouseEvent(t,e,n,k)||x),!1!==e.cancelable&&(x&&!k.move||k.down&&u("mouseup"))&&e.preventDefault()},_handleKeyEvent:function(t,e,n,i){var r,s=this._scope,a=s.tool;function o(a){a.responds(t)&&(lt=s,a.emit(t,r=r||new tt(t,e,n,i)))}this.isVisible()&&(o(this),a&&a.responds(t)&&o(a))},_countItemEvent:function(t,e){var n=this._itemEvents,i=n.native,r=n.virtual;for(var s in C)i[s]=(i[s]||0)+(C[s][t]||0)*e;r[t]=(r[t]||0)+e},statics:{updateFocus:P,_resetState:function(){s=a=x=S=!1,t=e=f=d=p=g=_=v=m=y=null}}}}function k(t){var e=$.getTarget(t);return e.getAttribute&&J._viewsById[e.getAttribute("id")]}function P(){var t=J._focused;if(!t||!t.isVisible())for(var n=0,i=J._views.length;n<i;n++)if((t=J._views[n]).isVisible()){J._focused=e=t;break}}function A(t,e,n){t._handleMouseEvent("mousemove",e,n)}function I(t,e,n,i,r,s,a){var o,h=!1;function u(t,n){if(t.responds(n)){if(o||(o=new nt(n,i,r,e||t,s?r.subtract(s):null)),t.emit(n,o)&&(x=!0,o.prevented&&(b=!0),o.stopped))return h=!0}else{var a=w[n];if(a)return u(t,a)}}for(;t&&t!==a&&!u(t,n);)t=t._parent;return h}function T(t,e,n,i,r,s){return t._project.removeOn(n),b=x=!1,_&&I(_,null,n,i,r,s)||e&&e!==_&&!e.isDescendant(_)&&I(e,null,"mousedrag"===n?"mousemove":n,i,r,s,_)||I(t,_||e||t,n,i,r,s)}}),X=J.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof h.HTMLCanvasElement)){var n=y.read(arguments,1);if(n.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+c.slice(arguments,1));e=ot.getCanvas(n)}var i=this._context=e.getContext("2d");if(i.save(),this._pixelRatio=1,!/^off|false$/.test(f.getAttribute(e,"hidpi"))){var r=h.devicePixelRatio||1,s=Q.getPrefixed(i,"backingStorePixelRatio")||1;this._pixelRatio=r/s}J.call(this,t,e),this._needsUpdate=!0},remove:function t(){return this._context.restore(),t.base.call(this)},_setElementSize:function t(e,n){var i=this._pixelRatio;if(t.base.call(this,e*i,n*i),1!==i){var r=this._element,s=this._context;if(!f.hasAttribute(r,"resize")){var a=r.style;a.width=e+"px",a.height=n+"px"}s.restore(),s.save(),s.scale(i,i)}},getContext:function(){return this._context},getPixelSize:function t(e){var n,i=lt.agent;if(i&&i.firefox)n=t.base.call(this,e);else{var r=this._context,s=r.font;r.font=e+" serif",n=parseFloat(r.font),r.font=s}return n},getTextWidth:function(t,e){var n=this._context,i=n.font,r=0;n.font=t;for(var s=0,a=e.length;s<a;s++)r=Math.max(r,n.measureText(e[s]).width);return n.font=i,r},update:function(){if(!this._needsUpdate)return!1;var t=this._project,e=this._context,n=this._viewSize;return e.clearRect(0,0,n.width+1,n.height+1),t&&t.draw(e,this._matrix,this._pixelRatio),this._needsUpdate=!1,!0}}),Y=c.extend({_class:"Event",initialize:function(t){this.event=t,this.type=t&&t.type},prevented:!1,stopped:!1,preventDefault:function(){this.prevented=!0,this.event.preventDefault()},stopPropagation:function(){this.stopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getTimeStamp:function(){return this.event.timeStamp},getModifiers:function(){return et.modifiers}}),tt=Y.extend({_class:"KeyEvent",initialize:function(t,e,n,i){this.type=t,this.event=e,this.key=n,this.character=i},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),et=new function(){var t,e,n={"\t":"tab"," ":"space","\b":"backspace","":"delete",Spacebar:"space",Del:"delete",Win:"meta",Esc:"escape"},i={tab:"\t",space:" ",enter:"\r"},r={},s={},a=new c({shift:!1,control:!1,alt:!1,meta:!1,capsLock:!1,space:!1}).inject({option:{get:function(){return this.alt}},command:{get:function(){var t=lt&&lt.agent;return t&&t.mac?this.meta:this.control}}});function l(t){var e=t.key||t.keyIdentifier;return e=/^U\+/.test(e)?String.fromCharCode(parseInt(e.substr(2),16)):/^Arrow[A-Z]/.test(e)?e.substr(5):"Unidentified"===e||e===o?String.fromCharCode(t.keyCode):e,n[e]||(e.length>1?c.hyphenate(e):e.toLowerCase())}function f(e,n,i,o){var h,u=J._focused;if(r[n]=e,e?s[n]=i:delete s[n],n.length>1&&(h=c.camelize(n))in a){a[h]=e;var l=lt&&lt.agent;if("meta"===h&&l&&l.mac)if(e)t={};else{for(var d in t)d in s&&f(!1,d,t[d],o);t=null}}else e&&t&&(t[n]=i);u&&u._handleKeyEvent(e?"keydown":"keyup",o,n,i)}return $.add(u,{keydown:function(t){var n=l(t),r=lt&&lt.agent;n.length>1||r&&r.chrome&&(t.altKey||r.mac&&t.metaKey||!r.mac&&t.ctrlKey)?f(!0,n,i[n]||(n.length>1?"":n),t):e=n},keypress:function(t){if(e){var n=l(t),i=t.charCode,r=i>=32?String.fromCharCode(i):n.length>1?"":n;n!==e&&(n=r.toLowerCase()),f(!0,n,r,t),e=null}},keyup:function(t){var e=l(t);e in s&&f(!1,e,s[e],t)}}),$.add(h,{blur:function(t){for(var e in s)f(!1,e,s[e],t)}}),{modifiers:a,isDown:function(t){return!!r[t]}}},nt=Y.extend({_class:"MouseEvent",initialize:function(t,e,n,i,r){this.type=t,this.event=e,this.point=n,this.target=i,this.delta=r},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),it=Y.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,n){this.tool=t,this.type=e,this.event=n},_choosePoint:function(t,e){return t||(e?e.clone():null)},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return this.tool[/^mouse(down|up)$/.test(this.type)?"_downCount":"_moveCount"]},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,n=e._parent;/^(Group|CompoundPath)$/.test(n._class);)e=n,n=n._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),rt=d.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onActivate","onDeactivate","onEditOptions","onKeyDown","onKeyUp"],initialize:function(t){d.call(this),this._moveCount=-1,this._downCount=-1,this.set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_handleMouseEvent:function(t,e,n,i){lt=this._scope,i.drag&&!this.responds(t)&&(t="mousemove");var r=i.move||i.drag,s=this.responds(t),a=this.minDistance,o=this.maxDistance,h=!1,u=this;function c(t,e){var s=n,a=r?u._point:u._downPoint||s;if(r){if(u._moveCount>=0&&s.equals(a))return!1;if(a&&(null!=t||null!=e)){var o=s.subtract(a),h=o.getLength();if(h<(t||0))return!1;e&&(s=a.add(o.normalize(Math.min(h,e))))}u._moveCount++}return u._point=s,u._lastPoint=a||s,i.down&&(u._moveCount=-1,u._downPoint=s,u._downCount++),!0}function l(){s&&(h=u.emit(t,new it(u,t,e))||h)}if(i.down)c(),l();else if(i.up)c(null,o),l();else if(s)for(;c(a,o);)l();return h}}),st=c.extend(l,{_class:"Tween",statics:{easings:{linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:2*(2-t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}}},initialize:function t(e,n,i,r,s,a){this.object=e;var o=typeof s,h="function"===o;this.type=h?o:"string"===o?s:"linear",this.easing=h?s:t.easings[this.type],this.duration=r,this.running=!1,this._then=null,this._startTime=null;var u=n||i;this._keys=u?Object.keys(u):[],this._parsedKeys=this._parseKeys(this._keys),this._from=u&&this._getState(n),this._to=u&&this._getState(i),!1!==a&&this.start()},then:function(t){return this._then=t,this},start:function(){return this._startTime=null,this.running=!0,this},stop:function(){return this.running=!1,this},update:function(t){if(this.running){t>1&&(t=1,this.running=!1);for(var e=this.easing(t),n=this._keys,i=function(n){return"function"==typeof n?n(e,t):n},r=0,s=n&&n.length;r<s;r++){var a=n[r],o=i(this._from[a]),h=i(this._to[a]),u=o&&h&&o.__add&&h.__add?h.__subtract(o).__multiply(e).__add(o):(h-o)*e+o;this._setProperty(this._parsedKeys[a],u)}!this.running&&this._then&&this._then(this.object),this.responds("update")&&this.emit("update",new c({progress:t,factor:e}))}return this},_events:{onUpdate:{}},_handleFrame:function(t){var e=this._startTime,n=e?(t-e)/this.duration:0;e||(this._startTime=t),this.update(n)},_getState:function(t){for(var e=this._keys,n={},i=0,r=e.length;i<r;i++){var s,a=e[i],o=this._parsedKeys[a],h=this._getProperty(o);if(t){var u=this._resolveValue(h,t[a]);this._setProperty(o,u),s=(s=this._getProperty(o))&&s.clone?s.clone():s,this._setProperty(o,h)}else s=h&&h.clone?h.clone():h;n[a]=s}return n},_resolveValue:function(t,e){if(e){if(Array.isArray(e)&&2===e.length){var n=e[0];return n&&n.match&&n.match(/^[+\-\*\/]=/)?this._calculate(t,n[0],e[1]):e}if("string"==typeof e){var i=e.match(/^[+\-*/]=(.*)/);if(i){var r=JSON.parse(i[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g,'"$2": '));return this._calculate(t,e[0],r)}}}return e},_calculate:function(t,e,n){return lt.PaperScript.calculateBinary(t,e,n)},_parseKeys:function(t){for(var e={},n=0,i=t.length;n<i;n++){var r=t[n],s=r.replace(/\.([^.]*)/g,"/$1").replace(/\[['"]?([^'"\]]*)['"]?\]/g,"/$1");e[r]=s.split("/")}return e},_getProperty:function(t,e){for(var n=this.object,i=0,r=t.length-(e||0);i<r&&n;i++)n=n[t[i]];return n},_setProperty:function(t,e){var n=this._getProperty(t,1);n&&(n[t[t.length-1]]=e)}}),at={request:function(t){var e=new a.XMLHttpRequest;return e.open((t.method||"get").toUpperCase(),t.url,c.pick(t.async,!0)),t.mimeType&&e.overrideMimeType(t.mimeType),e.onload=function(){var n=e.status;0===n||200===n?t.onLoad&&t.onLoad.call(e,e.responseText):e.onerror()},e.onerror=function(){var n=e.status,i='Could not load "'+t.url+'" (Status: '+n+")";if(!t.onError)throw new Error(i);t.onError(i,n)},e.send(null)}},ot={canvases:[],getCanvas:function(t,e){if(!h)return null;var n,i=!0;"object"==typeof t&&(e=t.height,t=t.width),this.canvases.length?n=this.canvases.pop():(n=u.createElement("canvas"),i=!1);var r=n.getContext("2d");if(!r)throw new Error("Canvas "+n+" is unable to provide a 2D context.");return n.width===t&&n.height===e?i&&r.clearRect(0,0,t+1,e+1):(n.width=t,n.height=e),r.save(),n},getContext:function(t,e){var n=this.getCanvas(t,e);return n?n.getContext("2d"):null},release:function(t){var e=t&&t.canvas?t.canvas:t;e&&e.getContext&&(e.getContext("2d").restore(),this.canvases.push(e))}},ht=new function(){var t,e,n,i,r,s,a,o,h,u,l,f=Math.min,d=Math.max,p=Math.abs;function g(t,e,n){return.2989*t+.587*e+.114*n}function _(t,e,n,i){var r=i-g(t,e,n),s=(i=g(h=t+r,u=e+r,l=n+r),f(h,u,l)),a=d(h,u,l);if(s<0){var o=i-s;h=i+(h-i)*i/o,u=i+(u-i)*i/o,l=i+(l-i)*i/o}if(a>255){var c=255-i,p=a-i;h=i+(h-i)*c/p,u=i+(u-i)*c/p,l=i+(l-i)*c/p}}function v(t,e,n){return d(t,e,n)-f(t,e,n)}function m(t,e,n,i){var r,s=[t,e,n],a=d(t,e,n),o=f(t,e,n);r=0===f(o=o===t?0:o===e?1:2,a=a===t?0:a===e?1:2)?1===d(o,a)?2:1:0,s[a]>s[o]?(s[r]=(s[r]-s[o])*i/(s[a]-s[o]),s[a]=i):s[r]=s[a]=0,s[o]=0,h=s[0],u=s[1],l=s[2]}var y={multiply:function(){h=r*t/255,u=s*e/255,l=a*n/255},screen:function(){h=r+t-r*t/255,u=s+e-s*e/255,l=a+n-a*n/255},overlay:function(){h=r<128?2*r*t/255:255-2*(255-r)*(255-t)/255,u=s<128?2*s*e/255:255-2*(255-s)*(255-e)/255,l=a<128?2*a*n/255:255-2*(255-a)*(255-n)/255},"soft-light":function(){var i=t*r/255;h=i+r*(255-(255-r)*(255-t)/255-i)/255,u=(i=e*s/255)+s*(255-(255-s)*(255-e)/255-i)/255,l=(i=n*a/255)+a*(255-(255-a)*(255-n)/255-i)/255},"hard-light":function(){h=t<128?2*t*r/255:255-2*(255-t)*(255-r)/255,u=e<128?2*e*s/255:255-2*(255-e)*(255-s)/255,l=n<128?2*n*a/255:255-2*(255-n)*(255-a)/255},"color-dodge":function(){h=0===r?0:255===t?255:f(255,255*r/(255-t)),u=0===s?0:255===e?255:f(255,255*s/(255-e)),l=0===a?0:255===n?255:f(255,255*a/(255-n))},"color-burn":function(){h=255===r?255:0===t?0:d(0,255-255*(255-r)/t),u=255===s?255:0===e?0:d(0,255-255*(255-s)/e),l=255===a?255:0===n?0:d(0,255-255*(255-a)/n)},darken:function(){h=r<t?r:t,u=s<e?s:e,l=a<n?a:n},lighten:function(){h=r>t?r:t,u=s>e?s:e,l=a>n?a:n},difference:function(){(h=r-t)<0&&(h=-h),(u=s-e)<0&&(u=-u),(l=a-n)<0&&(l=-l)},exclusion:function(){h=r+t*(255-r-r)/255,u=s+e*(255-s-s)/255,l=a+n*(255-a-a)/255},hue:function(){m(t,e,n,v(r,s,a)),_(h,u,l,g(r,s,a))},saturation:function(){m(r,s,a,v(t,e,n)),_(h,u,l,g(r,s,a))},luminosity:function(){_(r,s,a,g(t,e,n))},color:function(){_(t,e,n,g(r,s,a))},add:function(){h=f(r+t,255),u=f(s+e,255),l=f(a+n,255)},subtract:function(){h=d(r-t,0),u=d(s-e,0),l=d(a-n,0)},average:function(){h=(r+t)/2,u=(s+e)/2,l=(a+n)/2},negation:function(){h=255-p(255-t-r),u=255-p(255-e-s),l=255-p(255-n-a)}},x=this.nativeModes=c.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],(function(t){this[t]=!0}),{}),b=ot.getContext(1,1);b&&(c.each(y,(function(t,e){var n="darken"===e,i=!1;b.save();try{b.fillStyle=n?"#300":"#a00",b.fillRect(0,0,1,1),b.globalCompositeOperation=e,b.globalCompositeOperation===e&&(b.fillStyle=n?"#a00":"#300",b.fillRect(0,0,1,1),i=b.getImageData(0,0,1,1).data[0]!==n?170:51)}catch(t){}b.restore(),x[e]=i})),ot.release(b)),this.process=function(c,f,d,p,g){var _=f.canvas,v="normal"===c;if(v||x[c])d.save(),d.setTransform(1,0,0,1,0,0),d.globalAlpha=p,v||(d.globalCompositeOperation=c),d.drawImage(_,g.x,g.y),d.restore();else{var m=y[c];if(!m)return;for(var b=d.getImageData(g.x,g.y,_.width,_.height),w=b.data,S=f.getImageData(0,0,_.width,_.height).data,C=0,k=w.length;C<k;C+=4){t=S[C],r=w[C],e=S[C+1],s=w[C+1],n=S[C+2],a=w[C+2],i=S[C+3],o=w[C+3],m();var P=i*p/255,A=1-P;w[C]=P*h+A*r,w[C+1]=P*u+A*s,w[C+2]=P*l+A*a,w[C+3]=i*p+A*o}d.putImageData(b,g.x,g.y)}}},ut=new function(){var t="http://www.w3.org/2000/svg",e="http://www.w3.org/2000/xmlns",n="http://www.w3.org/1999/xlink",i={href:n,xlink:e,xmlns:e+"/","xmlns:xlink":e+"/"};function r(t,e,n){for(var r in e){var s=e[r],a=i[r];"number"==typeof s&&n&&(s=n.number(s)),a?t.setAttributeNS(a,r,s):t.setAttribute(r,s)}return t}return{svg:t,xmlns:e,xlink:n,create:function(e,n,i){return r(u.createElementNS(t,e),n,i)},get:function(t,e){var n=i[e],r=n?t.getAttributeNS(n,e):t.getAttribute(e);return"null"===r?null:r},set:r}},ct=c.each({fillColor:["fill","color"],fillRule:["fill-rule","string"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{true:"none",false:"non-scaling-stroke"},function(t,e){return!e&&(t instanceof V||t instanceof T||t instanceof U)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","style"]},(function(t,e){var n=c.capitalize(e),i=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:i,fromSVG:i&&c.each(i,(function(t,e){this[t]=e}),{}),exportFilter:t[3],get:"get"+n,set:"set"+n}}),{});new function(){var t;function e(e,n,i){var r,s=new c,a=e.getTranslation();n&&(e.isInvertible()?(r=(e=e._shiftless())._inverseTransform(a),a=null):r=new v,s[i?"cx":"x"]=r.x,s[i?"cy":"y"]=r.y);if(!e.isIdentity()){var o=e.decompose();if(o){var h=[],u=o.rotation,l=o.scaling,f=o.skewing;a&&!a.isZero()&&h.push("translate("+t.point(a)+")"),u&&h.push("rotate("+t.number(u)+")"),g.isZero(l.x-1)&&g.isZero(l.y-1)||h.push("scale("+t.point(l)+")"),f.x&&h.push("skewX("+t.number(f.x)+")"),f.y&&h.push("skewY("+t.number(f.y)+")"),s.transform=h.join(" ")}else s.transform="matrix("+e.getValues().join(",")+")"}return s}function n(n,i){for(var r=e(n._matrix),s=n._children,a=ut.create("g",r,t),o=0,h=s.length;o<h;o++){var c=s[o],l=f(c,i);if(l)if(c.isClipMask()){var d=ut.create("clipPath");d.appendChild(l),u(c,d,"clip"),ut.set(a,{"clip-path":"url(#"+d.id+")"})}else a.appendChild(l)}return a}function i(n){var i=n._type,r=n._radius,s=e(n._matrix,!0,"rectangle"!==i);if("rectangle"===i){i="rect";var a=n._size,o=a.width,h=a.height;s.x-=o/2,s.y-=h/2,s.width=o,s.height=h,r.isZero()&&(r=null)}return r&&("circle"===i?s.r=r:(s.rx=r.width,s.ry=r.height)),ut.create(i,s,t)}var r,s={Group:n,Layer:n,Raster:function(n,i){var r=e(n._matrix,!0),s=n.getSize(),a=n.getImage();return r.x-=s.width/2,r.y-=s.height/2,r.width=s.width,r.height=s.height,r.href=0==i.embedImages&&a&&a.src||n.toDataURL(),ut.create("image",r,t)},Path:function(n,r){var s=r.matchShapes;if(s){var a=n.toShape(!1);if(a)return i(a)}var o,h=n._segments,u=h.length,c=e(n._matrix);if(s&&u>=2&&!n.hasHandles())if(u>2){o=n._closed?"polygon":"polyline";for(var l=[],f=0;f<u;f++)l.push(t.point(h[f]._point));c.points=l.join(" ")}else{o="line";var d=h[0]._point,p=h[1]._point;c.set({x1:d.x,y1:d.y,x2:p.x,y2:p.y})}else o="path",c.d=n.getPathData(null,r.precision);return ut.create(o,c,t)},Shape:i,CompoundPath:function(n,i){var r=e(n._matrix),s=n.getPathData(null,i.precision);return s&&(r.d=s),ut.create("path",r,t)},SymbolItem:function(n,i){var r=e(n._matrix,!0),s=n._definition,a=h(s,"symbol"),o=s._item,c=o.getStrokeBounds();return a||((a=ut.create("symbol",{viewBox:t.rectangle(c)})).appendChild(f(o,i)),u(s,a,"symbol")),r.href="#"+a.id,r.x+=c.x,r.y+=c.y,r.width=c.width,r.height=c.height,r.overflow="visible",ut.create("use",r,t)},PointText:function(n){var i=ut.create("text",e(n._matrix,!0),t);return i.textContent=n._content,i}};function o(e,n,i){var r={},s=!i&&e.getParent(),a=[];return null!=e._name&&(r.id=e._name),c.each(ct,(function(n){var i=n.get,o=n.type,l=e[i]();if(n.exportFilter?n.exportFilter(e,l):!s||!c.equals(s[i](),l)){if("color"===o&&null!=l){var f=l.getAlpha();f<1&&(r[n.attribute+"-opacity"]=f)}"style"===o?a.push(n.attribute+": "+l):r[n.attribute]=null==l?"none":"color"===o?l.gradient?function(e){var n=h(e,"color");if(!n){var i,r=e.getGradient(),s=r._radial,a=e.getOrigin(),o=e.getDestination();if(s){i={cx:a.x,cy:a.y,r:a.getDistance(o)};var c=e.getHighlight();c&&(i.fx=c.x,i.fy=c.y)}else i={x1:a.x,y1:a.y,x2:o.x,y2:o.y};i.gradientUnits="userSpaceOnUse",n=ut.create((s?"radial":"linear")+"Gradient",i,t);for(var l=r._stops,f=0,d=l.length;f<d;f++){var p=l[f],g=p._color,_=g.getAlpha(),v=p._offset;i={offset:null==v?f/(d-1):v},g&&(i["stop-color"]=g.toCSS(!0)),_<1&&(i["stop-opacity"]=_),n.appendChild(ut.create("stop",i,t))}u(e,n,"color")}return"url(#"+n.id+")"}(l):l.toCSS(!0):"array"===o?l.join(","):"lookup"===o?n.toSVG[l]:l}})),a.length&&(r.style=a.join(";")),1===r.opacity&&delete r.opacity,e._visible||(r.visibility="hidden"),ut.set(n,r,t)}function h(t,e){return r||(r={ids:{},svgs:{}}),t&&r.svgs[e+"-"+(t._id||t.__id||(t.__id=_.get("svg")))]}function u(t,e,n){r||h();var i=r.ids[n]=(r.ids[n]||0)+1;e.id=n+"-"+i,r.svgs[n+"-"+(t._id||t.__id)]=e}function l(t,e){var n=t,i=null;if(r){for(var s in n="svg"===t.nodeName.toLowerCase()&&t,r.svgs)i||(n||(n=ut.create("svg")).appendChild(t),i=n.insertBefore(ut.create("defs"),n.firstChild)),i.appendChild(r.svgs[s]);r=null}return e.asString?(new a.XMLSerializer).serializeToString(n):n}function f(t,e,n){var i=s[t._class],r=i&&i(t,e);if(r){var a=e.onExport;a&&(r=a(t,r,e)||r);var h=JSON.stringify(t._data);h&&"{}"!==h&&"null"!==h&&r.setAttribute("data-paper-data",h)}return r&&o(t,r,n)}function d(e){return e||(e={}),t=new p(e.precision),e}P.inject({exportSVG:function(t){return l(f(this,t=d(t),!0),t)}}),k.inject({exportSVG:function(n){n=d(n);var i=this._children,r=this.getView(),s=c.pick(n.bounds,"view"),a=n.matrix||"view"===s&&r._matrix,o=a&&S.read([a]),h="view"===s?new b([0,0],r.getViewSize()):"content"===s?P._getBounds(i,o,{stroke:!0}).rect:b.read([s],0,{readNull:!0}),u={version:"1.1",xmlns:ut.svg,"xmlns:xlink":ut.xlink};h&&(u.width=h.width,u.height=h.height,(h.x||0===h.x||h.y||0===h.y)&&(u.viewBox=t.rectangle(h)));var p=ut.create("svg",u,t),g=p;o&&!o.isIdentity()&&(g=p.appendChild(ut.create("g",e(o),t)));for(var _=0,v=i.length;_<v;_++)g.appendChild(f(i[_],n,!0));return l(p,n)}})},new function(){var t,e={};function n(e,n,i,r,s,a){var o=ut.get(e,n)||a,h=null==o?r?null:i?"":0:i?o:parseFloat(o);return/%\s*$/.test(o)?h/100*(s?1:t[/x|^width/.test(n)?"width":"height"]):h}function i(t,e,i,r,s,a,o){return e=n(t,e||"x",!1,r,s,a),i=n(t,i||"y",!1,r,s,o),!r||null!=e&&null!=i?new v(e,i):null}function r(t,e,i,r,s){return e=n(t,e||"width",!1,r,s),i=n(t,i||"height",!1,r,s),!r||null!=e&&null!=i?new y(e,i):null}function s(t,e,n){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?C(t)||t:"lookup"===e?n[t]:t}function l(t,e,n,i){var r=t.childNodes,s="clippath"===e,a="defs"===e,o=new A,h=o._project,u=h._currentStyle,c=[];if(s||a||(o=w(o,t,i),h._currentStyle=o._style.clone()),i)for(var l=t.querySelectorAll("defs"),f=0,d=l.length;f<d;f++)I(l[f],n,!1);for(f=0,d=r.length;f<d;f++){var p,g=r[f];1!==g.nodeType||/^defs$/i.test(g.nodeName)||!(p=I(g,n,!1))||p instanceof M||c.push(p)}return o.addChildren(c),s&&(o=w(o.reduce(),t,i)),h._currentStyle=u,(s||a)&&(o.remove(),o=null),o}function f(t,e){for(var n=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),i=[],r=0,s=n.length;r<s;r+=2)i.push(new v(parseFloat(n[r]),parseFloat(n[r+1])));var a=new R(i);return"polygon"===e&&a.closePath(),a}function d(t,r){var s,a=(n(t,"href",!0)||"").substring(1),o="radialgradient"===r;if(a)(s=e[a].getGradient())._radial^o&&((s=s.clone())._radial=o);else{for(var h=t.childNodes,u=[],c=0,l=h.length;c<l;c++){var f=h[c];1===f.nodeType&&u.push(w(new Z,f))}s=new W(u,o)}var d,p,g,_="userSpaceOnUse"!==n(t,"gradientUnits",!0);return o?(p=(d=i(t,"cx","cy",!1,_,"50%","50%")).add(n(t,"r",!1,!1,_,"50%"),0),g=i(t,"fx","fy",!0,_)):(d=i(t,"x1","y1",!1,_,"0%","0%"),p=i(t,"x2","y2",!1,_,"100%","0%")),w(new G(s,d,p,g),t)._scaleToBounds=_,null}var p={"#document":function(t,e,n,i){for(var r=t.childNodes,s=0,a=r.length;s<a;s++){var o=r[s];if(1===o.nodeType)return I(o,n,i)}},g:l,svg:l,clippath:l,polygon:f,polyline:f,path:function(t){return V.create(t.getAttribute("d"))},lineargradient:d,radialgradient:d,image:function(t){var e=new E(n(t,"href",!0));return e.on("load",(function(){var e=r(t);this.setSize(e);var n=i(t).add(e.divide(2));this._matrix.append((new S).translate(n))})),e},symbol:function(t,e,n,i){return new M(l(t,e,n,i),!0)},defs:l,use:function(t){var r=(n(t,"href",!0)||"").substring(1),s=e[r],a=i(t);return s?s instanceof M?s.place(a):s.clone().translate(a):null},circle:function(t){return new T.Circle(i(t,"cx","cy"),n(t,"r"))},ellipse:function(t){return new T.Ellipse({center:i(t,"cx","cy"),radius:r(t,"rx","ry")})},rect:function(t){return new T.Rectangle(new b(i(t),r(t)),r(t,"rx","ry"))},line:function(t){return new R.Line(i(t,"x1","y1"),i(t,"x2","y2"))},text:function(t){var e=new H(i(t).add(i(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e},switch:l};function g(t,e,n,i){if(t.transform){for(var r=(i.getAttribute(n)||"").split(/\)\s*/g),s=new S,a=0,o=r.length;a<o;a++){var h=r[a];if(!h)break;for(var u=h.split(/\(\s*/),c=u[0],l=u[1].split(/[\s,]+/g),f=0,d=l.length;f<d;f++)l[f]=parseFloat(l[f]);switch(c){case"matrix":s.append(new S(l[0],l[1],l[2],l[3],l[4],l[5]));break;case"rotate":s.rotate(l[0],l[1]||0,l[2]||0);break;case"translate":s.translate(l[0],l[1]||0);break;case"scale":s.scale(l);break;case"skewX":s.skew(l[0],0);break;case"skewY":s.skew(0,l[0])}}t.transform(s)}}function _(t,e,n){var i="fill-opacity"===n?"getFillColor":"getStrokeColor",r=t[i]&&t[i]();r&&r.setAlpha(parseFloat(e))}var m=c.set(c.each(ct,(function(t){this[t.attribute]=function(e,n){if(e[t.set]&&(e[t.set](s(n,t.type,t.fromSVG)),"color"===t.type)){var i=e[t.get]();if(i&&i._scaleToBounds){var r=e.getBounds();i.transform((new S).translate(r.getPoint()).scale(r.getSize()))}}}}),{}),{id:function(t,n){e[n]=t,t.setName&&t.setName(n)},"clip-path":function(t,e){var n=C(e);if(n){if((n=n.clone()).setClipMask(!0),!(t instanceof A))return new A(n,t);t.insertChild(0,n)}},gradientTransform:g,transform:g,"fill-opacity":_,"stroke-opacity":_,visibility:function(t,e){t.setVisible&&t.setVisible("visible"===e)},display:function(t,e){t.setVisible&&t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){if(t.setOffset){var n=e.match(/(.*)%$/);t.setOffset(n?n[1]/100:parseFloat(e))}},viewBox:function(t,e,n,i,a){var o,h=new b(s(e,"array")),u=r(i,null,null,!0);if(t instanceof A){var c=u?u.divide(h.getSize()):1,l=(new S).scale(c).translate(h.getPoint().negate());o=t}else t instanceof M&&(u&&h.setSize(u),o=t._item);if(o){if("visible"!==x(i,"overflow",a)){var f=new T.Rectangle(h);f.setClipMask(!0),o.addChild(f)}l&&o.transform(l)}}});function x(t,e,n){var i=t.attributes[e],r=i&&i.value;if(!r&&t.style){var s=c.camelize(e);(r=t.style[s])||n.node[s]===n.parent[s]||(r=n.node[s])}return r?"none"===r?null:r:o}function w(t,e,n){var i=e.parentNode,r={node:Q.getStyles(e)||{},parent:!n&&!/^defs$/i.test(i.tagName)&&Q.getStyles(i)||{}};return c.each(m,(function(n,i){var s=x(e,i,r);t=s!==o&&n(t,s,i,e,r)||t})),t}function C(t){var n=t&&t.match(/\((?:["'#]*)([^"')]+)/),i=n&&n[1],r=i&&e[h?i.replace(h.location.href.split("#")[0]+"#",""):i];return r&&r._scaleToBounds&&((r=r.clone())._scaleToBounds=!0),r}function I(n,i,s){var a,o,h,l=n.nodeName.toLowerCase(),f="#document"!==l,d=u.body;s&&f&&(t=lt.getView().getSize(),t=r(n,null,null,!0)||t,a=ut.create("svg",{style:"stroke-width: 1px; stroke-miterlimit: 10"}),o=n.parentNode,h=n.nextSibling,a.appendChild(n),d.appendChild(a));var g=lt.settings,_=g.applyMatrix,v=g.insertItems;g.applyMatrix=!1,g.insertItems=!1;var m=p[l],y=m&&m(n,l,i,s)||null;if(g.insertItems=v,g.applyMatrix=_,y){!f||y instanceof A||(y=w(y,n,s));var x=i.onImport,b=f&&n.getAttribute("data-paper-data");x&&(y=x(n,y,i)||y),i.expandShapes&&y instanceof T&&(y.remove(),y=y.toPath()),b&&(y._data=JSON.parse(b))}return a&&(d.removeChild(a),o&&(h?o.insertBefore(n,h):o.appendChild(n))),s&&(e={},y&&c.pick(i.applyMatrix,_)&&y.matrix.apply(!0,!0)),y}function O(t,e,n){if(!t)return null;e="function"==typeof e?{onLoad:e}:e||{};var i=lt,r=null;function s(s){try{var u="object"==typeof s?s:(new a.DOMParser).parseFromString(s,"image/svg+xml");if(!u.nodeName)throw u=null,new Error("Unsupported SVG source: "+t);lt=i,r=I(u,e,!0),e&&!1===e.insert||n._insertItem(o,r);var c=e.onLoad;c&&c(r,s)}catch(t){h(t)}}function h(t,n){var i=e.onError;if(!i)throw new Error(t);i(t,n)}if("string"!=typeof t||/^.*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var c=new FileReader;return c.onload=function(){s(c.result)},c.onerror=function(){h(c.error)},c.readAsText(t)}s(t)}else{var l=u.getElementById(t);l?s(l):at.request({url:t,async:!0,onLoad:s,onError:h})}return r}P.inject({importSVG:function(t,e){return O(t,e,this)}}),k.inject({importSVG:function(t,e){return this.activate(),O(t,e,this)}})},c.exports.PaperScript=function(){var t,e,l,d=this,p=d.acorn;if(!p)try{p=n(36)}catch(t){}p||(p=t=e={},l=function(t){"use strict";var e,n,i,r;t.version="0.5.0",t.parse=function(t,r){return n=String(t),i=n.length,a(r),Wt(),function(t){v=m=o,e.locations&&(y=new Gt),x=w=null,b=[],Xt();var n=t||ce(),i=!0;for(t||(n.body=[]);f!==E;){var r=we();n.body.push(r),i&&de(r)&&oe(!0),i=!1}return fe(n,"Program")}(e.program)};var s=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null};function a(t){for(var n in e=t||{},s)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=s[n]);r=e.sourceFile||null}var o,h,u,c,l,f,d,p,g,_,v,m,y,x,b,w,S=t.getLineInfo=function(t,e){for(var n=1,i=0;;){qt.lastIndex=i;var r=qt.exec(t);if(!(r&&r.index<e))break;++n,i=r.index+r[0].length}return{line:n,column:e-i}};function C(t,e){var i=S(n,t);e+=" ("+i.line+":"+i.column+")";var r=new SyntaxError(e);throw r.pos=t,r.loc=i,r.raisedAt=o,r}t.tokenize=function(t,r){n=String(t),i=n.length,a(r),Wt();var s={};function v(t){return m=u,Xt(t),s.start=h,s.end=u,s.startLoc=c,s.endLoc=l,s.type=f,s.value=d,s}return v.jumpTo=function(t,i){var r;if(o=t,e.locations)for(g=1,_=qt.lastIndex=0;(r=qt.exec(n))&&r.index<t;)++g,_=r.index+r[0].length;p=i,$t()},v};var k=[],P={type:"num"},A={type:"regexp"},I={type:"string"},T={type:"name"},E={type:"eof"},O={keyword:"break"},M={keyword:"case",beforeExpr:!0},L={keyword:"catch"},N={keyword:"continue"},B={keyword:"debugger"},z={keyword:"default"},j={keyword:"do",isLoop:!0},V={keyword:"else",beforeExpr:!0},R={keyword:"finally"},D={keyword:"for",isLoop:!0},F={keyword:"function"},q={keyword:"if"},U={keyword:"return",beforeExpr:!0},H={keyword:"switch"},G={keyword:"throw",beforeExpr:!0},W={keyword:"try"},Z={keyword:"var"},K={keyword:"while",isLoop:!0},Q={keyword:"with"},$={keyword:"new",beforeExpr:!0},J={keyword:"this"},X={keyword:"null",atomValue:null},Y={keyword:"true",atomValue:!0},tt={keyword:"false",atomValue:!1},et={keyword:"in",binop:7,beforeExpr:!0},nt={break:O,case:M,catch:L,continue:N,debugger:B,default:z,do:j,else:V,finally:R,for:D,function:F,if:q,return:U,switch:H,throw:G,try:W,var:Z,while:K,with:Q,null:X,true:Y,false:tt,new:$,in:et,instanceof:{keyword:"instanceof",binop:7,beforeExpr:!0},this:J,typeof:{keyword:"typeof",prefix:!0,beforeExpr:!0},void:{keyword:"void",prefix:!0,beforeExpr:!0},delete:{keyword:"delete",prefix:!0,beforeExpr:!0}},it={type:"[",beforeExpr:!0},rt={type:"]"},st={type:"{",beforeExpr:!0},at={type:"}"},ot={type:"(",beforeExpr:!0},ht={type:")"},ut={type:",",beforeExpr:!0},ct={type:";",beforeExpr:!0},lt={type:":",beforeExpr:!0},ft={type:"."},dt={type:"?",beforeExpr:!0},pt={binop:10,beforeExpr:!0},gt={isAssign:!0,beforeExpr:!0},_t={isAssign:!0,beforeExpr:!0},vt={postfix:!0,prefix:!0,isUpdate:!0},mt={prefix:!0,beforeExpr:!0},yt={binop:1,beforeExpr:!0},xt={binop:2,beforeExpr:!0},bt={binop:3,beforeExpr:!0},wt={binop:4,beforeExpr:!0},St={binop:5,beforeExpr:!0},Ct={binop:6,beforeExpr:!0},kt={binop:7,beforeExpr:!0},Pt={binop:8,beforeExpr:!0},At={binop:9,prefix:!0,beforeExpr:!0},It={binop:10,beforeExpr:!0};for(var Tt in t.tokTypes={bracketL:it,bracketR:rt,braceL:st,braceR:at,parenL:ot,parenR:ht,comma:ut,semi:ct,colon:lt,dot:ft,question:dt,slash:pt,eq:gt,name:T,eof:E,num:P,regexp:A,string:I},nt)t.tokTypes["_"+Tt]=nt[Tt];function Et(t){t=t.split(" ");var e="",n=[];t:for(var i=0;i<t.length;++i){for(var r=0;r<n.length;++r)if(n[r][0].length==t[i].length){n[r].push(t[i]);continue t}n.push([t[i]])}function s(t){if(1==t.length)return e+="return str === "+JSON.stringify(t[0])+";";e+="switch(str){";for(var n=0;n<t.length;++n)e+="case "+JSON.stringify(t[n])+":";e+="return true}return false;"}if(n.length>3){for(n.sort((function(t,e){return e.length-t.length})),e+="switch(str.length){",i=0;i<n.length;++i){var a=n[i];e+="case "+a[0].length+":",s(a)}e+="}"}else s(t);return new Function("str",e)}var Ot,Mt=Et("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Lt=Et("class enum extends super const export import"),Nt=Et("implements interface let package private protected public static yield"),Bt=Et("eval arguments"),zt=Et("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),jt=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Vt="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",Rt=new RegExp("["+Vt+"]"),Dt=new RegExp("["+Vt+"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿]"),Ft=/[\n\r\u2028\u2029]/,qt=/\r\n|[\n\r\u2028\u2029]/g,Ut=t.isIdentifierStart=function(t){return t<65?36===t:t<91||(t<97?95===t:t<123||t>=170&&Rt.test(String.fromCharCode(t)))},Ht=t.isIdentifierChar=function(t){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||t>=170&&Dt.test(String.fromCharCode(t))))};function Gt(){this.line=g,this.column=o-_}function Wt(){g=1,o=_=0,p=!0,$t()}function Zt(t,n){u=o,e.locations&&(l=new Gt),f=t,$t(),d=n,p=t.beforeExpr}function Kt(){var t,i=e.onComment&&e.locations&&new Gt,r=o,s=n.indexOf("*/",o+=2);if(-1===s&&C(o-2,"Unterminated comment"),o=s+2,e.locations)for(qt.lastIndex=r;(t=qt.exec(n))&&t.index<o;)++g,_=t.index+t[0].length;e.onComment&&e.onComment(!0,n.slice(r+2,s),r,o,i,e.locations&&new Gt)}function Qt(){for(var t=o,r=e.onComment&&e.locations&&new Gt,s=n.charCodeAt(o+=2);o<i&&10!==s&&13!==s&&8232!==s&&8233!==s;)++o,s=n.charCodeAt(o);e.onComment&&e.onComment(!1,n.slice(t+2,o),t,o,r,e.locations&&new Gt)}function $t(){for(;o<i;){var t=n.charCodeAt(o);if(32===t)++o;else if(13===t)++o,10===(r=n.charCodeAt(o))&&++o,e.locations&&(++g,_=o);else if(10===t||8232===t||8233===t)++o,e.locations&&(++g,_=o);else if(t>8&&t<14)++o;else if(47===t){var r;if(42===(r=n.charCodeAt(o+1)))Kt();else{if(47!==r)break;Qt()}}else if(160===t)++o;else{if(!(t>=5760&&jt.test(String.fromCharCode(t))))break;++o}}}function Jt(t){switch(t){case 46:return function(){var t=n.charCodeAt(o+1);return t>=48&&t<=57?ne(!0):(++o,Zt(ft))}();case 40:return++o,Zt(ot);case 41:return++o,Zt(ht);case 59:return++o,Zt(ct);case 44:return++o,Zt(ut);case 91:return++o,Zt(it);case 93:return++o,Zt(rt);case 123:return++o,Zt(st);case 125:return++o,Zt(at);case 58:return++o,Zt(lt);case 63:return++o,Zt(dt);case 48:var r=n.charCodeAt(o+1);if(120===r||88===r)return function(){o+=2;var t=ee(16);return null==t&&C(h+2,"Expected hexadecimal number"),Ut(n.charCodeAt(o))&&C(o,"Identifier directly after number"),Zt(P,t)}();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ne(!1);case 34:case 39:return function(t){o++;for(var r="";;){o>=i&&C(h,"Unterminated string constant");var s=n.charCodeAt(o);if(s===t)return++o,Zt(I,r);if(92===s){s=n.charCodeAt(++o);var a=/^[0-7]+/.exec(n.slice(o,o+3));for(a&&(a=a[0]);a&&parseInt(a,8)>255;)a=a.slice(0,-1);if("0"===a&&(a=null),++o,a)w&&C(o-2,"Octal literal in strict mode"),r+=String.fromCharCode(parseInt(a,8)),o+=a.length-1;else switch(s){case 110:r+="\n";break;case 114:r+="\r";break;case 120:r+=String.fromCharCode(ie(2));break;case 117:r+=String.fromCharCode(ie(4));break;case 85:r+=String.fromCharCode(ie(8));break;case 116:r+="\t";break;case 98:r+="\b";break;case 118:r+="\v";break;case 102:r+="\f";break;case 48:r+="\0";break;case 13:10===n.charCodeAt(o)&&++o;case 10:e.locations&&(_=o,++g);break;default:r+=String.fromCharCode(s)}}else 13!==s&&10!==s&&8232!==s&&8233!==s||C(h,"Unterminated string constant"),r+=String.fromCharCode(s),++o}}(t);case 47:return function(){var t=n.charCodeAt(o+1);return p?(++o,te()):61===t?Yt(_t,2):Yt(pt,1)}();case 37:case 42:return 61===n.charCodeAt(o+1)?Yt(_t,2):Yt(It,1);case 124:case 38:return function(t){var e=n.charCodeAt(o+1);return e===t?Yt(124===t?yt:xt,2):61===e?Yt(_t,2):Yt(124===t?bt:St,1)}(t);case 94:return 61===n.charCodeAt(o+1)?Yt(_t,2):Yt(wt,1);case 43:case 45:return function(t){var e=n.charCodeAt(o+1);return e===t?45==e&&62==n.charCodeAt(o+2)&&Ft.test(n.slice(m,o))?(o+=3,Qt(),$t(),Xt()):Yt(vt,2):61===e?Yt(_t,2):Yt(At,1)}(t);case 60:case 62:return function(t){var e=n.charCodeAt(o+1),i=1;return e===t?(i=62===t&&62===n.charCodeAt(o+2)?3:2,61===n.charCodeAt(o+i)?Yt(_t,i+1):Yt(Pt,i)):33==e&&60==t&&45==n.charCodeAt(o+2)&&45==n.charCodeAt(o+3)?(o+=4,Qt(),$t(),Xt()):(61===e&&(i=61===n.charCodeAt(o+2)?3:2),Yt(kt,i))}(t);case 61:case 33:return function(t){return 61===n.charCodeAt(o+1)?Yt(Ct,61===n.charCodeAt(o+2)?3:2):Yt(61===t?gt:mt,1)}(t);case 126:return Yt(mt,1)}return!1}function Xt(t){if(t?o=h+1:h=o,e.locations&&(c=new Gt),t)return te();if(o>=i)return Zt(E);var r=n.charCodeAt(o);if(Ut(r)||92===r)return se();var s=Jt(r);if(!1===s){var a=String.fromCharCode(r);if("\\"===a||Rt.test(a))return se();C(o,"Unexpected character '"+a+"'")}return s}function Yt(t,e){var i=n.slice(o,o+e);o+=e,Zt(t,i)}function te(){for(var t,e,r=o;;){o>=i&&C(r,"Unterminated regular expression");var s=n.charAt(o);if(Ft.test(s)&&C(r,"Unterminated regular expression"),t)t=!1;else{if("["===s)e=!0;else if("]"===s&&e)e=!1;else if("/"===s&&!e)break;t="\\"===s}++o}var a=n.slice(r,o);++o;var h=re();h&&!/^[gmsiy]*$/.test(h)&&C(r,"Invalid regexp flag");try{var u=new RegExp(a,h)}catch(t){t instanceof SyntaxError&&C(r,t.message),C(t)}return Zt(A,u)}function ee(t,e){for(var i=o,r=0,s=0,a=null==e?1/0:e;s<a;++s){var h,u=n.charCodeAt(o);if((h=u>=97?u-97+10:u>=65?u-65+10:u>=48&&u<=57?u-48:1/0)>=t)break;++o,r=r*t+h}return o===i||null!=e&&o-i!==e?null:r}function ne(t){var e=o,i=!1,r=48===n.charCodeAt(o);t||null!==ee(10)||C(e,"Invalid number"),46===n.charCodeAt(o)&&(++o,ee(10),i=!0);var s=n.charCodeAt(o);69!==s&&101!==s||(43!==(s=n.charCodeAt(++o))&&45!==s||++o,null===ee(10)&&C(e,"Invalid number"),i=!0),Ut(n.charCodeAt(o))&&C(o,"Identifier directly after number");var a,h=n.slice(e,o);return i?a=parseFloat(h):r&&1!==h.length?/[89]/.test(h)||w?C(e,"Invalid number"):a=parseInt(h,8):a=parseInt(h,10),Zt(P,a)}function ie(t){var e=ee(16,t);return null===e&&C(h,"Bad character escape sequence"),e}function re(){Ot=!1;for(var t,e=!0,i=o;;){var r=n.charCodeAt(o);if(Ht(r))Ot&&(t+=n.charAt(o)),++o;else{if(92!==r)break;Ot||(t=n.slice(i,o)),Ot=!0,117!=n.charCodeAt(++o)&&C(o,"Expecting Unicode escape sequence \\uXXXX"),++o;var s=ie(4),a=String.fromCharCode(s);a||C(o-1,"Invalid Unicode escape"),(e?Ut(s):Ht(s))||C(o-4,"Invalid Unicode escape"),t+=a}e=!1}return Ot?t:n.slice(i,o)}function se(){var t=re(),e=T;return!Ot&&zt(t)&&(e=nt[t]),Zt(e,t)}function ae(){v=h,m=u,y=l,Xt()}function oe(t){if(w=t,o=h,e.locations)for(;o<_;)_=n.lastIndexOf("\n",_-2)+1,--g;$t(),Xt()}function he(){this.type=null,this.start=h,this.end=null}function ue(){this.start=c,this.end=null,null!==r&&(this.source=r)}function ce(){var t=new he;return e.locations&&(t.loc=new ue),e.directSourceFile&&(t.sourceFile=e.directSourceFile),e.ranges&&(t.range=[h,0]),t}function le(t){var n=new he;return n.start=t.start,e.locations&&(n.loc=new ue,n.loc.start=t.loc.start),e.ranges&&(n.range=[t.range[0],0]),n}function fe(t,n){return t.type=n,t.end=m,e.locations&&(t.loc.end=y),e.ranges&&(t.range[1]=m),t}function de(t){return e.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function pe(t){if(f===t)return ae(),!0}function ge(){return!e.strictSemicolons&&(f===E||f===at||Ft.test(n.slice(m,h)))}function _e(){pe(ct)||ge()||me()}function ve(t){f===t?ae():me()}function me(){C(h,"Unexpected token")}function ye(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&C(t.start,"Assigning to rvalue"),w&&"Identifier"===t.type&&Bt(t.name)&&C(t.start,"Assigning to "+t.name+" in strict mode")}var xe={kind:"loop"},be={kind:"switch"};function we(){(f===pt||f===_t&&"/="==d)&&Xt(!0);var t=f,i=ce();switch(t){case O:case N:ae();var r=t===O;pe(ct)||ge()?i.label=null:f!==T?me():(i.label=ze(),_e());for(var s=0;s<b.length;++s){var a=b[s];if(null==i.label||a.name===i.label.name){if(null!=a.kind&&(r||"loop"===a.kind))break;if(i.label&&r)break}}return s===b.length&&C(i.start,"Unsyntactic "+t.keyword),fe(i,r?"BreakStatement":"ContinueStatement");case B:return ae(),_e(),fe(i,"DebuggerStatement");case j:return ae(),b.push(xe),i.body=we(),b.pop(),ve(K),i.test=Se(),_e(),fe(i,"DoWhileStatement");case D:if(ae(),b.push(xe),ve(ot),f===ct)return ke(i,null);if(f===Z){var o=ce();return ae(),Ae(o,!0),fe(o,"VariableDeclaration"),1===o.declarations.length&&pe(et)?Pe(i,o):ke(i,o)}return o=Ie(!1,!0),pe(et)?(ye(o),Pe(i,o)):ke(i,o);case F:return ae(),Ne(i,!0);case q:return ae(),i.test=Se(),i.consequent=we(),i.alternate=pe(V)?we():null,fe(i,"IfStatement");case U:return x||e.allowReturnOutsideFunction||C(h,"'return' outside of function"),ae(),pe(ct)||ge()?i.argument=null:(i.argument=Ie(),_e()),fe(i,"ReturnStatement");case H:ae(),i.discriminant=Se(),i.cases=[],ve(st),b.push(be);for(var u,c;f!=at;)if(f===M||f===z){var l=f===M;u&&fe(u,"SwitchCase"),i.cases.push(u=ce()),u.consequent=[],ae(),l?u.test=Ie():(c&&C(v,"Multiple default clauses"),c=!0,u.test=null),ve(lt)}else u||me(),u.consequent.push(we());return u&&fe(u,"SwitchCase"),ae(),b.pop(),fe(i,"SwitchStatement");case G:return ae(),Ft.test(n.slice(m,h))&&C(m,"Illegal newline after throw"),i.argument=Ie(),_e(),fe(i,"ThrowStatement");case W:if(ae(),i.block=Ce(),i.handler=null,f===L){var p=ce();ae(),ve(ot),p.param=ze(),w&&Bt(p.param.name)&&C(p.param.start,"Binding "+p.param.name+" in strict mode"),ve(ht),p.guard=null,p.body=Ce(),i.handler=fe(p,"CatchClause")}return i.guardedHandlers=k,i.finalizer=pe(R)?Ce():null,i.handler||i.finalizer||C(i.start,"Missing catch or finally clause"),fe(i,"TryStatement");case Z:return ae(),Ae(i),_e(),fe(i,"VariableDeclaration");case K:return ae(),i.test=Se(),b.push(xe),i.body=we(),b.pop(),fe(i,"WhileStatement");case Q:return w&&C(h,"'with' in strict mode"),ae(),i.object=Se(),i.body=we(),fe(i,"WithStatement");case st:return Ce();case ct:return ae(),fe(i,"EmptyStatement");default:var g=d,_=Ie();if(t===T&&"Identifier"===_.type&&pe(lt)){for(s=0;s<b.length;++s)b[s].name===g&&C(_.start,"Label '"+g+"' is already declared");var y=f.isLoop?"loop":f===H?"switch":null;return b.push({name:g,kind:y}),i.body=we(),b.pop(),i.label=_,fe(i,"LabeledStatement")}return i.expression=_,_e(),fe(i,"ExpressionStatement")}}function Se(){ve(ot);var t=Ie();return ve(ht),t}function Ce(t){var e,n=ce(),i=!0,r=!1;for(n.body=[],ve(st);!pe(at);){var s=we();n.body.push(s),i&&t&&de(s)&&(e=r,oe(r=!0)),i=!1}return r&&!e&&oe(!1),fe(n,"BlockStatement")}function ke(t,e){return t.init=e,ve(ct),t.test=f===ct?null:Ie(),ve(ct),t.update=f===ht?null:Ie(),ve(ht),t.body=we(),b.pop(),fe(t,"ForStatement")}function Pe(t,e){return t.left=e,t.right=Ie(),ve(ht),t.body=we(),b.pop(),fe(t,"ForInStatement")}function Ae(t,e){for(t.declarations=[],t.kind="var";;){var n=ce();if(n.id=ze(),w&&Bt(n.id.name)&&C(n.id.start,"Binding "+n.id.name+" in strict mode"),n.init=pe(gt)?Ie(!0,e):null,t.declarations.push(fe(n,"VariableDeclarator")),!pe(ut))break}return t}function Ie(t,e){var n=Te(e);if(!t&&f===ut){var i=le(n);for(i.expressions=[n];pe(ut);)i.expressions.push(Te(e));return fe(i,"SequenceExpression")}return n}function Te(t){var e=function(t){var e=function(t){return function t(e,n,i){var r=f.binop;if(null!=r&&(!i||f!==et)&&r>n){var s=le(e);s.left=e,s.operator=d;var a=f;ae(),s.right=t(Ee(),r,i);var o=fe(s,a===yt||a===xt?"LogicalExpression":"BinaryExpression");return t(o,n,i)}return e}(Ee(),-1,t)}(t);if(pe(dt)){var n=le(e);return n.test=e,n.consequent=Ie(!0),ve(lt),n.alternate=Ie(!0,t),fe(n,"ConditionalExpression")}return e}(t);if(f.isAssign){var n=le(e);return n.operator=d,n.left=e,ae(),n.right=Te(t),ye(e),fe(n,"AssignmentExpression")}return e}function Ee(){if(f.prefix){var t=ce(),e=f.isUpdate;return t.operator=d,t.prefix=!0,p=!0,ae(),t.argument=Ee(),e?ye(t.argument):w&&"delete"===t.operator&&"Identifier"===t.argument.type&&C(t.start,"Deleting local variable in strict mode"),fe(t,e?"UpdateExpression":"UnaryExpression")}for(var n=Oe(Me());f.postfix&&!ge();)(t=le(n)).operator=d,t.prefix=!1,t.argument=n,ye(n),ae(),n=fe(t,"UpdateExpression");return n}function Oe(t,e){var n;return pe(ft)?((n=le(t)).object=t,n.property=ze(!0),n.computed=!1,Oe(fe(n,"MemberExpression"),e)):pe(it)?((n=le(t)).object=t,n.property=Ie(),n.computed=!0,ve(rt),Oe(fe(n,"MemberExpression"),e)):!e&&pe(ot)?((n=le(t)).callee=t,n.arguments=Be(ht,!1),Oe(fe(n,"CallExpression"),e)):t}function Me(){switch(f){case J:var t=ce();return ae(),fe(t,"ThisExpression");case T:return ze();case P:case I:case A:return(t=ce()).value=d,t.raw=n.slice(h,u),ae(),fe(t,"Literal");case X:case Y:case tt:return(t=ce()).value=f.atomValue,t.raw=f.keyword,ae(),fe(t,"Literal");case ot:var i=c,r=h;ae();var s=Ie();return s.start=r,s.end=u,e.locations&&(s.loc.start=i,s.loc.end=l),e.ranges&&(s.range=[r,u]),ve(ht),s;case it:return t=ce(),ae(),t.elements=Be(rt,!0,!0),fe(t,"ArrayExpression");case st:return function(){var t=ce(),n=!0,i=!1;for(t.properties=[],ae();!pe(at);){if(n)n=!1;else if(ve(ut),e.allowTrailingCommas&&pe(at))break;var r,s={key:Le()},a=!1;if(pe(lt)?(s.value=Ie(!0),r=s.kind="init"):e.ecmaVersion>=5&&"Identifier"===s.key.type&&("get"===s.key.name||"set"===s.key.name)?(a=i=!0,r=s.kind=s.key.name,s.key=Le(),f!==ot&&me(),s.value=Ne(ce(),!1)):me(),"Identifier"===s.key.type&&(w||i))for(var o=0;o<t.properties.length;++o){var h=t.properties[o];if(h.key.name===s.key.name){var u=r==h.kind||a&&"init"===h.kind||"init"===r&&("get"===h.kind||"set"===h.kind);u&&!w&&"init"===r&&"init"===h.kind&&(u=!1),u&&C(s.key.start,"Redefinition of property")}}t.properties.push(s)}return fe(t,"ObjectExpression")}();case F:return t=ce(),ae(),Ne(t,!1);case $:return function(){var t=ce();return ae(),t.callee=Oe(Me(),!0),pe(ot)?t.arguments=Be(ht,!1):t.arguments=k,fe(t,"NewExpression")}();default:me()}}function Le(){return f===P||f===I?Me():ze(!0)}function Ne(t,e){f===T?t.id=ze():e?me():t.id=null,t.params=[];var n=!0;for(ve(ot);!pe(ht);)n?n=!1:ve(ut),t.params.push(ze());var i=x,r=b;if(x=!0,b=[],t.body=Ce(!0),x=i,b=r,w||t.body.body.length&&de(t.body.body[0]))for(var s=t.id?-1:0;s<t.params.length;++s){var a=s<0?t.id:t.params[s];if((Nt(a.name)||Bt(a.name))&&C(a.start,"Defining '"+a.name+"' in strict mode"),s>=0)for(var o=0;o<s;++o)a.name===t.params[o].name&&C(a.start,"Argument name clash in strict mode")}return fe(t,e?"FunctionDeclaration":"FunctionExpression")}function Be(t,n,i){for(var r=[],s=!0;!pe(t);){if(s)s=!1;else if(ve(ut),n&&e.allowTrailingCommas&&pe(t))break;i&&f===ut?r.push(null):r.push(Ie(!0))}return r}function ze(t){var i=ce();return t&&"everywhere"==e.forbidReserved&&(t=!1),f===T?(!t&&(e.forbidReserved&&(3===e.ecmaVersion?Mt:Lt)(d)||w&&Nt(d))&&-1==n.slice(h,u).indexOf("\\")&&C(h,"The keyword '"+d+"' is reserved"),i.name=d):t&&f.keyword?i.name=f.keyword:me(),p=!1,ae(),fe(i,"Identifier")}},"object"==typeof t&&"object"==typeof e?l(t):(i=[t],(s="function"==typeof(r=l)?r.apply(t,i):r)===o||(e.exports=s)),p.version||(p=null));function g(t,e){return(d.acorn||p).parse(t,e)}var _={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"__equals","!=":"__equals"},m={"-":"__negate","+":"__self"},x=c.each(["add","subtract","multiply","divide","modulo","equals","negate"],(function(t){this["__"+t]="#"+t}),{__self:function(){return this}});function b(t,e,n){var i=_[e];if(t&&t[i]){var r=t[i](n);return"!="===e?!r:r}switch(e){case"+":return t+n;case"-":return t-n;case"*":return t*n;case"/":return t/n;case"%":return t%n;case"==":return t==n;case"!=":return t!=n}}function w(t,e){var n=m[t];if(e&&e[n])return e[n]();switch(t){case"+":return+e;case"-":return-e}}function S(t,e){if(!t)return"";var n=[];function i(t){for(var e=0,i=n.length;e<i;e++){var r=n[e];if(r[0]>=t)break;t+=r[1]}return t}function r(e){return t.substring(i(e.range[0]),i(e.range[1]))}function s(e,r){for(var s=i(e.range[0]),a=i(e.range[1]),o=0,h=n.length-1;h>=0;h--)if(s>n[h][0]){o=h+1;break}n.splice(o,0,[s,r.length-a+s]),t=t.substring(0,s)+r+t.substring(a)}var o,c=(e=e||{}).url||"",l=lt.agent,f=l.versionNumber,d=!1,p=e.sourceMaps,v=e.source||t,y=/\r\n|\n|\r/gm,x=e.offset||0;if(p&&(l.chrome&&f>=30||l.webkit&&f>=537.76||l.firefox&&f>=23||l.node)){if(l.node)x-=2;else if(h&&c&&!h.location.href.indexOf(c)){var b=u.getElementsByTagName("html")[0].innerHTML;x=b.substr(0,b.indexOf(t)+1).match(y).length+1}var w=["AA"+function(t){var e="";for(t=(Math.abs(t)<<1)+(t<0?1:0);t||!e;){var n=31&t;(t>>=5)&&(n|=32),e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[n]}return e}((d=x>0&&!(l.chrome&&f>=36||l.safari&&f>=600||l.firefox&&f>=40||l.node))?0:x)+"A"];w.length=(t.match(y)||[]).length+1+(d?x:0),o={version:3,file:c,names:[],mappings:w.join(";AACA"),sourceRoot:"",sources:[c],sourcesContent:[v]}}return function e(n,a){if(n){for(var o in n)if("range"!==o&&"loc"!==o){var h=n[o];if(Array.isArray(h))for(var u=0,c=h.length;u<c;u++)e(h[u],n);else h&&"object"==typeof h&&e(h,n)}switch(n.type){case"UnaryExpression":if(n.operator in m&&"Literal"!==n.argument.type){var l=r(n.argument);s(n,'$__("'+n.operator+'", '+l+")")}break;case"BinaryExpression":if(n.operator in _&&"Literal"!==n.left.type){var f=r(n.left),d=r(n.right),p=function(e,n){return t.substring(i(e.range[1]),i(n.range[0]))}(n.left,n.right),g=n.operator;s(n,"__$__("+f+","+p.replace(new RegExp("\\"+g),'"'+g+'"')+", "+d+")")}break;case"UpdateExpression":case"AssignmentExpression":var v=a&&a.type;if(!("ForStatement"===v||"BinaryExpression"===v&&/^[=!<>]/.test(a.operator)||"MemberExpression"===v&&a.computed))if("UpdateExpression"===n.type){var y=(l=r(n.argument))+" = "+(x="__$__("+l+', "'+n.operator[0]+'", 1)');n.prefix?y="("+y+")":"AssignmentExpression"!==v&&"VariableDeclarator"!==v&&"BinaryExpression"!==v||(r(a.left||a.id)===l&&(y=x),y=l+"; "+y),s(n,y)}else if(/^.=$/.test(n.operator)&&"Literal"!==n.left.type){f=r(n.left),d=r(n.right);var x=f+" = __$__("+f+', "'+n.operator[0]+'", '+d+")";s(n,/^\(.*\)$/.test(r(n))?"("+x+")":x)}break;case"ExportDefaultDeclaration":s({range:[n.start,n.declaration.start]},"module.exports = ");break;case"ExportNamedDeclaration":var b=n.declaration,w=n.specifiers;if(b){var S=b.declarations;S&&(S.forEach((function(t){s(t,"module.exports."+r(t))})),s({range:[n.start,b.start+b.kind.length]},""))}else if(w){var C=w.map((function(t){var e=r(t);return"module.exports."+e+" = "+e+"; "})).join("");C&&s(n,C)}}}}(g(t,{ranges:!0,preserveParens:!0,sourceType:"module"})),o&&(d&&(t=new Array(x+1).join("\n")+t),/^(inline|both)$/.test(p)&&(t+="\n//# sourceMappingURL=data:application/json;base64,"+a.btoa(unescape(encodeURIComponent(JSON.stringify(o))))),t+="\n//# sourceURL="+(c||"paperscript")),{url:c,source:v,code:t,map:o}}function C(t,e,n){lt=e;var i,r=e.getView(),s=/\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(t)&&!/\bnew\s+Tool\b/.test(t)?new rt:null,a=s?s._events:[],o=["onFrame","onResize"].concat(a),h=[],l=[],f="object"==typeof t?t:S(t,n);function d(e,n){for(var i in e)!n&&/^_/.test(i)||!new RegExp("([\\b\\s\\W]|^)"+i.replace(/\$/g,"\\$")+"\\b").test(t)||(h.push(i),l.push(e[i]))}t=f.code,d({__$__:b,$__:w,paper:e,tool:s},!0),d(e),t="var module = { exports: {} }; "+t,(m=c.each(o,(function(e){new RegExp("\\s+"+e+"\\b").test(t)&&(h.push(e),this.push("module.exports."+e+" = "+e+";"))}),[]).join("\n"))&&(t+="\n"+m),t+="\nreturn module.exports;";var p=lt.agent;if(u&&(p.chrome||p.firefox&&p.versionNumber<40)){var g=u.createElement("script"),_=u.head||u.getElementsByTagName("head")[0];p.firefox&&(t="\n"+t),g.appendChild(u.createTextNode("document.__paperscript__ = function("+h+") {"+t+"\n}")),_.appendChild(g),i=u.__paperscript__,delete u.__paperscript__,_.removeChild(g)}else i=Function(h,t);var m,y=(m=i&&i.apply(e,l))||{};return c.each(a,(function(t){var e=y[t];e&&(s[t]=e)})),r&&(y.onResize&&r.setOnResize(y.onResize),r.emit("resize",{size:r.size,delta:new v}),y.onFrame&&r.setOnFrame(y.onFrame),r.requestUpdate()),m}function k(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==f.getAttribute(t,"ignore")){var e=f.getAttribute(t,"canvas"),n=u.getElementById(e),i=t.src||t.getAttribute("data-src"),r=f.hasAttribute(t,"async");if(!n)throw new Error('Unable to find canvas with id "'+e+'"');var s=f.get(n.getAttribute("data-paper-scope"))||(new f).setup(n);return n.setAttribute("data-paper-scope",s._id),i?at.request({url:i,async:r,mimeType:"text/plain",onLoad:function(t){C(t,s,i)}}):C(t.innerHTML,s,t.baseURI),t.setAttribute("data-paper-ignore","true"),s}}function P(){c.each(u&&u.getElementsByTagName("script"),k)}return v.inject(x),y.inject(x),G.inject(x),h&&("complete"===u.readyState?setTimeout(P):$.add(h,{load:P})),{compile:S,execute:C,load:function(t){return t?k(t):P()},parse:g,calculateBinary:b,calculateUnary:w}}.call(this);var lt=new(f.inject(c.exports,{Base:c,Numerical:g,Key:et,DomEvent:$,DomElement:Q,document:u,window:h,Symbol:M,PlacedSymbol:O}));return lt.agent.node&&n(37)(lt),(s="function"==typeof(r=lt)?r.call(e,n,e,t):r)===o||(t.exports=s),lt}).call(this,"object"==typeof self?self:null)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(17);e.a=i.el2("a"),e.abbr=i.el2("abbr"),e.address=i.el2("address"),e.applet=i.el2("applet"),e.area=i.el2("area"),e.article=i.el2("article"),e.aside=i.el2("aside"),e.audio=i.el2("audio"),e.b=i.el2("b"),e.base=i.el2("base"),e.basefont=i.el2("basefont"),e.bdi=i.el2("bdi"),e.bdo=i.el2("bdo"),e.blockquote=i.el2("blockquote"),e.body=i.el2("body"),e.br=i.el2("br"),e.button=i.el2("button"),e.canvas=i.el2("canvas"),e.caption=i.el2("caption"),e.cite=i.el2("cite"),e.code=i.el2("code"),e.col=i.el2("col"),e.colgroup=i.el2("colgroup"),e.data=i.el2("data"),e.datalist=i.el2("datalist"),e.dd=i.el2("dd"),e.del=i.el2("del"),e.details=i.el2("details"),e.dfn=i.el2("dfn"),e.dialog=i.el2("dialog"),e.dir=i.el2("dir"),e.div=i.el2("div"),e.dl=i.el2("dl"),e.dt=i.el2("dt"),e.em=i.el2("em"),e.embed=i.el2("embed"),e.fieldset=i.el2("fieldset"),e.figcaption=i.el2("figcaption"),e.figure=i.el2("figure"),e.font=i.el2("font"),e.footer=i.el2("footer"),e.form=i.el2("form"),e.frame=i.el2("frame"),e.frameset=i.el2("frameset"),e.h1=i.el2("h1"),e.h2=i.el2("h2"),e.h3=i.el2("h3"),e.h4=i.el2("h4"),e.h5=i.el2("h5"),e.h6=i.el2("h6"),e.head=i.el2("head"),e.header=i.el2("header"),e.hgroup=i.el2("hgroup"),e.hr=i.el2("hr"),e.html=i.el2("html"),e.i=i.el2("i"),e.iframe=i.el2("iframe"),e.img=i.el2("img"),e.input=i.el2("input"),e.ins=i.el2("ins"),e.kbd=i.el2("kbd"),e.label=i.el2("label"),e.legend=i.el2("legend"),e.li=i.el2("li"),e.link=i.el2("link"),e.listing=i.el2("listing"),e.main=i.el2("main"),e.map=i.el2("map"),e.mark=i.el2("mark"),e.marquee=i.el2("marquee"),e.menu=i.el2("menu"),e.meta=i.el2("meta"),e.meter=i.el2("meter"),e.nav=i.el2("nav"),e.noscript=i.el2("noscript"),e.object=i.el2("object"),e.ol=i.el2("ol"),e.optgroup=i.el2("optgroup"),e.option=i.el2("option"),e.output=i.el2("output"),e.p=i.el2("p"),e.param=i.el2("param"),e.picture=i.el2("picture"),e.pre=i.el2("pre"),e.progress=i.el2("progress"),e.q=i.el2("q"),e.rp=i.el2("rp"),e.rt=i.el2("rt"),e.ruby=i.el2("ruby"),e.s=i.el2("s"),e.samp=i.el2("samp"),e.script=i.el2("script"),e.section=i.el2("section"),e.select=i.el2("select"),e.slot=i.el2("slot"),e.small=i.el2("small"),e.source=i.el2("source"),e.span=i.el2("span"),e.strong=i.el2("strong"),e.style=i.el2("style"),e.sub=i.el2("sub"),e.summary=i.el2("summary"),e.sup=i.el2("sup"),e.table=i.el2("table"),e.tbody=i.el2("tbody"),e.td=i.el2("td"),e.template=i.el2("template"),e.textarea=i.el2("textarea"),e.tfoot=i.el2("tfoot"),e.th=i.el2("th"),e.thead=i.el2("thead"),e.time=i.el2("time"),e.title=i.el2("title"),e.tr=i.el2("tr"),e.track=i.el2("track"),e.u=i.el2("u"),e.ul=i.el2("ul"),e.varEl=i.el2("var"),e.video=i.el2("video"),e.wbr=i.el2("wbr"),e.xmp=i.el2("xmp")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(18),r=n(11),s=n(42);e.removeNode=function(t){var e=t;e&&e.onblur&&(e.onblur=null),t&&void 0!==t.ownerDocument&&t.parentElement&&t.parentElement.removeChild(t)},e.insertFBefore=function(t){return function(e){null!=t.parentElement&&t.parentElement.insertBefore(e,t)}},e.domChildToTemplate=function(t){return"string"==typeof t||"function"==typeof t||void 0===t?s.text(t):t},e.processAttribute=function(t,e,n,s){var a=i.htmlAttributeMap[e]||r.setAttribute;if("function"==typeof n)if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var o=function(i){var r=n(i);a(t,e,r)};s.push(o)}else{var h=void 0;o=function(i){var r=n(i);r!==h&&(a(t,e,r),String(r).length<5e4&&(h=r))};s.push(o)}else a(t,e,n);return s},e.processEvent=function(t,e,n,i,r){var s;return t[e]=function(e){var r=n(s,e,t);void 0!==r&&i(r)},r.push((function(t){s=t})),r},e.processStyle=function(t,e,n,i){var s;"function"==typeof n?i.push((function(i){var a=n(i);a!==s&&(r.setOneStyle(t,e,a),s=a)})):r.setOneStyle(t,e,n);return i},e.containerSize=function(t){for(var e=[],n=0;n<t.children.length;n++){var i=t.children[n];e[n]=i.style.display,i.style.display="none"}var r={width:t.offsetWidth,height:t.offsetHeight};for(n=0;n<t.children.length;n++){(i=t.children[n]).style.display=e[n]}return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.map=function(t,e){for(var n=e.length,i=new Array(n),r=0;r<n;r++)i[r]=t(e[r]);return i},e.flatMap=function(t,e){for(var n=new Array,i=0,r=e;i<r.length;i++){var s=r[i];n.push.apply(n,t(s))}return n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(38),r=n(15),s=function(){function t(t,e){this.property=t,this.reducer=e,this.observable=this.emitter=r.Emitter.ofThree()}return t.ofState=function(e){return new t(new i.Property(e.state,e.equal),e.reducer)},t.prototype.process=function(t){var e=this.reducer(this.property.get(),t),n=this.property.set(e);return this.emitter.emit(e,t,n),n},t}();e.Store=s},function(t,e,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),s=function(){function t(t,e,n){this.path=t,this.matcher=e,this.refId=n}return t.prototype.render=function(t,e){var n=t.withAppendToReference(this.refId),i=n.ctx,s=n.ref,a=this.path.reduce((function(t,e){return t[e]}),e),o=this.matcher[a].render(i,e),h=this.matcher,u=this.path;return{change:function(t){var e=u.reduce((function(t,e){return t[e]}),t);e===a?o.change(t):(o.destroy(),a=e,o=h[e].render(i,t))},destroy:function(){r.removeNode(s),o.destroy()},request:function(t){o.request(t)}}},t}();e.MatchTemplate=s,e.match=function(t,e,n){return new s(t,Object.keys(e).reduce((function(t,n){var s;return i(i({},t),((s={})[n]=r.domChildToTemplate(e[n]),s))}),{}),n||"t:match")},e.matchKind=function(t){return e.match(["kind"],t)};var a=function(){function t(t,e,n,i){this.condition=t,this.trueTemplate=e,this.falseTemplate=n,this.refId=i}return t.prototype.render=function(t,e){var n=t.withAppendToReference(this.refId),i=n.ctx,s=n.ref,a=this.condition,o=this.trueTemplate,h=this.falseTemplate,u=a(e),c=u?o.render(i,e):h.render(i,e);return{change:function(t){var e=a(t);e===u?c.change(t):(c.destroy(),u=e,c=e?o.render(i,t):h.render(i,t))},destroy:function(){r.removeNode(s),c.destroy()},request:function(t){c.request(t)}}},t}();e.MatchBoolTemplate=a,e.matchBool=function(t){return new a(t.condition,r.domChildToTemplate(t.true),r.domChildToTemplate(t.false),t.refId||"t:match-bool")};var o=function(){function t(t,e,n,i){this.path=t,this.matchers=e,this.orElse=n,this.refId=i}return t.prototype.render=function(t,e){var n=this,i=this.matchers,s=this.orElse,a=t.withAppendToReference(this.refId),o=a.ctx,h=a.ref,u=this.path.reduce((function(t,e){return t[e]}),e),c=(this.matchers[u]||this.orElse).render(o,e);return{change:function(t){var e=n.path.reduce((function(t,e){return t[e]}),t);if(e===u)c.change(t);else{c.destroy(),u=e;var r=i[e]||s;c=r.render(o,t)}},destroy:function(){r.removeNode(h),c.destroy()},request:function(t){c.request(t)}}},t}();e.MatchValueTemplate=o,e.matchValue=function(t,e,n,s){return new o(t,Object.keys(e).reduce((function(t,n){var s;return i(i({},t),((s={})[n]=r.domChildToTemplate(e[n]),s))}),{}),r.domChildToTemplate(n),s||"t:match-value")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(16),r=function(){function t(t,e,n,i){this.createItem=t,this.changeItem=e,this.destroy=n,this.request=i}return t.prototype.render=function(t,e){var n={value:void 0},i=this.createItem(n,t)(e),r=i.item,s=i.views;return t.append(r),{change:this.changeItem(n,t,r,s),destroy:this.destroy(n,t,r,s),request:this.request(n,t,r,s)}},t}();e.ItemTemplate=r,e.createItem=function(t,e,n){var s=e.afterchange,a=e.afterrender,o=e.beforechange,h=e.beforedestroy,u=i.removeFields(e,"afterchange","afterrender","beforechange","beforedestroy"),c=Object.keys(u).map((function(t){var e=u[t];if("on"===t.substring(0,2)){var n=e;return{kind:"dynamic",f:function(e,i,r){i[t]=function(t){var s=n(e,t,i,r.project);void 0!==s&&r.dispatch(s)}}}}if("function"==typeof e){var i=e;return{kind:"dynamic",f:function(e,n){var r=n,s=i(e);r[t]=s}}}return{kind:"static",f:function(n,i){return i[t]=e}}})),l=c.filter((function(t){return"dynamic"===t.kind})).map((function(t){return t.f}));return new r((function(e,i){return function(r){var s,o=t(r);c.forEach((function(t){return t.f(r,o,i)}));var h=i.withAppend((function(t){return o.addChild(t)})),u=null===(s=n)||void 0===s?void 0:s.map((function(t){return t.render(h,r)}));return a&&(e.value=a(r,o,i)),{item:o,views:u}}}),(function(t,e,n,i){return function(r){o&&(t.value=o(r,n,e,t.value)),i&&i.forEach((function(t){return t.change(r)})),l.forEach((function(t){return t(r,n,e)})),s&&(t.value=s(r,n,e,t.value))}}),(function(t,e,n,i){return function(){h&&h(n,e,t.value),n.remove(),i&&i.forEach((function(t){return t.destroy()}))}}),(function(t,n,i,r){return function(s){var a;null===(a=r)||void 0===a||a.forEach((function(t){return t.request(s)})),void 0!==e.request&&e.request(s,i,n,t.value)}}))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),r=function(){function t(t,e,n){this.store=t,this.children=e,this.delayed=n}return t.prototype.render=function(t,e){var n;if(this.delayed){var r=!0;n=function(t){r&&(r=!1,setTimeout((function(){u.change(t),r=!0})))}}else n=function(t){u.change(t)};var s=this.store,a=s.property;a.observable.on(n);var o=t.withDispatch((function(t){s.process(t)})),h=i.map((function(t){return t.render(o,a.get())}),this.children),u={change:function(t){s.property.set(t);for(var e=0,n=h;e<n.length;e++){n[e].change(t)}},destroy:function(){a.observable.off(n);for(var t=0,e=h;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=h;e<n.length;e++){n[e].request(t)}}};return a.set(e),u},t}();e.PaperComponentTemplate=r,e.component=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new r(t.store,e,t.delayed||!1)}},function(t,e,n){"use strict";var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,r++)i[r]=s[a];return i};Object.defineProperty(e,"__esModule",{value:!0});var r=n(40),s=n(41);e.iterate=function(t){for(var e,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];return r.mapState({map:function(n){return e=n,t.getArray(n)}},s.until.apply(void 0,i([{repeatUntil:function(t,n){return t[n]&&[t[n],e,n]}}],n)))},e.iterateItems=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return r.mapState({map:function(e){return t.getArray(e)}},s.until.apply(void 0,i([{repeatUntil:function(t,e){return t[e]}}],e)))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,n){this.mergeStates=t,this.propagate=e,this.child=n}return t.prototype.render=function(t,e){var n=this,i=this.mergeStates&&this.mergeStates(e,this.child.store.property.get())||this.child.store.property.get(),r=this.child.render(t.withDispatch((function(){})),i);return this.child.store.observable.on((function(i,r){n.propagate({action:r,innerState:i,outerState:e,dispatchInner:function(t){return n.child.store.process(t)},dispatchOuter:t.dispatch})})),{change:function(t){var e=n.mergeStates(t,n.child.store.property.get());void 0!==e&&r.change(e)},destroy:function(){r.destroy()},request:function(t){r.request(t)}}},t}();e.PaperAdapterTemplate=i,e.adapter=function(t,e){return new i(t.mergeStates||function(t,e){},t.propagate||function(){},e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.compose=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return function(n,i){return e.reduce((function(t,e){return e(t,i)}),t(n,i))}},e.matchReduce=function(t,e){return function(n,i){var r=i[t];return e[r](n,i)}},e.reduceOnKind=function(t){return function(e,n){var i=n.kind;return t[i](e,n)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3);function r(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}e.setOneStyle=function(t,e,n){var i=t.style;i[e]=null==n?null:n},e.setAttribute=r,e.setProperty=function(t,e,n){var i=t;i[e]=null==n?null:n},e.setStyleAttribute=function(t,e,n){if(null==n)t.removeAttribute(e);else if("string"==typeof n)r(t,e,n);else{var s=i.map((function(t){return t+": "+n[t]+";"}),Object.keys(n)).join(" ");r(t,e,s.length&&s||null)}},e.setBoolProperty=function(t,e,n){var i=t;if(null==n)i[e]=null;else{var r=!0===n||"true"===n;i[e]=r}},e.setEnumBoolAttribute=function(t,e,n){r(t,e,!0===n||"true"===n?"true":!1===n?"false":null)},e.setBoolAttribute=function(t,e,n){r(t,e,!0===n||"true"===n?"":null)},e.setCommaSeparated=function(t,e,n){Array.isArray(n)?r(t,e,n.join(", ")||null):r(t,e,n&&String(n)||null)},e.setSpaceSeparated=function(t,e,n){Array.isArray(n)?r(t,e,n.join(" ")||null):r(t,e,n&&String(n)||null)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(3),s=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,i=this.map,s=i(e),a=r.map((function(e){return e.render(t,s)}),n);return{change:function(t){for(var e=i(t),n=0,r=a;n<r.length;n++){r[n].change(e)}},destroy:function(){for(var t=0,e=a;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=a;e<n.length;e++){n[e].request(t)}}}},t}();e.MapStateTemplate=s,e.mapState=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s(t.map,r.map(i.domChildToTemplate,e))},e.mapStateAndKeep=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s((function(e){return[t.map(e),e]}),r.map(i.domChildToTemplate,e))};var a=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,i=this.map,s=t.conditionalMapAction(i),a=r.map((function(t){return t.render(s,e)}),n);return{change:function(t){for(var e=0,n=a;e<n.length;e++){n[e].change(t)}},destroy:function(){for(var t=0,e=a;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=a;e<n.length;e++){n[e].request(t)}}}},t}();e.MapActionTemplate=a,e.mapAction=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new a(t.map,r.map(i.domChildToTemplate,e))};var o=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,i=this.map,s=r.map((function(n){return n.render(t,e)}),n);return{change:function(t){for(var e=0,n=s;e<n.length;e++){n[e].change(t)}},destroy:function(){for(var t=0,e=s;t<e.length;t++){e[t].destroy()}},request:function(t){var e=i(t);void 0!==e&&s.forEach((function(t){return t.request(e)}))}}},t}();e.MapQueryTemplate=o,e.mapQuery=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new o(t.map,r.map(i.domChildToTemplate,e))},e.mapQueryConditional=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new o(t.map,r.map(i.domChildToTemplate,e))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(20),r=n(16);e.tool=function(t){return{render:function(e,n){var s,a=new e.scope.Tool;t.afterrender&&(s=t.afterrender(n,a,e));var o=i.resolveAttribute(t.active)(n);void 0!==o&&!0!==o||a.activate();var h=[];h.push((function(t){return n=t})),"function"==typeof t.active&&h.push((function(e){(0,t.active)(e)&&a.activate()}));var u=a;return r.keys(t).forEach((function(r){if(r.startsWith("on")){var s=t[r];u[r]=function(t){var i=s(n,t,a,e.project);void 0!==i&&e.dispatch(i)}}else{var o=i.resolveAttribute(t[r]);if(u[r]=o,"function"==typeof t[r]){var c=r;h.push((function(e){var n=t[c];u[c]=n(e)}))}}})),{change:function(n){t.beforechange&&(s=t.beforechange(n,a,e,s)),h.forEach((function(t){return t(n)})),t.afterchange&&(s=t.afterchange(n,a,e,s))},destroy:function(){t.beforedestroy&&t.beforedestroy(a,e,s),a.remove()},request:function(t){}}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(6);e.path=function(t){return r.createItem((function(e){return void 0!==t.args?new i.Path(t.args):new i.Path([])}),t)},e.pathLine=function(t){return r.createItem((function(e){return new i.Path.Line(t.args)}),t)},e.pathCircle=function(t){return r.createItem((function(e){return new i.Path.Circle(t.args)}),t)},e.pathRectangle=function(t){return r.createItem((function(e){return new i.Path.Rectangle(t.args)}),t)},e.pathEllipse=function(t){return r.createItem((function(e){return new i.Path.Ellipse(t.args)}),t)},e.pathArc=function(t){return r.createItem((function(e){return new i.Path.Arc(t.args)}),t)},e.pathRegularPolygon=function(t){return r.createItem((function(e){return new i.Path.RegularPolygon(t.args)}),t)},e.pathStar=function(t){return r.createItem((function(e){return new i.Path.Star(t.args)}),t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){this.listeners=[]}return t.ofOne=function(){return new t},t.ofTwo=function(){return new t},t.ofThree=function(){return new t},t.prototype.emit=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0,i=this.listeners;n<i.length;n++){var r=i[n];r.apply(void 0,t)}},t.prototype.on=function(t){this.listeners.push(t)},t.prototype.off=function(t){var e=this.listeners.indexOf(t);return!(e<0)&&(this.listeners.splice(e,1),!0)},t.prototype.once=function(t){var e=this,n=function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];e.off(n),t.apply(void 0,i)};this.on(n)},t}();e.Emitter=i,e.debounce=function(t){return function(e){var n,i=!1;return function(){for(var r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];n=r,i||(i=!0,setTimeout((function(){i=!1,e.apply(void 0,n)}),t))}}},e.nextFrame=function(t){var e,n=!1;return function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];e=i,n||(n=!0,requestAnimationFrame((function(){n=!1,t.apply(void 0,e)})))}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.keys=function(t){return Object.keys(t)},e.removeFields=function(t){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return e.keys(t).reduce((function(e,i){return n.indexOf(i)<0&&(e[i]=t[i]),e}),{})},e.merge=function(t,e){return Object.assign({},t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(3),s=n(18),a=function(t,e,n){return function(i,r){return t(i,e,n,r)}},o=function(){function t(t,e,n,i,r,s,a,o,h,u){this.createElement=t,this.attrs=e,this.events=n,this.styles=i,this.afterrender=r,this.beforechange=s,this.afterchange=a,this.beforedestroy=o,this.respond=h,this.children=u}return t.prototype.render=function(t,e){for(var n=this,s=this.createElement(t.doc),o=void 0,h=[],u=0,c=this.attrs;u<c.length;u++){var l=c[u];i.processAttribute(s,l.name,l.value,h)}for(var f=0,d=this.events;f<d.length;f++){l=d[f];i.processEvent(s,l.name,l.value,t.dispatch,h)}for(var p=0,g=this.styles;p<g.length;p++){l=g[p];i.processStyle(s,l.name,l.value,h)}for(var _=0,v=h;_<v.length;_++){(0,v[_])(e)}var m=t.withAppend((function(t){return s.appendChild(t)})).withParent(s),y=r.map((function(t){return t.render(m,e)}),this.children);t.append(s),this.afterrender&&(o=function(t,e,n,i){return void 0!==typeof t?t(i,e,n):void 0}(this.afterrender,s,t,e));var x=r.map((function(t){return function(e){return t.change(e)}}),y);if(h.push.apply(h,x),this.beforechange){var b=a(this.beforechange,s,t),w=function(t){o=b(t,o)};h.unshift(w)}if(this.afterchange){var S=a(this.afterchange,s,t);w=function(t){o=S(t,o)};h.push(w)}var C=this.beforedestroy&&function(){return n.beforedestroy(s,t,o)},k=this.respond;return{change:function(t){for(var e=0,n=h;e<n.length;e++){(0,n[e])(t)}},destroy:function(){C&&C(),i.removeNode(s);for(var t=0,e=y;t<e.length;t++){e[t].destroy()}},request:function(e){k&&(o=k(e,s,t,o));for(var n=0,i=y;n<i.length;n++){i[n].request(e)}}}},t}();function h(t){return r.map((function(e){var n=e.toLowerCase();return{name:n=s.attributeNameMap[n]||n,value:t[e]}}),Object.keys(t||{}))}function u(t){return r.map((function(e){return{name:"on"+e.toLowerCase(),value:t[e]}}),Object.keys(t||{}))}function c(t){return r.map((function(e){return{name:e,value:t[e]}}),Object.keys(t||{}))}e.DOMElement=o;var l=function(t){return function(e){return e.createElement(t)}};e.el=function(t,e){for(var n=[],s=2;s<arguments.length;s++)n[s-2]=arguments[s];return new o(l(t),h(e.attrs),u(e.events),c(e.styles),e.afterrender,e.beforechange,e.afterchange,e.beforedestroy,e.respond,r.map(i.domChildToTemplate,n))},e.el2=function(t){return function(e){for(var n=[],s=1;s<arguments.length;s++)n[s-1]=arguments[s];return new o(l(t),h(e.attrs),u(e.events),c(e.styles),e.afterrender,e.beforechange,e.afterchange,e.beforedestroy,e.respond,r.map(i.domChildToTemplate,n))}},e.defaultNamespaces={svg:"http://www.w3.org/2000/svg"};var f=function(t,e){return function(n){return n.createElementNS(t,e)}};e.elNS=function(t,n,s){for(var a=[],l=3;l<arguments.length;l++)a[l-3]=arguments[l];var d=e.defaultNamespaces[t]||t;return new o(f(d,n),h(s.attrs),u(s.events),c(s.styles),s.afterrender,s.beforechange,s.afterchange,s.beforedestroy,s.respond,r.map(i.domChildToTemplate,a))},e.elNS2=function(t,e){return function(n){for(var s=[],a=1;a<arguments.length;a++)s[a-1]=arguments[a];return new o(f(t,e),h(n.attrs),u(n.events),c(n.styles),n.afterrender,n.beforechange,n.afterchange,n.beforedestroy,n.respond,r.map(i.domChildToTemplate,s))}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(11);e.attributeNameMap={acceptcharset:"accept-charset",asattr:"as",classname:"class",httpequiv:"http-equiv",htmlfor:"for"},e.htmlAttributeMap={"accept-charset":i.setSpaceSeparated,class:i.setSpaceSeparated,acceptcharset:i.setSpaceSeparated,async:i.setBoolAttribute,autofocus:i.setBoolAttribute,autoplay:i.setBoolAttribute,checked:i.setBoolProperty,contenteditable:i.setEnumBoolAttribute,controls:i.setBoolAttribute,default:i.setBoolAttribute,defer:i.setBoolAttribute,disabled:i.setBoolAttribute,draggable:i.setEnumBoolAttribute,formnovalidate:i.setBoolAttribute,headers:i.setSpaceSeparated,hidden:i.setBoolAttribute,ismap:i.setBoolAttribute,itemscope:i.setBoolAttribute,loop:i.setBoolAttribute,multiple:i.setBoolProperty,muted:i.setBoolProperty,nomodule:i.setBoolAttribute,novalidate:i.setBoolAttribute,open:i.setBoolAttribute,ping:i.setSpaceSeparated,playsinline:i.setBoolAttribute,readonly:i.setBoolAttribute,rel:i.setSpaceSeparated,required:i.setBoolAttribute,reversed:i.setBoolAttribute,selected:i.setBoolProperty,sizes:i.setCommaSeparated,srcset:i.setCommaSeparated,style:i.setStyleAttribute,typemustmatch:i.setBoolAttribute,value:i.setProperty}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(44),r=function(){function t(t,e,n,i){this.doc=t,this.append=e,this.parent=n,this.dispatch=i}return t.fromElement=function(e,n){return new t(e.ownerDocument||window&&window.document,(function(t){return e.appendChild(t)}),e,n)},t.prototype.mapAction=function(e){var n=this;return new t(this.doc,this.append,this.parent,(function(t){return n.dispatch(e(t))}))},t.prototype.conditionalMapAction=function(e){var n=this;return new t(this.doc,this.append,this.parent,(function(t){var i=e(t);void 0!==i&&n.dispatch(i)}))},t.prototype.withAppendToReference=function(t){var e=this.doc.createComment(t||"t:ref");return this.append(e),{ctx:this.withAppend(i.insertFBefore(e)),ref:e}},t.prototype.withAppend=function(e){return new t(this.doc,e,this.parent,this.dispatch)},t.prototype.withParent=function(e){return new t(this.doc,this.append,e,this.dispatch)},t.prototype.withDispatch=function(e){return new t(this.doc,this.append,this.parent,e)},t}();e.DOMContext=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.resolveAttribute=function(t){return"function"==typeof t?t:function(e){return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(6);e.circle=function(t){return r.createItem((function(e){return void 0!==t.args?new i.Shape.Circle(t.args):new i.Shape.Circle(new i.Point(0,0),0)}),t)},e.rectangle=function(t){return r.createItem((function(e){return void 0!==t.args?new i.Shape.Rectangle(t.args):new i.Shape.Rectangle(new i.Point(0,0),new i.Point(0,0))}),t)},e.ellipse=function(t){return r.createItem((function(e){return void 0!==t.args?new i.Shape.Ellipse(t.args):new i.Shape.Ellipse({center:new i.Point(0,0),size:new i.Size(0,0)})}),t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(6);e.layer=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return r.createItem((function(e){return void 0!==t.args?new i.Layer(t.args):new i.Layer([])}),t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=n(6);e.symbolItem=function(t){return r.createItem((function(e){return new i.SymbolItem(t.definition)}),t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.f=t}return t.prototype.render=function(t,e){return this.f().render(t,e)},t}();e.PaperLazyTemplate=i,e.lazy=function(t){return new i(t)}},function(t,e,n){"use strict";var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,r++)i[r]=s[a];return i};Object.defineProperty(e,"__esModule",{value:!0});var r=n(43),s=n(19);e.htmlPortal=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return{render:function(n,a){var o=n.canvas.ownerDocument,h=new s.DOMContext(o,(function(){}),n.canvas,n.dispatch),u=r.portal.apply(void 0,i([{append:function(e,n){t.append(e,n)},getParent:t.getParent}],e)).render(h,a);return{change:function(t){u.change(t)},destroy:function(){u.destroy()},request:function(t){u.request(t)}}}}},e.htmlPortalWithSelector=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return e.htmlPortal.apply(void 0,i([{getParent:function(e){var n=e.querySelector(t.selector);if(!n)throw new Error("selector doesn't match any element: \""+t.selector+'"');return n},append:function(e,n){e.querySelector(t.selector).appendChild(n)}}],n))},e.htmlHeadPortal=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.htmlPortal.apply(void 0,i([{getParent:function(t){return t.head},append:function(t,e){return t.head.appendChild(e)}}],t))},e.htmlBodyPortal=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.htmlPortal.apply(void 0,i([{getParent:function(t){return t.body},append:function(t,e){return t.body.appendChild(e)}}],t))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.match=function(t,e,n){return e[n[t]](n)},e.deepMatch=function(t,e,n){return e[t.reduce((function(t,e){return t[e]}),n)](n)},e.createMatch=function(t){return function(e){return function(n){var i=n[t];return e[i](n)}}},e.createDeepMatch=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return function(n){var i=t.reduce((function(t,e){return t[e]}),n);return e[i](n)}}},e.matchKind=e.createMatch("kind")},function(t,e,n){"use strict";var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,r++)i[r]=s[a];return i};Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),s=n(45);e.iterate=function(t){for(var e,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];return r.mapState({map:function(n){return e=n,t.getArray(n)}},s.until.apply(void 0,i([{repeatUntil:function(t,n){return t[n]&&[t[n],e,n]}}],n)))},e.iterateItems=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return r.mapState({map:function(e){return t.getArray(e)}},s.until.apply(void 0,i([{repeatUntil:function(t,e){return t[e]}}],e)))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(17),r=n(0),s=n(46),a=n(20);e.project=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return i.el("canvas",{attrs:{width:t.width,height:t.height},afterrender:function(n,i,o){var h=t.scope||r.PaperScope.get(0),u=[];h.setup(i),h.install(window);var c=a.resolveAttribute(t.active)(n);void 0!==c&&!0!==c||h.activate();var l=h.project;void 0!==c&&!0!==c||l.activate(),"function"==typeof t.active&&u.push((function(e){(0,t.active)(e)&&(h.activate(),l.activate())})),"function"==typeof t.width&&u.push((function(e){var n=t.width;l.view.viewSize.width=n(e)||null})),"function"==typeof t.height&&u.push((function(e){var n=t.height;l.view.viewSize.height=n(e)||null}));var f=l.activeLayer,d=new s.PaperContext(i,h,l,(function(t){return f.addChild(t)}),(function(t){return o.dispatch(t)})),p=e.map((function(t){return t.render(d,n)}));return{context:d,views:p,derived:u}},afterchange:function(t,e,n,i){var r,s;return null===(r=i)||void 0===r||r.derived.forEach((function(e){return e(t)})),null===(s=i)||void 0===s||s.views.forEach((function(e){return e.change(t)})),i},beforedestroy:function(t,e,n){if(void 0!==typeof n){var i=n,r=i.context;i.views.forEach((function(t){return t.destroy()})),r.project.remove()}},respond:function(e,n,i,r){return void 0!==typeof r?(r.views.forEach((function(t){return t.request(e)})),t.respond&&t.respond(e,n,i,r),r):void 0}})}},function(t,e,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.path=t,this.matcher=e}return t.prototype.render=function(t,e){var n=this.path.reduce((function(t,e){return t[e]}),e),i=this.matcher[n].render(t,e),r=this.matcher,s=this.path;return{change:function(e){var a=s.reduce((function(t,e){return t[e]}),e);a===n?i.change(e):(i.destroy(),n=a,i=r[a].render(t,e))},destroy:function(){i.destroy()},request:function(t){i.request(t)}}},t}();e.MatchTemplate=r,e.match=function(t,e){return new r(t,Object.keys(e).reduce((function(t,n){var r;return i(i({},t),((r={})[n]=e[n],r))}),{}))},e.matchKind=function(t){return e.match(["kind"],t)};var s=function(){function t(t,e,n){this.condition=t,this.trueTemplate=e,this.falseTemplate=n}return t.prototype.render=function(t,e){var n=this.condition,i=this.trueTemplate,r=this.falseTemplate,s=n(e),a=s?i.render(t,e):r.render(t,e);return{change:function(e){var o=n(e);o===s?a.change(e):(a.destroy(),s=o,a=o?i.render(t,e):r.render(t,e))},destroy:function(){a.destroy()},request:function(t){a.request(t)}}},t}();e.MatchBoolTemplate=s,e.matchBool=function(t){return new s(t.condition,t.true,t.false)};var a=function(){function t(t,e,n){this.path=t,this.matchers=e,this.orElse=n}return t.prototype.render=function(t,e){var n=this,i=this.matchers,r=this.orElse,s=this.path.reduce((function(t,e){return t[e]}),e),a=(this.matchers[s]||this.orElse).render(t,e);return{change:function(e){var o=n.path.reduce((function(t,e){return t[e]}),e);if(o===s)a.change(e);else{a.destroy(),s=o;var h=i[o]||r;a=h.render(t,e)}},destroy:function(){a.destroy()},request:function(t){a.request(t)}}},t}();e.MatchValueTemplate=a,e.matchValue=function(t,e,n){return new a(t,Object.keys(e).reduce((function(t,n){var r;return i(i({},t),((r={})[n]=e[n],r))}),{}),n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(47),r=n(19);!function(t){t.renderComponent=function(t){var e=t.el,n=t.component,i=n.store,s=t.document||document,a=e||s.body;return{view:n.render(new r.DOMContext(s,(function(t){return a.appendChild(t)}),a,(function(){})),i.property.get()),store:i}},t.render=function(e){var n=e.el,r=e.store,s=e.document,a=e.template,o=e.delayed,h=i.component({store:r,delayed:o},a);return t.renderComponent({el:n,component:h,document:s})}}(e.Tempo||(e.Tempo={}))},function(t,e,n){var i=n(32);"string"==typeof i&&(i=[[t.i,i,""]]);var r={insert:"head",singleton:!1};n(34)(i,r);i.locals&&(t.exports=i.locals)},function(t,e,n){var i=n(33);(t.exports=i(!1)).push([t.i,"html{height:100%}body{height:100%;margin:0;font-family:'Roboto', sans-serif;font-size:15px}.app{width:100%;height:100%;display:flex;flex-direction:column;background-color:#f2f2f2}.app .header{height:50px;background-color:#f2f2f2;display:flex;align-items:center}.app .header .logo{margin-left:6px;flex:initial}.app .header #toolbar{text-align:right;flex:1}.app .header #toolbar .message{color:#666;font-size:12px;display:inline-block;margin-right:5px}.app .header .toolbar-fixed{flex:initial;margin-right:6px}.app .body{flex:1;display:flex}.app .body .sidebar{width:200px;background-color:#f2f2f2}.app .body .main{flex:1;background-color:#fff;overflow:hidden;box-shadow:inset 3px 3px 6px rgba(0,0,0,0.1),inset 0px 0px 50px rgba(0,0,0,0.05)}.app ul{margin:0;list-style:none;padding:0}.app ul li a,.app ul li span{display:block;padding:10px 20px;color:#333;text-transform:capitalize}.app ul li a{text-decoration:none}.app ul li span{background-color:#fff;font-weight:bold}button{box-shadow:inset 0px 1px 0px 0px #ffffff;background:linear-gradient(to bottom, #fff 5%, #f9f9f9 100%);background-color:#ffffff;border-radius:6px;border:1px solid #dcdcdc;display:inline-block;cursor:pointer;color:#666666;font-size:13px;font-weight:bold;padding:6px 24px;text-decoration:none;text-shadow:0px 1px 0px #ffffff;margin:0 4px}button:hover{background:linear-gradient(to bottom, #f2f2f2 5%, #fff 100%);background-color:#f2f2f2}button:active{position:relative;top:1px}\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var r=(a=i,o=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),h="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(h," */")),s=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot).concat(t," */")}));return[n].concat(s).concat([r]).join("\n")}var a,o,h;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i=0;i<t.length;i++){var r=[].concat(t[i]);n&&(r[2]?r[2]="".concat(n," and ").concat(r[2]):r[2]=n),e.push(r)}},e}},function(t,e,n){"use strict";var i,r={},s=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},a=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function o(t,e){for(var n=[],i={},r=0;r<t.length;r++){var s=t[r],a=e.base?s[0]+e.base:s[0],o={css:s[1],media:s[2],sourceMap:s[3]};i[a]?i[a].parts.push(o):n.push(i[a]={id:a,parts:[o]})}return n}function h(t,e){for(var n=0;n<t.length;n++){var i=t[n],s=r[i.id],a=0;if(s){for(s.refs++;a<s.parts.length;a++)s.parts[a](i.parts[a]);for(;a<i.parts.length;a++)s.parts.push(_(i.parts[a],e))}else{for(var o=[];a<i.parts.length;a++)o.push(_(i.parts[a],e));r[i.id]={id:i.id,refs:1,parts:o}}}}function u(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var i=n.nc;i&&(t.attributes.nonce=i)}if(Object.keys(t.attributes).forEach((function(n){e.setAttribute(n,t.attributes[n])})),"function"==typeof t.insert)t.insert(e);else{var r=a(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,i){var r=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=l(e,r);else{var s=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(s,a[e]):t.appendChild(s)}}function d(t,e,n){var i=n.css,r=n.media,s=n.sourceMap;if(r&&t.setAttribute("media",r),s&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var p=null,g=0;function _(t,e){var n,i,r;if(e.singleton){var s=g++;n=p||(p=u(e)),i=f.bind(null,n,s,!1),r=f.bind(null,n,s,!0)}else n=u(e),i=d.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s());var n=o(t,e);return h(n,e),function(t){for(var i=[],s=0;s<n.length;s++){var a=n[s],u=r[a.id];u&&(u.refs--,i.push(u))}t&&h(o(t,e),e);for(var c=0;c<i.length;c++){var l=i[c];if(0===l.refs){for(var f=0;f<l.parts.length;f++)l.parts[f]();delete r[l.id]}}}}},function(t,e){},function(t,e,n){"use strict";n.r(e),n.d(e,"Node",(function(){return ot})),n.d(e,"Parser",(function(){return H})),n.d(e,"Position",(function(){return N})),n.d(e,"SourceLocation",(function(){return B})),n.d(e,"TokContext",(function(){return ct})),n.d(e,"Token",(function(){return Lt})),n.d(e,"TokenType",(function(){return _})),n.d(e,"defaultOptions",(function(){return j})),n.d(e,"getLineInfo",(function(){return z})),n.d(e,"isIdentifierChar",(function(){return g})),n.d(e,"isIdentifierStart",(function(){return p})),n.d(e,"isNewLine",(function(){return k})),n.d(e,"keywordTypes",(function(){return x})),n.d(e,"lineBreak",(function(){return S})),n.d(e,"lineBreakG",(function(){return C})),n.d(e,"nonASCIIwhitespace",(function(){return P})),n.d(e,"parse",(function(){return Vt})),n.d(e,"parseExpressionAt",(function(){return Rt})),n.d(e,"tokContexts",(function(){return lt})),n.d(e,"tokTypes",(function(){return w})),n.d(e,"tokenizer",(function(){return Dt})),n.d(e,"version",(function(){return jt}));var i={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},r="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",s={5:r,"5module":r+" export import",6:r+" const class extends export import super"},a=/^in(stanceof)?$/,o="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",h="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",u=new RegExp("["+o+"]"),c=new RegExp("["+o+h+"]");o=h=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],f=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];function d(t,e){for(var n=65536,i=0;i<e.length;i+=2){if((n+=e[i])>t)return!1;if((n+=e[i+1])>=t)return!0}}function p(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&u.test(String.fromCharCode(t)):!1!==e&&d(t,l)))}function g(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&c.test(String.fromCharCode(t)):!1!==e&&(d(t,l)||d(t,f)))))}var _=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function v(t,e){return new _(t,{beforeExpr:!0,binop:e})}var m={beforeExpr:!0},y={startsExpr:!0},x={};function b(t,e){return void 0===e&&(e={}),e.keyword=t,x[t]=new _(t,e)}var w={num:new _("num",y),regexp:new _("regexp",y),string:new _("string",y),name:new _("name",y),eof:new _("eof"),bracketL:new _("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new _("]"),braceL:new _("{",{beforeExpr:!0,startsExpr:!0}),braceR:new _("}"),parenL:new _("(",{beforeExpr:!0,startsExpr:!0}),parenR:new _(")"),comma:new _(",",m),semi:new _(";",m),colon:new _(":",m),dot:new _("."),question:new _("?",m),arrow:new _("=>",m),template:new _("template"),invalidTemplate:new _("invalidTemplate"),ellipsis:new _("...",m),backQuote:new _("`",y),dollarBraceL:new _("${",{beforeExpr:!0,startsExpr:!0}),eq:new _("=",{beforeExpr:!0,isAssign:!0}),assign:new _("_=",{beforeExpr:!0,isAssign:!0}),incDec:new _("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new _("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:v("||",1),logicalAND:v("&&",2),bitwiseOR:v("|",3),bitwiseXOR:v("^",4),bitwiseAND:v("&",5),equality:v("==/!=/===/!==",6),relational:v("</>/<=/>=",7),bitShift:v("<</>>/>>>",8),plusMin:new _("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:v("%",10),star:v("*",10),slash:v("/",10),starstar:new _("**",{beforeExpr:!0}),_break:b("break"),_case:b("case",m),_catch:b("catch"),_continue:b("continue"),_debugger:b("debugger"),_default:b("default",m),_do:b("do",{isLoop:!0,beforeExpr:!0}),_else:b("else",m),_finally:b("finally"),_for:b("for",{isLoop:!0}),_function:b("function",y),_if:b("if"),_return:b("return",m),_switch:b("switch"),_throw:b("throw",m),_try:b("try"),_var:b("var"),_const:b("const"),_while:b("while",{isLoop:!0}),_with:b("with"),_new:b("new",{beforeExpr:!0,startsExpr:!0}),_this:b("this",y),_super:b("super",y),_class:b("class",y),_extends:b("extends",m),_export:b("export"),_import:b("import",y),_null:b("null",y),_true:b("true",y),_false:b("false",y),_in:b("in",{beforeExpr:!0,binop:7}),_instanceof:b("instanceof",{beforeExpr:!0,binop:7}),_typeof:b("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:b("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:b("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},S=/\r\n?|\n|\u2028|\u2029/,C=new RegExp(S.source,"g");function k(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var P=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,A=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,I=Object.prototype,T=I.hasOwnProperty,E=I.toString;function O(t,e){return T.call(t,e)}var M=Array.isArray||function(t){return"[object Array]"===E.call(t)};function L(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var N=function(t,e){this.line=t,this.column=e};N.prototype.offset=function(t){return new N(this.line,this.column+t)};var B=function(t,e,n){this.start=e,this.end=n,null!==t.sourceFile&&(this.source=t.sourceFile)};function z(t,e){for(var n=1,i=0;;){C.lastIndex=i;var r=C.exec(t);if(!(r&&r.index<e))return new N(n,e-i);++n,i=r.index+r[0].length}}var j={ecmaVersion:10,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function V(t){var e={};for(var n in j)e[n]=t&&O(t,n)?t[n]:j[n];if(e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),M(e.onToken)){var i=e.onToken;e.onToken=function(t){return i.push(t)}}return M(e.onComment)&&(e.onComment=function(t,e){return function(n,i,r,s,a,o){var h={type:n?"Block":"Line",value:i,start:r,end:s};t.locations&&(h.loc=new B(this,a,o)),t.ranges&&(h.range=[r,s]),e.push(h)}}(e,e.onComment)),e}var R=2,D=1|R,F=4,q=8;function U(t,e){return R|(t?F:0)|(e?q:0)}var H=function(t,e,n){this.options=t=V(t),this.sourceFile=t.sourceFile,this.keywords=L(s[t.ecmaVersion>=6?6:"module"===t.sourceType?"5module":5]);var r="";if(!0!==t.allowReserved){for(var a=t.ecmaVersion;!(r=i[a]);a--);"module"===t.sourceType&&(r+=" await")}this.reservedWords=L(r);var o=(r?r+" ":"")+i.strict;this.reservedWordsStrict=L(o),this.reservedWordsStrictBind=L(o+" "+i.strictBind),this.input=String(e),this.containsEsc=!1,n?(this.pos=n,this.lineStart=this.input.lastIndexOf("\n",n-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(S).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=w.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},G={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};H.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},G.inFunction.get=function(){return(this.currentVarScope().flags&R)>0},G.inGenerator.get=function(){return(this.currentVarScope().flags&q)>0},G.inAsync.get=function(){return(this.currentVarScope().flags&F)>0},G.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},G.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},G.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},H.prototype.inNonArrowFunction=function(){return(this.currentThisScope().flags&R)>0},H.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var n=this,i=0;i<t.length;i++)n=t[i](n);return n},H.parse=function(t,e){return new this(e,t).parse()},H.parseExpressionAt=function(t,e,n){var i=new this(n,t,e);return i.nextToken(),i.parseExpression()},H.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(H.prototype,G);var W=H.prototype,Z=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;function K(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}W.strictDirective=function(t){for(;;){A.lastIndex=t,t+=A.exec(this.input)[0].length;var e=Z.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2]))return!0;t+=e[0].length,A.lastIndex=t,t+=A.exec(this.input)[0].length,";"===this.input[t]&&t++}},W.eat=function(t){return this.type===t&&(this.next(),!0)},W.isContextual=function(t){return this.type===w.name&&this.value===t&&!this.containsEsc},W.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},W.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},W.canInsertSemicolon=function(){return this.type===w.eof||this.type===w.braceR||S.test(this.input.slice(this.lastTokEnd,this.start))},W.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},W.semicolon=function(){this.eat(w.semi)||this.insertSemicolon()||this.unexpected()},W.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},W.expect=function(t){this.eat(t)||this.unexpected()},W.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},W.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var n=e?t.parenthesizedAssign:t.parenthesizedBind;n>-1&&this.raiseRecoverable(n,"Parenthesized pattern")}},W.checkExpressionErrors=function(t,e){if(!t)return!1;var n=t.shorthandAssign,i=t.doubleProto;if(!e)return n>=0||i>=0;n>=0&&this.raise(n,"Shorthand property assignments are valid only in destructuring patterns"),i>=0&&this.raiseRecoverable(i,"Redefinition of __proto__ property")},W.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},W.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var Q=H.prototype;Q.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==w.eof;){var n=this.parseStatement(null,!0,e);t.body.push(n)}if(this.inModule)for(var i=0,r=Object.keys(this.undefinedExports);i<r.length;i+=1){var s=r[i];this.raiseRecoverable(this.undefinedExports[s].start,"Export '"+s+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),t.sourceType=this.options.sourceType,this.finishNode(t,"Program")};var $={kind:"loop"},J={kind:"switch"};Q.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;A.lastIndex=this.pos;var e=A.exec(this.input),n=this.pos+e[0].length,i=this.input.charCodeAt(n);if(91===i)return!0;if(t)return!1;if(123===i)return!0;if(p(i,!0)){for(var r=n+1;g(this.input.charCodeAt(r),!0);)++r;var s=this.input.slice(n,r);if(!a.test(s))return!0}return!1},Q.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;A.lastIndex=this.pos;var t=A.exec(this.input),e=this.pos+t[0].length;return!(S.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&g(this.input.charAt(e+8)))},Q.parseStatement=function(t,e,n){var i,r=this.type,s=this.startNode();switch(this.isLet(t)&&(r=w._var,i="let"),r){case w._break:case w._continue:return this.parseBreakContinueStatement(s,r.keyword);case w._debugger:return this.parseDebuggerStatement(s);case w._do:return this.parseDoStatement(s);case w._for:return this.parseForStatement(s);case w._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(s,!1,!t);case w._class:return t&&this.unexpected(),this.parseClass(s,!0);case w._if:return this.parseIfStatement(s);case w._return:return this.parseReturnStatement(s);case w._switch:return this.parseSwitchStatement(s);case w._throw:return this.parseThrowStatement(s);case w._try:return this.parseTryStatement(s);case w._const:case w._var:return i=i||this.value,t&&"var"!==i&&this.unexpected(),this.parseVarStatement(s,i);case w._while:return this.parseWhileStatement(s);case w._with:return this.parseWithStatement(s);case w.braceL:return this.parseBlock(!0,s);case w.semi:return this.parseEmptyStatement(s);case w._export:case w._import:if(this.options.ecmaVersion>10&&r===w._import){A.lastIndex=this.pos;var a=A.exec(this.input),o=this.pos+a[0].length;if(40===this.input.charCodeAt(o))return this.parseExpressionStatement(s,this.parseExpression())}return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),r===w._import?this.parseImport(s):this.parseExport(s,n);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(s,!0,!t);var h=this.value,u=this.parseExpression();return r===w.name&&"Identifier"===u.type&&this.eat(w.colon)?this.parseLabeledStatement(s,h,u,t):this.parseExpressionStatement(s,u)}},Q.parseBreakContinueStatement=function(t,e){var n="break"===e;this.next(),this.eat(w.semi)||this.insertSemicolon()?t.label=null:this.type!==w.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var i=0;i<this.labels.length;++i){var r=this.labels[i];if(null==t.label||r.name===t.label.name){if(null!=r.kind&&(n||"loop"===r.kind))break;if(t.label&&n)break}}return i===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,n?"BreakStatement":"ContinueStatement")},Q.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},Q.parseDoStatement=function(t){return this.next(),this.labels.push($),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(w._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(w.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},Q.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push($),this.enterScope(0),this.expect(w.parenL),this.type===w.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var n=this.isLet();if(this.type===w._var||this.type===w._const||n){var i=this.startNode(),r=n?"let":this.value;return this.next(),this.parseVar(i,!0,r),this.finishNode(i,"VariableDeclaration"),(this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===i.declarations.length?(this.options.ecmaVersion>=9&&(this.type===w._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,i)):(e>-1&&this.unexpected(e),this.parseFor(t,i))}var s=new K,a=this.parseExpression(!0,s);return this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===w._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,s),this.checkLVal(a),this.parseForIn(t,a)):(this.checkExpressionErrors(s,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},Q.parseFunctionStatement=function(t,e,n){return this.next(),this.parseFunction(t,Y|(n?0:tt),!1,e)},Q.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(w._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},Q.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(w.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},Q.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(w.braceL),this.labels.push(J),this.enterScope(0);for(var n=!1;this.type!==w.braceR;)if(this.type===w._case||this.type===w._default){var i=this.type===w._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),i?e.test=this.parseExpression():(n&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),n=!0,e.test=null),this.expect(w.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},Q.parseThrowStatement=function(t){return this.next(),S.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var X=[];Q.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===w._catch){var e=this.startNode();if(this.next(),this.eat(w.parenL)){e.param=this.parseBindingAtom();var n="Identifier"===e.param.type;this.enterScope(n?32:0),this.checkLVal(e.param,n?4:2),this.expect(w.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(w._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},Q.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},Q.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push($),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},Q.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},Q.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},Q.parseLabeledStatement=function(t,e,n,i){for(var r=0,s=this.labels;r<s.length;r+=1){s[r].name===e&&this.raise(n.start,"Label '"+e+"' is already declared")}for(var a=this.type.isLoop?"loop":this.type===w._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var h=this.labels[o];if(h.statementStart!==t.start)break;h.statementStart=this.start,h.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(i?-1===i.indexOf("label")?i+"label":i:"label"),this.labels.pop(),t.label=n,this.finishNode(t,"LabeledStatement")},Q.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},Q.parseBlock=function(t,e){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(w.braceL),t&&this.enterScope(0);!this.eat(w.braceR);){var n=this.parseStatement(null);e.body.push(n)}return t&&this.exitScope(),this.finishNode(e,"BlockStatement")},Q.parseFor=function(t,e){return t.init=e,this.expect(w.semi),t.test=this.type===w.semi?null:this.parseExpression(),this.expect(w.semi),t.update=this.type===w.parenR?null:this.parseExpression(),this.expect(w.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},Q.parseForIn=function(t,e){var n=this.type===w._in;return this.next(),"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(!n||this.options.ecmaVersion<8||this.strict||"var"!==e.kind||"Identifier"!==e.declarations[0].id.type)?this.raise(e.start,(n?"for-in":"for-of")+" loop variable declaration may not have an initializer"):"AssignmentPattern"===e.type&&this.raise(e.start,"Invalid left-hand side in for-loop"),t.left=e,t.right=n?this.parseExpression():this.parseMaybeAssign(),this.expect(w.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,n?"ForInStatement":"ForOfStatement")},Q.parseVar=function(t,e,n){for(t.declarations=[],t.kind=n;;){var i=this.startNode();if(this.parseVarId(i,n),this.eat(w.eq)?i.init=this.parseMaybeAssign(e):"const"!==n||this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===i.id.type||e&&(this.type===w._in||this.isContextual("of"))?i.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(i,"VariableDeclarator")),!this.eat(w.comma))break}return t},Q.parseVarId=function(t,e){t.id=this.parseBindingAtom(),this.checkLVal(t.id,"var"===e?1:2,!1)};var Y=1,tt=2;Q.parseFunction=function(t,e,n,i){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!i)&&(this.type===w.star&&e&tt&&this.unexpected(),t.generator=this.eat(w.star)),this.options.ecmaVersion>=8&&(t.async=!!i),e&Y&&(t.id=4&e&&this.type!==w.name?null:this.parseIdent(),!t.id||e&tt||this.checkLVal(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(U(t.async,t.generator)),e&Y||(t.id=this.type===w.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,n,!1),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(t,e&Y?"FunctionDeclaration":"FunctionExpression")},Q.parseFunctionParams=function(t){this.expect(w.parenL),t.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},Q.parseClass=function(t,e){this.next();var n=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var i=this.startNode(),r=!1;for(i.body=[],this.expect(w.braceL);!this.eat(w.braceR);){var s=this.parseClassElement(null!==t.superClass);s&&(i.body.push(s),"MethodDefinition"===s.type&&"constructor"===s.kind&&(r&&this.raise(s.start,"Duplicate constructor in the same class"),r=!0))}return t.body=this.finishNode(i,"ClassBody"),this.strict=n,this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},Q.parseClassElement=function(t){var e=this;if(this.eat(w.semi))return null;var n=this.startNode(),i=function(t,i){void 0===i&&(i=!1);var r=e.start,s=e.startLoc;return!!e.eatContextual(t)&&(!(e.type===w.parenL||i&&e.canInsertSemicolon())||(n.key&&e.unexpected(),n.computed=!1,n.key=e.startNodeAt(r,s),n.key.name=t,e.finishNode(n.key,"Identifier"),!1))};n.kind="method",n.static=i("static");var r=this.eat(w.star),s=!1;r||(this.options.ecmaVersion>=8&&i("async",!0)?(s=!0,r=this.options.ecmaVersion>=9&&this.eat(w.star)):i("get")?n.kind="get":i("set")&&(n.kind="set")),n.key||this.parsePropertyName(n);var a=n.key,o=!1;return n.computed||n.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?n.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==n.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),r&&this.raise(a.start,"Constructor can't be a generator"),s&&this.raise(a.start,"Constructor can't be an async method"),n.kind="constructor",o=t),this.parseClassMethod(n,r,s,o),"get"===n.kind&&0!==n.value.params.length&&this.raiseRecoverable(n.value.start,"getter should have no params"),"set"===n.kind&&1!==n.value.params.length&&this.raiseRecoverable(n.value.start,"setter should have exactly one param"),"set"===n.kind&&"RestElement"===n.value.params[0].type&&this.raiseRecoverable(n.value.params[0].start,"Setter cannot use rest params"),n},Q.parseClassMethod=function(t,e,n,i){return t.value=this.parseMethod(e,n,i),this.finishNode(t,"MethodDefinition")},Q.parseClassId=function(t,e){this.type===w.name?(t.id=this.parseIdent(),e&&this.checkLVal(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},Q.parseClassSuper=function(t){t.superClass=this.eat(w._extends)?this.parseExprSubscripts():null},Q.parseExport=function(t,e){if(this.next(),this.eat(w.star))return this.expectContextual("from"),this.type!==w.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(w._default)){var n;if(this.checkExport(e,"default",this.lastTokStart),this.type===w._function||(n=this.isAsyncFunction())){var i=this.startNode();this.next(),n&&this.next(),t.declaration=this.parseFunction(i,4|Y,!1,n)}else if(this.type===w._class){var r=this.startNode();t.declaration=this.parseClass(r,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==w.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var s=0,a=t.specifiers;s<a.length;s+=1){var o=a[s];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},Q.checkExport=function(t,e,n){t&&(O(t,e)&&this.raiseRecoverable(n,"Duplicate export '"+e+"'"),t[e]=!0)},Q.checkPatternExport=function(t,e){var n=e.type;if("Identifier"===n)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===n)for(var i=0,r=e.properties;i<r.length;i+=1){var s=r[i];this.checkPatternExport(t,s)}else if("ArrayPattern"===n)for(var a=0,o=e.elements;a<o.length;a+=1){var h=o[a];h&&this.checkPatternExport(t,h)}else"Property"===n?this.checkPatternExport(t,e.value):"AssignmentPattern"===n?this.checkPatternExport(t,e.left):"RestElement"===n?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===n&&this.checkPatternExport(t,e.expression)},Q.checkVariableExport=function(t,e){if(t)for(var n=0,i=e;n<i.length;n+=1){var r=i[n];this.checkPatternExport(t,r.id)}},Q.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},Q.parseExportSpecifiers=function(t){var e=[],n=!0;for(this.expect(w.braceL);!this.eat(w.braceR);){if(n)n=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var i=this.startNode();i.local=this.parseIdent(!0),i.exported=this.eatContextual("as")?this.parseIdent(!0):i.local,this.checkExport(t,i.exported.name,i.exported.start),e.push(this.finishNode(i,"ExportSpecifier"))}return e},Q.parseImport=function(t){return this.next(),this.type===w.string?(t.specifiers=X,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===w.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},Q.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===w.name){var n=this.startNode();if(n.local=this.parseIdent(),this.checkLVal(n.local,2),t.push(this.finishNode(n,"ImportDefaultSpecifier")),!this.eat(w.comma))return t}if(this.type===w.star){var i=this.startNode();return this.next(),this.expectContextual("as"),i.local=this.parseIdent(),this.checkLVal(i.local,2),t.push(this.finishNode(i,"ImportNamespaceSpecifier")),t}for(this.expect(w.braceL);!this.eat(w.braceR);){if(e)e=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var r=this.startNode();r.imported=this.parseIdent(!0),this.eatContextual("as")?r.local=this.parseIdent():(this.checkUnreserved(r.imported),r.local=r.imported),this.checkLVal(r.local,2),t.push(this.finishNode(r,"ImportSpecifier"))}return t},Q.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},Q.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var et=H.prototype;et.toAssignable=function(t,e,n){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",n&&this.checkPatternErrors(n,!0);for(var i=0,r=t.properties;i<r.length;i+=1){var s=r[i];this.toAssignable(s,e),"RestElement"!==s.type||"ArrayPattern"!==s.argument.type&&"ObjectPattern"!==s.argument.type||this.raise(s.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",n&&this.checkPatternErrors(n,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,n);break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else n&&this.checkPatternErrors(n,!0);return t},et.toAssignableList=function(t,e){for(var n=t.length,i=0;i<n;i++){var r=t[i];r&&this.toAssignable(r,e)}if(n){var s=t[n-1];6===this.options.ecmaVersion&&e&&s&&"RestElement"===s.type&&"Identifier"!==s.argument.type&&this.unexpected(s.argument.start)}return t},et.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},et.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==w.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},et.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case w.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(w.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case w.braceL:return this.parseObj(!0)}return this.parseIdent()},et.parseBindingList=function(t,e,n){for(var i=[],r=!0;!this.eat(t);)if(r?r=!1:this.expect(w.comma),e&&this.type===w.comma)i.push(null);else{if(n&&this.afterTrailingComma(t))break;if(this.type===w.ellipsis){var s=this.parseRestBinding();this.parseBindingListItem(s),i.push(s),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),i.push(a)}return i},et.parseBindingListItem=function(t){return t},et.parseMaybeDefault=function(t,e,n){if(n=n||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(w.eq))return n;var i=this.startNodeAt(t,e);return i.left=n,i.right=this.parseMaybeAssign(),this.finishNode(i,"AssignmentPattern")},et.checkLVal=function(t,e,n){switch(void 0===e&&(e=0),t.type){case"Identifier":2===e&&"let"===t.name&&this.raiseRecoverable(t.start,"let is disallowed as a lexically bound name"),this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(e?"Binding ":"Assigning to ")+t.name+" in strict mode"),n&&(O(n,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),n[t.name]=!0),0!==e&&5!==e&&this.declareName(t.name,e,t.start);break;case"MemberExpression":e&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ObjectPattern":for(var i=0,r=t.properties;i<r.length;i+=1){var s=r[i];this.checkLVal(s,e,n)}break;case"Property":this.checkLVal(t.value,e,n);break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var h=o[a];h&&this.checkLVal(h,e,n)}break;case"AssignmentPattern":this.checkLVal(t.left,e,n);break;case"RestElement":this.checkLVal(t.argument,e,n);break;case"ParenthesizedExpression":this.checkLVal(t.expression,e,n);break;default:this.raise(t.start,(e?"Binding":"Assigning to")+" rvalue")}};var nt=H.prototype;nt.checkPropClash=function(t,e,n){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var i,r=t.key;switch(r.type){case"Identifier":i=r.name;break;case"Literal":i=String(r.value);break;default:return}var s=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===i&&"init"===s&&(e.proto&&(n&&n.doubleProto<0?n.doubleProto=r.start:this.raiseRecoverable(r.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[i="$"+i];if(a)("init"===s?this.strict&&a.init||a.get||a.set:a.init||a[s])&&this.raiseRecoverable(r.start,"Redefinition of property");else a=e[i]={init:!1,get:!1,set:!1};a[s]=!0}}},nt.parseExpression=function(t,e){var n=this.start,i=this.startLoc,r=this.parseMaybeAssign(t,e);if(this.type===w.comma){var s=this.startNodeAt(n,i);for(s.expressions=[r];this.eat(w.comma);)s.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(s,"SequenceExpression")}return r},nt.parseMaybeAssign=function(t,e,n){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var i=!1,r=-1,s=-1,a=-1;e?(r=e.parenthesizedAssign,s=e.trailingComma,a=e.shorthandAssign,e.parenthesizedAssign=e.trailingComma=e.shorthandAssign=-1):(e=new K,i=!0);var o=this.start,h=this.startLoc;this.type!==w.parenL&&this.type!==w.name||(this.potentialArrowAt=this.start);var u=this.parseMaybeConditional(t,e);if(n&&(u=n.call(this,u,o,h)),this.type.isAssign){var c=this.startNodeAt(o,h);return c.operator=this.value,c.left=this.type===w.eq?this.toAssignable(u,!1,e):u,i||K.call(e),e.shorthandAssign=-1,this.checkLVal(u),this.next(),c.right=this.parseMaybeAssign(t),this.finishNode(c,"AssignmentExpression")}return i&&this.checkExpressionErrors(e,!0),r>-1&&(e.parenthesizedAssign=r),s>-1&&(e.trailingComma=s),a>-1&&(e.shorthandAssign=a),u},nt.parseMaybeConditional=function(t,e){var n=this.start,i=this.startLoc,r=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return r;if(this.eat(w.question)){var s=this.startNodeAt(n,i);return s.test=r,s.consequent=this.parseMaybeAssign(),this.expect(w.colon),s.alternate=this.parseMaybeAssign(t),this.finishNode(s,"ConditionalExpression")}return r},nt.parseExprOps=function(t,e){var n=this.start,i=this.startLoc,r=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)?r:r.start===n&&"ArrowFunctionExpression"===r.type?r:this.parseExprOp(r,n,i,-1,t)},nt.parseExprOp=function(t,e,n,i,r){var s=this.type.binop;if(null!=s&&(!r||this.type!==w._in)&&s>i){var a=this.type===w.logicalOR||this.type===w.logicalAND,o=this.value;this.next();var h=this.start,u=this.startLoc,c=this.parseExprOp(this.parseMaybeUnary(null,!1),h,u,s,r),l=this.buildBinary(e,n,t,c,o,a);return this.parseExprOp(l,e,n,i,r)}return t},nt.buildBinary=function(t,e,n,i,r,s){var a=this.startNodeAt(t,e);return a.left=n,a.operator=r,a.right=i,this.finishNode(a,s?"LogicalExpression":"BinaryExpression")},nt.parseMaybeUnary=function(t,e){var n,i=this.start,r=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))n=this.parseAwait(),e=!0;else if(this.type.prefix){var s=this.startNode(),a=this.type===w.incDec;s.operator=this.value,s.prefix=!0,this.next(),s.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLVal(s.argument):this.strict&&"delete"===s.operator&&"Identifier"===s.argument.type?this.raiseRecoverable(s.start,"Deleting local variable in strict mode"):e=!0,n=this.finishNode(s,a?"UpdateExpression":"UnaryExpression")}else{if(n=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return n;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(i,r);o.operator=this.value,o.prefix=!1,o.argument=n,this.checkLVal(n),this.next(),n=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(w.starstar)?this.buildBinary(i,r,n,this.parseMaybeUnary(null,!1),"**",!1):n},nt.parseExprSubscripts=function(t){var e=this.start,n=this.startLoc,i=this.parseExprAtom(t),r="ArrowFunctionExpression"===i.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd);if(this.checkExpressionErrors(t)||r)return i;var s=this.parseSubscripts(i,e,n);return t&&"MemberExpression"===s.type&&(t.parenthesizedAssign>=s.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=s.start&&(t.parenthesizedBind=-1)),s},nt.parseSubscripts=function(t,e,n,i){for(var r=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(t.start,t.end);;){var s=this.parseSubscript(t,e,n,i,r);if(s===t||"ArrowFunctionExpression"===s.type)return s;t=s}},nt.parseSubscript=function(t,e,n,i,r){var s=this.eat(w.bracketL);if(s||this.eat(w.dot)){var a=this.startNodeAt(e,n);a.object=t,a.property=s?this.parseExpression():this.parseIdent("never"!==this.options.allowReserved),a.computed=!!s,s&&this.expect(w.bracketR),t=this.finishNode(a,"MemberExpression")}else if(!i&&this.eat(w.parenL)){var o=new K,h=this.yieldPos,u=this.awaitPos,c=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var l=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1,o);if(r&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(o,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=h,this.awaitPos=u,this.awaitIdentPos=c,this.parseArrowExpression(this.startNodeAt(e,n),l,!0);this.checkExpressionErrors(o,!0),this.yieldPos=h||this.yieldPos,this.awaitPos=u||this.awaitPos,this.awaitIdentPos=c||this.awaitIdentPos;var f=this.startNodeAt(e,n);f.callee=t,f.arguments=l,t=this.finishNode(f,"CallExpression")}else if(this.type===w.backQuote){var d=this.startNodeAt(e,n);d.tag=t,d.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(d,"TaggedTemplateExpression")}return t},nt.parseExprAtom=function(t){this.type===w.slash&&this.readRegexp();var e,n=this.potentialArrowAt===this.start;switch(this.type){case w._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==w.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==w.dot&&this.type!==w.bracketL&&this.type!==w.parenL&&this.unexpected(),this.finishNode(e,"Super");case w._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case w.name:var i=this.start,r=this.startLoc,s=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!s&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(w._function))return this.parseFunction(this.startNodeAt(i,r),0,!1,!0);if(n&&!this.canInsertSemicolon()){if(this.eat(w.arrow))return this.parseArrowExpression(this.startNodeAt(i,r),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===w.name&&!s)return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(w.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(i,r),[a],!0)}return a;case w.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case w.num:case w.string:return this.parseLiteral(this.value);case w._null:case w._true:case w._false:return(e=this.startNode()).value=this.type===w._null?null:this.type===w._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case w.parenL:var h=this.start,u=this.parseParenAndDistinguishExpression(n);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(u)&&(t.parenthesizedAssign=h),t.parenthesizedBind<0&&(t.parenthesizedBind=h)),u;case w.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(w.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case w.braceL:return this.parseObj(!1,t);case w._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case w._class:return this.parseClass(this.startNode(),!1);case w._new:return this.parseNew();case w.backQuote:return this.parseTemplate();case w._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},nt.parseExprImport=function(){var t=this.startNode();switch(this.next(),this.type){case w.parenL:return this.parseDynamicImport(t);default:this.unexpected()}},nt.parseDynamicImport=function(t){if(this.next(),t.source=this.parseMaybeAssign(),!this.eat(w.parenR)){var e=this.start;this.eat(w.comma)&&this.eat(w.parenR)?this.raiseRecoverable(e,"Trailing comma is not allowed in import()"):this.unexpected(e)}return this.finishNode(t,"ImportExpression")},nt.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),110===e.raw.charCodeAt(e.raw.length-1)&&(e.bigint=e.raw.slice(0,-1)),this.next(),this.finishNode(e,"Literal")},nt.parseParenExpression=function(){this.expect(w.parenL);var t=this.parseExpression();return this.expect(w.parenR),t},nt.parseParenAndDistinguishExpression=function(t){var e,n=this.start,i=this.startLoc,r=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var s,a=this.start,o=this.startLoc,h=[],u=!0,c=!1,l=new K,f=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==w.parenR;){if(u?u=!1:this.expect(w.comma),r&&this.afterTrailingComma(w.parenR,!0)){c=!0;break}if(this.type===w.ellipsis){s=this.start,h.push(this.parseParenItem(this.parseRestBinding())),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}h.push(this.parseMaybeAssign(!1,l,this.parseParenItem))}var p=this.start,g=this.startLoc;if(this.expect(w.parenR),t&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(l,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=f,this.awaitPos=d,this.parseParenArrowList(n,i,h);h.length&&!c||this.unexpected(this.lastTokStart),s&&this.unexpected(s),this.checkExpressionErrors(l,!0),this.yieldPos=f||this.yieldPos,this.awaitPos=d||this.awaitPos,h.length>1?((e=this.startNodeAt(a,o)).expressions=h,this.finishNodeAt(e,"SequenceExpression",p,g)):e=h[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var _=this.startNodeAt(n,i);return _.expression=e,this.finishNode(_,"ParenthesizedExpression")}return e},nt.parseParenItem=function(t){return t},nt.parseParenArrowList=function(t,e,n){return this.parseArrowExpression(this.startNodeAt(t,e),n)};var it=[];nt.parseNew=function(){var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(w.dot)){t.meta=e;var n=this.containsEsc;return t.property=this.parseIdent(!0),("target"!==t.property.name||n)&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(t.start,"new.target can only be used in functions"),this.finishNode(t,"MetaProperty")}var i=this.start,r=this.startLoc,s=this.type===w._import;return t.callee=this.parseSubscripts(this.parseExprAtom(),i,r,!0),s&&"ImportExpression"===t.callee.type&&this.raise(i,"Cannot use new with import()"),this.eat(w.parenL)?t.arguments=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1):t.arguments=it,this.finishNode(t,"NewExpression")},nt.parseTemplateElement=function(t){var e=t.isTagged,n=this.startNode();return this.type===w.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),n.value={raw:this.value,cooked:null}):n.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),n.tail=this.type===w.backQuote,this.finishNode(n,"TemplateElement")},nt.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var n=this.startNode();this.next(),n.expressions=[];var i=this.parseTemplateElement({isTagged:e});for(n.quasis=[i];!i.tail;)this.type===w.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(w.dollarBraceL),n.expressions.push(this.parseExpression()),this.expect(w.braceR),n.quasis.push(i=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(n,"TemplateLiteral")},nt.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===w.name||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===w.star)&&!S.test(this.input.slice(this.lastTokEnd,this.start))},nt.parseObj=function(t,e){var n=this.startNode(),i=!0,r={};for(n.properties=[],this.next();!this.eat(w.braceR);){if(i)i=!1;else if(this.expect(w.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(w.braceR))break;var s=this.parseProperty(t,e);t||this.checkPropClash(s,r,e),n.properties.push(s)}return this.finishNode(n,t?"ObjectPattern":"ObjectExpression")},nt.parseProperty=function(t,e){var n,i,r,s,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(w.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===w.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===w.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(r=this.start,s=this.startLoc),t||(n=this.eat(w.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!n&&this.isAsyncProp(a)?(i=!0,n=this.options.ecmaVersion>=9&&this.eat(w.star),this.parsePropertyName(a,e)):i=!1,this.parsePropertyValue(a,t,n,i,r,s,e,o),this.finishNode(a,"Property")},nt.parsePropertyValue=function(t,e,n,i,r,s,a,o){if((n||i)&&this.type===w.colon&&this.unexpected(),this.eat(w.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===w.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(n,i);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===w.comma||this.type===w.braceR)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((n||i)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=r),t.kind="init",e?t.value=this.parseMaybeDefault(r,s,t.key):this.type===w.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(r,s,t.key)):t.value=t.key,t.shorthand=!0):this.unexpected();else{(n||i)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var h="get"===t.kind?0:1;if(t.value.params.length!==h){var u=t.value.start;"get"===t.kind?this.raiseRecoverable(u,"getter should have no params"):this.raiseRecoverable(u,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},nt.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(w.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(w.bracketR),t.key;t.computed=!1}return t.key=this.type===w.num||this.type===w.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},nt.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},nt.parseMethod=function(t,e,n){var i=this.startNode(),r=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(i),this.options.ecmaVersion>=6&&(i.generator=t),this.options.ecmaVersion>=8&&(i.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|U(e,i.generator)|(n?128:0)),this.expect(w.parenL),i.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(i,!1,!0),this.yieldPos=r,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(i,"FunctionExpression")},nt.parseArrowExpression=function(t,e,n){var i=this.yieldPos,r=this.awaitPos,s=this.awaitIdentPos;return this.enterScope(16|U(n,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!n),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1),this.yieldPos=i,this.awaitPos=r,this.awaitIdentPos=s,this.finishNode(t,"ArrowFunctionExpression")},nt.parseFunctionBody=function(t,e,n){var i=e&&this.type!==w.braceL,r=this.strict,s=!1;if(i)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);r&&!a||(s=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],s&&(this.strict=!0),this.checkParams(t,!r&&!s&&!e&&!n&&this.isSimpleParamList(t.params)),t.body=this.parseBlock(!1),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=o}this.exitScope(),this.strict&&t.id&&this.checkLVal(t.id,5),this.strict=r},nt.isSimpleParamList=function(t){for(var e=0,n=t;e<n.length;e+=1){if("Identifier"!==n[e].type)return!1}return!0},nt.checkParams=function(t,e){for(var n={},i=0,r=t.params;i<r.length;i+=1){var s=r[i];this.checkLVal(s,1,e?null:n)}},nt.parseExprList=function(t,e,n,i){for(var r=[],s=!0;!this.eat(t);){if(s)s=!1;else if(this.expect(w.comma),e&&this.afterTrailingComma(t))break;var a=void 0;n&&this.type===w.comma?a=null:this.type===w.ellipsis?(a=this.parseSpread(i),i&&this.type===w.comma&&i.trailingComma<0&&(i.trailingComma=this.start)):a=this.parseMaybeAssign(!1,i),r.push(a)}return r},nt.checkUnreserved=function(t){var e=t.start,n=t.end,i=t.name;(this.inGenerator&&"yield"===i&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===i&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.keywords.test(i)&&this.raise(e,"Unexpected keyword '"+i+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,n).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(i)&&(this.inAsync||"await"!==i||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+i+"' is reserved"))},nt.parseIdent=function(t,e){var n=this.startNode();return this.type===w.name?n.name=this.value:this.type.keyword?(n.name=this.type.keyword,"class"!==n.name&&"function"!==n.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(),this.finishNode(n,"Identifier"),t||(this.checkUnreserved(n),"await"!==n.name||this.awaitIdentPos||(this.awaitIdentPos=n.start)),n},nt.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===w.semi||this.canInsertSemicolon()||this.type!==w.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(w.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},nt.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!0),this.finishNode(t,"AwaitExpression")};var rt=H.prototype;rt.raise=function(t,e){var n=z(this.input,t);e+=" ("+n.line+":"+n.column+")";var i=new SyntaxError(e);throw i.pos=t,i.loc=n,i.raisedAt=this.pos,i},rt.raiseRecoverable=rt.raise,rt.curPosition=function(){if(this.options.locations)return new N(this.curLine,this.pos-this.lineStart)};var st=H.prototype,at=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};st.enterScope=function(t){this.scopeStack.push(new at(t))},st.exitScope=function(){this.scopeStack.pop()},st.treatFunctionsAsVarInScope=function(t){return t.flags&R||!this.inModule&&1&t.flags},st.declareName=function(t,e,n){var i=!1;if(2===e){var r=this.currentScope();i=r.lexical.indexOf(t)>-1||r.functions.indexOf(t)>-1||r.var.indexOf(t)>-1,r.lexical.push(t),this.inModule&&1&r.flags&&delete this.undefinedExports[t]}else if(4===e){this.currentScope().lexical.push(t)}else if(3===e){var s=this.currentScope();i=this.treatFunctionsAsVar?s.lexical.indexOf(t)>-1:s.lexical.indexOf(t)>-1||s.var.indexOf(t)>-1,s.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags&&o.lexical[0]===t)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){i=!0;break}if(o.var.push(t),this.inModule&&1&o.flags&&delete this.undefinedExports[t],o.flags&D)break}i&&this.raiseRecoverable(n,"Identifier '"+t+"' has already been declared")},st.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},st.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},st.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&D)return e}},st.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(e.flags&D&&!(16&e.flags))return e}};var ot=function(t,e,n){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new B(t,n)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},ht=H.prototype;function ut(t,e,n,i){return t.type=e,t.end=n,this.options.locations&&(t.loc.end=i),this.options.ranges&&(t.range[1]=n),t}ht.startNode=function(){return new ot(this,this.start,this.startLoc)},ht.startNodeAt=function(t,e){return new ot(this,t,e)},ht.finishNode=function(t,e){return ut.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},ht.finishNodeAt=function(t,e,n,i){return ut.call(this,t,e,n,i)};var ct=function(t,e,n,i,r){this.token=t,this.isExpr=!!e,this.preserveSpace=!!n,this.override=i,this.generator=!!r},lt={b_stat:new ct("{",!1),b_expr:new ct("{",!0),b_tmpl:new ct("${",!1),p_stat:new ct("(",!1),p_expr:new ct("(",!0),q_tmpl:new ct("`",!0,!0,(function(t){return t.tryReadTemplateToken()})),f_stat:new ct("function",!1),f_expr:new ct("function",!0),f_expr_gen:new ct("function",!0,!1,null,!0),f_gen:new ct("function",!1,!1,null,!0)},ft=H.prototype;ft.initialContext=function(){return[lt.b_stat]},ft.braceIsBlock=function(t){var e=this.curContext();return e===lt.f_expr||e===lt.f_stat||(t!==w.colon||e!==lt.b_stat&&e!==lt.b_expr?t===w._return||t===w.name&&this.exprAllowed?S.test(this.input.slice(this.lastTokEnd,this.start)):t===w._else||t===w.semi||t===w.eof||t===w.parenR||t===w.arrow||(t===w.braceL?e===lt.b_stat:t!==w._var&&t!==w._const&&t!==w.name&&!this.exprAllowed):!e.isExpr)},ft.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},ft.updateContext=function(t){var e,n=this.type;n.keyword&&t===w.dot?this.exprAllowed=!1:(e=n.updateContext)?e.call(this,t):this.exprAllowed=n.beforeExpr},w.parenR.updateContext=w.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===lt.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},w.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?lt.b_stat:lt.b_expr),this.exprAllowed=!0},w.dollarBraceL.updateContext=function(){this.context.push(lt.b_tmpl),this.exprAllowed=!0},w.parenL.updateContext=function(t){var e=t===w._if||t===w._for||t===w._with||t===w._while;this.context.push(e?lt.p_stat:lt.p_expr),this.exprAllowed=!0},w.incDec.updateContext=function(){},w._function.updateContext=w._class.updateContext=function(t){!t.beforeExpr||t===w.semi||t===w._else||t===w._return&&S.test(this.input.slice(this.lastTokEnd,this.start))||(t===w.colon||t===w.braceL)&&this.curContext()===lt.b_stat?this.context.push(lt.f_stat):this.context.push(lt.f_expr),this.exprAllowed=!1},w.backQuote.updateContext=function(){this.curContext()===lt.q_tmpl?this.context.pop():this.context.push(lt.q_tmpl),this.exprAllowed=!1},w.star.updateContext=function(t){if(t===w._function){var e=this.context.length-1;this.context[e]===lt.f_expr?this.context[e]=lt.f_expr_gen:this.context[e]=lt.f_gen}this.exprAllowed=!0},w.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==w.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var dt="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",pt=dt+" Extended_Pictographic",gt={9:dt,10:pt,11:"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic"},_t="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",vt="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",mt=vt+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",yt={9:vt,10:mt,11:"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho"},xt={};function bt(t){var e=xt[t]={binary:L(gt[t]+" "+_t),nonBinary:{General_Category:L(_t),Script:L(yt[t])}};e.nonBinary.Script_Extensions=e.nonBinary.Script,e.nonBinary.gc=e.nonBinary.General_Category,e.nonBinary.sc=e.nonBinary.Script,e.nonBinary.scx=e.nonBinary.Script_Extensions}bt(9),bt(10),bt(11);var wt=H.prototype,St=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.unicodeProperties=xt[t.options.ecmaVersion>=11?11:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function Ct(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function kt(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function Pt(t){return t>=65&&t<=90||t>=97&&t<=122}function At(t){return Pt(t)||95===t}function It(t){return At(t)||Tt(t)}function Tt(t){return t>=48&&t<=57}function Et(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function Ot(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function Mt(t){return t>=48&&t<=55}St.prototype.reset=function(t,e,n){var i=-1!==n.indexOf("u");this.start=0|t,this.source=e+"",this.flags=n,this.switchU=i&&this.parser.options.ecmaVersion>=6,this.switchN=i&&this.parser.options.ecmaVersion>=9},St.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},St.prototype.at=function(t){var e=this.source,n=e.length;if(t>=n)return-1;var i=e.charCodeAt(t);return!this.switchU||i<=55295||i>=57344||t+1>=n?i:(i<<10)+e.charCodeAt(t+1)-56613888},St.prototype.nextIndex=function(t){var e=this.source,n=e.length;if(t>=n)return n;var i=e.charCodeAt(t);return!this.switchU||i<=55295||i>=57344||t+1>=n?t+1:t+2},St.prototype.current=function(){return this.at(this.pos)},St.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},St.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},St.prototype.eat=function(t){return this.current()===t&&(this.advance(),!0)},wt.validateRegExpFlags=function(t){for(var e=t.validFlags,n=t.flags,i=0;i<n.length;i++){var r=n.charAt(i);-1===e.indexOf(r)&&this.raise(t.start,"Invalid regular expression flag"),n.indexOf(r,i+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},wt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},wt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,n=t.backReferenceNames;e<n.length;e+=1){var i=n[e];-1===t.groupNames.indexOf(i)&&t.raise("Invalid named capture referenced")}},wt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},wt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},wt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!(t.switchU?!this.regexp_eatAtom(t):!this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},wt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var n=!1;if(this.options.ecmaVersion>=9&&(n=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!n,!0}return t.pos=e,!1},wt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},wt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},wt.regexp_eatBracedQuantifier=function(t,e){var n=t.pos;if(t.eat(123)){var i=0,r=-1;if(this.regexp_eatDecimalDigits(t)&&(i=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(r=t.lastIntValue),t.eat(125)))return-1!==r&&r<i&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=n}return!1},wt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},wt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},wt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},wt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},wt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},wt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},wt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!kt(e)&&(t.lastIntValue=e,t.advance(),!0)},wt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,n=0;-1!==(n=t.current())&&!kt(n);)t.advance();return t.pos!==e},wt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e)&&(t.advance(),!0)},wt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},wt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},wt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=Ct(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=Ct(t.lastIntValue);return!0}return!1},wt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,n=t.current();return t.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(n=t.lastIntValue),function(t){return p(t,!0)||36===t||95===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},wt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,n=t.current();return t.advance(),92===n&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(n=t.lastIntValue),function(t){return g(t,!0)||36===t||95===t||8204===t||8205===t}(n)?(t.lastIntValue=n,!0):(t.pos=e,!1)},wt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},wt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var n=t.lastIntValue;if(t.switchU)return n>t.maxBackReference&&(t.maxBackReference=n),!0;if(n<=t.numCapturingParens)return!0;t.pos=e}return!1},wt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},wt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},wt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},wt.regexp_eatZero=function(t){return 48===t.current()&&!Tt(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},wt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},wt.regexp_eatControlLetter=function(t){var e=t.current();return!!Pt(e)&&(t.lastIntValue=e%32,t.advance(),!0)},wt.regexp_eatRegExpUnicodeEscapeSequence=function(t){var e,n=t.pos;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var i=t.lastIntValue;if(t.switchU&&i>=55296&&i<=56319){var r=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var s=t.lastIntValue;if(s>=56320&&s<=57343)return t.lastIntValue=1024*(i-55296)+(s-56320)+65536,!0}t.pos=r,t.lastIntValue=i}return!0}if(t.switchU&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&((e=t.lastIntValue)>=0&&e<=1114111))return!0;t.switchU&&t.raise("Invalid unicode escape"),t.pos=n}return!1},wt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e)&&(t.lastIntValue=e,t.advance(),!0)},wt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},wt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},wt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var n=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var i=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,n,i),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var r=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,r),!0}return!1},wt.regexp_validateUnicodePropertyNameAndValue=function(t,e,n){O(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(n)||t.raise("Invalid property value")},wt.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},wt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";At(e=t.current());)t.lastStringValue+=Ct(e),t.advance();return""!==t.lastStringValue},wt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";It(e=t.current());)t.lastStringValue+=Ct(e),t.advance();return""!==t.lastStringValue},wt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},wt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},wt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var n=t.lastIntValue;!t.switchU||-1!==e&&-1!==n||t.raise("Invalid character class"),-1!==e&&-1!==n&&e>n&&t.raise("Range out of order in character class")}}},wt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var n=t.current();(99===n||Mt(n))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var i=t.current();return 93!==i&&(t.lastIntValue=i,t.advance(),!0)},wt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},wt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!Tt(e)&&95!==e)&&(t.lastIntValue=e%32,t.advance(),!0)},wt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},wt.regexp_eatDecimalDigits=function(t){var e=t.pos,n=0;for(t.lastIntValue=0;Tt(n=t.current());)t.lastIntValue=10*t.lastIntValue+(n-48),t.advance();return t.pos!==e},wt.regexp_eatHexDigits=function(t){var e=t.pos,n=0;for(t.lastIntValue=0;Et(n=t.current());)t.lastIntValue=16*t.lastIntValue+Ot(n),t.advance();return t.pos!==e},wt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var n=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*n+t.lastIntValue:t.lastIntValue=8*e+n}else t.lastIntValue=e;return!0}return!1},wt.regexp_eatOctalDigit=function(t){var e=t.current();return Mt(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},wt.regexp_eatFixedHexDigits=function(t,e){var n=t.pos;t.lastIntValue=0;for(var i=0;i<e;++i){var r=t.current();if(!Et(r))return t.pos=n,!1;t.lastIntValue=16*t.lastIntValue+Ot(r),t.advance()}return!0};var Lt=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new B(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Nt=H.prototype;function Bt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Nt.next=function(){this.options.onToken&&this.options.onToken(new Lt(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Nt.getToken=function(){return this.next(),new Lt(this)},"undefined"!=typeof Symbol&&(Nt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===w.eof,value:e}}}}),Nt.curContext=function(){return this.context[this.context.length-1]},Nt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(w.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Nt.readToken=function(t){return p(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Nt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Nt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),n=this.pos,i=this.input.indexOf("*/",this.pos+=2);if(-1===i&&this.raise(this.pos-2,"Unterminated comment"),this.pos=i+2,this.options.locations)for(C.lastIndex=n;(t=C.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(n+2,i),n,this.pos,e,this.curPosition())},Nt.skipLineComment=function(t){for(var e=this.pos,n=this.options.onComment&&this.curPosition(),i=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!k(i);)i=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,n,this.curPosition())},Nt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&P.test(String.fromCharCode(t))))break t;++this.pos}}},Nt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var n=this.type;this.type=t,this.value=e,this.updateContext(n)},Nt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(w.ellipsis)):(++this.pos,this.finishToken(w.dot))},Nt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(w.assign,2):this.finishOp(w.slash,1)},Nt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),n=1,i=42===t?w.star:w.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++n,i=w.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(w.assign,n+1):this.finishOp(i,n)},Nt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.finishOp(124===t?w.logicalOR:w.logicalAND,2):61===e?this.finishOp(w.assign,2):this.finishOp(124===t?w.bitwiseOR:w.bitwiseAND,1)},Nt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(w.assign,2):this.finishOp(w.bitwiseXOR,1)},Nt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!S.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(w.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(w.assign,2):this.finishOp(w.plusMin,1)},Nt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),n=1;return e===t?(n=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+n)?this.finishOp(w.assign,n+1):this.finishOp(w.bitShift,n)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(n=2),this.finishOp(w.relational,n)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Nt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(w.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(w.arrow)):this.finishOp(61===t?w.eq:w.prefix,1)},Nt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(w.parenL);case 41:return++this.pos,this.finishToken(w.parenR);case 59:return++this.pos,this.finishToken(w.semi);case 44:return++this.pos,this.finishToken(w.comma);case 91:return++this.pos,this.finishToken(w.bracketL);case 93:return++this.pos,this.finishToken(w.bracketR);case 123:return++this.pos,this.finishToken(w.braceL);case 125:return++this.pos,this.finishToken(w.braceR);case 58:return++this.pos,this.finishToken(w.colon);case 63:return++this.pos,this.finishToken(w.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(w.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 126:return this.finishOp(w.prefix,1)}this.raise(this.pos,"Unexpected character '"+Bt(t)+"'")},Nt.finishOp=function(t,e){var n=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,n)},Nt.readRegexp=function(){for(var t,e,n=this.pos;;){this.pos>=this.input.length&&this.raise(n,"Unterminated regular expression");var i=this.input.charAt(this.pos);if(S.test(i)&&this.raise(n,"Unterminated regular expression"),t)t=!1;else{if("["===i)e=!0;else if("]"===i&&e)e=!1;else if("/"===i&&!e)break;t="\\"===i}++this.pos}var r=this.input.slice(n,this.pos);++this.pos;var s=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(s);var o=this.regexpState||(this.regexpState=new St(this));o.reset(n,r,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var h=null;try{h=new RegExp(r,a)}catch(t){}return this.finishToken(w.regexp,{pattern:r,flags:a,value:h})},Nt.readInt=function(t,e){for(var n=this.pos,i=0,r=0,s=null==e?1/0:e;r<s;++r){var a=this.input.charCodeAt(this.pos),o=void 0;if((o=a>=97?a-97+10:a>=65?a-65+10:a>=48&&a<=57?a-48:1/0)>=t)break;++this.pos,i=i*t+o}return this.pos===n||null!=e&&this.pos-n!==e?null:i},Nt.readRadixNumber=function(t){var e=this.pos;this.pos+=2;var n=this.readInt(t);return null==n&&this.raise(this.start+2,"Expected number in radix "+t),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(n="undefined"!=typeof BigInt?BigInt(this.input.slice(e,this.pos)):null,++this.pos):p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,n)},Nt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10)||this.raise(e,"Invalid number");var n=this.pos-e>=2&&48===this.input.charCodeAt(e);n&&this.strict&&this.raise(e,"Invalid number"),n&&/[89]/.test(this.input.slice(e,this.pos))&&(n=!1);var i=this.input.charCodeAt(this.pos);if(!n&&!t&&this.options.ecmaVersion>=11&&110===i){var r=this.input.slice(e,this.pos),s="undefined"!=typeof BigInt?BigInt(r):null;return++this.pos,p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,s)}46!==i||n||(++this.pos,this.readInt(10),i=this.input.charCodeAt(this.pos)),69!==i&&101!==i||n||(43!==(i=this.input.charCodeAt(++this.pos))&&45!==i||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var a=this.input.slice(e,this.pos),o=n?parseInt(a,8):parseFloat(a);return this.finishToken(w.num,o)},Nt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Nt.readString=function(t){for(var e="",n=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var i=this.input.charCodeAt(this.pos);if(i===t)break;92===i?(e+=this.input.slice(n,this.pos),e+=this.readEscapedChar(!1),n=this.pos):(k(i,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(n,this.pos++),this.finishToken(w.string,e)};var zt={};Nt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==zt)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Nt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw zt;this.raise(t,e)},Nt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var n=this.input.charCodeAt(this.pos);if(96===n||36===n&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==w.template&&this.type!==w.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(w.template,t)):36===n?(this.pos+=2,this.finishToken(w.dollarBraceL)):(++this.pos,this.finishToken(w.backQuote));if(92===n)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(k(n)){switch(t+=this.input.slice(e,this.pos),++this.pos,n){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(n)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Nt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(w.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Nt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return Bt(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";default:if(e>=48&&e<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],i=parseInt(n,8);return i>255&&(n=n.slice(0,-1),i=parseInt(n,8)),this.pos+=n.length-1,e=this.input.charCodeAt(this.pos),"0"===n&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-n.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(i)}return k(e)?"":String.fromCharCode(e)}},Nt.readHexChar=function(t){var e=this.pos,n=this.readInt(16,t);return null===n&&this.invalidStringToken(e,"Bad character escape sequence"),n},Nt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,n=this.pos,i=this.options.ecmaVersion>=6;this.pos<this.input.length;){var r=this.fullCharCodeAtPos();if(g(r,i))this.pos+=r<=65535?1:2;else{if(92!==r)break;this.containsEsc=!0,t+=this.input.slice(n,this.pos);var s=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?p:g)(a,i)||this.invalidStringToken(s,"Invalid Unicode escape"),t+=Bt(a),n=this.pos}e=!1}return t+this.input.slice(n,this.pos)},Nt.readWord=function(){var t=this.readWord1(),e=w.name;return this.keywords.test(t)&&(this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+t),e=x[t]),this.finishToken(e,t)};var jt="7.1.0";function Vt(t,e){return H.parse(t,e)}function Rt(t,e,n){return H.parseExpressionAt(t,e,n)}function Dt(t,e){return H.tokenizer(t,e)}H.acorn={Parser:H,version:jt,defaultOptions:j,Position:N,SourceLocation:B,getLineInfo:z,Node:ot,TokenType:_,tokTypes:w,keywordTypes:x,TokContext:ct,tokContexts:lt,isIdentifierChar:g,isIdentifierStart:p,Token:Lt,isNewLine:k,lineBreak:S,lineBreakG:C,nonASCIIwhitespace:P}},function(t,e){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(15),r=n(39),s=function(){function t(t,e){void 0===e&&(e=r.strictEqual),this.value=t,this.equal=e,this.observable=this.emitter=i.Emitter.ofOne()}return t.prototype.set=function(t){return!this.equal(this.value,t)&&(this.value=t,this.emit(this.value),!0)},t.prototype.get=function(){return this.value},t.prototype.emit=function(t){this.emitter.emit(t)},t}();e.Property=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.strictEqual=function(t,e){return t===e||t!=t&&e!=e},e.deepEqual=function(t,n){if(e.strictEqual(t,n))return!0;if(null==t||null==n)return!1;var i=Array.isArray(t);if(i!==Array.isArray(n))return!1;if(i){var r=t,s=n;if((m=r.length)!==s.length)return!1;for(var a=0;a<m;a++)if(!e.deepEqual(r[a],s[a]))return!1;return!0}var o=t instanceof Date;if(o!==n instanceof Date)return!1;if(o)return+t==+n;var h=t instanceof Set;if(h!==n instanceof Set)return!1;if(h){var u=t,c=n;if(u.size!==c.size)return!1;for(var l=u.keys();;){if((_=l.next()).done)break;if(!c.has(_.value))return!1}return!0}var f=t instanceof Map;if(f!==n instanceof Map)return!1;if(f){var d=t,p=n;if(d.size!==p.size)return!1;for(var g=d.keys();;){var _;if((_=g.next()).done)break;if(!e.deepEqual(d.get(_.value),p.get(_.value)))return!1}return!0}var v="object"==typeof t;if(v!==("object"==typeof n))return!1;if(v){var m,y=t,x=n,b=Object.keys(y),w=Object.keys(x);if((m=b.length)!==w.length)return!1;for(a=0;a<m;a++){var S=b[a];if(!x.hasOwnProperty(S))return!1;if(!e.deepEqual(y[S],x[S]))return!1}return!0}return!1}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),r=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,r=this.map,s=r(e),a=i.map((function(e){return e.render(t,s)}),n);return{change:function(t){for(var e=r(t),n=0,i=a;n<i.length;n++){i[n].change(e)}},destroy:function(){for(var t=0,e=a;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=a;e<n.length;e++){n[e].request(t)}}}},t}();e.MapStateTemplate=r,e.mapState=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new r(t.map,e)},e.mapStateAndKeep=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new r((function(e){return[t.map(e),e]}),e)};var s=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,r=this.map,s=t.conditionalMapAction(r),a=i.map((function(t){return t.render(s,e)}),n);return{change:function(t){for(var e=0,n=a;e<n.length;e++){n[e].change(t)}},destroy:function(){for(var t=0,e=a;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=a;e<n.length;e++){n[e].request(t)}}}},t}();e.MapActionTemplate=s,e.mapAction=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s(t.map,e)};var a=function(){function t(t,e){this.map=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,r=this.map,s=i.map((function(n){return n.render(t,e)}),n);return{change:function(t){for(var e=0,n=s;e<n.length;e++){n[e].change(t)}},destroy:function(){for(var t=0,e=s;t<e.length;t++){e[t].destroy()}},request:function(t){var e=r(t);void 0!==e&&s.forEach((function(t){return t.request(e)}))}}},t}();e.MapQueryTemplate=a,e.mapQuery=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new a(t.map,e)},e.mapQueryConditional=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new a(t.map,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),r=n(0),s=function(){function t(t,e){this.options=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,s=this.options.repeatUntil,a=new r.Group;t.append(a);var o=t.withAppend((function(t){return a.addChild(t)})),h=[],u={change:function(t){for(var e=h.length,r=0,a=function(){var a=s(t,r);if(void 0===a)return"break";if(r<e)for(var u=0,c=h[r];u<c.length;u++){c[u].change(a)}else h.push(i.map((function(t){return t.render(o,a)}),n));r++};;){if("break"===a())break}for(var u=r;u<e;){for(var c=0,l=h[u];c<l.length;c++){l[c].destroy()}u++}h=h.slice(0,r)},destroy:function(){a.remove();for(var t=0,e=h;t<e.length;t++)for(var n=0,i=e[t];n<i.length;n++){i[n].destroy()}h=[]},request:function(t){for(var e=0,n=h;e<n.length;e++)for(var i=0,r=n[e];i<r.length;i++){r[i].request(t)}}};return u.change(e),u},t}();e.PaperUntilTemplate=s,e.until=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s(t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=function(){function t(t){this.makeContent=t}return t.prototype.render=function(t,e){var n=this.makeContent,r=n(e)||"",s=t.doc.createTextNode(r);return t.append(s),{change:function(t){var e=n(t)||"";e!==r&&(s.nodeValue=e,e.length<5e3&&(r=e))},destroy:function(){i.removeNode(s)},request:function(t){}}},t}();e.DOMDerivedTextTemplate=r;var s=function(){function t(t){this.content=t}return t.prototype.render=function(t,e){var n=t.doc.createTextNode(this.content);return t.append(n),{change:function(t){},destroy:function(){i.removeNode(n)},request:function(t){}}},t}();e.DOMLiteralTextTemplate=s,e.text=function(t){return"function"==typeof t?new r(t):new s(t||"")}},function(t,e,n){"use strict";var i=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,r++)i[r]=s[a];return i};Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),s=n(3),a=function(){function t(t,e,n){this.getParent=t,this.append=e,this.children=n}return t.prototype.render=function(t,e){var n=this,i=this.getParent(t.doc),r=t.withAppend((function(e){return n.append(t.doc,e)})).withParent(i),a=s.map((function(t){return t.render(r,e)}),this.children);return{change:function(t){for(var e=0,n=a;e<n.length;e++){n[e].change(t)}},destroy:function(){for(var t=0,e=a;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=a;e<n.length;e++){n[e].request(t)}}}},t}();e.DOMPortalTemplate=a,e.portal=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new a(t.getParent,t.append,s.map(r.domChildToTemplate,e))},e.portalWithSelector=function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return e.portal.apply(void 0,i([{getParent:function(e){var n=e.querySelector(t.selector);if(!n)throw new Error("selector doesn't match any element: \""+t.selector+'"');return n},append:function(e,n){e.querySelector(t.selector).appendChild(n)}}],n))},e.headPortal=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new a((function(t){return t.head}),(function(t,e){return t.head.appendChild(e)}),s.map(r.domChildToTemplate,t))},e.bodyPortal=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new a((function(t){return t.body}),(function(t,e){return t.body.appendChild(e)}),s.map(r.domChildToTemplate,t))}},function(t,e,n){"use strict";function i(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),i(n(2)),i(n(11))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(3),s=function(){function t(t,e){this.options=t,this.children=e}return t.prototype.render=function(t,e){var n=this.children,s=this.options,a=s.refId,o=s.repeatUntil,h=t.withAppendToReference(a),u=h.ctx,c=h.ref,l=[],f={change:function(t){for(var e=l.length,i=0,s=function(){var s=o(t,i);if(void 0===s)return"break";if(i<e)for(var a=0,h=l[i];a<h.length;a++){h[a].change(s)}else l.push(r.map((function(t){return t.render(u,s)}),n));i++};;){if("break"===s())break}for(var a=i;a<e;){for(var h=0,c=l[a];h<c.length;h++){c[h].destroy()}a++}l=l.slice(0,i)},destroy:function(){i.removeNode(c);for(var t=0,e=l;t<e.length;t++)for(var n=0,r=e[t];n<r.length;n++){r[n].destroy()}l=[]},request:function(t){for(var e=0,n=l;e<n.length;e++)for(var i=0,r=n[e];i<r.length;i++){r[i].request(t)}}};return f.change(e),f},t}();e.DOMUntilTemplate=s,e.until=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s(t,r.map(i.domChildToTemplate,e))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,n,i,r){this.canvas=t,this.scope=e,this.project=n,this.append=i,this.dispatch=r}return t.prototype.mapAction=function(e){var n=this;return new t(this.canvas,this.scope,this.project,this.append,(function(t){return n.dispatch(e(t))}))},t.prototype.conditionalMapAction=function(e){var n=this;return new t(this.canvas,this.scope,this.project,this.append,(function(t){var i=e(t);void 0!==i&&n.dispatch(i)}))},t.prototype.withAppend=function(e){return new t(this.canvas,this.scope,this.project,e,this.dispatch)},t.prototype.withDispatch=function(e){return new t(this.canvas,this.scope,this.project,this.append,e)},t}();e.PaperContext=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),r=n(3),s=function(){function t(t,e,n){this.store=t,this.children=e,this.delayed=n}return t.prototype.render=function(t,e){var n;if(this.delayed){var i=!0;n=function(t){i&&(i=!1,setTimeout((function(){u.change(t),i=!0})))}}else n=function(t){u.change(t)};var s=this.store,a=s.property;a.observable.on(n);var o=t.withDispatch((function(t){s.process(t)})),h=r.map((function(t){return t.render(o,a.get())}),this.children),u={change:function(t){s.property.set(t);for(var e=0,n=h;e<n.length;e++){n[e].change(t)}},destroy:function(){a.observable.off(n);for(var t=0,e=h;t<e.length;t++){e[t].destroy()}},request:function(t){for(var e=0,n=h;e<n.length;e++){n[e].request(t)}}};return a.set(e),u},t}();e.DOMComponentTemplate=s,e.component=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return new s(t.store,r.map(i.domChildToTemplate,e),t.delayed||!1)}},function(t,e,n){"use strict";n.r(e);n(31);for(var i=n(30),r=n(1),s=n(27),a=n(2),o=n(5),h=n(29),u=n(12),c=["path_simplification","symbol"],l=function(t){return{kind:"ChangeSample",sample:t}},f={kind:"ExportSVG"},d={kind:"ExportPNG"},p=function(t){return{kind:"SetMainAreaSize",size:t}},g=function(t){return{kind:"MainAreaSize",callback:t}},_=function(t){return{kind:"ExportPNG",callback:t}},v=function(t){return{kind:"ExportSVG",callback:t}},m=n(4),y=n(10),x=n(28),b=n(0),w=function(t,e){return function(e){var n=document.createElement("a");n.href=URL.createObjectURL(e),n.download=t,n.click()}},S=w("export.svg"),C=w("export.png"),k=n(24),P=n(9),A=n(7),I=n(21),T=n(23),E=n(8),O=n(22),M=[],L=0;L<500;L++)M.push({pos:new b.Point(.95*Math.random()+.025,.95*Math.random()+.025),rotation:30*Math.random()-15});var N,B,z,j,V={size:new b.Size(0,0),stars:M},R=m.Store.ofState({state:V,reducer:function(t,e){return t}}),D=function(){return(D=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},F=Object(k.lazy)((function(){return Object(P.adapter)({mergeStates:function(t,e){return D(D({},e),{size:t.size})}},(t=new b.Path.Star({insert:!1,center:new b.Point(0,0),radius1:2.5,radius2:6,points:5,fillColor:new b.Color(1,1,.4),strokeWidth:.5,strokeColor:new b.Color(.8,.8,.8),shadowBlur:0}),e=new b.SymbolDefinition(t),Object(A.component)({store:R},Object(I.rectangle)({opacity:0,size:function(t){return t.size},fillColor:new b.Color(.11,.1,.15),position:function(t){return new b.Point(t.size.width/2,t.size.height/2)},afterrender:function(e,n){n.onFrame=function(){n.opacity<1?n.opacity=n.opacity+.04:(n.opacity=1,t.shadowBlur<20?(t.shadowColor=new b.Color(1,1,.9),t.shadowBlur=t.shadowBlur+1,t.shadowOffset=new b.Point(0,0)):n.onFrame=null)}}}),Object(O.layer)({fillColor:new b.Color(1,0,0)}),Object(E.iterate)({getArray:function(t){return t.stars}},Object(T.symbolItem)({definition:e,rotation:function(t){return t[0].rotation},position:function(t){var e=t[0],n=t[1],i=e.pos.clone();return i.x=i.x*n.size.width,i.y=i.y*n.size.height,i}})))));var t,e})),q={drawing:{kind:"drawing"},editing:function(t){return{kind:"editing",pathIndex:t}}},U={paths:[],current:[],mode:q.drawing},H=function(){return(H=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},G=Object(y.reduceOnKind)({AddSegment:function(t,e){var n=t.current.concat([e.segment]);return H(H({},t),{current:n})},AddPath:function(t){if(t.current.length<=1)return t;var e=new b.Path({segments:t.current,insert:!1,applyMatrix:!1});e.simplify(10);var n=t.paths.concat([{segments:e.segments.map((function(t){var n=t.clone();return n.transform(new b.Matrix(1,0,0,1,-e.position.x,-e.position.y)),n})),position:e.position}]);return e.remove(),H(H({},t),{paths:n,current:[],mode:q.editing(n.length-1)})},RemovePath:function(t){if("drawing"===t.mode.kind)return t;var e=t.paths.slice(0,t.mode.pathIndex).concat(t.paths.slice(t.mode.pathIndex+1));return H(H({},t),{mode:q.drawing,paths:e})},ChangeMode:function(t,e){return H(H({},t),{mode:e.mode})},UpdatePosition:function(t,e){if("editing"===t.mode.kind){var n=t.paths[t.mode.pathIndex],i=H(H({},n),{position:n.position.add(e.delta)}),r=t.paths.slice(0,t.mode.pathIndex).concat([i]).concat(t.paths.slice(t.mode.pathIndex+1));return H(H({},t),{paths:r})}return t}}),W={addSegment:function(t){return{kind:"AddSegment",segment:t}},addPath:{kind:"AddPath"},removePath:{kind:"RemovePath"},selectPath:function(t){return{kind:"ChangeMode",mode:q.editing(t)}},draw:{kind:"ChangeMode",mode:q.drawing},updatePosition:function(t){return{kind:"UpdatePosition",delta:t}}},Z=n(13),K=n(14),Q=n(25),$=n(26),J=Object(r.span)({},Object(r.span)({attrs:{class:"message"}},Object(o.match)(["mode","kind"],{editing:function(t){return"Selected line has "+t.paths[t.mode.pathIndex].segments.length+" segments"},drawing:function(t){return t.current.length>0?"line has "+t.current.length+" segments":t.paths.length>0?"click to select a line or click and drag to draw":"click and drag to draw a line"}})),Object(r.span)({attrs:{class:"actions"}},Object(r.button)({attrs:{disabled:function(t){return"editing"!==t.mode.kind}},events:{click:function(){return W.removePath}}},"Remove Selected"))),X=m.Store.ofState({state:U,reducer:G}),Y=Object(P.adapter)({},(N=X,Object(A.component)({store:N},Object(Q.htmlPortalWithSelector)({selector:"#toolbar"},J),Object(Z.tool)({active:function(t){return"drawing"===t.mode.kind},onMouseDown:function(t,e,n,i){var r=i.hitTest(e.point,{stroke:!0,tolerance:5});return r?W.selectPath(r.item.index):W.draw},onMouseUp:function(){return W.addPath},onMouseDrag:function(t,e){return W.addSegment(new b.Segment(e.point))}}),Object(Z.tool)({active:function(t){return"editing"===t.mode.kind},onMouseDown:function(t,e,n,i){var r=i.hitTest(e.point,{stroke:!0,tolerance:5});return r?W.selectPath(r.item.index):W.draw},onMouseDrag:function(t,e){return W.updatePosition(e.delta)}}),Object(K.path)({segments:function(t){return t.current},selected:!0}),Object(E.iterate)({getArray:function(t){return t.paths}},Object(K.path)({applyMatrix:!1,position:function(t){return t[0].position},segments:function(t){return t[0].segments},strokeWidth:1,strokeColor:new b.Color(.2,.2,.2),fullySelected:function(t){t[0];var e=t[1],n=t[2];return Object($.matchKind)({drawing:function(){return!1},editing:function(t){return t.pathIndex===n}})(e.mode)}}))))),tt=function(){return(tt=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},et=(B=location.hash.substring(1),z=c.indexOf(B)>=0?B:c[0],{examples:c,selected:z,mainAreaSize:void 0}),nt=Object(y.reduceOnKind)({ChangeSample:function(t,e){return tt(tt({},t),{selected:e.sample})},SetMainAreaSize:function(t,e){return tt(tt({},t),{mainAreaSize:e.size})},ExportPNG:function(t){return t},ExportSVG:function(t){return t}}),it=m.Store.ofState({state:et,reducer:nt}),rt=Object(r.article)({attrs:{className:"app"}},Object(r.header)({attrs:{class:"header"}},Object(r.div)({attrs:{class:"logo"}},"Tempo + Paper"),Object(r.div)({attrs:{id:"toolbar"}}),Object(r.div)({attrs:{class:"toolbar-fixed"}},Object(r.button)({events:{click:function(){return f}}},"Export to SVG"),Object(r.button)({events:{click:function(){return d}}},"Export to PNG"))),Object(r.section)({attrs:{class:"body"}},Object(r.section)({attrs:{class:"sidebar"}},Object(r.ul)({},Object(s.iterate)({getArray:function(t){return t.examples}},Object(r.li)({},Object(o.matchBool)({condition:function(t){var e=t[0],n=t[1];t[2];return e===n.selected},true:Object(r.span)({},(function(t){return t[0].split("_").join(" ")})),false:Object(r.a)({attrs:{href:function(t){return"#"+t[0]}},events:{click:function(t){var e=t[0];return l(e)}}},(function(t){return t[0].split("_").join(" ")}))}))))),Object(r.main)({attrs:{class:"main"},respond:function(t,e){if("MainAreaSize"===t.kind){var n=Object(a.containerSize)(e);t.callback(new b.Size(n.width,n.height))}}},Object(o.matchBool)({condition:function(t){return void 0!==t.mainAreaSize},true:Object(u.mapState)({map:function(t){return{size:t.mainAreaSize,kind:t.selected}}},Object(x.project)({width:function(t){return t.size.width},height:function(t){return t.size.height},respond:function(t,e,n,i){if(i)if("ExportSVG"===t.kind){var r=i.context.project.exportSVG({asString:!0,embedImages:!0}),s=new Blob([r],{type:"application/svg+xml"});t.callback(s)}else"ExportPNG"===t.kind&&i.context.canvas.toBlob((function(e){return t.callback(e)}),"image/png")}},Object(h.matchKind)({symbol:F,path_simplification:Y}))),false:""})))),st=i.Tempo.render({store:it,template:rt}).view;it.observable.on((j=st,function(t,e){switch(e.kind){case"ExportPNG":return j.request(_(C));case"ExportSVG":return j.request(v(S))}}));var at=g((function(t){it.process(p(t))}));st.request(at),window.addEventListener("resize",(function(){st.request(at)}),!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,