!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=18)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.map=function(e,t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e(t[o]);return r},t.flatMap=function(e,t){for(var n=new Array,r=0,o=t;r<o.length;r++){var u=o[r];n.push.apply(n,e(u))}return n},t.head=function(e){return e.length>0?e[0]:r.nothing},t.tail=function(e){return e.slice(1)},t.equals=function(e,t,n){if(t.length!==n.length)return!1;for(var r=0;r<t.length;r++)if(!e(t[r],n[r]))return!1;return!0},t.isEmpty=function(e){return 0===e.length},t.hasValues=function(e){return e.length>0},t.filter=function(e,t){for(var n=[],r=0,o=t;r<o.length;r++){var u=o[r];e(u)&&n.push(u)}return n},t.flatten=function(e){var t;return(t=[]).concat.apply(t,e)},t.foldLeft=function(e,t,n){for(var r=0,o=t;r<o.length;r++){n=e(n,o[r])}return n},t.all=function(e,t){for(var n=0,r=t;n<r.length;n++){if(!e(r[n]))return!1}return!0},t.any=function(e,t){for(var n=0,r=t;n<r.length;n++){if(e(r[n]))return!0}return!1},t.each=function(e,t){for(var n=0,r=t;n<r.length;n++){e(r[n])}},t.concat=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=[]).concat.apply(e,t)},t.sort=function(e,t){return t.slice().sort(e)},t.range=function(e,t){for(var n=new Array(e),r=0;r<e;r++)n[r]=t(r);return n},t.numbersRange=function(e,n){return void 0===n&&(n=0),t.range(e,(function(e){return n+e}))},t.fill=function(e,n){return t.range(e,(function(){return n}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(6),u=n(25);t.removeNode=function(e){var t=e;t&&t.onblur&&(t.onblur=null),e&&void 0!==e.ownerDocument&&e.parentElement&&e.parentElement.removeChild(e)},t.insertFBefore=function(e){return function(t){null!=e.parentElement&&e.parentElement.insertBefore(t,e)}},t.domChildToTemplate=function(e){return"string"==typeof e||"function"==typeof e||void 0===e?u.text(e):e},t.processAttribute=function(e,t,n,u){var a=r.htmlAttributeMap[t]||o.setAttribute;if("function"==typeof n)if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var i=function(r){var o=n(r);a(e,t,o)};u.push(i)}else{var c=void 0;i=function(r){var o=n(r);o!==c&&(a(e,t,o),String(o).length<5e4&&(c=o))};u.push(i)}else a(e,t,n);return u},t.processEvent=function(e,t,n,r,o){var u;return e[t]=function(t){var o=n(u,t,e);void 0!==o&&r(o)},o.push((function(e){u=e})),o},t.processStyle=function(e,t,n,r){var u;"function"==typeof n?r.push((function(r){var a=n(r);a!==u&&(o.setOneStyle(e,t,a),u=a)})):o.setOneStyle(e,t,n);return r},t.containerSize=function(e){for(var t=[],n=0;n<e.children.length;n++){var r=e.children[n];t[n]=r.style.display,r.style.display="none"}var o={width:e.offsetWidth,height:e.offsetHeight};for(n=0;n<e.children.length;n++){(r=e.children[n]).style.display=t[n]}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(7);function u(e){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];for(var u=0,a=n;u<a.length;u++){if("None"===a[u].kind)return t.none}var i=r.map((function(e){return e.value}),n);return t.some(e.apply(void 0,i))}t.some=function(e){return{kind:"Some",value:e}},t.none={kind:"None"},t.ofValue=function(e){return null==e?t.none:t.some(e)},t.ap=function(e,n){return t.flatten(t.map((function(e){return t.map((function(t){return e(t)}),n)}),e))},t.apN=function(e){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];if("None"===e.kind)return t.none;for(var u=0,a=n;u<a.length;u++){if("None"===a[u].kind)return t.none}var i=r.map((function(e){return e.value}),n);return t.some(e.value.apply(e,i))},t.map=function(e,n){switch(n.kind){case"None":return n;case"Some":return t.some(e(n.value))}},t.mapN=u,t.flatMap=function(e,t){switch(t.kind){case"None":return t;case"Some":return e(t.value)}},t.flatMapN=function(e){for(var n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];for(var u=0,a=n;u<a.length;u++){if("None"===a[u].kind)return t.none}var i=r.map((function(e){return e.value}),n);return e.apply(void 0,i)},t.equals=function(e,t,n){return t.kind===n.kind&&("None"===t.kind&&"None"===n.kind||e(t.value,n.value))},t.isNone=function(e){return"None"===e.kind},t.isSome=function(e){return"Some"===e.kind},t.filter=function(e,n){switch(n.kind){case"None":return t.none;case"Some":return e(n.value)?n:t.none}},t.getOrThrow=function(e,t){switch(e.kind){case"None":throw t;case"Some":return e.value}},t.toMaybe=function(e){switch(e.kind){case"None":return;case"Some":return e.value}},t.getUnsafe=function(e){return t.getOrThrow(e,"unable to extract value from None")},t.getOrElse=function(e,t){switch(e.kind){case"None":return t;case"Some":return e.value}},t.getOrElseLazy=function(e,t){switch(e.kind){case"None":return t();case"Some":return e.value}},t.toBoolean=function(e){switch(e.kind){case"None":return!1;case"Some":return!0}},t.toArray=function(e){switch(e.kind){case"None":return[];case"Some":return[e.value]}},t.toResult=function(e,t){switch(e.kind){case"None":return o.failure(t);case"Some":return o.success(e.value)}},t.toResultLazy=function(e,t){switch(e.kind){case"None":return o.failure(t());case"Some":return o.success(e.value)}},t.flatten=function(e){switch(e.kind){case"None":return t.none;case"Some":return e.value}},t.cata=function(e,t,n){switch(t.kind){case"None":return n;case"Some":return e(t.value)}},t.cataLazy=function(e,t,n){switch(t.kind){case"None":return n();case"Some":return e(t.value)}},t.foldLeft=function(e,t,n){switch(t.kind){case"None":return n;case"Some":return e(n,t.value)}},t.all=function(e,t){switch(t.kind){case"None":return!0;case"Some":return e(t.value)}},t.any=function(e,t){switch(t.kind){case"None":return!1;case"Some":return e(t.value)}},t.each=function(e,t){switch(t.kind){case"None":return;case"Some":return e(t.value)}},t.firstSome=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var r=0,o=e;r<o.length;r++){var u=o[r];if(t.isSome(u))return u}return t.none},t.recover=function(e,n){switch(e.kind){case"None":return t.some(n);case"Some":return e}},t.recoverLazy=function(e,n){switch(e.kind){case"None":return t.some(n());case"Some":return e}},t.combine=function(e,t){return u((function(e,t){return[e,t]}),e,t)},t.spread=function(e,n){return t.map((function(t){return e(t[0],t[1])}),n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nothing=void 0,t.just=function(e){return e},t.isNothing=function(e){return null==e},t.isJust=function(e){return null!=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31),o=n(14),u=n(2);t.toHref=r.matchKind({Home:function(e){return""},Page:function(e){return"#/page/"+e.path},NotFound:function(e){return e.path}}),t.toContentUrl=r.matchKind({Home:function(e){return u.some("pages/index.html")},Page:function(e){return u.some("pages/"+e.path)},NotFound:function(e){return u.none}}),t.Route={home:{kind:"Home"},page:function(e){return"index.html"===e?t.Route.home:{kind:"Page",path:e}},notFound:function(e){return{kind:"NotFound",path:e}}},t.pageToRoute=function(e){return t.Route.page(e.path)},t.sameRoute=function(e,t){return o.deepEqual(e,t)},t.pageMatchesRoute=function(e,n){return t.sameRoute(t.Route.page(e.path),n)},t.parseUrl=function(e){return""===e||"index.html"===e?t.Route.home:e.startsWith("#/page/")?t.Route.page(e.substring(7)):t.Route.notFound(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15);t.a=r.el2("a"),t.abbr=r.el2("abbr"),t.address=r.el2("address"),t.applet=r.el2("applet"),t.area=r.el2("area"),t.article=r.el2("article"),t.aside=r.el2("aside"),t.audio=r.el2("audio"),t.b=r.el2("b"),t.base=r.el2("base"),t.basefont=r.el2("basefont"),t.bdi=r.el2("bdi"),t.bdo=r.el2("bdo"),t.blockquote=r.el2("blockquote"),t.body=r.el2("body"),t.br=r.el2("br"),t.button=r.el2("button"),t.canvas=r.el2("canvas"),t.caption=r.el2("caption"),t.cite=r.el2("cite"),t.code=r.el2("code"),t.col=r.el2("col"),t.colgroup=r.el2("colgroup"),t.data=r.el2("data"),t.datalist=r.el2("datalist"),t.dd=r.el2("dd"),t.del=r.el2("del"),t.details=r.el2("details"),t.dfn=r.el2("dfn"),t.dialog=r.el2("dialog"),t.dir=r.el2("dir"),t.div=r.el2("div"),t.dl=r.el2("dl"),t.dt=r.el2("dt"),t.em=r.el2("em"),t.embed=r.el2("embed"),t.fieldset=r.el2("fieldset"),t.figcaption=r.el2("figcaption"),t.figure=r.el2("figure"),t.font=r.el2("font"),t.footer=r.el2("footer"),t.form=r.el2("form"),t.frame=r.el2("frame"),t.frameset=r.el2("frameset"),t.h1=r.el2("h1"),t.h2=r.el2("h2"),t.h3=r.el2("h3"),t.h4=r.el2("h4"),t.h5=r.el2("h5"),t.h6=r.el2("h6"),t.head=r.el2("head"),t.header=r.el2("header"),t.hgroup=r.el2("hgroup"),t.hr=r.el2("hr"),t.html=r.el2("html"),t.i=r.el2("i"),t.iframe=r.el2("iframe"),t.img=r.el2("img"),t.input=r.el2("input"),t.ins=r.el2("ins"),t.kbd=r.el2("kbd"),t.label=r.el2("label"),t.legend=r.el2("legend"),t.li=r.el2("li"),t.link=r.el2("link"),t.listing=r.el2("listing"),t.main=r.el2("main"),t.map=r.el2("map"),t.mark=r.el2("mark"),t.marquee=r.el2("marquee"),t.menu=r.el2("menu"),t.meta=r.el2("meta"),t.meter=r.el2("meter"),t.nav=r.el2("nav"),t.noscript=r.el2("noscript"),t.object=r.el2("object"),t.ol=r.el2("ol"),t.optgroup=r.el2("optgroup"),t.option=r.el2("option"),t.output=r.el2("output"),t.p=r.el2("p"),t.param=r.el2("param"),t.picture=r.el2("picture"),t.pre=r.el2("pre"),t.progress=r.el2("progress"),t.q=r.el2("q"),t.rp=r.el2("rp"),t.rt=r.el2("rt"),t.ruby=r.el2("ruby"),t.s=r.el2("s"),t.samp=r.el2("samp"),t.script=r.el2("script"),t.section=r.el2("section"),t.select=r.el2("select"),t.slot=r.el2("slot"),t.small=r.el2("small"),t.source=r.el2("source"),t.span=r.el2("span"),t.strong=r.el2("strong"),t.style=r.el2("style"),t.sub=r.el2("sub"),t.summary=r.el2("summary"),t.sup=r.el2("sup"),t.table=r.el2("table"),t.tbody=r.el2("tbody"),t.td=r.el2("td"),t.template=r.el2("template"),t.textarea=r.el2("textarea"),t.tfoot=r.el2("tfoot"),t.th=r.el2("th"),t.thead=r.el2("thead"),t.time=r.el2("time"),t.title=r.el2("title"),t.tr=r.el2("tr"),t.track=r.el2("track"),t.u=r.el2("u"),t.ul=r.el2("ul"),t.varEl=r.el2("var"),t.video=r.el2("video"),t.wbr=r.el2("wbr"),t.xmp=r.el2("xmp")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);function o(e,t,n){null==n?e.removeAttribute(t):e.setAttribute(t,n)}t.setOneStyle=function(e,t,n){var r=e.style;r[t]=null==n?null:n},t.setAttribute=o,t.setProperty=function(e,t,n){var r=e;r[t]=null==n?null:n},t.setStyleAttribute=function(e,t,n){if(null==n)e.removeAttribute(t);else if("string"==typeof n)o(e,t,n);else{var u=r.map((function(e){return e+": "+n[e]+";"}),Object.keys(n)).join(" ");o(e,t,u.length&&u||null)}},t.setBoolProperty=function(e,t,n){var r=e;if(null==n)r[t]=null;else{var o=!0===n||"true"===n;r[t]=o}},t.setEnumBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"true":!1===n?"false":null)},t.setBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"":null)},t.setCommaSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(", ")||null):o(e,t,n&&String(n)||null)},t.setSpaceSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(" ")||null):o(e,t,n&&String(n)||null)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(0),u=n(2);function a(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];for(var u=0,a=n;u<a.length;u++){var i=a[u];if("Failure"===i.kind)return i}var c=o.map((function(e){return e.value}),n);return t.success(e.apply(void 0,c))}t.success=function(e){return{kind:"Success",value:e}},t.failure=function(e){return{kind:"Failure",error:e}},t.ofNullable=function(e,n){return null==e?t.failure(n):t.success(e)},t.ap=function(e,n){return t.flatten(t.map((function(e){return t.map((function(t){return e(t)}),n)}),e))},t.apN=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];if("Failure"===e.kind)return e;for(var u=0,a=n;u<a.length;u++){var i=a[u];if("Failure"===i.kind)return i}var c=o.map((function(e){return e.value}),n);return t.success(e.value.apply(e,c))},t.apNWithCombine=function(e,n){for(var r,u=[],a=2;a<arguments.length;a++)u[a-2]=arguments[a];var i=null;"Failure"===e.kind&&(i=e.error);for(var c=0,s=u;c<s.length;c++){var l=s[c];"Failure"===l.kind&&(i=null!==i?n(i,l.error):l.error)}if(null!==i)return t.failure(i);var f=o.map((function(e){return e.value}),u);return t.success((r=e).value.apply(r,f))},t.map=function(e,n){switch(n.kind){case"Failure":return n;case"Success":return t.success(e(n.value))}},t.mapError=function(e,n){switch(n.kind){case"Failure":return t.failure(e(n.error));case"Success":return t.success(n.value)}},t.mapN=a,t.mapNWithCombine=function(e,n){for(var r=[],u=2;u<arguments.length;u++)r[u-2]=arguments[u];for(var a=null,i=0,c=r;i<c.length;i++){var s=c[i];"Failure"===s.kind&&(a=null!==a?n(a,s.error):s.error)}if(null!==a)return t.failure(a);var l=o.map((function(e){return e.value}),r);return t.success(e.apply(void 0,l))},t.flatMap=function(e,t){switch(t.kind){case"Failure":return t;case"Success":return e(t.value)}},t.flatMapN=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,u=t;r<u.length;r++){var a=u[r];if("Failure"===a.kind)return a}var i=o.map((function(e){return e.value}),t);return e.apply(void 0,i)},t.flatMapNWithCombine=function(e,n){for(var r=[],u=2;u<arguments.length;u++)r[u-2]=arguments[u];for(var a=null,i=0,c=r;i<c.length;i++){var s=c[i];"Failure"===s.kind&&(a=null!==a?n(a,s.error):s.error)}if(null!==a)return t.failure(a);var l=o.map((function(e){return e.value}),r);return e.apply(void 0,l)},t.equals=function(e,t,n){return t.kind===n.kind&&("Failure"===t.kind&&"Failure"===n.kind||e(t.value,n.value))},t.isFailure=function(e){return"Failure"===e.kind},t.isSuccess=function(e){return"Success"===e.kind},t.filter=function(e,n,r){switch(r.kind){case"Failure":return r;case"Success":return e(r.value)?r:t.failure(n)}},t.filterLazy=function(e,n,r){switch(r.kind){case"Failure":return r;case"Success":return e(r.value)?r:t.failure(n())}},t.getOrThrow=function(e){switch(e.kind){case"Failure":throw e.error;case"Success":return e.value}},t.getOrElse=function(e,t){switch(e.kind){case"Failure":return t;case"Success":return e.value}},t.getOrElseLazy=function(e,t){switch(e.kind){case"Failure":return t();case"Success":return e.value}},t.toBoolean=function(e){switch(e.kind){case"Failure":return!1;case"Success":return!0}},t.toArray=function(e){switch(e.kind){case"Failure":return[];case"Success":return[e.value]}},t.toMaybe=function(e){switch(e.kind){case"Failure":return r.nothing;case"Success":return r.just(e.value)}},t.toOption=function(e){switch(e.kind){case"Failure":return u.none;case"Success":return u.some(e.value)}},t.flatten=function(e){switch(e.kind){case"Failure":return t.failure(e.error);case"Success":return e.value}},t.cata=function(e,t,n){switch(t.kind){case"Failure":return n;case"Success":return e(t.value)}},t.cataLazy=function(e,t,n){switch(t.kind){case"Failure":return n();case"Success":return e(t.value)}},t.foldLeft=function(e,t,n){switch(t.kind){case"Failure":return n;case"Success":return e(n,t.value)}},t.all=function(e,t){switch(t.kind){case"Failure":return!0;case"Success":return e(t.value)}},t.any=function(e,t){switch(t.kind){case"Failure":return!1;case"Success":return e(t.value)}},t.each=function(e,t){switch(t.kind){case"Failure":return;case"Success":return e(t.value)}},t.firstSuccess=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var r=0,o=e;r<o.length;r++){var u=o[r];if(t.isSuccess(u))return u}for(var a=0,i=e;a<i.length;a++){return u=i[a]}throw"cannot use `firstSuccess` with empty argument list"},t.recover=function(e,n){switch(e.kind){case"Failure":return t.success(n);case"Success":return e}},t.recoverFromError=function(e,n){switch(e.kind){case"Failure":return t.success(n(e.error));case"Success":return e}},t.swap=function(e){switch(e.kind){case"Failure":return t.success(e.error);case"Success":return t.failure(e.value)}},t.combine=function(e,t){return a((function(e,t){return[e,t]}),e,t)},t.spread=function(e,n){return t.map((function(t){return e(t[0],t[1])}),n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(0),u=n(2);t.outcome=function(e){return{kind:"Outcome",value:e}},t.notAsked={kind:"NotAsked"},t.loading=function(e){return{kind:"Loading",progress:e}},t.map=function(e,n){switch(n.kind){case"Loading":case"NotAsked":return n;case"Outcome":return t.outcome(e(n.value))}},t.mapLoading=function(e,n){switch(n.kind){case"Loading":return t.loading(e(n.progress));case"NotAsked":return n;case"Outcome":return t.outcome(n.value)}},t.mapN=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];for(var u=0,a=n;u<a.length;u++){var i=a[u];if("Loading"===i.kind||"NotAsked"===i.kind)return i}var c=o.map((function(e){return e.value}),n);return t.outcome(e.apply(void 0,c))},t.flatMap=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return t;case"Outcome":return e(t.value)}},t.flatMapN=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,u=t;r<u.length;r++){var a=u[r];if("Loading"===a.kind||"NotAsked"===a.kind)return a}var i=o.map((function(e){return e.value}),t);return e.apply(void 0,i)},t.isOutcome=function(e){return"Outcome"===e.kind},t.isLoading=function(e){return"Loading"===e.kind},t.isNotAsked=function(e){return"NotAsked"===e.kind},t.getOrThrow=function(e){switch(e.kind){case"NotAsked":throw"Can't retrieve value from NotAsked";case"Loading":throw"Can't retrieve value from Loading: "+e.progress;case"Outcome":return e.value}},t.getOrElse=function(e,t){switch(e.kind){case"NotAsked":case"Loading":return t;case"Outcome":return e.value}},t.getOrElseLazy=function(e,t){switch(e.kind){case"NotAsked":case"Loading":return t();case"Outcome":return e.value}},t.toArray=function(e){switch(e.kind){case"NotAsked":case"Loading":return[];case"Outcome":return[e.value]}},t.toMaybe=function(e){switch(e.kind){case"NotAsked":case"Loading":return r.nothing;case"Outcome":return r.just(e.value)}},t.toOption=function(e){switch(e.kind){case"NotAsked":case"Loading":return u.none;case"Outcome":return u.some(e.value)}},t.flatten=function(e){switch(e.kind){case"NotAsked":return t.notAsked;case"Loading":return t.loading(e.progress);case"Outcome":return e.value}},t.cata=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n;case"Outcome":return e(t.value)}},t.cataLazy=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n();case"Outcome":return e(t.value)}},t.foldLeft=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n;case"Outcome":return e(n,t.value)}},t.all=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return!0;case"Outcome":return e(t.value)}},t.any=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return!1;case"Outcome":return e(t.value)}},t.each=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return;case"Outcome":return e(t.value)}},t.firstOutcome=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var r=0,o=e;r<o.length;r++){var u=o[r];if(t.isOutcome(u))return u}for(var a=0,i=e;a<i.length;a++){return u=i[a]}throw"cannot use `firstOutcome` with empty argument list"},t.recover=function(e,n){switch(e.kind){case"NotAsked":case"Loading":return t.outcome(n);case"Outcome":return e}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),u=n(10),a=n(16),i=function(){function e(e,t,n){this.path=e,this.matcher=t,this.refId=n}return e.prototype.render=function(e,t){var n=e.withAppendToReference(this.refId),r=n.ctx,u=n.ref,a=this.path.reduce((function(e,t){return e[t]}),t),i=this.matcher[a].render(r,t),c=this.matcher,s=this.path;return{change:function(e){var t=s.reduce((function(e,t){return e[t]}),e);t===a?i.change(e):(i.destroy(),a=t,i=c[t].render(r,e))},destroy:function(){o.removeNode(u),i.destroy()},request:function(e){i.request(e)}}},e}();t.MatchTemplate=i,t.match=function(e,t,n){return new i(e,Object.keys(t).reduce((function(e,n){var u;return r(r({},e),((u={})[n]=o.domChildToTemplate(t[n]),u))}),{}),n||"t:match")},t.matchKind=function(e,n){return void 0===n&&(n="t-match-kind"),t.match(["kind"],e,n)};var c=function(){function e(e,t,n,r){this.condition=e,this.trueTemplate=t,this.falseTemplate=n,this.refId=r}return e.prototype.render=function(e,t){var n=e.withAppendToReference(this.refId),r=n.ctx,u=n.ref,i=this.trueTemplate,c=this.falseTemplate,s=a.resolveAttribute(this.condition),l=s(t),f=l?i.render(r,t):c.render(r,t);return{change:function(e){var t=s(e);t===l?f.change(e):(f.destroy(),l=t,f=t?i.render(r,e):c.render(r,e))},destroy:function(){o.removeNode(u),f.destroy()},request:function(e){f.request(e)}}},e}();t.MatchBoolTemplate=c,t.matchBool=function(e){return new c(e.condition,o.domChildToTemplate(e.true),o.domChildToTemplate(e.false),e.refId||"t:match-bool")};var s=function(){function e(e,t,n,r){this.path=e,this.matchers=t,this.orElse=n,this.refId=r}return e.prototype.render=function(e,t){var n=this,r=this.matchers,u=this.orElse,a=e.withAppendToReference(this.refId),i=a.ctx,c=a.ref,s=this.path.reduce((function(e,t){return e[t]}),t),l=(this.matchers[s]||this.orElse).render(i,t);return{change:function(e){var t=n.path.reduce((function(e,t){return e[t]}),e);if(t===s)l.change(e);else{l.destroy(),s=t;var o=r[t]||u;l=o.render(i,e)}},destroy:function(){o.removeNode(c),l.destroy()},request:function(e){l.request(e)}}},e}();t.MatchValueTemplate=s,t.matchValue=function(e,t,n,u){return new s(e,Object.keys(t).reduce((function(e,n){var u;return r(r({},e),((u={})[n]=o.domChildToTemplate(t[n]),u))}),{}),o.domChildToTemplate(n),u||"t:match-value")},t.matchOption=function(e,n){return void 0===n&&(n="t-match-option"),t.matchKind({Some:u.mapState({map:function(e){return e.value}},e.Some),None:u.mapState({map:function(){return null}},e.None)},n)},t.matchMaybe=function(e,t){return void 0===t&&(t="t-match-option"),new c((function(e){return void 0!==e}),u.mapState({map:function(e){return e}},o.domChildToTemplate(e.Just)),o.domChildToTemplate(e.Nothing),t)},t.matchResult=function(e,n){return void 0===n&&(n="t-match-result"),t.matchKind({Success:u.mapState({map:function(e){return e.value}},e.Success),Failure:u.mapState({map:function(e){return e.error}},e.Failure)},n)},t.matchAsync=function(e,n){return void 0===n&&(n="t-match-async"),t.matchKind({Outcome:u.mapState({map:function(e){return e.value}},e.Outcome),Loading:u.mapState({map:function(e){return e.progress}},e.Loading),NotAsked:u.mapState({map:function(){return null}},e.NotAsked)},n)},t.matchAsyncResult=function(e,n){return void 0===n&&(n="t-match-async-result"),t.matchKind({Outcome:u.mapState({map:function(e){return e.value}},t.matchResult({Success:e.Success,Failure:e.Failure},n+"-sub")),Loading:u.mapState({map:function(e){return e.progress}},e.Loading),NotAsked:u.mapState({map:function(){return null}},e.NotAsked)},n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0),u=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,u=r(t),a=o.map((function(t){return t.render(e,u)}),n);return{change:function(e){for(var t=r(e),n=0,o=a;n<o.length;n++){o[n].change(t)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapStateTemplate=u,t.mapState=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.map,o.map(r.domChildToTemplate,t))},t.mapStateAndKeep=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u((function(t){return[e.map(t),t]}),o.map(r.domChildToTemplate,t))};var a=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,u=e.conditionalMapAction(r),a=o.map((function(e){return e.render(u,t)}),n);return{change:function(e){for(var t=0,n=a;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapActionTemplate=a,t.mapAction=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new a(e.map,o.map(r.domChildToTemplate,t))};var i=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,u=o.map((function(n){return n.render(e,t)}),n);return{change:function(e){for(var t=0,n=u;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=u;e<t.length;e++){t[e].destroy()}},request:function(e){var t=r(e);void 0!==t&&u.forEach((function(e){return e.request(t)}))}}},e}();t.MapQueryTemplate=i,t.mapQuery=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.map,o.map(r.domChildToTemplate,t))},t.mapQueryConditional=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.map,o.map(r.domChildToTemplate,t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6);t.attributeNameMap={acceptcharset:"accept-charset",asattr:"as",classname:"class",httpequiv:"http-equiv",htmlfor:"for"},t.htmlAttributeMap={"accept-charset":r.setSpaceSeparated,class:r.setSpaceSeparated,acceptcharset:r.setSpaceSeparated,async:r.setBoolAttribute,autofocus:r.setBoolAttribute,autoplay:r.setBoolAttribute,checked:r.setBoolProperty,contenteditable:r.setEnumBoolAttribute,controls:r.setBoolAttribute,default:r.setBoolAttribute,defer:r.setBoolAttribute,disabled:r.setBoolAttribute,draggable:r.setEnumBoolAttribute,formnovalidate:r.setBoolAttribute,headers:r.setSpaceSeparated,hidden:r.setBoolAttribute,ismap:r.setBoolAttribute,itemscope:r.setBoolAttribute,loop:r.setBoolAttribute,multiple:r.setBoolProperty,muted:r.setBoolProperty,nomodule:r.setBoolAttribute,novalidate:r.setBoolAttribute,open:r.setBoolAttribute,ping:r.setSpaceSeparated,playsinline:r.setBoolAttribute,readonly:r.setBoolAttribute,rel:r.setSpaceSeparated,required:r.setBoolAttribute,reversed:r.setBoolAttribute,selected:r.setBoolProperty,sizes:r.setCommaSeparated,srcset:r.setCommaSeparated,style:r.setStyleAttribute,typemustmatch:r.setBoolAttribute,value:r.setProperty}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(1)),r(n(6))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.listeners=[]}return e.ofOne=function(){return new e},e.ofTwo=function(){return new e},e.ofThree=function(){return new e},e.prototype.emit=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=this.listeners;n<r.length;n++){var o=r[n];o.apply(void 0,e)}},e.prototype.on=function(e){this.listeners.push(e)},e.prototype.off=function(e){var t=this.listeners.indexOf(e);return!(t<0)&&(this.listeners.splice(t,1),!0)},e.prototype.once=function(e){var t=this,n=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t.off(n),e.apply(void 0,r)};this.on(n)},e}();t.Emitter=r,t.debounce=function(e){return function(t){var n,r=!1;return function(){for(var o=[],u=0;u<arguments.length;u++)o[u]=arguments[u];n=o,r||(r=!0,setTimeout((function(){r=!1,t.apply(void 0,n)}),e))}}},t.nextFrame=function(e){var t,n=!1;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t=r,n||(n=!0,requestAnimationFrame((function(){n=!1,e.apply(void 0,t)})))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strictEqual=function(e,t){return e===t||e!=e&&t!=t},t.deepEqual=function(e,n){if(t.strictEqual(e,n))return!0;if(null==e||null==n)return!1;var r=Array.isArray(e);if(r!==Array.isArray(n))return!1;if(r){var o=e,u=n;if((y=o.length)!==u.length)return!1;for(var a=0;a<y;a++)if(!t.deepEqual(o[a],u[a]))return!1;return!0}var i=e instanceof Date;if(i!==n instanceof Date)return!1;if(i)return+e==+n;var c=e instanceof Set;if(c!==n instanceof Set)return!1;if(c){var s=e,l=n;if(s.size!==l.size)return!1;for(var f=s.keys();;){if((m=f.next()).done)break;if(!l.has(m.value))return!1}return!0}var d=e instanceof Map;if(d!==n instanceof Map)return!1;if(d){var p=e,h=n;if(p.size!==h.size)return!1;for(var v=p.keys();;){var m;if((m=v.next()).done)break;if(!t.deepEqual(p.get(m.value),h.get(m.value)))return!1}return!0}var g="object"==typeof e;if(g!==("object"==typeof n))return!1;if(g){var y,b=e,k=n,w=Object.keys(b),O=Object.keys(k);if((y=w.length)!==O.length)return!1;for(a=0;a<y;a++){var S=w[a];if(!k.hasOwnProperty(S))return!1;if(!t.deepEqual(b[S],k[S]))return!1}return!0}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0),u=n(11),a=function(e,t,n){return function(r,o){return e(r,t,n,o)}},i=function(){function e(e,t,n,r,o,u,a,i,c,s){this.createElement=e,this.attrs=t,this.events=n,this.styles=r,this.afterrender=o,this.beforechange=u,this.afterchange=a,this.beforedestroy=i,this.respond=c,this.children=s}return e.prototype.render=function(e,t){for(var n=this,u=this.createElement(e.doc),i=void 0,c=[],s=0,l=this.attrs;s<l.length;s++){var f=l[s];r.processAttribute(u,f.name,f.value,c)}for(var d=0,p=this.events;d<p.length;d++){f=p[d];r.processEvent(u,f.name,f.value,e.dispatch,c)}for(var h=0,v=this.styles;h<v.length;h++){f=v[h];r.processStyle(u,f.name,f.value,c)}for(var m=0,g=c;m<g.length;m++){(0,g[m])(t)}var y=e.withAppend((function(e){return u.appendChild(e)})).withParent(u),b=o.map((function(e){return e.render(y,t)}),this.children);e.append(u),this.afterrender&&(i=function(e,t,n,r){return void 0!==typeof e?e(r,t,n):void 0}(this.afterrender,u,e,t));var k=o.map((function(e){return function(t){return e.change(t)}}),b);if(c.push.apply(c,k),this.beforechange){var w=a(this.beforechange,u,e),O=function(e){i=w(e,i)};c.unshift(O)}if(this.afterchange){var S=a(this.afterchange,u,e);O=function(e){i=S(e,i)};c.push(O)}var A=this.beforedestroy&&function(){return n.beforedestroy(u,e,i)},N=this.respond;return{change:function(e){for(var t=0,n=c;t<n.length;t++){(0,n[t])(e)}},destroy:function(){A&&A(),r.removeNode(u);for(var e=0,t=b;e<t.length;e++){t[e].destroy()}},request:function(t){N&&(i=N(t,u,e,i));for(var n=0,r=b;n<r.length;n++){r[n].request(t)}}}},e}();function c(e){return o.map((function(t){var n=t.toLowerCase();return{name:n=u.attributeNameMap[n]||n,value:e[t]}}),Object.keys(e||{}))}function s(e){return o.map((function(t){return{name:"on"+t.toLowerCase(),value:e[t]}}),Object.keys(e||{}))}function l(e){return o.map((function(t){return{name:t,value:e[t]}}),Object.keys(e||{}))}t.DOMElement=i;var f=function(e){return function(t){return t.createElement(e)}};t.el=function(e,t){for(var n=[],u=2;u<arguments.length;u++)n[u-2]=arguments[u];return new i(f(e),c(t.attrs),s(t.events),l(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))},t.el2=function(e){return function(t){for(var n=[],u=1;u<arguments.length;u++)n[u-1]=arguments[u];return new i(f(e),c(t.attrs),s(t.events),l(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))}},t.defaultNamespaces={svg:"http://www.w3.org/2000/svg"};var d=function(e,t){return function(n){return n.createElementNS(e,t)}};t.elNS=function(e,n,u){for(var a=[],f=3;f<arguments.length;f++)a[f-3]=arguments[f];var p=t.defaultNamespaces[e]||e;return new i(d(p,n),c(u.attrs),s(u.events),l(u.styles),u.afterrender,u.beforechange,u.afterchange,u.beforedestroy,u.respond,o.map(r.domChildToTemplate,a))},t.elNS2=function(e,t){return function(n){for(var u=[],a=1;a<arguments.length;a++)u[a-1]=arguments[a];return new i(d(e,t),c(n.attrs),s(n.events),l(n.styles),n.afterrender,n.beforechange,n.afterchange,n.beforedestroy,n.respond,o.map(r.domChildToTemplate,u))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mapAttribute=function(e,t){return void 0===e?void 0:"function"==typeof e?function(n){var r=e(n);return void 0!==r?t(r):void 0}:t(e)},t.attributeToHandler=function(e,t){return void 0===e?function(){}:"function"==typeof e?function(n,r,o){var u=e(n);return void 0!==u?t(u,r,o):void 0}:function(n,r,o){return t(e,r,o)}},t.resolveAttribute=function(e){return"function"==typeof e?e:function(t){return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Action={requestToc:{kind:"RequestToc"},loadedToc:function(e){return{kind:"LoadedToc",toc:e}},requestPageContent:{kind:"RequestPageContent"},loadedPageContent:function(e){return{kind:"LoadedPageContent",content:e}},goTo:function(e){return{kind:"GoTo",route:e}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(19);var r=n(23),o=n(27),u=n(29),a=n(32),i=n(34),c=n(43),s=location.pathname.split("/").pop()+location.hash,l=o.Store.ofState({state:u.makeState(s),reducer:a.reducer});r.Tempo.render({store:l,template:i.template}),l.observable.on(c.middleware(l)),l.process({kind:"RequestToc"})},function(e,t,n){var r=n(20);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(22)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(21);(e.exports=r(!1)).push([e.i,"",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,i=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(c," */")),u=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(u).concat([o]).join("\n")}var a,i,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},function(e,t,n){"use strict";var r,o={},u=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function i(e,t){for(var n=[],r={},o=0;o<e.length;o++){var u=e[o],a=t.base?u[0]+t.base:u[0],i={css:u[1],media:u[2],sourceMap:u[3]};r[a]?r[a].parts.push(i):n.push(r[a]={id:a,parts:[i]})}return n}function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],u=o[r.id],a=0;if(u){for(u.refs++;a<u.parts.length;a++)u.parts[a](r.parts[a]);for(;a<r.parts.length;a++)u.parts.push(m(r.parts[a],t))}else{for(var i=[];a<r.parts.length;a++)i.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:i}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var u=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(u,a[t]):e.appendChild(u)}}function p(e,t,n){var r=n.css,o=n.media,u=n.sourceMap;if(o&&e.setAttribute("media",o),u&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(u))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var u=v++;n=h||(h=s(t)),r=d.bind(null,n,u,!1),o=d.bind(null,n,u,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=u());var n=i(e,t);return c(n,t),function(e){for(var r=[],u=0;u<n.length;u++){var a=n[u],s=o[a.id];s&&(s.refs--,r.push(s))}e&&c(i(e,t),t);for(var l=0;l<r.length;l++){var f=r[l];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete o[f.id]}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(24),o=n(26);!function(e){e.renderComponent=function(e){var t=e.el,n=e.component,r=n.store,u=e.document||document,a=t||u.body;return{view:n.render(new o.DOMContext(u,(function(e){return a.appendChild(e)}),a,(function(){})),r.property.get()),store:r}},e.render=function(t){var n=t.el,o=t.store,u=t.document,a=t.template,i=t.delayed,c=r.component({store:o,delayed:i},a);return e.renderComponent({el:n,component:c,document:u})}}(t.Tempo||(t.Tempo={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0),u=function(){function e(e,t,n){this.store=e,this.children=t,this.delayed=n}return e.prototype.render=function(e,t){var n;if(this.delayed){var r=!0;n=function(e){r&&(r=!1,setTimeout((function(){s.change(e),r=!0})))}}else n=function(e){s.change(e)};var u=this.store,a=u.property;a.observable.on(n);var i=e.withDispatch((function(e){u.process(e)})),c=o.map((function(e){return e.render(i,a.get())}),this.children),s={change:function(e){u.property.set(e);for(var t=0,n=c;t<n.length;t++){n[t].change(e)}},destroy:function(){a.observable.off(n);for(var e=0,t=c;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=c;t<n.length;t++){n[t].request(e)}}};return a.set(t),s},e}();t.DOMComponentTemplate=u,t.component=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.store,o.map(r.domChildToTemplate,t),e.delayed||!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e){this.makeContent=e}return e.prototype.render=function(e,t){var n=this.makeContent,o=n(t)||"",u=e.doc.createTextNode(o);return e.append(u),{change:function(e){var t=n(e)||"";t!==o&&(u.nodeValue=t,t.length<5e3&&(o=t))},destroy:function(){r.removeNode(u)},request:function(e){}}},e}();t.DOMDerivedTextTemplate=o;var u=function(){function e(e){this.content=e}return e.prototype.render=function(e,t){var n=e.doc.createTextNode(this.content);return e.append(n),{change:function(e){},destroy:function(){r.removeNode(n)},request:function(e){}}},e}();t.DOMLiteralTextTemplate=u,t.text=function(e){return"function"==typeof e?new o(e):new u(e||"")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),o=function(){function e(e,t,n,r){this.doc=e,this.append=t,this.parent=n,this.dispatch=r}return e.fromElement=function(t,n){return new e(t.ownerDocument||window&&window.document,(function(e){return t.appendChild(e)}),t,n)},e.prototype.mapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){return n.dispatch(t(e))}))},e.prototype.conditionalMapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){var r=t(e);void 0!==r&&n.dispatch(r)}))},e.prototype.withAppendToReference=function(e){var t=this.doc.createComment(e||"t:ref");return this.append(t),{ctx:this.withAppend(r.insertFBefore(t)),ref:t}},e.prototype.withAppend=function(t){return new e(this.doc,t,this.parent,this.dispatch)},e.prototype.withParent=function(t){return new e(this.doc,this.append,t,this.dispatch)},e.prototype.withDispatch=function(t){return new e(this.doc,this.append,this.parent,t)},e}();t.DOMContext=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(28),o=n(13),u=function(){function e(e,t){this.property=e,this.reducer=t,this.observable=this.emitter=o.Emitter.ofThree()}return e.ofState=function(t){return new e(new r.Property(t.state,t.equal),t.reducer)},e.prototype.process=function(e){var t=this.reducer(this.property.get(),e),n=this.property.set(t);return this.emitter.emit(t,e,n),n},e}();t.Store=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=n(14),u=function(){function e(e,t){void 0===t&&(t=o.strictEqual),this.value=e,this.equal=t,this.observable=this.emitter=r.Emitter.ofOne()}return e.prototype.set=function(e){return!this.equal(this.value,e)&&(this.value=e,this.emit(this.value),!0)},e.prototype.get=function(){return this.value},e.prototype.emit=function(e){this.emitter.emit(e)},e}();t.Property=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30),o=n(4);t.makeState=function(e){return{toc:r.notAsked,content:r.notAsked,route:o.parseUrl(e)}}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var u=arguments[t],a=0,i=u.length;a<i;a++,o++)r[o]=u[a];return r};Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),u=n(0),a=n(2),i=n(7),c=n(8);t.success=function(e){return c.outcome(i.success(e))},t.failure=function(e){return c.outcome(i.failure(e))},t.notAsked={kind:"NotAsked"},t.loading=function(e){return{kind:"Loading",progress:e}},t.map=function(e,t){return c.map((function(t){return i.map(e,t)}),t)},t.mapN=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return c.mapN.apply(void 0,r([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return i.mapN.apply(void 0,r([e],t))}],t))},t.flatMap=function(e,n){switch(n.kind){case"NotAsked":case"Loading":return n;case"Outcome":switch(n.value.kind){case"Success":return e(n.value.value);case"Failure":return t.failure(n.value.error)}}},t.flatMapN=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,o=t;r<o.length;r++){var a=o[r];if("Loading"===a.kind||"NotAsked"===a.kind)return a}var i=u.map((function(e){return e.value}),t);return e.apply(void 0,i)},t.isSuccess=function(e){return"Outcome"===e.kind&&"Success"===e.value.kind},t.isFailure=function(e){return"Outcome"===e.kind&&"Failure"===e.value.kind},t.isLoading=function(e){return"Loading"===e.kind},t.isNotAsked=function(e){return"NotAsked"===e.kind},t.getOrThrow=function(e){switch(e.kind){case"NotAsked":throw"Can't retrieve value from NotAsked";case"Loading":throw"Can't retrieve value from Loading: "+e.progress;case"Outcome":return i.getOrThrow(e.value)}},t.getOrElse=function(e,t){switch(e.kind){case"NotAsked":case"Loading":return t;case"Outcome":return i.getOrElse(e.value,t)}},t.getOrElseLazy=function(e,t){switch(e.kind){case"NotAsked":case"Loading":return t();case"Outcome":return i.getOrElseLazy(e.value,t)}},t.toArray=function(e){switch(e.kind){case"NotAsked":case"Loading":return[];case"Outcome":return i.toArray(e.value)}},t.toMaybe=function(e){switch(e.kind){case"NotAsked":case"Loading":return o.nothing;case"Outcome":return i.toMaybe(e.value)}},t.toOption=function(e){switch(e.kind){case"NotAsked":case"Loading":return a.none;case"Outcome":return i.toOption(e.value)}},t.flatten=function(e){switch(e.kind){case"NotAsked":return t.notAsked;case"Loading":return t.loading(e.progress);case"Outcome":return"Success"===e.value.kind&&"Outcome"===e.value.value.kind&&"Success"===e.value.value.value.kind?e.value.value:e}},t.cata=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n;case"Outcome":return i.cata(e,t.value,n)}},t.cataLazy=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n();case"Outcome":return i.cataLazy(e,t.value,n)}},t.foldLeft=function(e,t,n){switch(t.kind){case"NotAsked":case"Loading":return n;case"Outcome":return i.foldLeft(e,t.value,n)}},t.all=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return!0;case"Outcome":return i.all(e,t.value)}},t.any=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return!1;case"Outcome":return i.any(e,t.value)}},t.each=function(e,t){switch(t.kind){case"NotAsked":case"Loading":return;case"Outcome":return i.each(e,t.value)}},t.firstSuccess=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var r=0,o=e;r<o.length;r++){var u=o[r];if(t.isSuccess(u))return u}for(var a=0,i=e;a<i.length;a++){return u=i[a]}throw"cannot use `firstSuccess` with empty argument list"},t.recover=function(e,n){switch(e.kind){case"NotAsked":case"Loading":return t.success(n);case"Outcome":return c.outcome(i.recover(e.value,n))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.match=function(e,t,n){return t[n[e]](n)},t.deepMatch=function(e,t,n){return t[e.reduce((function(e,t){return e[t]}),n)](n)},t.createMatch=function(e){return function(t){return function(n){var r=n[e];return t[r](n)}}},t.createDeepMatch=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return function(n){var r=e.reduce((function(e,t){return e[t]}),n);return t[r](n)}}},t.matchKind=t.createMatch("kind")},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(8),u=n(33);t.reducer=u.reduceOnKind({GoTo:function(e,t){return r(r({},e),{route:t.route})},LoadedToc:function(e,t){return r(r({},e),{toc:t.toc})},RequestToc:function(e){return r(r({},e),{toc:o.loading(null)})},LoadedPageContent:function(e,t){return r(r({},e),{content:t.content})},RequestPageContent:function(e){return r(r({},e),{content:o.loading(null)})}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compose=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return function(n,r){return t.reduce((function(e,t){return t(e,r)}),e(n,r))}},t.matchReduce=function(e,t){return function(n,r){var o=r[e];return t[o](n,r)}},t.reduceOnKind=function(e){return function(t,n){var r=n.kind;return e[r](t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(9),u=n(10),a=n(35),i=n(37),c=n(42).holdState(),s=c.capture,l=c.release;t.template=r.div({attrs:{className:"app"}},s(u.mapState({map:function(e){return e.toc}},o.matchAsyncResult({NotAsked:"",Loading:"...",Success:r.div({},l(u.mapState({map:function(e){var t=e[0];return{toc:e[1],route:t.route}}},i.sidebar),u.mapState({map:function(e){return e[0].content}},a.content))),Failure:r.div({},(function(e){return e.message}))}))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(36),u=n(9);t.content=r.div({attrs:{className:"content"}},u.matchAsyncResult({Failure:r.div({attrs:{class:"error-message"}},(function(e){return e.message})),Loading:"...",NotAsked:"",Success:o.unsafeHtml({content:function(e){return e}})}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=function(){function e(e,t,n){this.content=e,this.element=t,this.transform=n}return e.prototype.render=function(e,t){return"function"==typeof this.content?function(e,t,n,r,o){var u,a=e.afterrender;e.afterrender=function(e,t,n){return u=t,a?a(e,t,n):void 0};var i=e.render(t,r),c=o(r)||"";u.innerHTML=n(c||"");var s="";return{change:function(e){var t=n(o(e)||"");t!==s&&(u.innerHTML=t,t.length<2e4&&(s=t))},destroy:function(){i.destroy()},request:function(e){i.request(e)}}}(this.element,e,this.transform,t,this.content):function(e,t,n,r,o){var u=e.render(t,r);return t.parent.innerHTML=n(o||""),u}(this.element,e,this.transform,t,this.content)},e}();t.DOMUnsafeHtml=o,t.unsafeHtml=function(e){return new o(e.content,e.element||r.el("div",{}),e.transform||function(e){return e})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(38),u=n(40),a=n(4),i=n(2);t.sidebar=r.div({attrs:{className:"sidebar"}},r.h1({},u.link("Tempo",a.Route.home)),r.h2({},"Contents"),r.ul({},o.iterate({getArray:function(e){return e.toc.pages}},r.li({},u.maybeLink((function(e){return e[0].title}),(function(e){var t=e[0],n=e[1];return a.pageMatchesRoute(t,n.route)?i.none:i.some(a.pageToRoute(t))}))))),r.h2({},"Projects"))},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var u=arguments[t],a=0,i=u.length;a<i;a++,o++)r[o]=u[a];return r};Object.defineProperty(t,"__esModule",{value:!0});var o=n(10),u=n(39);t.iterate=function(e){for(var t,n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];return o.mapState({map:function(n){return t=n,e.getArray(n)}},u.until.apply(void 0,r([{repeatUntil:function(e,n){return e[n]&&[e[n],t,n]}}],n)))},t.iterateItems=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return o.mapState({map:function(t){return e.getArray(t)}},u.until.apply(void 0,r([{repeatUntil:function(e,t){return e[t]}}],t)))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0),u=function(){function e(e,t){this.options=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,u=this.options,a=u.refId,i=u.repeatUntil,c=e.withAppendToReference(a),s=c.ctx,l=c.ref,f=[],d={change:function(e){for(var t=f.length,r=0,u=function(){var u=i(e,r);if(void 0===u)return"break";if(r<t)for(var a=0,c=f[r];a<c.length;a++){c[a].change(u)}else f.push(o.map((function(e){return e.render(s,u)}),n));r++};;){if("break"===u())break}for(var a=r;a<t;){for(var c=0,l=f[a];c<l.length;c++){l[c].destroy()}a++}f=f.slice(0,r)},destroy:function(){r.removeNode(l);for(var e=0,t=f;e<t.length;e++)for(var n=0,o=t[e];n<o.length;n++){o[n].destroy()}f=[]},request:function(e){for(var t=0,n=f;t<n.length;t++)for(var r=0,o=n[t];r<o.length;r++){o[r].request(e)}}};return d.change(t),d},e}();t.DOMUntilTemplate=u,t.until=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e,o.map(r.domChildToTemplate,t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(41),o=n(9),u=n(17),a=n(4),i=n(5),c=n(2),s=n(16);t.maybeLink=function(e,n){return r.fragment(o.matchBool({condition:s.mapAttribute(n,c.toBoolean),false:i.span({attrs:{class:"active"}},e),true:t.link(e,s.mapAttribute(n,c.getUnsafe))}))},t.link=function(e,t){return i.a({attrs:{class:"link",href:s.mapAttribute(t,(function(e){return a.toHref(e)}))},events:{click:s.attributeToHandler(t,(function(e,t){t.preventDefault();var n=a.toHref(e);return history.pushState(null,"",n||"./"),u.Action.goTo(e)}))}},e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(0),u=function(){function e(e){this.children=e}return e.prototype.render=function(e,t){var n=o.map((function(n){return n.render(e,t)}),this.children);return{change:function(e){for(var t=0,r=n;t<r.length;t++){r[t].change(e)}},destroy:function(){for(var e=0,t=n;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,r=n;t<r.length;t++){r[t].request(e)}}}},e}();t.DOMFragmentTemplate=u,t.fragment=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new u(o.map(r.domChildToTemplate,e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(12);t.holdMappedState=function(e){var t=0,n=new Map;return{capture:function(){for(var u=[],a=0;a<arguments.length;a++)u[a]=arguments[a];var i=r.map(o.domChildToTemplate,u);return{render:function(o,u){var a=r.map((function(e){return e.render(o,u)}),i),c=++t;return{change:function(t){n.set(c,e(t)),r.each((function(e){return e.change(t)}),a)},destroy:function(){n.delete(c),r.each((function(e){return e.destroy()}),a)},request:function(e){r.each((function(t){return t.request(e)}),a)}}}}},release:function(){for(var e=[],u=0;u<arguments.length;u++)e[u]=arguments[u];var a=r.map(o.domChildToTemplate,e);return{render:function(e,o){var u=t,i=n.get(u);if(void 0===i)throw"held state is not available at render, make sure that your `release` template is nested inside `capture`.";var c=[i,o],s=r.map((function(t){return t.render(e,c)}),a);return{change:function(e){var t=n.get(u);if(void 0===t)throw"held state is not available at change, make sure that your `release` template is nested inside `capture`.";var o=[t,e];r.each((function(e){return e.change(o)}),s)},destroy:function(){r.each((function(e){return e.destroy()}),s)},request:function(e){r.each((function(t){return t.request(e)}),s)}}}}}}},t.holdState=function(){return t.holdMappedState((function(e){return e}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=n(44),u=n(8),a=n(4),i=n(2);t.middleware=function(e){return function(t,n){switch(n.kind){case"RequestToc":o.loadJson("toc.json").then((function(t){return e.process(r.Action.loadedToc(u.outcome(t)))}));break;case"GoTo":i.each((function(t){o.loadText(t).then((function(t){return e.process(r.Action.loadedPageContent(u.outcome(t)))}))}),a.toContentUrl(n.route))}}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,u){function a(e){try{c(r.next(e))}catch(e){u(e)}}function i(e){try{c(r.throw(e))}catch(e){u(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,u,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=t.call(e,a)}catch(e){u=[6,e],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=n(7);t.loadText=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),[4,fetch(e)];case 1:return t=o.sent(),n=u.success,[4,t.text()];case 2:return[2,n.apply(void 0,[o.sent()])];case 3:return r=o.sent(),[2,u.failure({kind:"HttpError",message:String(r)})];case 4:return[2]}}))}))},t.loadJson=function(e){return r(void 0,void 0,void 0,(function(){var t,n,r;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),[4,fetch(e)];case 1:return t=o.sent(),n=u.success,[4,t.json()];case 2:return[2,n.apply(void 0,[o.sent()])];case 3:return r=o.sent(),[2,u.failure({kind:"HttpError",message:String(r)})];case 4:return[2]}}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,