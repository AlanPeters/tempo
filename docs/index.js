!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(2),i=n(13);t.removeNode=function(e){var t=e;t&&t.onblur&&(t.onblur=null),e&&void 0!==e.ownerDocument&&e.parentElement&&e.parentElement.removeChild(e)},t.insertFBefore=function(e){return function(t){null!=e.parentElement&&e.parentElement.insertBefore(t,e)}},t.domChildToTemplate=function(e){return"string"==typeof e||"function"==typeof e||void 0===e?i.text(e):e},t.processAttribute=function(e,t,n,i){var a=r.htmlAttributeMap[t]||o.setAttribute;if("function"==typeof n)if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var u=function(r){var o=n(r);a(e,t,o)};i.push(u)}else{var l=void 0;u=function(r){var o=n(r);o!==l&&(a(e,t,o),String(o).length<5e4&&(l=o))};i.push(u)}else a(e,t,n);return i},t.processEvent=function(e,t,n,r,o){var i;return e[t]=function(t){var o=n(i,t,e);void 0!==o&&r(o)},o.push((function(e){i=e})),o},t.processStyle=function(e,t,n,r){var i;"function"==typeof n?r.push((function(r){var a=n(r);a!==i&&(o.setOneStyle(e,t,a),i=a)})):o.setOneStyle(e,t,n);return r},t.containerSize=function(e){for(var t=[],n=0;n<e.children.length;n++){var r=e.children[n];t[n]=r.style.display,r.style.display="none"}var o={width:e.offsetWidth,height:e.offsetHeight};for(n=0;n<e.children.length;n++){(r=e.children[n]).style.display=t[n]}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.map=function(e,t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e(t[o]);return r},t.flatMap=function(e,t){for(var n=new Array,r=0,o=t;r<o.length;r++){var i=o[r];n.push.apply(n,e(i))}return n},t.head=function(e){return e.length>0?e[0]:r.nothing},t.tail=function(e){return e.slice(1)},t.equals=function(e,t,n){if(t.length!==n.length)return!1;for(var r=0;r<t.length;r++)if(!e(t[r],n[r]))return!1;return!0},t.isEmpty=function(e){return 0===e.length},t.hasValues=function(e){return e.length>0},t.filter=function(e,t){for(var n=[],r=0,o=t;r<o.length;r++){var i=o[r];e(i)&&n.push(i)}return n},t.flatten=function(e){var t;return(t=[]).concat.apply(t,e)},t.foldLeft=function(e,t,n){for(var r=0,o=t;r<o.length;r++){n=e(n,o[r])}return n},t.all=function(e,t){for(var n=0,r=t;n<r.length;n++){if(!e(r[n]))return!1}return!0},t.any=function(e,t){for(var n=0,r=t;n<r.length;n++){if(e(r[n]))return!0}return!1},t.each=function(e,t){for(var n=0,r=t;n<r.length;n++){e(r[n])}},t.concat=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=[]).concat.apply(e,t)},t.sort=function(e,t){return t.slice().sort(e)},t.range=function(e,t){for(var n=new Array(e),r=0;r<e;r++)n[r]=t(r);return n},t.numbersRange=function(e,n){return void 0===n&&(n=0),t.range(e,(function(e){return n+e}))},t.fill=function(e,n){return t.range(e,(function(){return n}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);function o(e,t,n){null==n?e.removeAttribute(t):e.setAttribute(t,n)}t.setOneStyle=function(e,t,n){var r=e.style;r[t]=null==n?null:n},t.setAttribute=o,t.setProperty=function(e,t,n){var r=e;r[t]=null==n?null:n},t.setStyleAttribute=function(e,t,n){if(null==n)e.removeAttribute(t);else if("string"==typeof n)o(e,t,n);else{var i=r.map((function(e){return e+": "+n[e]+";"}),Object.keys(n)).join(" ");o(e,t,i.length&&i||null)}},t.setBoolProperty=function(e,t,n){var r=e;if(null==n)r[t]=null;else{var o=!0===n||"true"===n;r[t]=o}},t.setEnumBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"true":!1===n?"false":null)},t.setBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"":null)},t.setCommaSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(", ")||null):o(e,t,n&&String(n)||null)},t.setSpaceSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(" ")||null):o(e,t,n&&String(n)||null)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);t.attributeNameMap={acceptcharset:"accept-charset",asattr:"as",classname:"class",httpequiv:"http-equiv",htmlfor:"for"},t.htmlAttributeMap={"accept-charset":r.setSpaceSeparated,class:r.setSpaceSeparated,acceptcharset:r.setSpaceSeparated,async:r.setBoolAttribute,autofocus:r.setBoolAttribute,autoplay:r.setBoolAttribute,checked:r.setBoolProperty,contenteditable:r.setEnumBoolAttribute,controls:r.setBoolAttribute,default:r.setBoolAttribute,defer:r.setBoolAttribute,disabled:r.setBoolAttribute,draggable:r.setEnumBoolAttribute,formnovalidate:r.setBoolAttribute,headers:r.setSpaceSeparated,hidden:r.setBoolAttribute,ismap:r.setBoolAttribute,itemscope:r.setBoolAttribute,loop:r.setBoolAttribute,multiple:r.setBoolProperty,muted:r.setBoolProperty,nomodule:r.setBoolAttribute,novalidate:r.setBoolAttribute,open:r.setBoolAttribute,ping:r.setSpaceSeparated,playsinline:r.setBoolAttribute,readonly:r.setBoolAttribute,rel:r.setSpaceSeparated,required:r.setBoolAttribute,reversed:r.setBoolAttribute,selected:r.setBoolProperty,sizes:r.setCommaSeparated,srcset:r.setCommaSeparated,style:r.setStyleAttribute,typemustmatch:r.setBoolAttribute,value:r.setProperty}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.listeners=[]}return e.ofOne=function(){return new e},e.ofTwo=function(){return new e},e.ofThree=function(){return new e},e.prototype.emit=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=this.listeners;n<r.length;n++){var o=r[n];o.apply(void 0,e)}},e.prototype.on=function(e){this.listeners.push(e)},e.prototype.off=function(e){var t=this.listeners.indexOf(e);return!(t<0)&&(this.listeners.splice(t,1),!0)},e.prototype.once=function(e){var t=this,n=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t.off(n),e.apply(void 0,r)};this.on(n)},e}();t.Emitter=r,t.debounce=function(e){return function(t){var n,r=!1;return function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];n=o,r||(r=!0,setTimeout((function(){r=!1,t.apply(void 0,n)}),e))}}},t.nextFrame=function(e){var t,n=!1;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t=r,n||(n=!0,requestAnimationFrame((function(){n=!1,e.apply(void 0,t)})))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(6);var r=n(10),o=n(16),i=n(19),a=n(20),u=n(21),l=o.Store.ofState({state:i.state,reducer:a.reducer});r.Tempo.render({store:l,template:u.template})},function(e,t,n){var r=n(7);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(8);(e.exports=r(!1)).push([e.i,"html{height:100%;background-color:#ddeeff}body{display:flex;align-items:center;justify-content:center;height:100%}.app{font-family:fantasy;font-size:120pt;line-height:1em}.count-small{font-size:32pt;line-height:1.2em}.count{width:380px;text-align:center;text-shadow:2px 2px 2px #fff,-2px -2px 2px #fff,0px 0px 20px rgba(0,0,0,0.2)}.buttons{display:flex;justify-content:space-around}button{box-shadow:0px 4px 20px 1px rgba(0,0,0,0.2);background:linear-gradient(to bottom, #67a 5%, #6070a0 100%);background-color:#599bb3;border-radius:8px;display:inline-block;cursor:pointer;color:#ffffff;font-family:Arial;font-size:56px;font-weight:bold;padding:6px 60px;text-decoration:none;text-shadow:0px 1px 4px rgba(0,0,0,0.6);outline:none}button[disabled]{opacity:0.3}button[disabled]:hover{background:linear-gradient(to bottom, #67a 5%, #6070a0 100%);background-color:#599bb3}button:hover{background:linear-gradient(to bottom, #408c99 5%, #599bb3 100%);background-color:#408c99}button:active{position:relative;top:1px}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},function(e,t,n){"use strict";var r,o={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function u(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],t))}else{for(var u=[];a<r.parts.length;a++)u.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:u}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=s(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e,t);return l(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i],s=o[a.id];s&&(s.refs--,r.push(s))}e&&l(u(e,t),t);for(var c=0;c<r.length;c++){var f=r[c];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete o[f.id]}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(14);!function(e){e.renderComponent=function(e){var t=e.el,n=e.component,r=n.store,i=e.document||document,a=t||i.body;return{view:n.render(new o.DOMContext(i,(function(e){return a.appendChild(e)}),a,(function(){})),r.property.get()),store:r}},e.render=function(t){var n=t.el,o=t.store,i=t.document,a=t.template,u=t.delayed,l=r.component({store:o,delayed:u},a);return e.renderComponent({el:n,component:l,document:i})}}(t.Tempo||(t.Tempo={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(){function e(e,t,n){this.store=e,this.children=t,this.delayed=n}return e.prototype.render=function(e,t){var n;if(this.delayed){var r=!0;n=function(e){r&&(r=!1,setTimeout((function(){s.change(e),r=!0})))}}else n=function(e){s.change(e)};var i=this.store,a=i.property;a.observable.on(n);var u=e.withDispatch((function(e){i.process(e)})),l=o.map((function(e){return e.render(u,a.get())}),this.children),s={change:function(e){i.property.set(e);for(var t=0,n=l;t<n.length;t++){n[t].change(e)}},destroy:function(){a.observable.off(n);for(var e=0,t=l;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=l;t<n.length;t++){n[t].request(e)}}};return a.set(t),s},e}();t.DOMComponentTemplate=i,t.component=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.store,o.map(r.domChildToTemplate,t),e.delayed||!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nothing=void 0,t.just=function(e){return e},t.isNothing=function(e){return null==e},t.isJust=function(e){return null!=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e){this.makeContent=e}return e.prototype.render=function(e,t){var n=this.makeContent,o=n(t)||"",i=e.doc.createTextNode(o);return e.append(i),{change:function(e){var t=n(e)||"";t!==o&&(i.nodeValue=t,t.length<5e3&&(o=t))},destroy:function(){r.removeNode(i)},request:function(e){}}},e}();t.DOMDerivedTextTemplate=o;var i=function(){function e(e){this.content=e}return e.prototype.render=function(e,t){var n=e.doc.createTextNode(this.content);return e.append(n),{change:function(e){},destroy:function(){r.removeNode(n)},request:function(e){}}},e}();t.DOMLiteralTextTemplate=i,t.text=function(e){return"function"==typeof e?new o(e):new i(e||"")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=function(){function e(e,t,n,r){this.doc=e,this.append=t,this.parent=n,this.dispatch=r}return e.fromElement=function(t,n){return new e(t.ownerDocument||window&&window.document,(function(e){return t.appendChild(e)}),t,n)},e.prototype.mapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){return n.dispatch(t(e))}))},e.prototype.conditionalMapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){var r=t(e);void 0!==r&&n.dispatch(r)}))},e.prototype.withAppendToReference=function(e){var t=this.doc.createComment(e||"t:ref");return this.append(t),{ctx:this.withAppend(r.insertFBefore(t)),ref:t}},e.prototype.withAppend=function(t){return new e(this.doc,t,this.parent,this.dispatch)},e.prototype.withParent=function(t){return new e(this.doc,this.append,t,this.dispatch)},e.prototype.withDispatch=function(t){return new e(this.doc,this.append,this.parent,t)},e}();t.DOMContext=o},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(0)),r(n(2))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=n(4),i=function(){function e(e,t){this.property=e,this.reducer=t,this.observable=this.emitter=o.Emitter.ofThree()}return e.ofState=function(t){return new e(new r.Property(t.state,t.equal),t.reducer)},e.prototype.process=function(e){var t=this.reducer(this.property.get(),e),n=this.property.set(t);return this.emitter.emit(t,e,n),n},e}();t.Store=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(18),i=function(){function e(e,t){void 0===t&&(t=o.strictEqual),this.value=e,this.equal=t,this.observable=this.emitter=r.Emitter.ofOne()}return e.prototype.set=function(e){return!this.equal(this.value,e)&&(this.value=e,this.emit(this.value),!0)},e.prototype.get=function(){return this.value},e.prototype.emit=function(e){this.emitter.emit(e)},e}();t.Property=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strictEqual=function(e,t){return e===t||e!=e&&t!=t},t.deepEqual=function(e,n){if(t.strictEqual(e,n))return!0;if(null==e||null==n)return!1;var r=Array.isArray(e);if(r!==Array.isArray(n))return!1;if(r){var o=e,i=n;if((y=o.length)!==i.length)return!1;for(var a=0;a<y;a++)if(!t.deepEqual(o[a],i[a]))return!1;return!0}var u=e instanceof Date;if(u!==n instanceof Date)return!1;if(u)return+e==+n;var l=e instanceof Set;if(l!==n instanceof Set)return!1;if(l){var s=e,c=n;if(s.size!==c.size)return!1;for(var f=s.keys();;){if((m=f.next()).done)break;if(!c.has(m.value))return!1}return!0}var p=e instanceof Map;if(p!==n instanceof Map)return!1;if(p){var d=e,h=n;if(d.size!==h.size)return!1;for(var v=d.keys();;){var m;if((m=v.next()).done)break;if(!t.deepEqual(d.get(m.value),h.get(m.value)))return!1}return!0}var b="object"==typeof e;if(b!==("object"==typeof n))return!1;if(b){var y,g=e,w=n,A=Object.keys(g),x=Object.keys(w);if((y=A.length)!==x.length)return!1;for(a=0;a<y;a++){var S=A[a];if(!w.hasOwnProperty(S))return!1;if(!t.deepEqual(g[S],w[S]))return!1}return!0}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.state={count:0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=function(e,t){switch(t.kind){case"increment":return{count:e.count+1};case"decrement":return{count:e.count-1};default:throw"this should never happen"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22),o=n(24),i=n(25);t.template=r.div({attrs:{className:"app"}},o.mapState({map:function(e){return e.count}},r.div({attrs:{className:"count count-small"}},"count"),r.div({attrs:{className:"count"}},String),r.div({attrs:{className:"buttons"}},r.button({events:{click:i.decrement},attrs:{disabled:function(e){return e<=0}}},"-"),r.button({events:{click:i.increment}},"+"))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(23);t.a=r.el2("a"),t.abbr=r.el2("abbr"),t.address=r.el2("address"),t.applet=r.el2("applet"),t.area=r.el2("area"),t.article=r.el2("article"),t.aside=r.el2("aside"),t.audio=r.el2("audio"),t.b=r.el2("b"),t.base=r.el2("base"),t.basefont=r.el2("basefont"),t.bdi=r.el2("bdi"),t.bdo=r.el2("bdo"),t.blockquote=r.el2("blockquote"),t.body=r.el2("body"),t.br=r.el2("br"),t.button=r.el2("button"),t.canvas=r.el2("canvas"),t.caption=r.el2("caption"),t.cite=r.el2("cite"),t.code=r.el2("code"),t.col=r.el2("col"),t.colgroup=r.el2("colgroup"),t.data=r.el2("data"),t.datalist=r.el2("datalist"),t.dd=r.el2("dd"),t.del=r.el2("del"),t.details=r.el2("details"),t.dfn=r.el2("dfn"),t.dialog=r.el2("dialog"),t.dir=r.el2("dir"),t.div=r.el2("div"),t.dl=r.el2("dl"),t.dt=r.el2("dt"),t.em=r.el2("em"),t.embed=r.el2("embed"),t.fieldset=r.el2("fieldset"),t.figcaption=r.el2("figcaption"),t.figure=r.el2("figure"),t.font=r.el2("font"),t.footer=r.el2("footer"),t.form=r.el2("form"),t.frame=r.el2("frame"),t.frameset=r.el2("frameset"),t.h1=r.el2("h1"),t.h2=r.el2("h2"),t.h3=r.el2("h3"),t.h4=r.el2("h4"),t.h5=r.el2("h5"),t.h6=r.el2("h6"),t.head=r.el2("head"),t.header=r.el2("header"),t.hgroup=r.el2("hgroup"),t.hr=r.el2("hr"),t.html=r.el2("html"),t.i=r.el2("i"),t.iframe=r.el2("iframe"),t.img=r.el2("img"),t.input=r.el2("input"),t.ins=r.el2("ins"),t.kbd=r.el2("kbd"),t.label=r.el2("label"),t.legend=r.el2("legend"),t.li=r.el2("li"),t.link=r.el2("link"),t.listing=r.el2("listing"),t.main=r.el2("main"),t.map=r.el2("map"),t.mark=r.el2("mark"),t.marquee=r.el2("marquee"),t.menu=r.el2("menu"),t.meta=r.el2("meta"),t.meter=r.el2("meter"),t.nav=r.el2("nav"),t.noscript=r.el2("noscript"),t.object=r.el2("object"),t.ol=r.el2("ol"),t.optgroup=r.el2("optgroup"),t.option=r.el2("option"),t.output=r.el2("output"),t.p=r.el2("p"),t.param=r.el2("param"),t.picture=r.el2("picture"),t.pre=r.el2("pre"),t.progress=r.el2("progress"),t.q=r.el2("q"),t.rp=r.el2("rp"),t.rt=r.el2("rt"),t.ruby=r.el2("ruby"),t.s=r.el2("s"),t.samp=r.el2("samp"),t.script=r.el2("script"),t.section=r.el2("section"),t.select=r.el2("select"),t.slot=r.el2("slot"),t.small=r.el2("small"),t.source=r.el2("source"),t.span=r.el2("span"),t.strong=r.el2("strong"),t.style=r.el2("style"),t.sub=r.el2("sub"),t.summary=r.el2("summary"),t.sup=r.el2("sup"),t.table=r.el2("table"),t.tbody=r.el2("tbody"),t.td=r.el2("td"),t.template=r.el2("template"),t.textarea=r.el2("textarea"),t.tfoot=r.el2("tfoot"),t.th=r.el2("th"),t.thead=r.el2("thead"),t.time=r.el2("time"),t.title=r.el2("title"),t.tr=r.el2("tr"),t.track=r.el2("track"),t.u=r.el2("u"),t.ul=r.el2("ul"),t.varEl=r.el2("var"),t.video=r.el2("video"),t.wbr=r.el2("wbr"),t.xmp=r.el2("xmp")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=n(3),a=function(e,t,n){return function(r,o){return e(r,t,n,o)}},u=function(){function e(e,t,n,r,o,i,a,u,l,s){this.createElement=e,this.attrs=t,this.events=n,this.styles=r,this.afterrender=o,this.beforechange=i,this.afterchange=a,this.beforedestroy=u,this.respond=l,this.children=s}return e.prototype.render=function(e,t){for(var n=this,i=this.createElement(e.doc),u=void 0,l=[],s=0,c=this.attrs;s<c.length;s++){var f=c[s];r.processAttribute(i,f.name,f.value,l)}for(var p=0,d=this.events;p<d.length;p++){f=d[p];r.processEvent(i,f.name,f.value,e.dispatch,l)}for(var h=0,v=this.styles;h<v.length;h++){f=v[h];r.processStyle(i,f.name,f.value,l)}for(var m=0,b=l;m<b.length;m++){(0,b[m])(t)}var y=e.withAppend((function(e){return i.appendChild(e)})).withParent(i),g=o.map((function(e){return e.render(y,t)}),this.children);e.append(i),this.afterrender&&(u=function(e,t,n,r){return void 0!==typeof e?e(r,t,n):void 0}(this.afterrender,i,e,t));var w=o.map((function(e){return function(t){return e.change(t)}}),g);if(l.push.apply(l,w),this.beforechange){var A=a(this.beforechange,i,e),x=function(e){u=A(e,u)};l.unshift(x)}if(this.afterchange){var S=a(this.afterchange,i,e);x=function(e){u=S(e,u)};l.push(x)}var j=this.beforedestroy&&function(){return n.beforedestroy(i,e,u)},T=this.respond;return{change:function(e){for(var t=0,n=l;t<n.length;t++){(0,n[t])(e)}},destroy:function(){j&&j(),r.removeNode(i);for(var e=0,t=g;e<t.length;e++){t[e].destroy()}},request:function(t){T&&(u=T(t,i,e,u));for(var n=0,r=g;n<r.length;n++){r[n].request(t)}}}},e}();function l(e){return o.map((function(t){var n=t.toLowerCase();return{name:n=i.attributeNameMap[n]||n,value:e[t]}}),Object.keys(e||{}))}function s(e){return o.map((function(t){return{name:"on"+t.toLowerCase(),value:e[t]}}),Object.keys(e||{}))}function c(e){return o.map((function(t){return{name:t,value:e[t]}}),Object.keys(e||{}))}t.DOMElement=u;var f=function(e){return function(t){return t.createElement(e)}};t.el=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return new u(f(e),l(t.attrs),s(t.events),c(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))},t.el2=function(e){return function(t){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return new u(f(e),l(t.attrs),s(t.events),c(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))}},t.defaultNamespaces={svg:"http://www.w3.org/2000/svg"};var p=function(e,t){return function(n){return n.createElementNS(e,t)}};t.elNS=function(e,n,i){for(var a=[],f=3;f<arguments.length;f++)a[f-3]=arguments[f];var d=t.defaultNamespaces[e]||e;return new u(p(d,n),l(i.attrs),s(i.events),c(i.styles),i.afterrender,i.beforechange,i.afterchange,i.beforedestroy,i.respond,o.map(r.domChildToTemplate,a))},t.elNS2=function(e,t){return function(n){for(var i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];return new u(p(e,t),l(n.attrs),s(n.events),c(n.styles),n.afterrender,n.beforechange,n.afterchange,n.beforedestroy,n.respond,o.map(r.domChildToTemplate,i))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=r(t),a=o.map((function(t){return t.render(e,i)}),n);return{change:function(e){for(var t=r(e),n=0,o=a;n<o.length;n++){o[n].change(t)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapStateTemplate=i,t.mapState=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.map,o.map(r.domChildToTemplate,t))},t.mapStateAndKeep=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i((function(t){return[e.map(t),t]}),o.map(r.domChildToTemplate,t))};var a=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=e.conditionalMapAction(r),a=o.map((function(e){return e.render(i,t)}),n);return{change:function(e){for(var t=0,n=a;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapActionTemplate=a,t.mapAction=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new a(e.map,o.map(r.domChildToTemplate,t))};var u=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=o.map((function(n){return n.render(e,t)}),n);return{change:function(e){for(var t=0,n=i;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=i;e<t.length;e++){t[e].destroy()}},request:function(e){var t=r(e);void 0!==t&&i.forEach((function(e){return e.request(t)}))}}},e}();t.MapQueryTemplate=u,t.mapQuery=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.map,o.map(r.domChildToTemplate,t))},t.mapQueryConditional=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.map,o.map(r.domChildToTemplate,t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decrement=function(){return{kind:"decrement"}},t.increment=function(){return{kind:"increment"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,