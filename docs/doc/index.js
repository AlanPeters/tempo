!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=n(2),i=n(13);t.removeNode=function(e){var t=e;t&&t.onblur&&(t.onblur=null),e&&void 0!==e.ownerDocument&&e.parentElement&&e.parentElement.removeChild(e)},t.insertFBefore=function(e){return function(t){null!=e.parentElement&&e.parentElement.insertBefore(t,e)}},t.domChildToTemplate=function(e){return"string"==typeof e||"function"==typeof e||void 0===e?i.text(e):e},t.processAttribute=function(e,t,n,i){var a=r.htmlAttributeMap[t]||o.setAttribute;if("function"==typeof n)if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var u=function(r){var o=n(r);a(e,t,o)};i.push(u)}else{var l=void 0;u=function(r){var o=n(r);o!==l&&(a(e,t,o),String(o).length<5e4&&(l=o))};i.push(u)}else a(e,t,n);return i},t.processEvent=function(e,t,n,r,o){var i;return e[t]=function(t){var o=n(i,t,e);void 0!==o&&r(o)},o.push((function(e){i=e})),o},t.processStyle=function(e,t,n,r){var i;"function"==typeof n?r.push((function(r){var a=n(r);a!==i&&(o.setOneStyle(e,t,a),i=a)})):o.setOneStyle(e,t,n);return r},t.containerSize=function(e){for(var t=[],n=0;n<e.children.length;n++){var r=e.children[n];t[n]=r.style.display,r.style.display="none"}var o={width:e.offsetWidth,height:e.offsetHeight};for(n=0;n<e.children.length;n++){(r=e.children[n]).style.display=t[n]}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.map=function(e,t){for(var n=t.length,r=new Array(n),o=0;o<n;o++)r[o]=e(t[o]);return r},t.flatMap=function(e,t){for(var n=new Array,r=0,o=t;r<o.length;r++){var i=o[r];n.push.apply(n,e(i))}return n},t.head=function(e){return e.length>0?e[0]:r.nothing},t.tail=function(e){return e.slice(1)},t.equals=function(e,t,n){if(t.length!==n.length)return!1;for(var r=0;r<t.length;r++)if(!e(t[r],n[r]))return!1;return!0},t.isEmpty=function(e){return 0===e.length},t.hasValues=function(e){return e.length>0},t.filter=function(e,t){for(var n=[],r=0,o=t;r<o.length;r++){var i=o[r];e(i)&&n.push(i)}return n},t.flatten=function(e){var t;return(t=[]).concat.apply(t,e)},t.foldLeft=function(e,t,n){for(var r=0,o=t;r<o.length;r++){n=e(n,o[r])}return n},t.all=function(e,t){for(var n=0,r=t;n<r.length;n++){if(!e(r[n]))return!1}return!0},t.any=function(e,t){for(var n=0,r=t;n<r.length;n++){if(e(r[n]))return!0}return!1},t.each=function(e,t){for(var n=0,r=t;n<r.length;n++){e(r[n])}},t.concat=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=[]).concat.apply(e,t)},t.sort=function(e,t){return t.slice().sort(e)},t.range=function(e,t){for(var n=new Array(e),r=0;r<e;r++)n[r]=t(r);return n},t.numbersRange=function(e,n){return void 0===n&&(n=0),t.range(e,(function(e){return n+e}))},t.fill=function(e,n){return t.range(e,(function(){return n}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);function o(e,t,n){null==n?e.removeAttribute(t):e.setAttribute(t,n)}t.setOneStyle=function(e,t,n){var r=e.style;r[t]=null==n?null:n},t.setAttribute=o,t.setProperty=function(e,t,n){var r=e;r[t]=null==n?null:n},t.setStyleAttribute=function(e,t,n){if(null==n)e.removeAttribute(t);else if("string"==typeof n)o(e,t,n);else{var i=r.map((function(e){return e+": "+n[e]+";"}),Object.keys(n)).join(" ");o(e,t,i.length&&i||null)}},t.setBoolProperty=function(e,t,n){var r=e;if(null==n)r[t]=null;else{var o=!0===n||"true"===n;r[t]=o}},t.setEnumBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"true":!1===n?"false":null)},t.setBoolAttribute=function(e,t,n){o(e,t,!0===n||"true"===n?"":null)},t.setCommaSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(", ")||null):o(e,t,n&&String(n)||null)},t.setSpaceSeparated=function(e,t,n){Array.isArray(n)?o(e,t,n.join(" ")||null):o(e,t,n&&String(n)||null)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);t.attributeNameMap={acceptcharset:"accept-charset",asattr:"as",classname:"class",httpequiv:"http-equiv",htmlfor:"for"},t.htmlAttributeMap={"accept-charset":r.setSpaceSeparated,class:r.setSpaceSeparated,acceptcharset:r.setSpaceSeparated,async:r.setBoolAttribute,autofocus:r.setBoolAttribute,autoplay:r.setBoolAttribute,checked:r.setBoolProperty,contenteditable:r.setEnumBoolAttribute,controls:r.setBoolAttribute,default:r.setBoolAttribute,defer:r.setBoolAttribute,disabled:r.setBoolAttribute,draggable:r.setEnumBoolAttribute,formnovalidate:r.setBoolAttribute,headers:r.setSpaceSeparated,hidden:r.setBoolAttribute,ismap:r.setBoolAttribute,itemscope:r.setBoolAttribute,loop:r.setBoolAttribute,multiple:r.setBoolProperty,muted:r.setBoolProperty,nomodule:r.setBoolAttribute,novalidate:r.setBoolAttribute,open:r.setBoolAttribute,ping:r.setSpaceSeparated,playsinline:r.setBoolAttribute,readonly:r.setBoolAttribute,rel:r.setSpaceSeparated,required:r.setBoolAttribute,reversed:r.setBoolAttribute,selected:r.setBoolProperty,sizes:r.setCommaSeparated,srcset:r.setCommaSeparated,style:r.setStyleAttribute,typemustmatch:r.setBoolAttribute,value:r.setProperty}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.listeners=[]}return e.ofOne=function(){return new e},e.ofTwo=function(){return new e},e.ofThree=function(){return new e},e.prototype.emit=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,r=this.listeners;n<r.length;n++){var o=r[n];o.apply(void 0,e)}},e.prototype.on=function(e){this.listeners.push(e)},e.prototype.off=function(e){var t=this.listeners.indexOf(e);return!(t<0)&&(this.listeners.splice(t,1),!0)},e.prototype.once=function(e){var t=this,n=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t.off(n),e.apply(void 0,r)};this.on(n)},e}();t.Emitter=r,t.debounce=function(e){return function(t){var n,r=!1;return function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];n=o,r||(r=!0,setTimeout((function(){r=!1,t.apply(void 0,n)}),e))}}},t.nextFrame=function(e){var t,n=!1;return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];t=r,n||(n=!0,requestAnimationFrame((function(){n=!1,e.apply(void 0,t)})))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(6);var r=n(10),o=n(16),i=n(19),a=n(20),u=n(21),l=o.Store.ofState({state:i.state,reducer:a.reducer});r.Tempo.render({store:l,template:u.template})},function(e,t,n){var r=n(7);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(8);(e.exports=r(!1)).push([e.i,"html{height:100%;background-color:#ddeeff}body{display:flex;align-items:center;justify-content:center;height:100%}.app{font-family:fantasy;font-size:120pt;line-height:1em}.count-small{font-size:32pt;line-height:1.2em}.count{width:380px;text-align:center;text-shadow:2px 2px 2px #fff,-2px -2px 2px #fff,0px 0px 20px rgba(0,0,0,0.2)}.buttons{display:flex;justify-content:space-around}button{box-shadow:0px 4px 20px 1px rgba(0,0,0,0.2);background:linear-gradient(to bottom, #67a 5%, #6070a0 100%);background-color:#599bb3;border-radius:8px;display:inline-block;cursor:pointer;color:#ffffff;font-family:Arial;font-size:56px;font-weight:bold;padding:6px 60px;text-decoration:none;text-shadow:0px 1px 4px rgba(0,0,0,0.6);outline:none}button[disabled]{opacity:0.3}button[disabled]:hover{background:linear-gradient(to bottom, #67a 5%, #6070a0 100%);background-color:#599bb3}button:hover{background:linear-gradient(to bottom, #408c99 5%, #599bb3 100%);background-color:#408c99}button:active{position:relative;top:1px}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(l," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,u,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},function(e,t,n){"use strict";var r,o={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function u(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],t))}else{for(var u=[];a<r.parts.length;a++)u.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:u}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=s(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e,t);return l(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i],s=o[a.id];s&&(s.refs--,r.push(s))}e&&l(u(e,t),t);for(var c=0;c<r.length;c++){var f=r[c];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete o[f.id]}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(14);!function(e){e.renderComponent=function(e){var t=e.el,n=e.component,r=n.store,i=e.document||document,a=t||i.body;return{view:n.render(new o.DOMContext(i,(function(e){return a.appendChild(e)}),a,(function(){})),r.property.get()),store:r}},e.render=function(t){var n=t.el,o=t.store,i=t.document,a=t.template,u=t.delayed,l=r.component({store:o,delayed:u},a);return e.renderComponent({el:n,component:l,document:i})}}(t.Tempo||(t.Tempo={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(){function e(e,t,n){this.store=e,this.children=t,this.delayed=n}return e.prototype.render=function(e,t){var n;if(this.delayed){var r=!0;n=function(e){r&&(r=!1,setTimeout((function(){s.change(e),r=!0})))}}else n=function(e){s.change(e)};var i=this.store,a=i.property;a.observable.on(n);var u=e.withDispatch((function(e){i.process(e)})),l=o.map((function(e){return e.render(u,a.get())}),this.children),s={change:function(e){i.property.set(e);for(var t=0,n=l;t<n.length;t++){n[t].change(e)}},destroy:function(){a.observable.off(n);for(var e=0,t=l;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=l;t<n.length;t++){n[t].request(e)}}};return a.set(t),s},e}();t.DOMComponentTemplate=i,t.component=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.store,o.map(r.domChildToTemplate,t),e.delayed||!1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nothing=void 0,t.just=function(e){return e},t.isNothing=function(e){return null==e},t.isJust=function(e){return null!=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e){this.makeContent=e}return e.prototype.render=function(e,t){var n=this.makeContent,o=n(t)||"",i=e.doc.createTextNode(o);return e.append(i),{change:function(e){var t=n(e)||"";t!==o&&(i.nodeValue=t,t.length<5e3&&(o=t))},destroy:function(){r.removeNode(i)},request:function(e){}}},e}();t.DOMDerivedTextTemplate=o;var i=function(){function e(e){this.content=e}return e.prototype.render=function(e,t){var n=e.doc.createTextNode(this.content);return e.append(n),{change:function(e){},destroy:function(){r.removeNode(n)},request:function(e){}}},e}();t.DOMLiteralTextTemplate=i,t.text=function(e){return"function"==typeof e?new o(e):new i(e||"")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=function(){function e(e,t,n,r){this.doc=e,this.append=t,this.parent=n,this.dispatch=r}return e.fromElement=function(t,n){return new e(t.ownerDocument||window&&window.document,(function(e){return t.appendChild(e)}),t,n)},e.prototype.mapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){return n.dispatch(t(e))}))},e.prototype.conditionalMapAction=function(t){var n=this;return new e(this.doc,this.append,this.parent,(function(e){var r=t(e);void 0!==r&&n.dispatch(r)}))},e.prototype.withAppendToReference=function(e){var t=this.doc.createComment(e||"t:ref");return this.append(t),{ctx:this.withAppend(r.insertFBefore(t)),ref:t}},e.prototype.withAppend=function(t){return new e(this.doc,t,this.parent,this.dispatch)},e.prototype.withParent=function(t){return new e(this.doc,this.append,t,this.dispatch)},e.prototype.withDispatch=function(t){return new e(this.doc,this.append,this.parent,t)},e}();t.DOMContext=o},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(0)),r(n(2))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=n(4),i=function(){function e(e,t){this.property=e,this.reducer=t,this.observable=this.emitter=o.Emitter.ofThree()}return e.ofState=function(t){return new e(new r.Property(t.state,t.equal),t.reducer)},e.prototype.process=function(e){var t=this.reducer(this.property.get(),e),n=this.property.set(t);return this.emitter.emit(t,e,n),n},e}();t.Store=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(18),i=function(){function e(e,t){void 0===t&&(t=o.strictEqual),this.value=e,this.equal=t,this.observable=this.emitter=r.Emitter.ofOne()}return e.prototype.set=function(e){return!this.equal(this.value,e)&&(this.value=e,this.emit(this.value),!0)},e.prototype.get=function(){return this.value},e.prototype.emit=function(e){this.emitter.emit(e)},e}();t.Property=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strictEqual=function(e,t){return e===t||e!=e&&t!=t},t.deepEqual=function(e,n){if(t.strictEqual(e,n))return!0;if(null==e||null==n)return!1;var r=Array.isArray(e);if(r!==Array.isArray(n))return!1;if(r){var o=e,i=n;if((y=o.length)!==i.length)return!1;for(var a=0;a<y;a++)if(!t.deepEqual(o[a],i[a]))return!1;return!0}var u=e instanceof Date;if(u!==n instanceof Date)return!1;if(u)return+e==+n;var l=e instanceof Set;if(l!==n instanceof Set)return!1;if(l){var s=e,c=n;if(s.size!==c.size)return!1;for(var f=s.keys();;){if((m=f.next()).done)break;if(!c.has(m.value))return!1}return!0}var p=e instanceof Map;if(p!==n instanceof Map)return!1;if(p){var d=e,h=n;if(d.size!==h.size)return!1;for(var v=d.keys();;){var m;if((m=v.next()).done)break;if(!t.deepEqual(d.get(m.value),h.get(m.value)))return!1}return!0}var b="object"==typeof e;if(b!==("object"==typeof n))return!1;if(b){var y,g=e,w=n,A=Object.keys(g),x=Object.keys(w);if((y=A.length)!==x.length)return!1;for(a=0;a<y;a++){var S=A[a];if(!w.hasOwnProperty(S))return!1;if(!t.deepEqual(g[S],w[S]))return!1}return!0}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.state={count:0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reducer=function(e,t){switch(t.kind){case"increment":return{count:e.count+1};case"decrement":return{count:e.count-1};default:throw"this should never happen"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22),o=n(24),i=n(25);t.template=r.div({attrs:{className:"app"}},o.mapState({map:function(e){return e.count}},r.div({attrs:{className:"count count-small"}},"count"),r.div({attrs:{className:"count"}},String),r.div({attrs:{className:"buttons"}},r.button({events:{click:i.decrement},attrs:{disabled:function(e){return e<=0}}},"-"),r.button({events:{click:i.increment}},"+"))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(23);t.a=r.el2("a"),t.abbr=r.el2("abbr"),t.address=r.el2("address"),t.applet=r.el2("applet"),t.area=r.el2("area"),t.article=r.el2("article"),t.aside=r.el2("aside"),t.audio=r.el2("audio"),t.b=r.el2("b"),t.base=r.el2("base"),t.basefont=r.el2("basefont"),t.bdi=r.el2("bdi"),t.bdo=r.el2("bdo"),t.blockquote=r.el2("blockquote"),t.body=r.el2("body"),t.br=r.el2("br"),t.button=r.el2("button"),t.canvas=r.el2("canvas"),t.caption=r.el2("caption"),t.cite=r.el2("cite"),t.code=r.el2("code"),t.col=r.el2("col"),t.colgroup=r.el2("colgroup"),t.data=r.el2("data"),t.datalist=r.el2("datalist"),t.dd=r.el2("dd"),t.del=r.el2("del"),t.details=r.el2("details"),t.dfn=r.el2("dfn"),t.dialog=r.el2("dialog"),t.dir=r.el2("dir"),t.div=r.el2("div"),t.dl=r.el2("dl"),t.dt=r.el2("dt"),t.em=r.el2("em"),t.embed=r.el2("embed"),t.fieldset=r.el2("fieldset"),t.figcaption=r.el2("figcaption"),t.figure=r.el2("figure"),t.font=r.el2("font"),t.footer=r.el2("footer"),t.form=r.el2("form"),t.frame=r.el2("frame"),t.frameset=r.el2("frameset"),t.h1=r.el2("h1"),t.h2=r.el2("h2"),t.h3=r.el2("h3"),t.h4=r.el2("h4"),t.h5=r.el2("h5"),t.h6=r.el2("h6"),t.head=r.el2("head"),t.header=r.el2("header"),t.hgroup=r.el2("hgroup"),t.hr=r.el2("hr"),t.html=r.el2("html"),t.i=r.el2("i"),t.iframe=r.el2("iframe"),t.img=r.el2("img"),t.input=r.el2("input"),t.ins=r.el2("ins"),t.kbd=r.el2("kbd"),t.label=r.el2("label"),t.legend=r.el2("legend"),t.li=r.el2("li"),t.link=r.el2("link"),t.listing=r.el2("listing"),t.main=r.el2("main"),t.map=r.el2("map"),t.mark=r.el2("mark"),t.marquee=r.el2("marquee"),t.menu=r.el2("menu"),t.meta=r.el2("meta"),t.meter=r.el2("meter"),t.nav=r.el2("nav"),t.noscript=r.el2("noscript"),t.object=r.el2("object"),t.ol=r.el2("ol"),t.optgroup=r.el2("optgroup"),t.option=r.el2("option"),t.output=r.el2("output"),t.p=r.el2("p"),t.param=r.el2("param"),t.picture=r.el2("picture"),t.pre=r.el2("pre"),t.progress=r.el2("progress"),t.q=r.el2("q"),t.rp=r.el2("rp"),t.rt=r.el2("rt"),t.ruby=r.el2("ruby"),t.s=r.el2("s"),t.samp=r.el2("samp"),t.script=r.el2("script"),t.section=r.el2("section"),t.select=r.el2("select"),t.slot=r.el2("slot"),t.small=r.el2("small"),t.source=r.el2("source"),t.span=r.el2("span"),t.strong=r.el2("strong"),t.style=r.el2("style"),t.sub=r.el2("sub"),t.summary=r.el2("summary"),t.sup=r.el2("sup"),t.table=r.el2("table"),t.tbody=r.el2("tbody"),t.td=r.el2("td"),t.template=r.el2("template"),t.textarea=r.el2("textarea"),t.tfoot=r.el2("tfoot"),t.th=r.el2("th"),t.thead=r.el2("thead"),t.time=r.el2("time"),t.title=r.el2("title"),t.tr=r.el2("tr"),t.track=r.el2("track"),t.u=r.el2("u"),t.ul=r.el2("ul"),t.varEl=r.el2("var"),t.video=r.el2("video"),t.wbr=r.el2("wbr"),t.xmp=r.el2("xmp")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=n(3),a=function(e,t,n){return function(r,o){return e(r,t,n,o)}},u=function(){function e(e,t,n,r,o,i,a,u,l,s){this.createElement=e,this.attrs=t,this.events=n,this.styles=r,this.afterrender=o,this.beforechange=i,this.afterchange=a,this.beforedestroy=u,this.respond=l,this.children=s}return e.prototype.render=function(e,t){for(var n=this,i=this.createElement(e.doc),u=void 0,l=[],s=0,c=this.attrs;s<c.length;s++){var f=c[s];r.processAttribute(i,f.name,f.value,l)}for(var p=0,d=this.events;p<d.length;p++){f=d[p];r.processEvent(i,f.name,f.value,e.dispatch,l)}for(var h=0,v=this.styles;h<v.length;h++){f=v[h];r.processStyle(i,f.name,f.value,l)}for(var m=0,b=l;m<b.length;m++){(0,b[m])(t)}var y=e.withAppend((function(e){return i.appendChild(e)})).withParent(i),g=o.map((function(e){return e.render(y,t)}),this.children);e.append(i),this.afterrender&&(u=function(e,t,n,r){return void 0!==typeof e?e(r,t,n):void 0}(this.afterrender,i,e,t));var w=o.map((function(e){return function(t){return e.change(t)}}),g);if(l.push.apply(l,w),this.beforechange){var A=a(this.beforechange,i,e),x=function(e){u=A(e,u)};l.unshift(x)}if(this.afterchange){var S=a(this.afterchange,i,e);x=function(e){u=S(e,u)};l.push(x)}var j=this.beforedestroy&&function(){return n.beforedestroy(i,e,u)},T=this.respond;return{change:function(e){for(var t=0,n=l;t<n.length;t++){(0,n[t])(e)}},destroy:function(){j&&j(),r.removeNode(i);for(var e=0,t=g;e<t.length;e++){t[e].destroy()}},request:function(t){T&&(u=T(t,i,e,u));for(var n=0,r=g;n<r.length;n++){r[n].request(t)}}}},e}();function l(e){return o.map((function(t){var n=t.toLowerCase();return{name:n=i.attributeNameMap[n]||n,value:e[t]}}),Object.keys(e||{}))}function s(e){return o.map((function(t){return{name:"on"+t.toLowerCase(),value:e[t]}}),Object.keys(e||{}))}function c(e){return o.map((function(t){return{name:t,value:e[t]}}),Object.keys(e||{}))}t.DOMElement=u;var f=function(e){return function(t){return t.createElement(e)}};t.el=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return new u(f(e),l(t.attrs),s(t.events),c(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))},t.el2=function(e){return function(t){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return new u(f(e),l(t.attrs),s(t.events),c(t.styles),t.afterrender,t.beforechange,t.afterchange,t.beforedestroy,t.respond,o.map(r.domChildToTemplate,n))}},t.defaultNamespaces={svg:"http://www.w3.org/2000/svg"};var p=function(e,t){return function(n){return n.createElementNS(e,t)}};t.elNS=function(e,n,i){for(var a=[],f=3;f<arguments.length;f++)a[f-3]=arguments[f];var d=t.defaultNamespaces[e]||e;return new u(p(d,n),l(i.attrs),s(i.events),c(i.styles),i.afterrender,i.beforechange,i.afterchange,i.beforedestroy,i.respond,o.map(r.domChildToTemplate,a))},t.elNS2=function(e,t){return function(n){for(var i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];return new u(p(e,t),l(n.attrs),s(n.events),c(n.styles),n.afterrender,n.beforechange,n.afterchange,n.beforedestroy,n.respond,o.map(r.domChildToTemplate,i))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=r(t),a=o.map((function(t){return t.render(e,i)}),n);return{change:function(e){for(var t=r(e),n=0,o=a;n<o.length;n++){o[n].change(t)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapStateTemplate=i,t.mapState=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i(e.map,o.map(r.domChildToTemplate,t))},t.mapStateAndKeep=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new i((function(t){return[e.map(t),t]}),o.map(r.domChildToTemplate,t))};var a=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=e.conditionalMapAction(r),a=o.map((function(e){return e.render(i,t)}),n);return{change:function(e){for(var t=0,n=a;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=a;e<t.length;e++){t[e].destroy()}},request:function(e){for(var t=0,n=a;t<n.length;t++){n[t].request(e)}}}},e}();t.MapActionTemplate=a,t.mapAction=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new a(e.map,o.map(r.domChildToTemplate,t))};var u=function(){function e(e,t){this.map=e,this.children=t}return e.prototype.render=function(e,t){var n=this.children,r=this.map,i=o.map((function(n){return n.render(e,t)}),n);return{change:function(e){for(var t=0,n=i;t<n.length;t++){n[t].change(e)}},destroy:function(){for(var e=0,t=i;e<t.length;e++){t[e].destroy()}},request:function(e){var t=r(e);void 0!==t&&i.forEach((function(e){return e.request(t)}))}}},e}();t.MapQueryTemplate=u,t.mapQuery=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.map,o.map(r.domChildToTemplate,t))},t.mapQueryConditional=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new u(e.map,o.map(r.domChildToTemplate,t))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decrement=function(){return{kind:"decrement"}},t.increment=function(){return{kind:"increment"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL2RvbS9saWIvdXRpbHMvZG9tLmpzIiwid2VicGFjazovLy8vVXNlcnMvZnJhbmNvcG9udGljZWxsaS9wcm9qZWN0cy90ZW1wby9zdGQvbGliL2FycmF5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vZG9tL2xpYi91dGlscy9zZXRfYXR0cmlidXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvZnJhbmNvcG9udGljZWxsaS9wcm9qZWN0cy90ZW1wby9kb20vbGliL2RvbV9hdHRyaWJ1dGVzX21hcHBlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vc3RvcmUvbGliL2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlLnNhc3M/MWFkMiIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuc2FzcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vY29tbW9uL3RlbXAvbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9jc3MtbG9hZGVyLzMuMy4yX3dlYnBhY2tANC40MS4yL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL2NvbW1vbi90ZW1wL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1qcy5vcmcvc3R5bGUtbG9hZGVyLzEuMC4xX3dlYnBhY2tANC40MS4yL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vZG9tL2xpYi90ZW1wby5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vZG9tL2xpYi9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL3N0ZC9saWIvbWF5YmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL2RvbS9saWIvdGV4dC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vZG9tL2xpYi9jb250ZXh0LmpzIiwid2VicGFjazovLy8vVXNlcnMvZnJhbmNvcG9udGljZWxsaS9wcm9qZWN0cy90ZW1wby9kb20vbGliL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvZnJhbmNvcG9udGljZWxsaS9wcm9qZWN0cy90ZW1wby9zdG9yZS9saWIvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL3N0b3JlL2xpYi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vc3RvcmUvbGliL2VxdWFsaXR5LmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGUudHMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9mcmFuY29wb250aWNlbGxpL3Byb2plY3RzL3RlbXBvL2RvbS9saWIvaHRtbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL2ZyYW5jb3BvbnRpY2VsbGkvcHJvamVjdHMvdGVtcG8vZG9tL2xpYi9lbGVtZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMvZnJhbmNvcG9udGljZWxsaS9wcm9qZWN0cy90ZW1wby9kb20vbGliL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZG9tX2F0dHJpYnV0ZXNfbWFwcGVyXzEiLCJzZXRfYXR0cmlidXRlXzEiLCJ0ZXh0XzEiLCJyZW1vdmVOb2RlIiwibm9kZSIsImVsIiwib25ibHVyIiwidW5kZWZpbmVkIiwib3duZXJEb2N1bWVudCIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImluc2VydEZCZWZvcmUiLCJyZWYiLCJpbnNlcnRCZWZvcmUiLCJkb21DaGlsZFRvVGVtcGxhdGUiLCJkb20iLCJ0ZXh0IiwicHJvY2Vzc0F0dHJpYnV0ZSIsImFjYyIsInNldCIsImh0bWxBdHRyaWJ1dGVNYXAiLCJzZXRBdHRyaWJ1dGUiLCJub2RlTmFtZSIsImYiLCJzdGF0ZSIsIm5ld1ZhbHVlIiwicHVzaCIsIm9sZFZhbHVlXzEiLCJTdHJpbmciLCJsZW5ndGgiLCJwcm9jZXNzRXZlbnQiLCJkaXNwYXRjaCIsImxvY2FsU3RhdGUiLCJldiIsInByb2Nlc3NTdHlsZSIsIm9sZFZhbHVlXzIiLCJzZXRPbmVTdHlsZSIsImNvbnRhaW5lclNpemUiLCJwcmV2IiwiY2hpbGRyZW4iLCJjaGlsZCIsInN0eWxlIiwiZGlzcGxheSIsInNpemUiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibWF5YmVfMSIsIm1hcCIsImFyciIsImJ1ZmYiLCJBcnJheSIsImZsYXRNYXAiLCJfaSIsImFycl8xIiwiYXBwbHkiLCJoZWFkIiwibm90aGluZyIsInRhaWwiLCJzbGljZSIsImVxdWFscyIsInByZWRpY2F0ZSIsImEiLCJiIiwiaXNFbXB0eSIsImhhc1ZhbHVlcyIsImZpbHRlciIsImFycl8yIiwiZmxhdHRlbiIsIl9hIiwiY29uY2F0IiwiZm9sZExlZnQiLCJhcnJfMyIsImFsbCIsImFycl80IiwiYW55IiwiYXJyXzUiLCJlYWNoIiwiYXJyXzYiLCJhcnJzIiwiYXJndW1lbnRzIiwic29ydCIsImNvbXBhcmUiLCJyYW5nZSIsIm51bWJlcnNSYW5nZSIsInN0YXJ0QXQiLCJmaWxsIiwiYXJyYXlzXzEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhbnlTdHlsZSIsInNldFByb3BlcnR5IiwiYW55RWwiLCJzZXRTdHlsZUF0dHJpYnV0ZSIsImsiLCJrZXlzIiwiam9pbiIsInNldEJvb2xQcm9wZXJ0eSIsImJvb2wiLCJzZXRFbnVtQm9vbEF0dHJpYnV0ZSIsInNldEJvb2xBdHRyaWJ1dGUiLCJzZXRDb21tYVNlcGFyYXRlZCIsInZhbHVlcyIsImlzQXJyYXkiLCJzZXRTcGFjZVNlcGFyYXRlZCIsImF0dHJpYnV0ZU5hbWVNYXAiLCJhY2NlcHRjaGFyc2V0IiwiYXNhdHRyIiwiY2xhc3NuYW1lIiwiaHR0cGVxdWl2IiwiaHRtbGZvciIsImNsYXNzIiwiYXN5bmMiLCJhdXRvZm9jdXMiLCJhdXRvcGxheSIsImNoZWNrZWQiLCJjb250ZW50ZWRpdGFibGUiLCJjb250cm9scyIsImRlZmF1bHQiLCJkZWZlciIsImRpc2FibGVkIiwiZHJhZ2dhYmxlIiwiZm9ybW5vdmFsaWRhdGUiLCJoZWFkZXJzIiwiaGlkZGVuIiwiaXNtYXAiLCJpdGVtc2NvcGUiLCJsb29wIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vbW9kdWxlIiwibm92YWxpZGF0ZSIsIm9wZW4iLCJwaW5nIiwicGxheXNpbmxpbmUiLCJyZWFkb25seSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJzZWxlY3RlZCIsInNpemVzIiwic3Jjc2V0IiwidHlwZW11c3RtYXRjaCIsIkVtaXR0ZXIiLCJ0aGlzIiwibGlzdGVuZXJzIiwib2ZPbmUiLCJvZlR3byIsIm9mVGhyZWUiLCJlbWl0IiwiX2IiLCJvbiIsImxpc3RlbmVyIiwib2ZmIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwib25jZSIsIl90aGlzIiwid3JhcHBlciIsImRlYm91bmNlIiwiZGVsYXkiLCJydW5uaW5nIiwic2V0VGltZW91dCIsIm5leHRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRlbXBvXzEiLCJzdG9yZV8xIiwic3RhdGVfMSIsInJlZHVjZXJfMSIsInRlbXBsYXRlXzEiLCJzdG9yZSIsIlN0b3JlIiwib2ZTdGF0ZSIsInJlZHVjZXIiLCJUZW1wbyIsInJlbmRlciIsInRlbXBsYXRlIiwiY29udGVudCIsIm9wdGlvbnMiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJpdGVtIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImUiLCJsaXN0VG9TdHlsZXMiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJpZCIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJwYXJ0cyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJqIiwicmVmcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImZvckVhY2giLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJvYmoiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiLCJjb21wb25lbnRfMSIsImNvbnRleHRfMSIsInJlbmRlckNvbXBvbmVudCIsIm1heWJlRWxlbWVudCIsImNvbXBvbmVudCIsImRvYyIsImJvZHkiLCJ2aWV3IiwiRE9NQ29udGV4dCIsImRlbGF5ZWQiLCJjb21wIiwiZG9tXzEiLCJET01Db21wb25lbnRUZW1wbGF0ZSIsImN0eCIsInNob3VsZFJlbmRlcl8xIiwiY2hhbmdlIiwib2JzZXJ2YWJsZSIsIm5ld0N0eCIsIndpdGhEaXNwYXRjaCIsImFjdGlvbiIsInByb2Nlc3MiLCJ2aWV3cyIsInZpZXdzXzEiLCJkZXN0cm95Iiwidmlld3NfMiIsInJlcXVlc3QiLCJxdWVyeSIsInZpZXdzXzMiLCJqdXN0IiwiaXNOb3RoaW5nIiwibWF5YmUiLCJpc0p1c3QiLCJET01EZXJpdmVkVGV4dFRlbXBsYXRlIiwibWFrZUNvbnRlbnQiLCJhcHBlbmQiLCJuZXdDb250ZW50Iiwibm9kZVZhbHVlIiwiXyIsIkRPTUxpdGVyYWxUZXh0VGVtcGxhdGUiLCJ1dGlsc18xIiwicGFyZW50IiwiZnJvbUVsZW1lbnQiLCJlbGVtZW50IiwibWFwQWN0aW9uIiwiY29uZGl0aW9uYWxNYXBBY3Rpb24iLCJuZXdBY3Rpb24iLCJ3aXRoQXBwZW5kVG9SZWZlcmVuY2UiLCJyZWZJZCIsImNyZWF0ZUNvbW1lbnQiLCJ3aXRoQXBwZW5kIiwid2l0aFBhcmVudCIsIl9fZXhwb3J0IiwicHJvcGVydHlfMSIsImVtaXR0ZXJfMSIsImVtaXR0ZXIiLCJQcm9wZXJ0eSIsImVxdWFsIiwicmVzdWx0IiwiZXF1YWxpdHlfMSIsInN0cmljdEVxdWFsIiwiZGVlcEVxdWFsIiwiYUlzQXJyIiwiYUFyciIsImJBcnIiLCJhTGVuZ3RoIiwiYUlzRGF0ZSIsIkRhdGUiLCJhSXNTZXQiLCJTZXQiLCJhU2V0IiwiYlNldCIsIml0XzEiLCJjdXJyIiwibmV4dCIsImRvbmUiLCJoYXMiLCJhSXNNYXAiLCJNYXAiLCJhTWFwIiwiYk1hcCIsIml0XzIiLCJhSXNPYmoiLCJhT2JqIiwiYk9iaiIsImFGaWVsZHMiLCJiRmllbGRzIiwiZmllbGQiLCJjb3VudCIsImtpbmQiLCJodG1sXzEiLCJtYXBfMSIsImFjdGlvbl8xIiwiZGl2IiwiYXR0cnMiLCJjbGFzc05hbWUiLCJtYXBTdGF0ZSIsImJ1dHRvbiIsImV2ZW50cyIsImNsaWNrIiwiZGVjcmVtZW50IiwiaW5jcmVtZW50IiwiZWxlbWVudF8xIiwiZWwyIiwiYWJiciIsImFkZHJlc3MiLCJhcHBsZXQiLCJhcmVhIiwiYXJ0aWNsZSIsImFzaWRlIiwiYXVkaW8iLCJiYXNlZm9udCIsImJkaSIsImJkbyIsImJsb2NrcXVvdGUiLCJiciIsImNhbnZhcyIsImNhcHRpb24iLCJjaXRlIiwiY29kZSIsImNvbCIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZCIsImRlbCIsImRldGFpbHMiLCJkZm4iLCJkaWFsb2ciLCJkaXIiLCJkbCIsImR0IiwiZW0iLCJlbWJlZCIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvbnQiLCJmb290ZXIiLCJmb3JtIiwiZnJhbWUiLCJmcmFtZXNldCIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhlYWRlciIsImhncm91cCIsImhyIiwiaHRtbCIsImlmcmFtZSIsImltZyIsImlucHV0IiwiaW5zIiwia2JkIiwibGFiZWwiLCJsZWdlbmQiLCJsaSIsImxpbmsiLCJsaXN0aW5nIiwibWFpbiIsIm1hcmsiLCJtYXJxdWVlIiwibWVudSIsIm1ldGEiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsIm9wdGlvbiIsIm91dHB1dCIsInBhcmFtIiwicGljdHVyZSIsInByZSIsInByb2dyZXNzIiwicSIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNjcmlwdCIsInNlY3Rpb24iLCJzZWxlY3QiLCJzbG90Iiwic21hbGwiLCJzcGFuIiwic3Ryb25nIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZCIsInRleHRhcmVhIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidGltZSIsInRpdGxlIiwidHIiLCJ0cmFjayIsInUiLCJ1bCIsInZhckVsIiwidmlkZW8iLCJ3YnIiLCJ4bXAiLCJhcHBseUNoYW5nZSIsIkRPTUVsZW1lbnQiLCJhZnRlcnJlbmRlciIsImJlZm9yZWNoYW5nZSIsImFmdGVyY2hhbmdlIiwiYmVmb3JlZGVzdHJveSIsInJlc3BvbmQiLCJhbGxDaGFuZ2VzIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJhbGxDaGFuZ2VzXzEiLCJhdHRyIiwiYXBwbHlBZnRlclJlbmRlciIsInZpZXdDaGFuZ2VzIiwiY2hhbmdlXzEiLCJ1bnNoaWZ0IiwiY2hhbmdlXzIiLCJiZWZvcmVkZXN0cm95ZiIsImFsbENoYW5nZXNfMiIsImV4dHJhY3RBdHRycyIsImF0dE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImV4dHJhY3RFdmVudHMiLCJldmVudE5hbWUiLCJleHRyYWN0U3R5bGVzIiwibWFrZUNyZWF0ZUVsZW1lbnQiLCJkZWZhdWx0TmFtZXNwYWNlcyIsIm1ha2VDcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJjcmVhdGVFbGVtZW50TlMiLCJlbE5TIiwiZWxOUzIiLCJNYXBTdGF0ZVRlbXBsYXRlIiwiaW5uZXJTdGF0ZSIsIm1hcFN0YXRlQW5kS2VlcCIsIk1hcEFjdGlvblRlbXBsYXRlIiwidmlld3NfNCIsInZpZXdzXzUiLCJ2aWV3c182IiwiTWFwUXVlcnlUZW1wbGF0ZSIsInZpZXdzXzciLCJ2aWV3c184IiwiaW5uZXJRdWVyeSIsIm1hcFF1ZXJ5IiwibWFwUXVlcnlDb25kaXRpb25hbCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJ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SUFBSyxJQUFJdE8sRUFBSyxFQUFHMGMsRUFBVXRPLEVBQU9wTyxFQUFLMGMsRUFBUW5lLE9BQVF5QixJQUFNLENBQzlDMGMsRUFBUTFjLEdBQ2RzTyxZQUdiRSxRQUFTLFNBQVVDLEdBQ2YsSUFBSWtPLEVBQWFoZCxFQUFJOE8sUUFDSyxJQUFma08sR0FDUHZPLEVBQU1oRCxTQUFRLFNBQVVrQyxHQUFRLE9BQU9BLEVBQUtrQixRQUFRbU8sU0FLN0RILEVBN0IwQixHQStCckNoaUIsRUFBUWdpQixpQkFBbUJBLEVBQzNCaGlCLEVBQVFvaUIsU0FBVyxTQUFVL1UsR0FFekIsSUFEQSxJQUFJNUksRUFBVyxHQUNOZSxFQUFLLEVBQUdBLEVBQUsyQixVQUFVcEQsT0FBUXlCLElBQ3BDZixFQUFTZSxFQUFLLEdBQUsyQixVQUFVM0IsR0FFakMsT0FBTyxJQUFJd2MsRUFBaUIzVSxFQUFRbEksSUFBS3VDLEVBQVN2QyxJQUFJK04sRUFBTWxRLG1CQUFvQnlCLEtBRXBGekUsRUFBUXFpQixvQkFBc0IsU0FBVWhWLEdBRXBDLElBREEsSUFBSTVJLEVBQVcsR0FDTmUsRUFBSyxFQUFHQSxFQUFLMkIsVUFBVXBELE9BQVF5QixJQUNwQ2YsRUFBU2UsRUFBSyxHQUFLMkIsVUFBVTNCLEdBRWpDLE9BQU8sSUFBSXdjLEVBQWlCM1UsRUFBUWxJLElBQUt1QyxFQUFTdkMsSUFBSStOLEVBQU1sUSxtQkFBb0J5QixNLDZCQ25KcEY3RCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdERuQixFQUFRMFksVUFBWSxXQUFjLE1BQU8sQ0FBR1gsS0FBTSxjQUNsRC9YLEVBQVEyWSxVQUFZLFdBQWMsTUFBTyxDQUFHWixLQUFNIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRvbV9hdHRyaWJ1dGVzX21hcHBlcl8xID0gcmVxdWlyZShcIi4uL2RvbV9hdHRyaWJ1dGVzX21hcHBlclwiKTtcbnZhciBzZXRfYXR0cmlidXRlXzEgPSByZXF1aXJlKFwiLi9zZXRfYXR0cmlidXRlXCIpO1xudmFyIHRleHRfMSA9IHJlcXVpcmUoXCIuLi90ZXh0XCIpO1xuZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgdmFyIGVsID0gbm9kZTtcbiAgICBpZiAoZWwgJiYgZWwub25ibHVyKSB7XG4gICAgICAgIGVsLm9uYmx1ciA9IG51bGw7XG4gICAgfVxuICAgIGlmICghbm9kZSB8fCBub2RlLm93bmVyRG9jdW1lbnQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChub2RlLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgbm9kZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlTm9kZSA9IHJlbW92ZU5vZGU7XG5mdW5jdGlvbiBpbnNlcnRGQmVmb3JlKHJlZikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAocmVmLnBhcmVudEVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVmLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZik7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5pbnNlcnRGQmVmb3JlID0gaW5zZXJ0RkJlZm9yZTtcbmZ1bmN0aW9uIGRvbUNoaWxkVG9UZW1wbGF0ZShkb20pIHtcbiAgICBpZiAodHlwZW9mIGRvbSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIGRvbSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZG9tID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIHRleHRfMS50ZXh0KGRvbSk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZG9tO1xufVxuZXhwb3J0cy5kb21DaGlsZFRvVGVtcGxhdGUgPSBkb21DaGlsZFRvVGVtcGxhdGU7XG5mdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSwgYWNjKSB7XG4gICAgdmFyIHNldCA9IGRvbV9hdHRyaWJ1dGVzX21hcHBlcl8xLmh0bWxBdHRyaWJ1dGVNYXBbbmFtZV0gfHwgc2V0X2F0dHJpYnV0ZV8xLnNldEF0dHJpYnV0ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHN0YXRlIGluIGlucHV0cyBjYW4gaW5jb3JyZWN0bHkgbWFwIHRvIHN0YXRlXG4gICAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbC5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykge1xuICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgc2V0KGVsLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjLnB1c2goZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWVfMSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBmID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gdmFsdWUoc3RhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWVfMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQoZWwsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFN0cmluZyhuZXdWYWx1ZSkubGVuZ3RoIDwgNTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlXzEgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2MucHVzaChmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0KGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG59XG5leHBvcnRzLnByb2Nlc3NBdHRyaWJ1dGUgPSBwcm9jZXNzQXR0cmlidXRlO1xuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50KGVsLCBuYW1lLCB2YWx1ZSwgZGlzcGF0Y2gsIGFjYykge1xuICAgIHZhciBsb2NhbFN0YXRlO1xuICAgIHZhciBhbnlFbCA9IGVsO1xuICAgIGFueUVsW25hbWVdID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciByID0gdmFsdWUobG9jYWxTdGF0ZSwgZXYsIGVsKTtcbiAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZGlzcGF0Y2gocik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBmID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGxvY2FsU3RhdGUgPSBzdGF0ZTtcbiAgICB9O1xuICAgIGFjYy5wdXNoKGYpO1xuICAgIHJldHVybiBhY2M7XG59XG5leHBvcnRzLnByb2Nlc3NFdmVudCA9IHByb2Nlc3NFdmVudDtcbmZ1bmN0aW9uIHByb2Nlc3NTdHlsZShlbCwgbmFtZSwgdmFsdWUsIGFjYykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlXzI7XG4gICAgICAgIHZhciBmID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZShzdGF0ZSk7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlXzIpIHtcbiAgICAgICAgICAgICAgICBzZXRfYXR0cmlidXRlXzEuc2V0T25lU3R5bGUoZWwsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZV8yID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFjYy5wdXNoKGYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0X2F0dHJpYnV0ZV8xLnNldE9uZVN0eWxlKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG59XG5leHBvcnRzLnByb2Nlc3NTdHlsZSA9IHByb2Nlc3NTdHlsZTtcbmV4cG9ydHMuY29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBwcmV2ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBlbC5jaGlsZHJlbltpXTtcbiAgICAgICAgcHJldltpXSA9IGNoaWxkLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGNoaWxkLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIHZhciBzaXplID0ge1xuICAgICAgICB3aWR0aDogZWwub2Zmc2V0V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWwub2Zmc2V0SGVpZ2h0XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGVsLmNoaWxkcmVuW2ldO1xuICAgICAgICBjaGlsZC5zdHlsZS5kaXNwbGF5ID0gcHJldltpXTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBtYXliZV8xID0gcmVxdWlyZShcIi4vbWF5YmVcIik7XG5leHBvcnRzLm1hcCA9IGZ1bmN0aW9uIChmLCBhcnIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICB2YXIgYnVmZiA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnVmZltpXSA9IGYoYXJyW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmY7XG59O1xuZXhwb3J0cy5mbGF0TWFwID0gZnVuY3Rpb24gKGYsIGFycikge1xuICAgIHZhciBidWZmID0gbmV3IEFycmF5KCk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcnJfMSA9IGFycjsgX2kgPCBhcnJfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVsID0gYXJyXzFbX2ldO1xuICAgICAgICBidWZmLnB1c2guYXBwbHkoYnVmZiwgZihlbCkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZjtcbn07XG5leHBvcnRzLmhlYWQgPSBmdW5jdGlvbiAoYXJyKSB7IHJldHVybiBhcnIubGVuZ3RoID4gMCA/IGFyclswXSA6IG1heWJlXzEubm90aGluZzsgfTtcbmV4cG9ydHMudGFpbCA9IGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyci5zbGljZSgxKTsgfTtcbmV4cG9ydHMuZXF1YWxzID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXByZWRpY2F0ZShhW2ldLCBiW2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbmV4cG9ydHMuaXNFbXB0eSA9IGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyci5sZW5ndGggPT09IDA7IH07XG5leHBvcnRzLmhhc1ZhbHVlcyA9IGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyci5sZW5ndGggPiAwOyB9O1xuZXhwb3J0cy5maWx0ZXIgPSBmdW5jdGlvbiAocHJlZGljYXRlLCBhcnIpIHtcbiAgICB2YXIgYnVmZiA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgYXJyXzIgPSBhcnI7IF9pIDwgYXJyXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBhID0gYXJyXzJbX2ldO1xuICAgICAgICBpZiAocHJlZGljYXRlKGEpKVxuICAgICAgICAgICAgYnVmZi5wdXNoKGEpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZjtcbn07XG5leHBvcnRzLmZsYXR0ZW4gPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBbXSkuY29uY2F0LmFwcGx5KF9hLCBhcnIpO1xufTtcbmV4cG9ydHMuZm9sZExlZnQgPSBmdW5jdGlvbiAoZiwgYXJyLCBiKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcnJfMyA9IGFycjsgX2kgPCBhcnJfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGEgPSBhcnJfM1tfaV07XG4gICAgICAgIGIgPSBmKGIsIGEpO1xuICAgIH1cbiAgICByZXR1cm4gYjtcbn07XG5leHBvcnRzLmFsbCA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIGFycikge1xuICAgIGZvciAodmFyIF9pID0gMCwgYXJyXzQgPSBhcnI7IF9pIDwgYXJyXzQubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBhID0gYXJyXzRbX2ldO1xuICAgICAgICBpZiAoIXByZWRpY2F0ZShhKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbmV4cG9ydHMuYW55ID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgYXJyKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcnJfNSA9IGFycjsgX2kgPCBhcnJfNS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGEgPSBhcnJfNVtfaV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnRzLmVhY2ggPSBmdW5jdGlvbiAoZiwgYXJyKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcnJfNiA9IGFycjsgX2kgPCBhcnJfNi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGEgPSBhcnJfNltfaV07XG4gICAgICAgIGYoYSk7XG4gICAgfVxufTtcbmV4cG9ydHMuY29uY2F0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgYXJycyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFycnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIChfYSA9IFtdKS5jb25jYXQuYXBwbHkoX2EsIGFycnMpO1xufTtcbmV4cG9ydHMuc29ydCA9IGZ1bmN0aW9uIChjb21wYXJlLCBhcnIpIHtcbiAgICByZXR1cm4gYXJyLnNsaWNlKCkuc29ydChjb21wYXJlKTtcbn07XG5leHBvcnRzLnJhbmdlID0gZnVuY3Rpb24gKGxlbmd0aCwgZikge1xuICAgIHZhciBidWZmID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgYnVmZltpXSA9IGYoaSk7XG4gICAgcmV0dXJuIGJ1ZmY7XG59O1xuZXhwb3J0cy5udW1iZXJzUmFuZ2UgPSBmdW5jdGlvbiAobGVuZ3RoLCBzdGFydEF0KSB7XG4gICAgaWYgKHN0YXJ0QXQgPT09IHZvaWQgMCkgeyBzdGFydEF0ID0gMDsgfVxuICAgIHJldHVybiBleHBvcnRzLnJhbmdlKGxlbmd0aCwgZnVuY3Rpb24gKGkpIHsgcmV0dXJuIHN0YXJ0QXQgKyBpOyB9KTtcbn07XG5leHBvcnRzLmZpbGwgPSBmdW5jdGlvbiAobGVuZ3RoLCB2YWx1ZSkgeyByZXR1cm4gZXhwb3J0cy5yYW5nZShsZW5ndGgsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXJyYXlzXzEgPSByZXF1aXJlKFwidGVtcG8tc3RkL2xpYi9hcnJheXNcIik7XG5mdW5jdGlvbiBzZXRPbmVTdHlsZShlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgYW55U3R5bGUgPSBlbC5zdHlsZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBhbnlTdHlsZVtuYW1lXSA9IG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbnlTdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuc2V0T25lU3R5bGUgPSBzZXRPbmVTdHlsZTtcbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuc2V0QXR0cmlidXRlID0gc2V0QXR0cmlidXRlO1xuZnVuY3Rpb24gc2V0UHJvcGVydHkoZWwsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGFueUVsID0gZWw7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgYW55RWxbbmFtZV0gPSBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYW55RWxbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG5mdW5jdGlvbiBzZXRTdHlsZUF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaHRtbCA9IGVsO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHMgPSBhcnJheXNfMS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGsgKyBcIjogXCIgKyB2YWx1ZVtrXSArIFwiO1wiOyB9LCBPYmplY3Qua2V5cyh2YWx1ZSkpLmpvaW4oJyAnKTtcbiAgICAgICAgc2V0QXR0cmlidXRlKGVsLCBuYW1lLCAocy5sZW5ndGggJiYgcykgfHwgbnVsbCk7XG4gICAgfVxufVxuZXhwb3J0cy5zZXRTdHlsZUF0dHJpYnV0ZSA9IHNldFN0eWxlQXR0cmlidXRlO1xuZnVuY3Rpb24gc2V0Qm9vbFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBhbnlFbCA9IGVsO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGFueUVsW25hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBib29sID0gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJztcbiAgICAgICAgYW55RWxbbmFtZV0gPSBib29sO1xuICAgIH1cbn1cbmV4cG9ydHMuc2V0Qm9vbFByb3BlcnR5ID0gc2V0Qm9vbFByb3BlcnR5O1xuZnVuY3Rpb24gc2V0RW51bUJvb2xBdHRyaWJ1dGUoZWwsIG5hbWUsIHZhbHVlKSB7XG4gICAgc2V0QXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDogdmFsdWUgPT09IGZhbHNlXG4gICAgICAgICAgICA/ICdmYWxzZSdcbiAgICAgICAgICAgIDogbnVsbCk7XG59XG5leHBvcnRzLnNldEVudW1Cb29sQXR0cmlidXRlID0gc2V0RW51bUJvb2xBdHRyaWJ1dGU7XG5mdW5jdGlvbiBzZXRCb29sQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSkge1xuICAgIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJyA/ICcnIDogbnVsbCk7XG59XG5leHBvcnRzLnNldEJvb2xBdHRyaWJ1dGUgPSBzZXRCb29sQXR0cmlidXRlO1xuZnVuY3Rpb24gc2V0Q29tbWFTZXBhcmF0ZWQoZWwsIG5hbWUsIHZhbHVlcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpXG4gICAgICAgIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWVzLmpvaW4oJywgJykgfHwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgICBzZXRBdHRyaWJ1dGUoZWwsIG5hbWUsICh2YWx1ZXMgJiYgU3RyaW5nKHZhbHVlcykpIHx8IG51bGwpO1xufVxuZXhwb3J0cy5zZXRDb21tYVNlcGFyYXRlZCA9IHNldENvbW1hU2VwYXJhdGVkO1xuZnVuY3Rpb24gc2V0U3BhY2VTZXBhcmF0ZWQoZWwsIG5hbWUsIHZhbHVlcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpXG4gICAgICAgIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWVzLmpvaW4oJyAnKSB8fCBudWxsKTtcbiAgICBlbHNlXG4gICAgICAgIHNldEF0dHJpYnV0ZShlbCwgbmFtZSwgKHZhbHVlcyAmJiBTdHJpbmcodmFsdWVzKSkgfHwgbnVsbCk7XG59XG5leHBvcnRzLnNldFNwYWNlU2VwYXJhdGVkID0gc2V0U3BhY2VTZXBhcmF0ZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRfYXR0cmlidXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG52YXIgc2V0X2F0dHJpYnV0ZV8xID0gcmVxdWlyZShcIi4vdXRpbHMvc2V0X2F0dHJpYnV0ZVwiKTtcbmV4cG9ydHMuYXR0cmlidXRlTmFtZU1hcCA9IHtcbiAgICBhY2NlcHRjaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGFzYXR0cjogJ2FzJyxcbiAgICBjbGFzc25hbWU6ICdjbGFzcycsXG4gICAgaHR0cGVxdWl2OiAnaHR0cC1lcXVpdicsXG4gICAgaHRtbGZvcjogJ2Zvcidcbn07XG5leHBvcnRzLmh0bWxBdHRyaWJ1dGVNYXAgPSB7XG4gICAgJ2FjY2VwdC1jaGFyc2V0Jzogc2V0X2F0dHJpYnV0ZV8xLnNldFNwYWNlU2VwYXJhdGVkLFxuICAgIGNsYXNzOiBzZXRfYXR0cmlidXRlXzEuc2V0U3BhY2VTZXBhcmF0ZWQsXG4gICAgYWNjZXB0Y2hhcnNldDogc2V0X2F0dHJpYnV0ZV8xLnNldFNwYWNlU2VwYXJhdGVkLFxuICAgIGFzeW5jOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBhdXRvZm9jdXM6IHNldF9hdHRyaWJ1dGVfMS5zZXRCb29sQXR0cmlidXRlLFxuICAgIGF1dG9wbGF5OiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBjaGVja2VkOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbFByb3BlcnR5LFxuICAgIGNvbnRlbnRlZGl0YWJsZTogc2V0X2F0dHJpYnV0ZV8xLnNldEVudW1Cb29sQXR0cmlidXRlLFxuICAgIGNvbnRyb2xzOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBkZWZhdWx0OiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBkZWZlcjogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgZGlzYWJsZWQ6IHNldF9hdHRyaWJ1dGVfMS5zZXRCb29sQXR0cmlidXRlLFxuICAgIGRyYWdnYWJsZTogc2V0X2F0dHJpYnV0ZV8xLnNldEVudW1Cb29sQXR0cmlidXRlLFxuICAgIGZvcm1ub3ZhbGlkYXRlOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBoZWFkZXJzOiBzZXRfYXR0cmlidXRlXzEuc2V0U3BhY2VTZXBhcmF0ZWQsXG4gICAgaGlkZGVuOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBpc21hcDogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgaXRlbXNjb3BlOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBsb29wOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBtdWx0aXBsZTogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xQcm9wZXJ0eSxcbiAgICBtdXRlZDogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xQcm9wZXJ0eSxcbiAgICBub21vZHVsZTogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgbm92YWxpZGF0ZTogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgb3Blbjogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgcGluZzogc2V0X2F0dHJpYnV0ZV8xLnNldFNwYWNlU2VwYXJhdGVkLFxuICAgIHBsYXlzaW5saW5lOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICByZWFkb25seTogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgcmVsOiBzZXRfYXR0cmlidXRlXzEuc2V0U3BhY2VTZXBhcmF0ZWQsXG4gICAgcmVxdWlyZWQ6IHNldF9hdHRyaWJ1dGVfMS5zZXRCb29sQXR0cmlidXRlLFxuICAgIHJldmVyc2VkOiBzZXRfYXR0cmlidXRlXzEuc2V0Qm9vbEF0dHJpYnV0ZSxcbiAgICBzZWxlY3RlZDogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xQcm9wZXJ0eSxcbiAgICBzaXplczogc2V0X2F0dHJpYnV0ZV8xLnNldENvbW1hU2VwYXJhdGVkLFxuICAgIHNyY3NldDogc2V0X2F0dHJpYnV0ZV8xLnNldENvbW1hU2VwYXJhdGVkLFxuICAgIHN0eWxlOiBzZXRfYXR0cmlidXRlXzEuc2V0U3R5bGVBdHRyaWJ1dGUsXG4gICAgdHlwZW11c3RtYXRjaDogc2V0X2F0dHJpYnV0ZV8xLnNldEJvb2xBdHRyaWJ1dGUsXG4gICAgdmFsdWU6IHNldF9hdHRyaWJ1dGVfMS5zZXRQcm9wZXJ0eVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvbV9hdHRyaWJ1dGVzX21hcHBlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbWl0dGVyKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH1cbiAgICBFbWl0dGVyLm9mT25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVtaXR0ZXIoKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIub2ZUd28gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW1pdHRlcigpO1xuICAgIH07XG4gICAgRW1pdHRlci5vZlRocmVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVtaXR0ZXIoKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFsdWVbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gdGhpcy5saXN0ZW5lcnM7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgbCA9IF9iW19hXTtcbiAgICAgICAgICAgIGwuYXBwbHkodm9pZCAwLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH07XG4gICAgRW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMub2ZmKHdyYXBwZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodm9pZCAwLCB2YWx1ZXMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uKHdyYXBwZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXI7XG59KCkpO1xuZXhwb3J0cy5FbWl0dGVyID0gRW1pdHRlcjtcbmV4cG9ydHMuZGVib3VuY2UgPSBmdW5jdGlvbiAoZGVsYXkpIHsgcmV0dXJuIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgIHZhciBydW5uaW5nID0gZmFsc2U7XG4gICAgdmFyIGFjYztcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YWx1ZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBhY2MgPSB2YWx1ZXM7XG4gICAgICAgIGlmIChydW5uaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFjYyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICB9O1xufTsgfTtcbmV4cG9ydHMubmV4dEZyYW1lID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgdmFyIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB2YXIgYWNjO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGFjYyA9IHZhbHVlcztcbiAgICAgICAgaWYgKHJ1bm5pbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhY2MpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtaXR0ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi9zdHlsZS5zYXNzXCIpO1xudmFyIHRlbXBvXzEgPSByZXF1aXJlKFwidGVtcG8tZG9tL2xpYi90ZW1wb1wiKTtcbnZhciBzdG9yZV8xID0gcmVxdWlyZShcInRlbXBvLXN0b3JlL2xpYi9zdG9yZVwiKTtcbnZhciBzdGF0ZV8xID0gcmVxdWlyZShcIi4vc3RhdGVcIik7XG52YXIgcmVkdWNlcl8xID0gcmVxdWlyZShcIi4vcmVkdWNlclwiKTtcbnZhciB0ZW1wbGF0ZV8xID0gcmVxdWlyZShcIi4vdGVtcGxhdGVcIik7XG52YXIgc3RvcmUgPSBzdG9yZV8xLlN0b3JlLm9mU3RhdGUoeyBzdGF0ZTogc3RhdGVfMS5zdGF0ZSwgcmVkdWNlcjogcmVkdWNlcl8xLnJlZHVjZXIgfSk7XG50ZW1wb18xLlRlbXBvLnJlbmRlcih7IHN0b3JlOiBzdG9yZSwgdGVtcGxhdGU6IHRlbXBsYXRlXzEudGVtcGxhdGUgfSk7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2NvbW1vbi90ZW1wL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1qcy5vcmcvY3NzLWxvYWRlci8zLjMuMl93ZWJwYWNrQDQuNDEuMi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9jb21tb24vdGVtcC9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtanMub3JnL3Nhc3MtbG9hZGVyLzguMC4wXzJmYTM0MzdlMDA0YmNlYmY1Yjc0NTdkOTZjMzlmYTJlL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNhc3NcIik7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9jb21tb24vdGVtcC9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtanMub3JnL3N0eWxlLWxvYWRlci8xLjAuMV93ZWJwYWNrQDQuNDEuMi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vdGVtcC9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtanMub3JnL2Nzcy1sb2FkZXIvMy4zLjJfd2VicGFja0A0LjQxLjIvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWx7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZGRlZWZmfWJvZHl7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDoxMDAlfS5hcHB7Zm9udC1mYW1pbHk6ZmFudGFzeTtmb250LXNpemU6MTIwcHQ7bGluZS1oZWlnaHQ6MWVtfS5jb3VudC1zbWFsbHtmb250LXNpemU6MzJwdDtsaW5lLWhlaWdodDoxLjJlbX0uY291bnR7d2lkdGg6MzgwcHg7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1zaGFkb3c6MnB4IDJweCAycHggI2ZmZiwtMnB4IC0ycHggMnB4ICNmZmYsMHB4IDBweCAyMHB4IHJnYmEoMCwwLDAsMC4yKX0uYnV0dG9uc3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH1idXR0b257Ym94LXNoYWRvdzowcHggNHB4IDIwcHggMXB4IHJnYmEoMCwwLDAsMC4yKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICM2N2EgNSUsICM2MDcwYTAgMTAwJSk7YmFja2dyb3VuZC1jb2xvcjojNTk5YmIzO2JvcmRlci1yYWRpdXM6OHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO2NvbG9yOiNmZmZmZmY7Zm9udC1mYW1pbHk6QXJpYWw7Zm9udC1zaXplOjU2cHg7Zm9udC13ZWlnaHQ6Ym9sZDtwYWRkaW5nOjZweCA2MHB4O3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtc2hhZG93OjBweCAxcHggNHB4IHJnYmEoMCwwLDAsMC42KTtvdXRsaW5lOm5vbmV9YnV0dG9uW2Rpc2FibGVkXXtvcGFjaXR5OjAuM31idXR0b25bZGlzYWJsZWRdOmhvdmVye2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgIzY3YSA1JSwgIzYwNzBhMCAxMDAlKTtiYWNrZ3JvdW5kLWNvbG9yOiM1OTliYjN9YnV0dG9uOmhvdmVye2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgIzQwOGM5OSA1JSwgIzU5OWJiMyAxMDAlKTtiYWNrZ3JvdW5kLWNvbG9yOiM0MDhjOTl9YnV0dG9uOmFjdGl2ZXtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6MXB4fVxcblwiLCBcIlwiXSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW2ldKTtcblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZXMgPSBbXTtcbiAgdmFyIG5ld1N0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY3NzID0gaXRlbVsxXTtcbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdO1xuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH07XG5cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcGFydHM6IFtwYXJ0XVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrKztcblxuICAgICAgZm9yICg7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHJlZnM6IDEsXG4gICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG4gICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgZG9tU3R5bGUucmVmcy0tO1xuICAgICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgICBhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtYXlSZW1vdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2RvbVN0eWxlID0gbWF5UmVtb3ZlW19pXTtcblxuICAgICAgaWYgKF9kb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgX2RvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bX2RvbVN0eWxlLmlkXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudFwiKTtcbnZhciBjb250ZXh0XzEgPSByZXF1aXJlKFwiLi9jb250ZXh0XCIpO1xudmFyIFRlbXBvO1xuKGZ1bmN0aW9uIChUZW1wbykge1xuICAgIGZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChvcHRpb25zKSB7XG4gICAgICAgIHZhciBtYXliZUVsZW1lbnQgPSBvcHRpb25zLmVsLCBjb21wb25lbnQgPSBvcHRpb25zLmNvbXBvbmVudDtcbiAgICAgICAgdmFyIHN0b3JlID0gY29tcG9uZW50LnN0b3JlO1xuICAgICAgICB2YXIgZG9jID0gb3B0aW9ucy5kb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICAgICAgdmFyIGVsID0gbWF5YmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICAgICAgICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGVsLmFwcGVuZENoaWxkKG5vZGUpOyB9O1xuICAgICAgICB2YXIgdmlldyA9IGNvbXBvbmVudC5yZW5kZXIobmV3IGNvbnRleHRfMS5ET01Db250ZXh0KGRvYywgYXBwZW5kLCBlbCwgZnVuY3Rpb24gKCkgeyB9KSwgc3RvcmUucHJvcGVydHkuZ2V0KCkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlldzogdmlldyxcbiAgICAgICAgICAgIHN0b3JlOiBzdG9yZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBUZW1wby5yZW5kZXJDb21wb25lbnQgPSByZW5kZXJDb21wb25lbnQ7XG4gICAgZnVuY3Rpb24gcmVuZGVyKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGVsID0gb3B0aW9ucy5lbCwgc3RvcmUgPSBvcHRpb25zLnN0b3JlLCBkb2N1bWVudCA9IG9wdGlvbnMuZG9jdW1lbnQsIHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZSwgZGVsYXllZCA9IG9wdGlvbnMuZGVsYXllZDtcbiAgICAgICAgdmFyIGNvbXAgPSBjb21wb25lbnRfMS5jb21wb25lbnQoeyBzdG9yZTogc3RvcmUsIGRlbGF5ZWQ6IGRlbGF5ZWQgfSwgdGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gVGVtcG8ucmVuZGVyQ29tcG9uZW50KHsgZWw6IGVsLCBjb21wb25lbnQ6IGNvbXAsIGRvY3VtZW50OiBkb2N1bWVudCB9KTtcbiAgICB9XG4gICAgVGVtcG8ucmVuZGVyID0gcmVuZGVyO1xufSkoVGVtcG8gPSBleHBvcnRzLlRlbXBvIHx8IChleHBvcnRzLlRlbXBvID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRlbXBvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkb21fMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2RvbVwiKTtcbnZhciBhcnJheXNfMSA9IHJlcXVpcmUoXCJ0ZW1wby1zdGQvbGliL2FycmF5c1wiKTtcbnZhciBET01Db21wb25lbnRUZW1wbGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBET01Db21wb25lbnRUZW1wbGF0ZShzdG9yZSwgY2hpbGRyZW4sIGRlbGF5ZWQpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMuZGVsYXllZCA9IGRlbGF5ZWQ7XG4gICAgfVxuICAgIERPTUNvbXBvbmVudFRlbXBsYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBzdGF0ZSkge1xuICAgICAgICB2YXIgdXBkYXRlO1xuICAgICAgICBpZiAodGhpcy5kZWxheWVkKSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkUmVuZGVyXzEgPSB0cnVlO1xuICAgICAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlbmRlcl8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFJlbmRlcl8xID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5jaGFuZ2Uoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVuZGVyXzEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmlldy5jaGFuZ2Uoc3RhdGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgICB2YXIgcHJvcGVydHkgPSBzdG9yZS5wcm9wZXJ0eTtcbiAgICAgICAgcHJvcGVydHkub2JzZXJ2YWJsZS5vbih1cGRhdGUpO1xuICAgICAgICB2YXIgaW5uZXJEaXNwYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0b3JlLnByb2Nlc3MoYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5ld0N0eCA9IGN0eC53aXRoRGlzcGF0Y2goaW5uZXJEaXNwYXRjaCk7XG4gICAgICAgIHZhciB2aWV3cyA9IGFycmF5c18xLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnJlbmRlcihuZXdDdHgsIHByb3BlcnR5LmdldCgpKTsgfSwgdGhpcy5jaGlsZHJlbik7XG4gICAgICAgIHZhciB2aWV3ID0ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wcm9wZXJ0eS5zZXQoc3RhdGUpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdmlld3NfMSA9IHZpZXdzOyBfaSA8IHZpZXdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3XzEgPSB2aWV3c18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlld18xLmNoYW5nZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eS5vYnNlcnZhYmxlLm9mZih1cGRhdGUpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdmlld3NfMiA9IHZpZXdzOyBfaSA8IHZpZXdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3XzIgPSB2aWV3c18yW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlld18yLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c18zID0gdmlld3M7IF9pIDwgdmlld3NfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXdfMyA9IHZpZXdzXzNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB2aWV3XzMucmVxdWVzdChxdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9wZXJ0eS5zZXQoc3RhdGUpO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9O1xuICAgIHJldHVybiBET01Db21wb25lbnRUZW1wbGF0ZTtcbn0oKSk7XG5leHBvcnRzLkRPTUNvbXBvbmVudFRlbXBsYXRlID0gRE9NQ29tcG9uZW50VGVtcGxhdGU7XG5leHBvcnRzLmNvbXBvbmVudCA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgRE9NQ29tcG9uZW50VGVtcGxhdGUoYXR0cmlidXRlcy5zdG9yZSwgYXJyYXlzXzEubWFwKGRvbV8xLmRvbUNoaWxkVG9UZW1wbGF0ZSwgY2hpbGRyZW4pLCBhdHRyaWJ1dGVzLmRlbGF5ZWQgfHwgZmFsc2UpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vdGhpbmcgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmp1c3QgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuZXhwb3J0cy5pc05vdGhpbmcgPSBmdW5jdGlvbiAobWF5YmUpIHsgcmV0dXJuIG1heWJlID09IG51bGw7IH07XG5leHBvcnRzLmlzSnVzdCA9IGZ1bmN0aW9uIChtYXliZSkgeyByZXR1cm4gbWF5YmUgIT0gbnVsbDsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkb21fMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2RvbVwiKTtcbnZhciBET01EZXJpdmVkVGV4dFRlbXBsYXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERPTURlcml2ZWRUZXh0VGVtcGxhdGUobWFrZUNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5tYWtlQ29udGVudCA9IG1ha2VDb250ZW50O1xuICAgIH1cbiAgICBET01EZXJpdmVkVGV4dFRlbXBsYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBzdGF0ZSkge1xuICAgICAgICB2YXIgbWFrZUNvbnRlbnQgPSB0aGlzLm1ha2VDb250ZW50O1xuICAgICAgICB2YXIgY29udGVudCA9IG1ha2VDb250ZW50KHN0YXRlKSB8fCAnJztcbiAgICAgICAgdmFyIG5vZGUgPSBjdHguZG9jLmNyZWF0ZVRleHROb2RlKGNvbnRlbnQpO1xuICAgICAgICBjdHguYXBwZW5kKG5vZGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q29udGVudCA9IG1ha2VDb250ZW50KHN0YXRlKSB8fCAnJztcbiAgICAgICAgICAgICAgICBpZiAobmV3Q29udGVudCAhPT0gY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IG5ld0NvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdDb250ZW50Lmxlbmd0aCA8IDUwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbmV3Q29udGVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRvbV8xLnJlbW92ZU5vZGUobm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKF8pIHsgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIERPTURlcml2ZWRUZXh0VGVtcGxhdGU7XG59KCkpO1xuZXhwb3J0cy5ET01EZXJpdmVkVGV4dFRlbXBsYXRlID0gRE9NRGVyaXZlZFRleHRUZW1wbGF0ZTtcbnZhciBET01MaXRlcmFsVGV4dFRlbXBsYXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERPTUxpdGVyYWxUZXh0VGVtcGxhdGUoY29udGVudCkge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIH1cbiAgICBET01MaXRlcmFsVGV4dFRlbXBsYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBfKSB7XG4gICAgICAgIHZhciBub2RlID0gY3R4LmRvYy5jcmVhdGVUZXh0Tm9kZSh0aGlzLmNvbnRlbnQpO1xuICAgICAgICBjdHguYXBwZW5kKG5vZGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoXykgeyB9LFxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRvbV8xLnJlbW92ZU5vZGUobm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKF8pIHsgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIERPTUxpdGVyYWxUZXh0VGVtcGxhdGU7XG59KCkpO1xuZXhwb3J0cy5ET01MaXRlcmFsVGV4dFRlbXBsYXRlID0gRE9NTGl0ZXJhbFRleHRUZW1wbGF0ZTtcbmV4cG9ydHMudGV4dCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NRGVyaXZlZFRleHRUZW1wbGF0ZShjb250ZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRE9NTGl0ZXJhbFRleHRUZW1wbGF0ZShjb250ZW50IHx8ICcnKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKlxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIERPTUNvbnRleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRE9NQ29udGV4dChkb2MsIGFwcGVuZCwgcGFyZW50LCBkaXNwYXRjaCkge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5hcHBlbmQgPSBhcHBlbmQ7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgfVxuICAgIERPTUNvbnRleHQuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgZGlzcGF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBET01Db250ZXh0KFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgKHdpbmRvdyAmJiB3aW5kb3cuZG9jdW1lbnQpLCBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsgfSwgZWxlbWVudCwgZGlzcGF0Y2gpO1xuICAgIH07XG4gICAgRE9NQ29udGV4dC5wcm90b3R5cGUubWFwQWN0aW9uID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBET01Db250ZXh0KHRoaXMuZG9jLCB0aGlzLmFwcGVuZCwgdGhpcy5wYXJlbnQsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5kaXNwYXRjaChmKGFjdGlvbikpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIERPTUNvbnRleHQucHJvdG90eXBlLmNvbmRpdGlvbmFsTWFwQWN0aW9uID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBET01Db250ZXh0KHRoaXMuZG9jLCB0aGlzLmFwcGVuZCwgdGhpcy5wYXJlbnQsIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBuZXdBY3Rpb24gPSBmKGFjdGlvbik7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0FjdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaChuZXdBY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIERPTUNvbnRleHQucHJvdG90eXBlLndpdGhBcHBlbmRUb1JlZmVyZW5jZSA9IGZ1bmN0aW9uIChyZWZJZCkge1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5kb2MuY3JlYXRlQ29tbWVudChyZWZJZCB8fCAndDpyZWYnKTtcbiAgICAgICAgdGhpcy5hcHBlbmQocmVmKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN0eDogdGhpcy53aXRoQXBwZW5kKHV0aWxzXzEuaW5zZXJ0RkJlZm9yZShyZWYpKSxcbiAgICAgICAgICAgIHJlZjogcmVmXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBET01Db250ZXh0LnByb3RvdHlwZS53aXRoQXBwZW5kID0gZnVuY3Rpb24gKGFwcGVuZCkge1xuICAgICAgICByZXR1cm4gbmV3IERPTUNvbnRleHQodGhpcy5kb2MsIGFwcGVuZCwgdGhpcy5wYXJlbnQsIHRoaXMuZGlzcGF0Y2gpO1xuICAgIH07XG4gICAgRE9NQ29udGV4dC5wcm90b3R5cGUud2l0aFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBET01Db250ZXh0KHRoaXMuZG9jLCB0aGlzLmFwcGVuZCwgcGFyZW50LCB0aGlzLmRpc3BhdGNoKTtcbiAgICB9O1xuICAgIERPTUNvbnRleHQucHJvdG90eXBlLndpdGhEaXNwYXRjaCA9IGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gbmV3IERPTUNvbnRleHQodGhpcy5kb2MsIHRoaXMuYXBwZW5kLCB0aGlzLnBhcmVudCwgZGlzcGF0Y2gpO1xuICAgIH07XG4gICAgcmV0dXJuIERPTUNvbnRleHQ7XG59KCkpO1xuZXhwb3J0cy5ET01Db250ZXh0ID0gRE9NQ29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vZG9tXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NldF9hdHRyaWJ1dGVcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHByb3BlcnR5XzEgPSByZXF1aXJlKFwiLi9wcm9wZXJ0eVwiKTtcbnZhciBlbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9lbWl0dGVyXCIpO1xudmFyIFN0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0b3JlKHByb3BlcnR5LCByZWR1Y2VyKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgICAgdGhpcy5yZWR1Y2VyID0gcmVkdWNlcjtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlID0gdGhpcy5lbWl0dGVyID0gZW1pdHRlcl8xLkVtaXR0ZXIub2ZUaHJlZSgpO1xuICAgIH1cbiAgICBTdG9yZS5vZlN0YXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9yZShuZXcgcHJvcGVydHlfMS5Qcm9wZXJ0eShvcHRpb25zLnN0YXRlLCBvcHRpb25zLmVxdWFsKSwgb3B0aW9ucy5yZWR1Y2VyKTtcbiAgICB9O1xuICAgIFN0b3JlLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnJlZHVjZXIodGhpcy5wcm9wZXJ0eS5nZXQoKSwgYWN0aW9uKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucHJvcGVydHkuc2V0KHZhbHVlKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQodmFsdWUsIGFjdGlvbiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHJldHVybiBTdG9yZTtcbn0oKSk7XG5leHBvcnRzLlN0b3JlID0gU3RvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW1pdHRlcl8xID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcbnZhciBlcXVhbGl0eV8xID0gcmVxdWlyZShcIi4vZXF1YWxpdHlcIik7XG4vLyBAdHMtaWdub3JlXG52YXIgUHJvcGVydHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvcGVydHkodmFsdWUsIGVxdWFsKSB7XG4gICAgICAgIGlmIChlcXVhbCA9PT0gdm9pZCAwKSB7IGVxdWFsID0gZXF1YWxpdHlfMS5zdHJpY3RFcXVhbDsgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZXF1YWwgPSBlcXVhbDtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlID0gdGhpcy5lbWl0dGVyID0gZW1pdHRlcl8xLkVtaXR0ZXIub2ZPbmUoKTtcbiAgICB9XG4gICAgUHJvcGVydHkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5lcXVhbCh0aGlzLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdCh0aGlzLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9O1xuICAgIFByb3BlcnR5LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBQcm9wZXJ0eTtcbn0oKSk7XG5leHBvcnRzLlByb3BlcnR5ID0gUHJvcGVydHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0cmljdEVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYiB8fCAoYSAhPT0gYSAmJiBiICE9PSBiKTtcbn07XG5leHBvcnRzLmRlZXBFcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGV4cG9ydHMuc3RyaWN0RXF1YWwoYSwgYikpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGFJc0FyciA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgdmFyIGJJc0FyciA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgaWYgKGFJc0FyciAhPT0gYklzQXJyKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGFJc0Fycikge1xuICAgICAgICB2YXIgYUFyciA9IGE7XG4gICAgICAgIHZhciBiQXJyID0gYjtcbiAgICAgICAgdmFyIGFMZW5ndGggPSBhQXJyLmxlbmd0aDtcbiAgICAgICAgaWYgKGFMZW5ndGggIT09IGJBcnIubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFleHBvcnRzLmRlZXBFcXVhbChhQXJyW2ldLCBiQXJyW2ldKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhSXNEYXRlID0gYSBpbnN0YW5jZW9mIERhdGU7XG4gICAgdmFyIGJJc0RhdGUgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoYUlzRGF0ZSAhPT0gYklzRGF0ZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhSXNEYXRlKSB7XG4gICAgICAgIHZhciBhRGF0ZSA9IGE7XG4gICAgICAgIHZhciBiRGF0ZSA9IGI7XG4gICAgICAgIHJldHVybiArYURhdGUgPT09ICtiRGF0ZTtcbiAgICB9XG4gICAgdmFyIGFJc1NldCA9IGEgaW5zdGFuY2VvZiBTZXQ7XG4gICAgdmFyIGJJc1NldCA9IGIgaW5zdGFuY2VvZiBTZXQ7XG4gICAgaWYgKGFJc1NldCAhPT0gYklzU2V0KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGFJc1NldCkge1xuICAgICAgICB2YXIgYVNldCA9IGE7XG4gICAgICAgIHZhciBiU2V0ID0gYjtcbiAgICAgICAgaWYgKGFTZXQuc2l6ZSAhPT0gYlNldC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgaXRfMSA9IGFTZXQua2V5cygpO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnIgPSBpdF8xLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChjdXJyLmRvbmUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAoIWJTZXQuaGFzKGN1cnIudmFsdWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFJc01hcCA9IGEgaW5zdGFuY2VvZiBNYXA7XG4gICAgdmFyIGJJc01hcCA9IGIgaW5zdGFuY2VvZiBNYXA7XG4gICAgaWYgKGFJc01hcCAhPT0gYklzTWFwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGFJc01hcCkge1xuICAgICAgICB2YXIgYU1hcCA9IGE7XG4gICAgICAgIHZhciBiTWFwID0gYjtcbiAgICAgICAgdmFyIGFNYXBMZW5ndGggPSBhTWFwLnNpemU7XG4gICAgICAgIGlmIChhTWFwTGVuZ3RoICE9PSBiTWFwLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBpdF8yID0gYU1hcC5rZXlzKCk7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgY3VyciA9IGl0XzIubmV4dCgpO1xuICAgICAgICAgICAgaWYgKGN1cnIuZG9uZSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmICghZXhwb3J0cy5kZWVwRXF1YWwoYU1hcC5nZXQoY3Vyci52YWx1ZSksIGJNYXAuZ2V0KGN1cnIudmFsdWUpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhSXNPYmogPSB0eXBlb2YgYSA9PT0gJ29iamVjdCc7XG4gICAgdmFyIGJJc09iaiA9IHR5cGVvZiBiID09PSAnb2JqZWN0JztcbiAgICBpZiAoYUlzT2JqICE9PSBiSXNPYmopXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYUlzT2JqKSB7XG4gICAgICAgIHZhciBhT2JqID0gYTtcbiAgICAgICAgdmFyIGJPYmogPSBiO1xuICAgICAgICB2YXIgYUZpZWxkcyA9IE9iamVjdC5rZXlzKGFPYmopO1xuICAgICAgICB2YXIgYkZpZWxkcyA9IE9iamVjdC5rZXlzKGJPYmopO1xuICAgICAgICB2YXIgYUxlbmd0aCA9IGFGaWVsZHMubGVuZ3RoO1xuICAgICAgICBpZiAoYUxlbmd0aCAhPT0gYkZpZWxkcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSBhRmllbGRzW2ldO1xuICAgICAgICAgICAgaWYgKCFiT2JqLmhhc093blByb3BlcnR5KGZpZWxkKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIWV4cG9ydHMuZGVlcEVxdWFsKGFPYmpbZmllbGRdLCBiT2JqW2ZpZWxkXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXF1YWxpdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRlID0geyBjb3VudDogMCB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZHVjZXIgPSBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnaW5jcmVtZW50JzpcbiAgICAgICAgICAgIHJldHVybiB7IGNvdW50OiBzdGF0ZS5jb3VudCArIDEgfTtcbiAgICAgICAgY2FzZSAnZGVjcmVtZW50JzpcbiAgICAgICAgICAgIHJldHVybiB7IGNvdW50OiBzdGF0ZS5jb3VudCAtIDEgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IFwidGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXCI7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGh0bWxfMSA9IHJlcXVpcmUoXCJ0ZW1wby1kb20vbGliL2h0bWxcIik7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwidGVtcG8tZG9tL2xpYi9tYXBcIik7XG52YXIgYWN0aW9uXzEgPSByZXF1aXJlKFwiLi9hY3Rpb25cIik7XG5leHBvcnRzLnRlbXBsYXRlID0gaHRtbF8xLmRpdih7IGF0dHJzOiB7IGNsYXNzTmFtZTogJ2FwcCcgfSB9LCBtYXBfMS5tYXBTdGF0ZSh7IG1hcDogZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5jb3VudDsgfSB9LCBodG1sXzEuZGl2KHsgYXR0cnM6IHsgY2xhc3NOYW1lOiAnY291bnQgY291bnQtc21hbGwnIH0gfSwgJ2NvdW50JyksIGh0bWxfMS5kaXYoeyBhdHRyczogeyBjbGFzc05hbWU6ICdjb3VudCcgfSB9LCBTdHJpbmcpLCBodG1sXzEuZGl2KHsgYXR0cnM6IHsgY2xhc3NOYW1lOiAnYnV0dG9ucycgfSB9LCBodG1sXzEuYnV0dG9uKHtcbiAgICBldmVudHM6IHsgY2xpY2s6IGFjdGlvbl8xLmRlY3JlbWVudCB9LFxuICAgIGF0dHJzOiB7IGRpc2FibGVkOiBmdW5jdGlvbiAoY291bnQpIHsgcmV0dXJuIGNvdW50IDw9IDA7IH0gfVxufSwgJy0nKSwgaHRtbF8xLmJ1dHRvbih7IGV2ZW50czogeyBjbGljazogYWN0aW9uXzEuaW5jcmVtZW50IH0gfSwgJysnKSkpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBlbGVtZW50XzEgPSByZXF1aXJlKFwiLi9lbGVtZW50XCIpO1xuZXhwb3J0cy5hID0gZWxlbWVudF8xLmVsMignYScpO1xuZXhwb3J0cy5hYmJyID0gZWxlbWVudF8xLmVsMignYWJicicpO1xuZXhwb3J0cy5hZGRyZXNzID0gZWxlbWVudF8xLmVsMignYWRkcmVzcycpO1xuZXhwb3J0cy5hcHBsZXQgPSBlbGVtZW50XzEuZWwyKCdhcHBsZXQnKTtcbmV4cG9ydHMuYXJlYSA9IGVsZW1lbnRfMS5lbDIoJ2FyZWEnKTtcbmV4cG9ydHMuYXJ0aWNsZSA9IGVsZW1lbnRfMS5lbDIoJ2FydGljbGUnKTtcbmV4cG9ydHMuYXNpZGUgPSBlbGVtZW50XzEuZWwyKCdhc2lkZScpO1xuZXhwb3J0cy5hdWRpbyA9IGVsZW1lbnRfMS5lbDIoJ2F1ZGlvJyk7XG5leHBvcnRzLmIgPSBlbGVtZW50XzEuZWwyKCdiJyk7XG5leHBvcnRzLmJhc2UgPSBlbGVtZW50XzEuZWwyKCdiYXNlJyk7XG5leHBvcnRzLmJhc2Vmb250ID0gZWxlbWVudF8xLmVsMignYmFzZWZvbnQnKTtcbmV4cG9ydHMuYmRpID0gZWxlbWVudF8xLmVsMignYmRpJyk7XG5leHBvcnRzLmJkbyA9IGVsZW1lbnRfMS5lbDIoJ2JkbycpO1xuZXhwb3J0cy5ibG9ja3F1b3RlID0gZWxlbWVudF8xLmVsMignYmxvY2txdW90ZScpO1xuZXhwb3J0cy5ib2R5ID0gZWxlbWVudF8xLmVsMignYm9keScpO1xuZXhwb3J0cy5iciA9IGVsZW1lbnRfMS5lbDIoJ2JyJyk7XG5leHBvcnRzLmJ1dHRvbiA9IGVsZW1lbnRfMS5lbDIoJ2J1dHRvbicpO1xuZXhwb3J0cy5jYW52YXMgPSBlbGVtZW50XzEuZWwyKCdjYW52YXMnKTtcbmV4cG9ydHMuY2FwdGlvbiA9IGVsZW1lbnRfMS5lbDIoJ2NhcHRpb24nKTtcbmV4cG9ydHMuY2l0ZSA9IGVsZW1lbnRfMS5lbDIoJ2NpdGUnKTtcbmV4cG9ydHMuY29kZSA9IGVsZW1lbnRfMS5lbDIoJ2NvZGUnKTtcbmV4cG9ydHMuY29sID0gZWxlbWVudF8xLmVsMignY29sJyk7XG5leHBvcnRzLmNvbGdyb3VwID0gZWxlbWVudF8xLmVsMignY29sZ3JvdXAnKTtcbmV4cG9ydHMuZGF0YSA9IGVsZW1lbnRfMS5lbDIoJ2RhdGEnKTtcbmV4cG9ydHMuZGF0YWxpc3QgPSBlbGVtZW50XzEuZWwyKCdkYXRhbGlzdCcpO1xuZXhwb3J0cy5kZCA9IGVsZW1lbnRfMS5lbDIoJ2RkJyk7XG5leHBvcnRzLmRlbCA9IGVsZW1lbnRfMS5lbDIoJ2RlbCcpO1xuZXhwb3J0cy5kZXRhaWxzID0gZWxlbWVudF8xLmVsMignZGV0YWlscycpO1xuZXhwb3J0cy5kZm4gPSBlbGVtZW50XzEuZWwyKCdkZm4nKTtcbmV4cG9ydHMuZGlhbG9nID0gZWxlbWVudF8xLmVsMignZGlhbG9nJyk7XG5leHBvcnRzLmRpciA9IGVsZW1lbnRfMS5lbDIoJ2RpcicpO1xuZXhwb3J0cy5kaXYgPSBlbGVtZW50XzEuZWwyKCdkaXYnKTtcbmV4cG9ydHMuZGwgPSBlbGVtZW50XzEuZWwyKCdkbCcpO1xuZXhwb3J0cy5kdCA9IGVsZW1lbnRfMS5lbDIoJ2R0Jyk7XG5leHBvcnRzLmVtID0gZWxlbWVudF8xLmVsMignZW0nKTtcbmV4cG9ydHMuZW1iZWQgPSBlbGVtZW50XzEuZWwyKCdlbWJlZCcpO1xuZXhwb3J0cy5maWVsZHNldCA9IGVsZW1lbnRfMS5lbDIoJ2ZpZWxkc2V0Jyk7XG5leHBvcnRzLmZpZ2NhcHRpb24gPSBlbGVtZW50XzEuZWwyKCdmaWdjYXB0aW9uJyk7XG5leHBvcnRzLmZpZ3VyZSA9IGVsZW1lbnRfMS5lbDIoJ2ZpZ3VyZScpO1xuZXhwb3J0cy5mb250ID0gZWxlbWVudF8xLmVsMignZm9udCcpO1xuZXhwb3J0cy5mb290ZXIgPSBlbGVtZW50XzEuZWwyKCdmb290ZXInKTtcbmV4cG9ydHMuZm9ybSA9IGVsZW1lbnRfMS5lbDIoJ2Zvcm0nKTtcbmV4cG9ydHMuZnJhbWUgPSBlbGVtZW50XzEuZWwyKCdmcmFtZScpO1xuZXhwb3J0cy5mcmFtZXNldCA9IGVsZW1lbnRfMS5lbDIoJ2ZyYW1lc2V0Jyk7XG5leHBvcnRzLmgxID0gZWxlbWVudF8xLmVsMignaDEnKTtcbmV4cG9ydHMuaDIgPSBlbGVtZW50XzEuZWwyKCdoMicpO1xuZXhwb3J0cy5oMyA9IGVsZW1lbnRfMS5lbDIoJ2gzJyk7XG5leHBvcnRzLmg0ID0gZWxlbWVudF8xLmVsMignaDQnKTtcbmV4cG9ydHMuaDUgPSBlbGVtZW50XzEuZWwyKCdoNScpO1xuZXhwb3J0cy5oNiA9IGVsZW1lbnRfMS5lbDIoJ2g2Jyk7XG5leHBvcnRzLmhlYWQgPSBlbGVtZW50XzEuZWwyKCdoZWFkJyk7XG5leHBvcnRzLmhlYWRlciA9IGVsZW1lbnRfMS5lbDIoJ2hlYWRlcicpO1xuZXhwb3J0cy5oZ3JvdXAgPSBlbGVtZW50XzEuZWwyKCdoZ3JvdXAnKTtcbmV4cG9ydHMuaHIgPSBlbGVtZW50XzEuZWwyKCdocicpO1xuZXhwb3J0cy5odG1sID0gZWxlbWVudF8xLmVsMignaHRtbCcpO1xuZXhwb3J0cy5pID0gZWxlbWVudF8xLmVsMignaScpO1xuZXhwb3J0cy5pZnJhbWUgPSBlbGVtZW50XzEuZWwyKCdpZnJhbWUnKTtcbmV4cG9ydHMuaW1nID0gZWxlbWVudF8xLmVsMignaW1nJyk7XG5leHBvcnRzLmlucHV0ID0gZWxlbWVudF8xLmVsMignaW5wdXQnKTtcbmV4cG9ydHMuaW5zID0gZWxlbWVudF8xLmVsMignaW5zJyk7XG5leHBvcnRzLmtiZCA9IGVsZW1lbnRfMS5lbDIoJ2tiZCcpO1xuZXhwb3J0cy5sYWJlbCA9IGVsZW1lbnRfMS5lbDIoJ2xhYmVsJyk7XG5leHBvcnRzLmxlZ2VuZCA9IGVsZW1lbnRfMS5lbDIoJ2xlZ2VuZCcpO1xuZXhwb3J0cy5saSA9IGVsZW1lbnRfMS5lbDIoJ2xpJyk7XG5leHBvcnRzLmxpbmsgPSBlbGVtZW50XzEuZWwyKCdsaW5rJyk7XG5leHBvcnRzLmxpc3RpbmcgPSBlbGVtZW50XzEuZWwyKCdsaXN0aW5nJyk7XG5leHBvcnRzLm1haW4gPSBlbGVtZW50XzEuZWwyKCdtYWluJyk7XG5leHBvcnRzLm1hcCA9IGVsZW1lbnRfMS5lbDIoJ21hcCcpO1xuZXhwb3J0cy5tYXJrID0gZWxlbWVudF8xLmVsMignbWFyaycpO1xuZXhwb3J0cy5tYXJxdWVlID0gZWxlbWVudF8xLmVsMignbWFycXVlZScpO1xuZXhwb3J0cy5tZW51ID0gZWxlbWVudF8xLmVsMignbWVudScpO1xuZXhwb3J0cy5tZXRhID0gZWxlbWVudF8xLmVsMignbWV0YScpO1xuZXhwb3J0cy5tZXRlciA9IGVsZW1lbnRfMS5lbDIoJ21ldGVyJyk7XG5leHBvcnRzLm5hdiA9IGVsZW1lbnRfMS5lbDIoJ25hdicpO1xuZXhwb3J0cy5ub3NjcmlwdCA9IGVsZW1lbnRfMS5lbDIoJ25vc2NyaXB0Jyk7XG5leHBvcnRzLm9iamVjdCA9IGVsZW1lbnRfMS5lbDIoJ29iamVjdCcpO1xuZXhwb3J0cy5vbCA9IGVsZW1lbnRfMS5lbDIoJ29sJyk7XG5leHBvcnRzLm9wdGdyb3VwID0gZWxlbWVudF8xLmVsMignb3B0Z3JvdXAnKTtcbmV4cG9ydHMub3B0aW9uID0gZWxlbWVudF8xLmVsMignb3B0aW9uJyk7XG5leHBvcnRzLm91dHB1dCA9IGVsZW1lbnRfMS5lbDIoJ291dHB1dCcpO1xuZXhwb3J0cy5wID0gZWxlbWVudF8xLmVsMigncCcpO1xuZXhwb3J0cy5wYXJhbSA9IGVsZW1lbnRfMS5lbDIoJ3BhcmFtJyk7XG5leHBvcnRzLnBpY3R1cmUgPSBlbGVtZW50XzEuZWwyKCdwaWN0dXJlJyk7XG5leHBvcnRzLnByZSA9IGVsZW1lbnRfMS5lbDIoJ3ByZScpO1xuZXhwb3J0cy5wcm9ncmVzcyA9IGVsZW1lbnRfMS5lbDIoJ3Byb2dyZXNzJyk7XG5leHBvcnRzLnEgPSBlbGVtZW50XzEuZWwyKCdxJyk7XG5leHBvcnRzLnJwID0gZWxlbWVudF8xLmVsMigncnAnKTtcbmV4cG9ydHMucnQgPSBlbGVtZW50XzEuZWwyKCdydCcpO1xuZXhwb3J0cy5ydWJ5ID0gZWxlbWVudF8xLmVsMigncnVieScpO1xuZXhwb3J0cy5zID0gZWxlbWVudF8xLmVsMigncycpO1xuZXhwb3J0cy5zYW1wID0gZWxlbWVudF8xLmVsMignc2FtcCcpO1xuZXhwb3J0cy5zY3JpcHQgPSBlbGVtZW50XzEuZWwyKCdzY3JpcHQnKTtcbmV4cG9ydHMuc2VjdGlvbiA9IGVsZW1lbnRfMS5lbDIoJ3NlY3Rpb24nKTtcbmV4cG9ydHMuc2VsZWN0ID0gZWxlbWVudF8xLmVsMignc2VsZWN0Jyk7XG5leHBvcnRzLnNsb3QgPSBlbGVtZW50XzEuZWwyKCdzbG90Jyk7XG5leHBvcnRzLnNtYWxsID0gZWxlbWVudF8xLmVsMignc21hbGwnKTtcbmV4cG9ydHMuc291cmNlID0gZWxlbWVudF8xLmVsMignc291cmNlJyk7XG5leHBvcnRzLnNwYW4gPSBlbGVtZW50XzEuZWwyKCdzcGFuJyk7XG5leHBvcnRzLnN0cm9uZyA9IGVsZW1lbnRfMS5lbDIoJ3N0cm9uZycpO1xuZXhwb3J0cy5zdHlsZSA9IGVsZW1lbnRfMS5lbDIoJ3N0eWxlJyk7XG5leHBvcnRzLnN1YiA9IGVsZW1lbnRfMS5lbDIoJ3N1YicpO1xuZXhwb3J0cy5zdW1tYXJ5ID0gZWxlbWVudF8xLmVsMignc3VtbWFyeScpO1xuZXhwb3J0cy5zdXAgPSBlbGVtZW50XzEuZWwyKCdzdXAnKTtcbmV4cG9ydHMudGFibGUgPSBlbGVtZW50XzEuZWwyKCd0YWJsZScpO1xuZXhwb3J0cy50Ym9keSA9IGVsZW1lbnRfMS5lbDIoJ3Rib2R5Jyk7XG5leHBvcnRzLnRkID0gZWxlbWVudF8xLmVsMigndGQnKTtcbmV4cG9ydHMudGVtcGxhdGUgPSBlbGVtZW50XzEuZWwyKCd0ZW1wbGF0ZScpO1xuZXhwb3J0cy50ZXh0YXJlYSA9IGVsZW1lbnRfMS5lbDIoJ3RleHRhcmVhJyk7XG5leHBvcnRzLnRmb290ID0gZWxlbWVudF8xLmVsMigndGZvb3QnKTtcbmV4cG9ydHMudGggPSBlbGVtZW50XzEuZWwyKCd0aCcpO1xuZXhwb3J0cy50aGVhZCA9IGVsZW1lbnRfMS5lbDIoJ3RoZWFkJyk7XG5leHBvcnRzLnRpbWUgPSBlbGVtZW50XzEuZWwyKCd0aW1lJyk7XG5leHBvcnRzLnRpdGxlID0gZWxlbWVudF8xLmVsMigndGl0bGUnKTtcbmV4cG9ydHMudHIgPSBlbGVtZW50XzEuZWwyKCd0cicpO1xuZXhwb3J0cy50cmFjayA9IGVsZW1lbnRfMS5lbDIoJ3RyYWNrJyk7XG5leHBvcnRzLnUgPSBlbGVtZW50XzEuZWwyKCd1Jyk7XG5leHBvcnRzLnVsID0gZWxlbWVudF8xLmVsMigndWwnKTtcbmV4cG9ydHMudmFyRWwgPSBlbGVtZW50XzEuZWwyKCd2YXInKTtcbmV4cG9ydHMudmlkZW8gPSBlbGVtZW50XzEuZWwyKCd2aWRlbycpO1xuZXhwb3J0cy53YnIgPSBlbGVtZW50XzEuZWwyKCd3YnInKTtcbmV4cG9ydHMueG1wID0gZWxlbWVudF8xLmVsMigneG1wJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkb21fMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2RvbVwiKTtcbnZhciBhcnJheXNfMSA9IHJlcXVpcmUoXCJ0ZW1wby1zdGQvbGliL2FycmF5c1wiKTtcbnZhciBkb21fYXR0cmlidXRlc19tYXBwZXJfMSA9IHJlcXVpcmUoXCIuL2RvbV9hdHRyaWJ1dGVzX21hcHBlclwiKTtcbnZhciBhcHBseUNoYW5nZSA9IGZ1bmN0aW9uIChjaGFuZ2UsIGVsLCBjdHgpIHsgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gY2hhbmdlKHN0YXRlLCBlbCwgY3R4LCB2YWx1ZSk7XG59OyB9O1xudmFyIGFwcGx5QWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbiAoYXR0ciwgZWwsIGN0eCwgc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mIGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYXR0cihzdGF0ZSwgZWwsIGN0eCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG52YXIgRE9NRWxlbWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBET01FbGVtZW50KGNyZWF0ZUVsZW1lbnQsIGF0dHJzLCBldmVudHMsIHN0eWxlcywgYWZ0ZXJyZW5kZXIsIGJlZm9yZWNoYW5nZSwgYWZ0ZXJjaGFuZ2UsIGJlZm9yZWRlc3Ryb3ksIHJlc3BvbmQsIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYXR0cnMgPSBhdHRycztcbiAgICAgICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLmFmdGVycmVuZGVyID0gYWZ0ZXJyZW5kZXI7XG4gICAgICAgIHRoaXMuYmVmb3JlY2hhbmdlID0gYmVmb3JlY2hhbmdlO1xuICAgICAgICB0aGlzLmFmdGVyY2hhbmdlID0gYWZ0ZXJjaGFuZ2U7XG4gICAgICAgIHRoaXMuYmVmb3JlZGVzdHJveSA9IGJlZm9yZWRlc3Ryb3k7XG4gICAgICAgIHRoaXMucmVzcG9uZCA9IHJlc3BvbmQ7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgRE9NRWxlbWVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGN0eCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGVsID0gdGhpcy5jcmVhdGVFbGVtZW50KGN0eC5kb2MpO1xuICAgICAgICB2YXIgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhbGxDaGFuZ2VzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmF0dHJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG8gPSBfYVtfaV07XG4gICAgICAgICAgICBkb21fMS5wcm9jZXNzQXR0cmlidXRlKGVsLCBvLm5hbWUsIG8udmFsdWUsIGFsbENoYW5nZXMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLmV2ZW50czsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gX2NbX2JdO1xuICAgICAgICAgICAgZG9tXzEucHJvY2Vzc0V2ZW50KGVsLCBvLm5hbWUsIG8udmFsdWUsIGN0eC5kaXNwYXRjaCwgYWxsQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBfZSA9IHRoaXMuc3R5bGVzOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xuICAgICAgICAgICAgdmFyIG8gPSBfZVtfZF07XG4gICAgICAgICAgICBkb21fMS5wcm9jZXNzU3R5bGUoZWwsIG8ubmFtZSwgby52YWx1ZSwgYWxsQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2YgPSAwLCBhbGxDaGFuZ2VzXzEgPSBhbGxDaGFuZ2VzOyBfZiA8IGFsbENoYW5nZXNfMS5sZW5ndGg7IF9mKyspIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBhbGxDaGFuZ2VzXzFbX2ZdO1xuICAgICAgICAgICAgY2hhbmdlKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjaGlsZHJlblxuICAgICAgICB2YXIgYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAobikgeyByZXR1cm4gZWwuYXBwZW5kQ2hpbGQobik7IH07XG4gICAgICAgIHZhciBuZXdDdHggPSBjdHgud2l0aEFwcGVuZChhcHBlbmRDaGlsZCkud2l0aFBhcmVudChlbCk7XG4gICAgICAgIHZhciB2aWV3cyA9IGFycmF5c18xLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnJlbmRlcihuZXdDdHgsIHN0YXRlKTsgfSwgdGhpcy5jaGlsZHJlbik7XG4gICAgICAgIGN0eC5hcHBlbmQoZWwpO1xuICAgICAgICBpZiAodGhpcy5hZnRlcnJlbmRlcikge1xuICAgICAgICAgICAgdmFsdWUgPSBhcHBseUFmdGVyUmVuZGVyKHRoaXMuYWZ0ZXJyZW5kZXIsIGVsLCBjdHgsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlld0NoYW5nZXMgPSBhcnJheXNfMS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIGNoaWxkLmNoYW5nZShzdGF0ZSk7IH07IH0sIHZpZXdzKTtcbiAgICAgICAgYWxsQ2hhbmdlcy5wdXNoLmFwcGx5KGFsbENoYW5nZXMsIHZpZXdDaGFuZ2VzKTtcbiAgICAgICAgaWYgKHRoaXMuYmVmb3JlY2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlXzEgPSBhcHBseUNoYW5nZSh0aGlzLmJlZm9yZWNoYW5nZSwgZWwsIGN0eCk7XG4gICAgICAgICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7IHZhbHVlID0gY2hhbmdlXzEoc3RhdGUsIHZhbHVlKTsgfTtcbiAgICAgICAgICAgIGFsbENoYW5nZXMudW5zaGlmdCh1cGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFmdGVyY2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlXzIgPSBhcHBseUNoYW5nZSh0aGlzLmFmdGVyY2hhbmdlLCBlbCwgY3R4KTtcbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHsgdmFsdWUgPSBjaGFuZ2VfMihzdGF0ZSwgdmFsdWUpOyB9O1xuICAgICAgICAgICAgYWxsQ2hhbmdlcy5wdXNoKHVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJlZm9yZWRlc3Ryb3lmID0gdGhpcy5iZWZvcmVkZXN0cm95ICYmIChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5iZWZvcmVkZXN0cm95KGVsLCBjdHgsIHZhbHVlKTsgfSk7XG4gICAgICAgIHZhciByZXNwb25kID0gdGhpcy5yZXNwb25kO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFsbENoYW5nZXNfMiA9IGFsbENoYW5nZXM7IF9pIDwgYWxsQ2hhbmdlc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlID0gYWxsQ2hhbmdlc18yW19pXTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChiZWZvcmVkZXN0cm95ZilcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlZGVzdHJveWYoKTtcbiAgICAgICAgICAgICAgICBkb21fMS5yZW1vdmVOb2RlKGVsKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZpZXdzXzEgPSB2aWV3czsgX2kgPCB2aWV3c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXNwb25kKHF1ZXJ5LCBlbCwgY3R4LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdmlld3NfMiA9IHZpZXdzOyBfaSA8IHZpZXdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gdmlld3NfMltfaV07XG4gICAgICAgICAgICAgICAgICAgIHZpZXcucmVxdWVzdChxdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIERPTUVsZW1lbnQ7XG59KCkpO1xuZXhwb3J0cy5ET01FbGVtZW50ID0gRE9NRWxlbWVudDtcbmZ1bmN0aW9uIGV4dHJhY3RBdHRycyhhdHRycykge1xuICAgIHJldHVybiBhcnJheXNfMS5tYXAoZnVuY3Rpb24gKGF0dE5hbWUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBhdHROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG5hbWUgPSBkb21fYXR0cmlidXRlc19tYXBwZXJfMS5hdHRyaWJ1dGVOYW1lTWFwW25hbWVdIHx8IG5hbWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IGF0dHJzW2F0dE5hbWVdXG4gICAgICAgIH07XG4gICAgfSwgT2JqZWN0LmtleXMoYXR0cnMgfHwge30pKTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMoYXR0cnMpIHtcbiAgICByZXR1cm4gYXJyYXlzXzEubWFwKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBcIm9uXCIgKyBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogYXR0cnNbZXZlbnROYW1lXVxuICAgICAgICB9O1xuICAgIH0sIE9iamVjdC5rZXlzKGF0dHJzIHx8IHt9KSk7XG59XG5mdW5jdGlvbiBleHRyYWN0U3R5bGVzKGF0dHJzKSB7XG4gICAgcmV0dXJuIGFycmF5c18xLm1hcChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gKHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdmFsdWU6IGF0dHJzW25hbWVdXG4gICAgfSk7IH0sIE9iamVjdC5rZXlzKGF0dHJzIHx8IHt9KSk7XG59XG52YXIgbWFrZUNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSk7IH07IH07XG5leHBvcnRzLmVsID0gZnVuY3Rpb24gKG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBjaGlsZHJlbltfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBET01FbGVtZW50KG1ha2VDcmVhdGVFbGVtZW50KG5hbWUpLCBleHRyYWN0QXR0cnMoYXR0cmlidXRlcy5hdHRycyksIGV4dHJhY3RFdmVudHMoYXR0cmlidXRlcy5ldmVudHMpLCBleHRyYWN0U3R5bGVzKGF0dHJpYnV0ZXMuc3R5bGVzKSwgYXR0cmlidXRlcy5hZnRlcnJlbmRlciwgYXR0cmlidXRlcy5iZWZvcmVjaGFuZ2UsIGF0dHJpYnV0ZXMuYWZ0ZXJjaGFuZ2UsIGF0dHJpYnV0ZXMuYmVmb3JlZGVzdHJveSwgYXR0cmlidXRlcy5yZXNwb25kLCBhcnJheXNfMS5tYXAoZG9tXzEuZG9tQ2hpbGRUb1RlbXBsYXRlLCBjaGlsZHJlbikpO1xufTtcbmV4cG9ydHMuZWwyID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgRE9NRWxlbWVudChtYWtlQ3JlYXRlRWxlbWVudChuYW1lKSwgZXh0cmFjdEF0dHJzKGF0dHJpYnV0ZXMuYXR0cnMpLCBleHRyYWN0RXZlbnRzKGF0dHJpYnV0ZXMuZXZlbnRzKSwgZXh0cmFjdFN0eWxlcyhhdHRyaWJ1dGVzLnN0eWxlcyksIGF0dHJpYnV0ZXMuYWZ0ZXJyZW5kZXIsIGF0dHJpYnV0ZXMuYmVmb3JlY2hhbmdlLCBhdHRyaWJ1dGVzLmFmdGVyY2hhbmdlLCBhdHRyaWJ1dGVzLmJlZm9yZWRlc3Ryb3ksIGF0dHJpYnV0ZXMucmVzcG9uZCwgYXJyYXlzXzEubWFwKGRvbV8xLmRvbUNoaWxkVG9UZW1wbGF0ZSwgY2hpbGRyZW4pKTtcbn07IH07XG5leHBvcnRzLmRlZmF1bHROYW1lc3BhY2VzID0ge1xuICAgICdzdmcnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG59O1xudmFyIG1ha2VDcmVhdGVFbGVtZW50TlMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkb2MpIHsgcmV0dXJuIGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBuYW1lKTsgfTtcbn07XG5leHBvcnRzLmVsTlMgPSBmdW5jdGlvbiAobnMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBjaGlsZHJlbltfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIG5hbWVzcGFjZSA9IGV4cG9ydHMuZGVmYXVsdE5hbWVzcGFjZXNbbnNdIHx8IG5zO1xuICAgIHJldHVybiBuZXcgRE9NRWxlbWVudChtYWtlQ3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgbmFtZSksIGV4dHJhY3RBdHRycyhhdHRyaWJ1dGVzLmF0dHJzKSwgZXh0cmFjdEV2ZW50cyhhdHRyaWJ1dGVzLmV2ZW50cyksIGV4dHJhY3RTdHlsZXMoYXR0cmlidXRlcy5zdHlsZXMpLCBhdHRyaWJ1dGVzLmFmdGVycmVuZGVyLCBhdHRyaWJ1dGVzLmJlZm9yZWNoYW5nZSwgYXR0cmlidXRlcy5hZnRlcmNoYW5nZSwgYXR0cmlidXRlcy5iZWZvcmVkZXN0cm95LCBhdHRyaWJ1dGVzLnJlc3BvbmQsIGFycmF5c18xLm1hcChkb21fMS5kb21DaGlsZFRvVGVtcGxhdGUsIGNoaWxkcmVuKSk7XG59O1xuZXhwb3J0cy5lbE5TMiA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgRE9NRWxlbWVudChtYWtlQ3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgbmFtZSksIGV4dHJhY3RBdHRycyhhdHRyaWJ1dGVzLmF0dHJzKSwgZXh0cmFjdEV2ZW50cyhhdHRyaWJ1dGVzLmV2ZW50cyksIGV4dHJhY3RTdHlsZXMoYXR0cmlidXRlcy5zdHlsZXMpLCBhdHRyaWJ1dGVzLmFmdGVycmVuZGVyLCBhdHRyaWJ1dGVzLmJlZm9yZWNoYW5nZSwgYXR0cmlidXRlcy5hZnRlcmNoYW5nZSwgYXR0cmlidXRlcy5iZWZvcmVkZXN0cm95LCBhdHRyaWJ1dGVzLnJlc3BvbmQsIGFycmF5c18xLm1hcChkb21fMS5kb21DaGlsZFRvVGVtcGxhdGUsIGNoaWxkcmVuKSk7XG59OyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5Db3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZG9tXzEgPSByZXF1aXJlKFwiLi91dGlscy9kb21cIik7XG52YXIgYXJyYXlzXzEgPSByZXF1aXJlKFwidGVtcG8tc3RkL2xpYi9hcnJheXNcIik7XG52YXIgTWFwU3RhdGVUZW1wbGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBTdGF0ZVRlbXBsYXRlKG1hcCwgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgTWFwU3RhdGVUZW1wbGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGN0eCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgbWFwID0gX2EubWFwO1xuICAgICAgICB2YXIgaW5uZXJTdGF0ZSA9IG1hcChzdGF0ZSk7XG4gICAgICAgIHZhciB2aWV3cyA9IGFycmF5c18xLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5yZW5kZXIoY3R4LCBpbm5lclN0YXRlKTsgfSwgY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJTdGF0ZSA9IG1hcChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c18xID0gdmlld3M7IF9pIDwgdmlld3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3c18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5jaGFuZ2UoaW5uZXJTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZpZXdzXzIgPSB2aWV3czsgX2kgPCB2aWV3c18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzXzJbX2ldO1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c18zID0gdmlld3M7IF9pIDwgdmlld3NfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3c18zW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5yZXF1ZXN0KHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gTWFwU3RhdGVUZW1wbGF0ZTtcbn0oKSk7XG5leHBvcnRzLk1hcFN0YXRlVGVtcGxhdGUgPSBNYXBTdGF0ZVRlbXBsYXRlO1xuZXhwb3J0cy5tYXBTdGF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWFwU3RhdGVUZW1wbGF0ZShvcHRpb25zLm1hcCwgYXJyYXlzXzEubWFwKGRvbV8xLmRvbUNoaWxkVG9UZW1wbGF0ZSwgY2hpbGRyZW4pKTtcbn07XG5leHBvcnRzLm1hcFN0YXRlQW5kS2VlcCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgY2hpbGRyZW5bX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWFwU3RhdGVUZW1wbGF0ZShmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIChbb3B0aW9ucy5tYXAoc3RhdGUpLCBzdGF0ZV0pOyB9LCBhcnJheXNfMS5tYXAoZG9tXzEuZG9tQ2hpbGRUb1RlbXBsYXRlLCBjaGlsZHJlbikpO1xufTtcbnZhciBNYXBBY3Rpb25UZW1wbGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBBY3Rpb25UZW1wbGF0ZShtYXAsIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxuICAgIE1hcEFjdGlvblRlbXBsYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBzdGF0ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBtYXAgPSBfYS5tYXA7XG4gICAgICAgIHZhciBuZXdDdHggPSBjdHguY29uZGl0aW9uYWxNYXBBY3Rpb24obWFwKTtcbiAgICAgICAgdmFyIHZpZXdzID0gYXJyYXlzXzEubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnJlbmRlcihuZXdDdHgsIHN0YXRlKTsgfSwgY2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZpZXdzXzQgPSB2aWV3czsgX2kgPCB2aWV3c180Lmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzXzRbX2ldO1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmNoYW5nZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZpZXdzXzUgPSB2aWV3czsgX2kgPCB2aWV3c181Lmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHZpZXdzXzVbX2ldO1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c182ID0gdmlld3M7IF9pIDwgdmlld3NfNi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3c182W19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5yZXF1ZXN0KHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gTWFwQWN0aW9uVGVtcGxhdGU7XG59KCkpO1xuZXhwb3J0cy5NYXBBY3Rpb25UZW1wbGF0ZSA9IE1hcEFjdGlvblRlbXBsYXRlO1xuZXhwb3J0cy5tYXBBY3Rpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hcEFjdGlvblRlbXBsYXRlKG9wdGlvbnMubWFwLCBhcnJheXNfMS5tYXAoZG9tXzEuZG9tQ2hpbGRUb1RlbXBsYXRlLCBjaGlsZHJlbikpO1xufTtcbnZhciBNYXBRdWVyeVRlbXBsYXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcFF1ZXJ5VGVtcGxhdGUobWFwLCBjaGlsZHJlbikge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBNYXBRdWVyeVRlbXBsYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY3R4LCBzdGF0ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBtYXAgPSBfYS5tYXA7XG4gICAgICAgIHZhciB2aWV3cyA9IGFycmF5c18xLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5yZW5kZXIoY3R4LCBzdGF0ZSk7IH0sIGNoaWxkcmVuKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c183ID0gdmlld3M7IF9pIDwgdmlld3NfNy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3c183W19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5jaGFuZ2Uoc3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2aWV3c184ID0gdmlld3M7IF9pIDwgdmlld3NfOC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSB2aWV3c184W19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclF1ZXJ5ID0gbWFwKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlubmVyUXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuIHZpZXcucmVxdWVzdChpbm5lclF1ZXJ5KTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIE1hcFF1ZXJ5VGVtcGxhdGU7XG59KCkpO1xuZXhwb3J0cy5NYXBRdWVyeVRlbXBsYXRlID0gTWFwUXVlcnlUZW1wbGF0ZTtcbmV4cG9ydHMubWFwUXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hcFF1ZXJ5VGVtcGxhdGUob3B0aW9ucy5tYXAsIGFycmF5c18xLm1hcChkb21fMS5kb21DaGlsZFRvVGVtcGxhdGUsIGNoaWxkcmVuKSk7XG59O1xuZXhwb3J0cy5tYXBRdWVyeUNvbmRpdGlvbmFsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBjaGlsZHJlbltfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXBRdWVyeVRlbXBsYXRlKG9wdGlvbnMubWFwLCBhcnJheXNfMS5tYXAoZG9tXzEuZG9tQ2hpbGRUb1RlbXBsYXRlLCBjaGlsZHJlbikpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjcmVtZW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsga2luZDogJ2RlY3JlbWVudCcgfSk7IH07XG5leHBvcnRzLmluY3JlbWVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IGtpbmQ6ICdpbmNyZW1lbnQnIH0pOyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==